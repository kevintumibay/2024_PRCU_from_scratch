
STM32_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003210  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  080033f0  080033f0  000043f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035c4  080035c4  00005070  2**0
                  CONTENTS
  4 .ARM          00000008  080035c4  080035c4  000045c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035cc  080035cc  00005070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035cc  080035cc  000045cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080035d0  080035d0  000045d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080035d4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000070  08003644  00005070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08003644  0000524c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007661  00000000  00000000  000050a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017c9  00000000  00000000  0000c701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000860  00000000  00000000  0000ded0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000637  00000000  00000000  0000e730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d265  00000000  00000000  0000ed67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008728  00000000  00000000  0002bfcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3e92  00000000  00000000  000346f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8586  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000283c  00000000  00000000  000e85cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000eae08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	080033d8 	.word	0x080033d8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	080033d8 	.word	0x080033d8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002cc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80002d0:	f003 0301 	and.w	r3, r3, #1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d013      	beq.n	8000300 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80002d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002dc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80002e0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d00b      	beq.n	8000300 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002e8:	e000      	b.n	80002ec <ITM_SendChar+0x2c>
    {
      __NOP();
 80002ea:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002ec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d0f9      	beq.n	80002ea <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002f6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	b2d2      	uxtb	r2, r2
 80002fe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000300:	687b      	ldr	r3, [r7, #4]
}
 8000302:	4618      	mov	r0, r3
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
	...

08000310 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af02      	add	r7, sp, #8
	/*  CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000316:	f000 fbca 	bl	8000aae <HAL_Init>
	/*  CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800031a:	f000 f95f 	bl	80005dc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800031e:	f000 f9e7 	bl	80006f0 <MX_GPIO_Init>
	MX_SPI2_Init();
 8000322:	f000 f9a7 	bl	8000674 <MX_SPI2_Init>

	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000326:	2201      	movs	r2, #1
 8000328:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800032c:	4897      	ldr	r0, [pc, #604]	@ (800058c <main+0x27c>)
 800032e:	f000 feb7 	bl	80010a0 <HAL_GPIO_WritePin>
	printf("Requesting SPI Identifier from Pressure Sensor... \r\n");
 8000332:	4897      	ldr	r0, [pc, #604]	@ (8000590 <main+0x280>)
 8000334:	f002 f9ec 	bl	8002710 <puts>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000338:	2200      	movs	r2, #0
 800033a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800033e:	4893      	ldr	r0, [pc, #588]	@ (800058c <main+0x27c>)
 8000340:	f000 feae 	bl	80010a0 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) &request_identifier,
 8000344:	1dba      	adds	r2, r7, #6
 8000346:	2364      	movs	r3, #100	@ 0x64
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	2301      	movs	r3, #1
 800034c:	4991      	ldr	r1, [pc, #580]	@ (8000594 <main+0x284>)
 800034e:	4892      	ldr	r0, [pc, #584]	@ (8000598 <main+0x288>)
 8000350:	f001 fd2d 	bl	8001dae <HAL_SPI_TransmitReceive>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d002      	beq.n	8000360 <main+0x50>
			(uint8_t*) &receive_buffer, 1, 100) != HAL_OK) {
		printf("ERROR: HAL_OK check failed \r\n");
 800035a:	4890      	ldr	r0, [pc, #576]	@ (800059c <main+0x28c>)
 800035c:	f002 f9d8 	bl	8002710 <puts>
	}
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000360:	2201      	movs	r2, #1
 8000362:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000366:	4889      	ldr	r0, [pc, #548]	@ (800058c <main+0x27c>)
 8000368:	f000 fe9a 	bl	80010a0 <HAL_GPIO_WritePin>
	// Check if received data is notifying about any errors
	// Check for communication error
	if (receive_buffer == com_error_mask) {
 800036c:	88fb      	ldrh	r3, [r7, #6]
 800036e:	2201      	movs	r2, #1
 8000370:	4293      	cmp	r3, r2
 8000372:	d103      	bne.n	800037c <main+0x6c>
		printf("ERROR: Communication Error \r\n");
 8000374:	488a      	ldr	r0, [pc, #552]	@ (80005a0 <main+0x290>)
 8000376:	f002 f9cb 	bl	8002710 <puts>
 800037a:	e04b      	b.n	8000414 <main+0x104>
	}
	// Check for FEC Error
	else if ((receive_buffer & FEC_error_mask) != 0) {
 800037c:	88fb      	ldrh	r3, [r7, #6]
 800037e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000382:	4013      	ands	r3, r2
 8000384:	b29b      	uxth	r3, r3
 8000386:	2b00      	cmp	r3, #0
 8000388:	d003      	beq.n	8000392 <main+0x82>
		printf("ERROR: FEC Error \r\n");
 800038a:	4886      	ldr	r0, [pc, #536]	@ (80005a4 <main+0x294>)
 800038c:	f002 f9c0 	bl	8002710 <puts>
 8000390:	e040      	b.n	8000414 <main+0x104>
	}
	// Check for Acquisition Chain Failure
	else if ((receive_buffer & no_error_mask) == Diag1_mask) {
 8000392:	88fb      	ldrh	r3, [r7, #6]
 8000394:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000398:	4013      	ands	r3, r2
 800039a:	b29b      	uxth	r3, r3
 800039c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d103      	bne.n	80003ac <main+0x9c>
		printf("ERROR: Acquisition chain failure \r\n");
 80003a4:	4880      	ldr	r0, [pc, #512]	@ (80005a8 <main+0x298>)
 80003a6:	f002 f9b3 	bl	8002710 <puts>
 80003aa:	e033      	b.n	8000414 <main+0x104>
	}
	// Check for Sensor Cell Failure
	else if ((receive_buffer & Diag2_mask) != 0) {
 80003ac:	88fb      	ldrh	r3, [r7, #6]
 80003ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80003b2:	4013      	ands	r3, r2
 80003b4:	b29b      	uxth	r3, r3
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d003      	beq.n	80003c2 <main+0xb2>
		printf("ERROR: Sensor cell failure \r\n");
 80003ba:	487c      	ldr	r0, [pc, #496]	@ (80005ac <main+0x29c>)
 80003bc:	f002 f9a8 	bl	8002710 <puts>
 80003c0:	e028      	b.n	8000414 <main+0x104>
	}
	// Check if pressure is above measuring range maximum
	else if ((receive_buffer & no_error_mask) == pressure_over_max_mask) {
 80003c2:	88fb      	ldrh	r3, [r7, #6]
 80003c4:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80003c8:	4013      	ands	r3, r2
 80003ca:	b29b      	uxth	r3, r3
 80003cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d103      	bne.n	80003dc <main+0xcc>
		printf("ERROR: Pressure above measuring range maximum \r\n");
 80003d4:	4876      	ldr	r0, [pc, #472]	@ (80005b0 <main+0x2a0>)
 80003d6:	f002 f99b 	bl	8002710 <puts>
 80003da:	e01b      	b.n	8000414 <main+0x104>
	}
	// Check if pressure is below measuring range minimum
	else if ((receive_buffer & pressure_under_min_mask) != 0) {
 80003dc:	88fb      	ldrh	r3, [r7, #6]
 80003de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80003e2:	4013      	ands	r3, r2
 80003e4:	b29b      	uxth	r3, r3
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d003      	beq.n	80003f2 <main+0xe2>
		printf("ERROR: Pressure below measuring range minimum \r\n");
 80003ea:	4872      	ldr	r0, [pc, #456]	@ (80005b4 <main+0x2a4>)
 80003ec:	f002 f990 	bl	8002710 <puts>
 80003f0:	e010      	b.n	8000414 <main+0x104>
	}
	// Check if no errors were detected
	else if ((receive_buffer & no_error_mask) == no_error_mask) {
 80003f2:	88fb      	ldrh	r3, [r7, #6]
 80003f4:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80003f8:	4013      	ands	r3, r2
 80003fa:	b29b      	uxth	r3, r3
 80003fc:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000400:	4293      	cmp	r3, r2
 8000402:	d107      	bne.n	8000414 <main+0x104>
		printf("No errors detected \r\n");
 8000404:	486c      	ldr	r0, [pc, #432]	@ (80005b8 <main+0x2a8>)
 8000406:	f002 f983 	bl	8002710 <puts>
		printf("Identifier: %u \r\n", receive_buffer);
 800040a:	88fb      	ldrh	r3, [r7, #6]
 800040c:	4619      	mov	r1, r3
 800040e:	486b      	ldr	r0, [pc, #428]	@ (80005bc <main+0x2ac>)
 8000410:	f002 f916 	bl	8002640 <iprintf>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		// Toggle the LEDs
		HAL_GPIO_TogglePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin);
 8000414:	2140      	movs	r1, #64	@ 0x40
 8000416:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800041a:	f000 fe59 	bl	80010d0 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 800041e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000422:	f000 fbb5 	bl	8000b90 <HAL_Delay>
		HAL_GPIO_TogglePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin);
 8000426:	2140      	movs	r1, #64	@ 0x40
 8000428:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800042c:	f000 fe50 	bl	80010d0 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, PRS_Ready_Pin);
 8000430:	2140      	movs	r1, #64	@ 0x40
 8000432:	4856      	ldr	r0, [pc, #344]	@ (800058c <main+0x27c>)
 8000434:	f000 fe4c 	bl	80010d0 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000438:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800043c:	f000 fba8 	bl	8000b90 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, PRS_Ready_Pin);
 8000440:	2140      	movs	r1, #64	@ 0x40
 8000442:	4852      	ldr	r0, [pc, #328]	@ (800058c <main+0x27c>)
 8000444:	f000 fe44 	bl	80010d0 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, System_Ready_Pin);
 8000448:	2180      	movs	r1, #128	@ 0x80
 800044a:	4850      	ldr	r0, [pc, #320]	@ (800058c <main+0x27c>)
 800044c:	f000 fe40 	bl	80010d0 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000450:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000454:	f000 fb9c 	bl	8000b90 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, System_Ready_Pin);
 8000458:	2180      	movs	r1, #128	@ 0x80
 800045a:	484c      	ldr	r0, [pc, #304]	@ (800058c <main+0x27c>)
 800045c:	f000 fe38 	bl	80010d0 <HAL_GPIO_TogglePin>

		// Measure Pressure
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000466:	4849      	ldr	r0, [pc, #292]	@ (800058c <main+0x27c>)
 8000468:	f000 fe1a 	bl	80010a0 <HAL_GPIO_WritePin>
		if (HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) &request_pressure,
 800046c:	1dba      	adds	r2, r7, #6
 800046e:	2364      	movs	r3, #100	@ 0x64
 8000470:	9300      	str	r3, [sp, #0]
 8000472:	2301      	movs	r3, #1
 8000474:	4952      	ldr	r1, [pc, #328]	@ (80005c0 <main+0x2b0>)
 8000476:	4848      	ldr	r0, [pc, #288]	@ (8000598 <main+0x288>)
 8000478:	f001 fc99 	bl	8001dae <HAL_SPI_TransmitReceive>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d002      	beq.n	8000488 <main+0x178>
				(uint8_t*) &receive_buffer, 1, 100) != HAL_OK) {
			printf("ERROR: HAL_OK check failed \r\n");
 8000482:	4846      	ldr	r0, [pc, #280]	@ (800059c <main+0x28c>)
 8000484:	f002 f944 	bl	8002710 <puts>
		}
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000488:	2201      	movs	r2, #1
 800048a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800048e:	483f      	ldr	r0, [pc, #252]	@ (800058c <main+0x27c>)
 8000490:	f000 fe06 	bl	80010a0 <HAL_GPIO_WritePin>
		// Check if received data is notifying about any errors
		// Check for communication error
		if (receive_buffer == com_error_mask) {
 8000494:	88fb      	ldrh	r3, [r7, #6]
 8000496:	2201      	movs	r2, #1
 8000498:	4293      	cmp	r3, r2
 800049a:	d103      	bne.n	80004a4 <main+0x194>
			printf("ERROR: Communication Error \r\n");
 800049c:	4840      	ldr	r0, [pc, #256]	@ (80005a0 <main+0x290>)
 800049e:	f002 f937 	bl	8002710 <puts>
 80004a2:	e7b7      	b.n	8000414 <main+0x104>
		}
		// Check for FEC Error
		else if ((receive_buffer & FEC_error_mask) != 0) {
 80004a4:	88fb      	ldrh	r3, [r7, #6]
 80004a6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80004aa:	4013      	ands	r3, r2
 80004ac:	b29b      	uxth	r3, r3
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d003      	beq.n	80004ba <main+0x1aa>
			printf("ERROR: FEC Error \r\n");
 80004b2:	483c      	ldr	r0, [pc, #240]	@ (80005a4 <main+0x294>)
 80004b4:	f002 f92c 	bl	8002710 <puts>
 80004b8:	e7ac      	b.n	8000414 <main+0x104>
		}
		// Check for Acquisition Chain Failure
		else if ((receive_buffer & no_error_mask) == Diag1_mask) {
 80004ba:	88fb      	ldrh	r3, [r7, #6]
 80004bc:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80004c0:	4013      	ands	r3, r2
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d108      	bne.n	80004de <main+0x1ce>
			printf("ERROR: Acquisition chain failure \r\n");
 80004cc:	4836      	ldr	r0, [pc, #216]	@ (80005a8 <main+0x298>)
 80004ce:	f002 f91f 	bl	8002710 <puts>
			printf("Received bytes = %u", receive_buffer);
 80004d2:	88fb      	ldrh	r3, [r7, #6]
 80004d4:	4619      	mov	r1, r3
 80004d6:	483b      	ldr	r0, [pc, #236]	@ (80005c4 <main+0x2b4>)
 80004d8:	f002 f8b2 	bl	8002640 <iprintf>
 80004dc:	e79a      	b.n	8000414 <main+0x104>
		}
		// Check for Sensor Cell Failure
		else if ((receive_buffer & Diag2_mask) != 0) {
 80004de:	88fb      	ldrh	r3, [r7, #6]
 80004e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004e4:	4013      	ands	r3, r2
 80004e6:	b29b      	uxth	r3, r3
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d003      	beq.n	80004f4 <main+0x1e4>
			printf("ERROR: Sensor cell failure \r\n");
 80004ec:	482f      	ldr	r0, [pc, #188]	@ (80005ac <main+0x29c>)
 80004ee:	f002 f90f 	bl	8002710 <puts>
 80004f2:	e78f      	b.n	8000414 <main+0x104>
		}
		// Check if pressure is above measuring range maximum
		else if ((receive_buffer & no_error_mask) == pressure_over_max_mask)  {
 80004f4:	88fb      	ldrh	r3, [r7, #6]
 80004f6:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80004fa:	4013      	ands	r3, r2
 80004fc:	b29b      	uxth	r3, r3
 80004fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000502:	4293      	cmp	r3, r2
 8000504:	d103      	bne.n	800050e <main+0x1fe>
			printf("ERROR: Pressure above measuring range maximum \r\n");
 8000506:	482a      	ldr	r0, [pc, #168]	@ (80005b0 <main+0x2a0>)
 8000508:	f002 f902 	bl	8002710 <puts>
 800050c:	e782      	b.n	8000414 <main+0x104>
		}
		// Check if pressure is below measuring range minimum
		else if ((receive_buffer & pressure_under_min_mask) != 0) {
 800050e:	88fb      	ldrh	r3, [r7, #6]
 8000510:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000514:	4013      	ands	r3, r2
 8000516:	b29b      	uxth	r3, r3
 8000518:	2b00      	cmp	r3, #0
 800051a:	d003      	beq.n	8000524 <main+0x214>
			printf("ERROR: Pressure below measuring range minimum \r\n");
 800051c:	4825      	ldr	r0, [pc, #148]	@ (80005b4 <main+0x2a4>)
 800051e:	f002 f8f7 	bl	8002710 <puts>
 8000522:	e777      	b.n	8000414 <main+0x104>
		}
		// Check if no errors were detected
		else if ((receive_buffer & no_error_mask) == no_error_mask) {
 8000524:	88fb      	ldrh	r3, [r7, #6]
 8000526:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800052a:	4013      	ands	r3, r2
 800052c:	b29b      	uxth	r3, r3
 800052e:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000532:	4293      	cmp	r3, r2
 8000534:	f47f af6e 	bne.w	8000414 <main+0x104>
			printf("No errors detected \r\n");
 8000538:	481f      	ldr	r0, [pc, #124]	@ (80005b8 <main+0x2a8>)
 800053a:	f002 f8e9 	bl	8002710 <puts>
			// Get the pressure data using a bit mask and right shift operator to get rid of parity bit
			pressure_LSB = (receive_buffer & data_mask) >> 1;
 800053e:	88fb      	ldrh	r3, [r7, #6]
 8000540:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8000544:	4013      	ands	r3, r2
 8000546:	b29b      	uxth	r3, r3
 8000548:	085b      	lsrs	r3, r3, #1
 800054a:	b29a      	uxth	r2, r3
 800054c:	4b1e      	ldr	r3, [pc, #120]	@ (80005c8 <main+0x2b8>)
 800054e:	801a      	strh	r2, [r3, #0]
			// Convert pressure from LSB to kPa using transfer function from data sheet
			pressure_Bar = ((float) pressure_LSB - offs_p) / S_p;
 8000550:	4b1d      	ldr	r3, [pc, #116]	@ (80005c8 <main+0x2b8>)
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	ee07 3a90 	vmov	s15, r3
 8000558:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800055c:	4b1b      	ldr	r3, [pc, #108]	@ (80005cc <main+0x2bc>)
 800055e:	edd3 7a00 	vldr	s15, [r3]
 8000562:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000566:	4b1a      	ldr	r3, [pc, #104]	@ (80005d0 <main+0x2c0>)
 8000568:	ed93 7a00 	vldr	s14, [r3]
 800056c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000570:	4b18      	ldr	r3, [pc, #96]	@ (80005d4 <main+0x2c4>)
 8000572:	edc3 7a00 	vstr	s15, [r3]
			// Convert pressure from Bar to kPa
			// pressure_Bar = pressure_Bar/100;
			// Print pressure value
			printf("Measured pressure: %i kPa \r\n", (int)pressure_Bar);
 8000576:	4b17      	ldr	r3, [pc, #92]	@ (80005d4 <main+0x2c4>)
 8000578:	edd3 7a00 	vldr	s15, [r3]
 800057c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000580:	ee17 1a90 	vmov	r1, s15
 8000584:	4814      	ldr	r0, [pc, #80]	@ (80005d8 <main+0x2c8>)
 8000586:	f002 f85b 	bl	8002640 <iprintf>
		HAL_GPIO_TogglePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin);
 800058a:	e743      	b.n	8000414 <main+0x104>
 800058c:	48000400 	.word	0x48000400
 8000590:	080033f0 	.word	0x080033f0
 8000594:	0800357c 	.word	0x0800357c
 8000598:	2000008c 	.word	0x2000008c
 800059c:	08003424 	.word	0x08003424
 80005a0:	08003444 	.word	0x08003444
 80005a4:	08003464 	.word	0x08003464
 80005a8:	08003478 	.word	0x08003478
 80005ac:	0800349c 	.word	0x0800349c
 80005b0:	080034bc 	.word	0x080034bc
 80005b4:	080034ec 	.word	0x080034ec
 80005b8:	0800351c 	.word	0x0800351c
 80005bc:	08003534 	.word	0x08003534
 80005c0:	0800357a 	.word	0x0800357a
 80005c4:	08003548 	.word	0x08003548
 80005c8:	200000f0 	.word	0x200000f0
 80005cc:	20000000 	.word	0x20000000
 80005d0:	20000004 	.word	0x20000004
 80005d4:	200000f4 	.word	0x200000f4
 80005d8:	0800355c 	.word	0x0800355c

080005dc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	@ 0x50
 80005e0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005e2:	f107 0318 	add.w	r3, r7, #24
 80005e6:	2238      	movs	r2, #56	@ 0x38
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 f970 	bl	80028d0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000602:	f000 fd7f 	bl	8001104 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000606:	2302      	movs	r3, #2
 8000608:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800060e:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000610:	2340      	movs	r3, #64	@ 0x40
 8000612:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000614:	2302      	movs	r3, #2
 8000616:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000618:	2302      	movs	r3, #2
 800061a:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800061c:	2304      	movs	r3, #4
 800061e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 75;
 8000620:	234b      	movs	r3, #75	@ 0x4b
 8000622:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000628:	2302      	movs	r3, #2
 800062a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000630:	f107 0318 	add.w	r3, r7, #24
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fe19 	bl	800126c <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x68>
		Error_Handler();
 8000640:	f000 f8d6 	bl	80007f0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000648:	2303      	movs	r3, #3
 800064a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2104      	movs	r1, #4
 800065c:	4618      	mov	r0, r3
 800065e:	f001 f917 	bl	8001890 <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x90>
		Error_Handler();
 8000668:	f000 f8c2 	bl	80007f0 <Error_Handler>
	}
}
 800066c:	bf00      	nop
 800066e:	3750      	adds	r7, #80	@ 0x50
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000678:	4b1b      	ldr	r3, [pc, #108]	@ (80006e8 <MX_SPI2_Init+0x74>)
 800067a:	4a1c      	ldr	r2, [pc, #112]	@ (80006ec <MX_SPI2_Init+0x78>)
 800067c:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800067e:	4b1a      	ldr	r3, [pc, #104]	@ (80006e8 <MX_SPI2_Init+0x74>)
 8000680:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000684:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000686:	4b18      	ldr	r3, [pc, #96]	@ (80006e8 <MX_SPI2_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800068c:	4b16      	ldr	r3, [pc, #88]	@ (80006e8 <MX_SPI2_Init+0x74>)
 800068e:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000692:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000694:	4b14      	ldr	r3, [pc, #80]	@ (80006e8 <MX_SPI2_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800069a:	4b13      	ldr	r3, [pc, #76]	@ (80006e8 <MX_SPI2_Init+0x74>)
 800069c:	2201      	movs	r2, #1
 800069e:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80006a0:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <MX_SPI2_Init+0x74>)
 80006a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006a6:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <MX_SPI2_Init+0x74>)
 80006aa:	2220      	movs	r2, #32
 80006ac:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <MX_SPI2_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <MX_SPI2_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	@ (80006e8 <MX_SPI2_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 7;
 80006c0:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <MX_SPI2_Init+0x74>)
 80006c2:	2207      	movs	r2, #7
 80006c4:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	@ (80006e8 <MX_SPI2_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80006cc:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <MX_SPI2_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80006d2:	4805      	ldr	r0, [pc, #20]	@ (80006e8 <MX_SPI2_Init+0x74>)
 80006d4:	f001 fac0 	bl	8001c58 <HAL_SPI_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_SPI2_Init+0x6e>
		Error_Handler();
 80006de:	f000 f887 	bl	80007f0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	2000008c 	.word	0x2000008c
 80006ec:	40003800 	.word	0x40003800

080006f0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4b2a      	ldr	r3, [pc, #168]	@ (80007b0 <MX_GPIO_Init+0xc0>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070a:	4a29      	ldr	r2, [pc, #164]	@ (80007b0 <MX_GPIO_Init+0xc0>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000712:	4b27      	ldr	r3, [pc, #156]	@ (80007b0 <MX_GPIO_Init+0xc0>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	4b24      	ldr	r3, [pc, #144]	@ (80007b0 <MX_GPIO_Init+0xc0>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000722:	4a23      	ldr	r2, [pc, #140]	@ (80007b0 <MX_GPIO_Init+0xc0>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072a:	4b21      	ldr	r3, [pc, #132]	@ (80007b0 <MX_GPIO_Init+0xc0>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin, GPIO_PIN_SET);
 8000736:	2201      	movs	r2, #1
 8000738:	2140      	movs	r1, #64	@ 0x40
 800073a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800073e:	f000 fcaf 	bl	80010a0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin | PRS_Ready_Pin | System_Ready_Pin,
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 8000748:	481a      	ldr	r0, [pc, #104]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 800074a:	f000 fca9 	bl	80010a0 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin : Valve_Enable_Pin */
	GPIO_InitStruct.Pin = Valve_Enable_Pin;
 800074e:	2340      	movs	r3, #64	@ 0x40
 8000750:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000756:	2302      	movs	r3, #2
 8000758:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(Valve_Enable_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	4619      	mov	r1, r3
 8000764:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000768:	f000 fb18 	bl	8000d9c <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI_CS_Pin */
	GPIO_InitStruct.Pin = SPI_CS_Pin;
 800076c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000770:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000772:	2301      	movs	r3, #1
 8000774:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000776:	2301      	movs	r3, #1
 8000778:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	4619      	mov	r1, r3
 8000784:	480b      	ldr	r0, [pc, #44]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 8000786:	f000 fb09 	bl	8000d9c <HAL_GPIO_Init>

	/*Configure GPIO pins : PRS_Ready_Pin System_Ready_Pin */
	GPIO_InitStruct.Pin = PRS_Ready_Pin | System_Ready_Pin;
 800078a:	23c0      	movs	r3, #192	@ 0xc0
 800078c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	2301      	movs	r3, #1
 8000790:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000792:	2302      	movs	r3, #2
 8000794:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	4619      	mov	r1, r3
 80007a0:	4804      	ldr	r0, [pc, #16]	@ (80007b4 <MX_GPIO_Init+0xc4>)
 80007a2:	f000 fafb 	bl	8000d9c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80007a6:	bf00      	nop
 80007a8:	3720      	adds	r7, #32
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40021000 	.word	0x40021000
 80007b4:	48000400 	.word	0x48000400

080007b8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e009      	b.n	80007de <_write+0x26>
		ITM_SendChar(*ptr++);
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	60ba      	str	r2, [r7, #8]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fd74 	bl	80002c0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	3301      	adds	r3, #1
 80007dc:	617b      	str	r3, [r7, #20]
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	dbf1      	blt.n	80007ca <_write+0x12>
	}
	return len;
 80007e6:	687b      	ldr	r3, [r7, #4]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3718      	adds	r7, #24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <Error_Handler+0x8>

080007fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000802:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <HAL_MspInit+0x44>)
 8000804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000806:	4a0e      	ldr	r2, [pc, #56]	@ (8000840 <HAL_MspInit+0x44>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6613      	str	r3, [r2, #96]	@ 0x60
 800080e:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <HAL_MspInit+0x44>)
 8000810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <HAL_MspInit+0x44>)
 800081c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800081e:	4a08      	ldr	r2, [pc, #32]	@ (8000840 <HAL_MspInit+0x44>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000824:	6593      	str	r3, [r2, #88]	@ 0x58
 8000826:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <HAL_MspInit+0x44>)
 8000828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800082a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000832:	f000 fd0b 	bl	800124c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40021000 	.word	0x40021000

08000844 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	@ 0x28
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a17      	ldr	r2, [pc, #92]	@ (80008c0 <HAL_SPI_MspInit+0x7c>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d128      	bne.n	80008b8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000866:	4b17      	ldr	r3, [pc, #92]	@ (80008c4 <HAL_SPI_MspInit+0x80>)
 8000868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800086a:	4a16      	ldr	r2, [pc, #88]	@ (80008c4 <HAL_SPI_MspInit+0x80>)
 800086c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000870:	6593      	str	r3, [r2, #88]	@ 0x58
 8000872:	4b14      	ldr	r3, [pc, #80]	@ (80008c4 <HAL_SPI_MspInit+0x80>)
 8000874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000876:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <HAL_SPI_MspInit+0x80>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000882:	4a10      	ldr	r2, [pc, #64]	@ (80008c4 <HAL_SPI_MspInit+0x80>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088a:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <HAL_SPI_MspInit+0x80>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000896:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800089a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	2302      	movs	r3, #2
 800089e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a4:	2302      	movs	r3, #2
 80008a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008a8:	2305      	movs	r3, #5
 80008aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4619      	mov	r1, r3
 80008b2:	4805      	ldr	r0, [pc, #20]	@ (80008c8 <HAL_SPI_MspInit+0x84>)
 80008b4:	f000 fa72 	bl	8000d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80008b8:	bf00      	nop
 80008ba:	3728      	adds	r7, #40	@ 0x28
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40003800 	.word	0x40003800
 80008c4:	40021000 	.word	0x40021000
 80008c8:	48000400 	.word	0x48000400

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <NMI_Handler+0x4>

080008d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <HardFault_Handler+0x4>

080008dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <MemManage_Handler+0x4>

080008e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <BusFault_Handler+0x4>

080008ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <UsageFault_Handler+0x4>

080008f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000922:	f000 f917 	bl	8000b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}

0800092a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b086      	sub	sp, #24
 800092e:	af00      	add	r7, sp, #0
 8000930:	60f8      	str	r0, [r7, #12]
 8000932:	60b9      	str	r1, [r7, #8]
 8000934:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
 800093a:	e00a      	b.n	8000952 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800093c:	f3af 8000 	nop.w
 8000940:	4601      	mov	r1, r0
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	1c5a      	adds	r2, r3, #1
 8000946:	60ba      	str	r2, [r7, #8]
 8000948:	b2ca      	uxtb	r2, r1
 800094a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	3301      	adds	r3, #1
 8000950:	617b      	str	r3, [r7, #20]
 8000952:	697a      	ldr	r2, [r7, #20]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	429a      	cmp	r2, r3
 8000958:	dbf0      	blt.n	800093c <_read+0x12>
  }

  return len;
 800095a:	687b      	ldr	r3, [r7, #4]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3718      	adds	r7, #24
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800096c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000970:	4618      	mov	r0, r3
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800098c:	605a      	str	r2, [r3, #4]
  return 0;
 800098e:	2300      	movs	r3, #0
}
 8000990:	4618      	mov	r0, r3
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <_isatty>:

int _isatty(int file)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009a4:	2301      	movs	r3, #1
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009b2:	b480      	push	{r7}
 80009b4:	b085      	sub	sp, #20
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	60f8      	str	r0, [r7, #12]
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009be:	2300      	movs	r3, #0
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d4:	4a14      	ldr	r2, [pc, #80]	@ (8000a28 <_sbrk+0x5c>)
 80009d6:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <_sbrk+0x60>)
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e0:	4b13      	ldr	r3, [pc, #76]	@ (8000a30 <_sbrk+0x64>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d102      	bne.n	80009ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e8:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <_sbrk+0x64>)
 80009ea:	4a12      	ldr	r2, [pc, #72]	@ (8000a34 <_sbrk+0x68>)
 80009ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ee:	4b10      	ldr	r3, [pc, #64]	@ (8000a30 <_sbrk+0x64>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4413      	add	r3, r2
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d207      	bcs.n	8000a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009fc:	f001 ffb6 	bl	800296c <__errno>
 8000a00:	4603      	mov	r3, r0
 8000a02:	220c      	movs	r2, #12
 8000a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a0a:	e009      	b.n	8000a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a0c:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a12:	4b07      	ldr	r3, [pc, #28]	@ (8000a30 <_sbrk+0x64>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	4a05      	ldr	r2, [pc, #20]	@ (8000a30 <_sbrk+0x64>)
 8000a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3718      	adds	r7, #24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20008000 	.word	0x20008000
 8000a2c:	00000400 	.word	0x00000400
 8000a30:	200000f8 	.word	0x200000f8
 8000a34:	20000250 	.word	0x20000250

08000a38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a3c:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <SystemInit+0x20>)
 8000a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a42:	4a05      	ldr	r2, [pc, #20]	@ (8000a58 <SystemInit+0x20>)
 8000a44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a5c:	480d      	ldr	r0, [pc, #52]	@ (8000a94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a5e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a60:	f7ff ffea 	bl	8000a38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a64:	480c      	ldr	r0, [pc, #48]	@ (8000a98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a66:	490d      	ldr	r1, [pc, #52]	@ (8000a9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a68:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa0 <LoopForever+0xe>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a6c:	e002      	b.n	8000a74 <LoopCopyDataInit>

08000a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a72:	3304      	adds	r3, #4

08000a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a78:	d3f9      	bcc.n	8000a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000aa8 <LoopForever+0x16>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a80:	e001      	b.n	8000a86 <LoopFillZerobss>

08000a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a84:	3204      	adds	r2, #4

08000a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a88:	d3fb      	bcc.n	8000a82 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000a8a:	f001 ff75 	bl	8002978 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a8e:	f7ff fc3f 	bl	8000310 <main>

08000a92 <LoopForever>:

LoopForever:
    b LoopForever
 8000a92:	e7fe      	b.n	8000a92 <LoopForever>
  ldr   r0, =_estack
 8000a94:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a9c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000aa0:	080035d4 	.word	0x080035d4
  ldr r2, =_sbss
 8000aa4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000aa8:	2000024c 	.word	0x2000024c

08000aac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aac:	e7fe      	b.n	8000aac <ADC1_2_IRQHandler>

08000aae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab8:	2003      	movs	r0, #3
 8000aba:	f000 f93d 	bl	8000d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000abe:	200f      	movs	r0, #15
 8000ac0:	f000 f80e 	bl	8000ae0 <HAL_InitTick>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d002      	beq.n	8000ad0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	71fb      	strb	r3, [r7, #7]
 8000ace:	e001      	b.n	8000ad4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ad0:	f7ff fe94 	bl	80007fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ad4:	79fb      	ldrb	r3, [r7, #7]

}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000aec:	4b16      	ldr	r3, [pc, #88]	@ (8000b48 <HAL_InitTick+0x68>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d022      	beq.n	8000b3a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000af4:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <HAL_InitTick+0x6c>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b13      	ldr	r3, [pc, #76]	@ (8000b48 <HAL_InitTick+0x68>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000b00:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 f93a 	bl	8000d82 <HAL_SYSTICK_Config>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d10f      	bne.n	8000b34 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2b0f      	cmp	r3, #15
 8000b18:	d809      	bhi.n	8000b2e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	6879      	ldr	r1, [r7, #4]
 8000b1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b22:	f000 f914 	bl	8000d4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b26:	4a0a      	ldr	r2, [pc, #40]	@ (8000b50 <HAL_InitTick+0x70>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6013      	str	r3, [r2, #0]
 8000b2c:	e007      	b.n	8000b3e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	73fb      	strb	r3, [r7, #15]
 8000b32:	e004      	b.n	8000b3e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	73fb      	strb	r3, [r7, #15]
 8000b38:	e001      	b.n	8000b3e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000010 	.word	0x20000010
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	2000000c 	.word	0x2000000c

08000b54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b58:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <HAL_IncTick+0x1c>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <HAL_IncTick+0x20>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4413      	add	r3, r2
 8000b62:	4a03      	ldr	r2, [pc, #12]	@ (8000b70 <HAL_IncTick+0x1c>)
 8000b64:	6013      	str	r3, [r2, #0]
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	200000fc 	.word	0x200000fc
 8000b74:	20000010 	.word	0x20000010

08000b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b7c:	4b03      	ldr	r3, [pc, #12]	@ (8000b8c <HAL_GetTick+0x14>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	200000fc 	.word	0x200000fc

08000b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b98:	f7ff ffee 	bl	8000b78 <HAL_GetTick>
 8000b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ba8:	d004      	beq.n	8000bb4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000baa:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <HAL_Delay+0x40>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bb4:	bf00      	nop
 8000bb6:	f7ff ffdf 	bl	8000b78 <HAL_GetTick>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d8f7      	bhi.n	8000bb6 <HAL_Delay+0x26>
  {
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	bf00      	nop
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000010 	.word	0x20000010

08000bd4 <__NVIC_SetPriorityGrouping>:
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c06:	4a04      	ldr	r2, [pc, #16]	@ (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	60d3      	str	r3, [r2, #12]
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_GetPriorityGrouping>:
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c20:	4b04      	ldr	r3, [pc, #16]	@ (8000c34 <__NVIC_GetPriorityGrouping+0x18>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	f003 0307 	and.w	r3, r3, #7
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_SetPriority>:
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	6039      	str	r1, [r7, #0]
 8000c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	db0a      	blt.n	8000c62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	490c      	ldr	r1, [pc, #48]	@ (8000c84 <__NVIC_SetPriority+0x4c>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	0112      	lsls	r2, r2, #4
 8000c58:	b2d2      	uxtb	r2, r2
 8000c5a:	440b      	add	r3, r1
 8000c5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000c60:	e00a      	b.n	8000c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4908      	ldr	r1, [pc, #32]	@ (8000c88 <__NVIC_SetPriority+0x50>)
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	f003 030f 	and.w	r3, r3, #15
 8000c6e:	3b04      	subs	r3, #4
 8000c70:	0112      	lsls	r2, r2, #4
 8000c72:	b2d2      	uxtb	r2, r2
 8000c74:	440b      	add	r3, r1
 8000c76:	761a      	strb	r2, [r3, #24]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000e100 	.word	0xe000e100
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <NVIC_EncodePriority>:
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b089      	sub	sp, #36	@ 0x24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	f1c3 0307 	rsb	r3, r3, #7
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	bf28      	it	cs
 8000caa:	2304      	movcs	r3, #4
 8000cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	2b06      	cmp	r3, #6
 8000cb4:	d902      	bls.n	8000cbc <NVIC_EncodePriority+0x30>
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3b03      	subs	r3, #3
 8000cba:	e000      	b.n	8000cbe <NVIC_EncodePriority+0x32>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43da      	mvns	r2, r3
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	401a      	ands	r2, r3
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	fa01 f303 	lsl.w	r3, r1, r3
 8000cde:	43d9      	mvns	r1, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	4313      	orrs	r3, r2
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3724      	adds	r7, #36	@ 0x24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <SysTick_Config>:
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d04:	d301      	bcc.n	8000d0a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00f      	b.n	8000d2a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d34 <SysTick_Config+0x40>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d12:	210f      	movs	r1, #15
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d18:	f7ff ff8e 	bl	8000c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d1c:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <SysTick_Config+0x40>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d22:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <SysTick_Config+0x40>)
 8000d24:	2207      	movs	r2, #7
 8000d26:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	e000e010 	.word	0xe000e010

08000d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff ff47 	bl	8000bd4 <__NVIC_SetPriorityGrouping>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b086      	sub	sp, #24
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	4603      	mov	r3, r0
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
 8000d5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d5c:	f7ff ff5e 	bl	8000c1c <__NVIC_GetPriorityGrouping>
 8000d60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	68b9      	ldr	r1, [r7, #8]
 8000d66:	6978      	ldr	r0, [r7, #20]
 8000d68:	f7ff ff90 	bl	8000c8c <NVIC_EncodePriority>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d72:	4611      	mov	r1, r2
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff5f 	bl	8000c38 <__NVIC_SetPriority>
}
 8000d7a:	bf00      	nop
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ffb2 	bl	8000cf4 <SysTick_Config>
 8000d90:	4603      	mov	r3, r0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b087      	sub	sp, #28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000daa:	e15a      	b.n	8001062 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	2101      	movs	r1, #1
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	fa01 f303 	lsl.w	r3, r1, r3
 8000db8:	4013      	ands	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f000 814c 	beq.w	800105c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d005      	beq.n	8000ddc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d130      	bne.n	8000e3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	68da      	ldr	r2, [r3, #12]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e12:	2201      	movs	r2, #1
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	091b      	lsrs	r3, r3, #4
 8000e28:	f003 0201 	and.w	r2, r3, #1
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 0303 	and.w	r3, r3, #3
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d017      	beq.n	8000e7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	2203      	movs	r2, #3
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	689a      	ldr	r2, [r3, #8]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 0303 	and.w	r3, r3, #3
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d123      	bne.n	8000ece <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	08da      	lsrs	r2, r3, #3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3208      	adds	r2, #8
 8000e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	220f      	movs	r2, #15
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	691a      	ldr	r2, [r3, #16]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	f003 0307 	and.w	r3, r3, #7
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	08da      	lsrs	r2, r3, #3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3208      	adds	r2, #8
 8000ec8:	6939      	ldr	r1, [r7, #16]
 8000eca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	2203      	movs	r2, #3
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f003 0203 	and.w	r2, r3, #3
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f000 80a6 	beq.w	800105c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f10:	4b5b      	ldr	r3, [pc, #364]	@ (8001080 <HAL_GPIO_Init+0x2e4>)
 8000f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f14:	4a5a      	ldr	r2, [pc, #360]	@ (8001080 <HAL_GPIO_Init+0x2e4>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f1c:	4b58      	ldr	r3, [pc, #352]	@ (8001080 <HAL_GPIO_Init+0x2e4>)
 8000f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f28:	4a56      	ldr	r2, [pc, #344]	@ (8001084 <HAL_GPIO_Init+0x2e8>)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	089b      	lsrs	r3, r3, #2
 8000f2e:	3302      	adds	r3, #2
 8000f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f003 0303 	and.w	r3, r3, #3
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	220f      	movs	r2, #15
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f52:	d01f      	beq.n	8000f94 <HAL_GPIO_Init+0x1f8>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a4c      	ldr	r2, [pc, #304]	@ (8001088 <HAL_GPIO_Init+0x2ec>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d019      	beq.n	8000f90 <HAL_GPIO_Init+0x1f4>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a4b      	ldr	r2, [pc, #300]	@ (800108c <HAL_GPIO_Init+0x2f0>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d013      	beq.n	8000f8c <HAL_GPIO_Init+0x1f0>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a4a      	ldr	r2, [pc, #296]	@ (8001090 <HAL_GPIO_Init+0x2f4>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d00d      	beq.n	8000f88 <HAL_GPIO_Init+0x1ec>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a49      	ldr	r2, [pc, #292]	@ (8001094 <HAL_GPIO_Init+0x2f8>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d007      	beq.n	8000f84 <HAL_GPIO_Init+0x1e8>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a48      	ldr	r2, [pc, #288]	@ (8001098 <HAL_GPIO_Init+0x2fc>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d101      	bne.n	8000f80 <HAL_GPIO_Init+0x1e4>
 8000f7c:	2305      	movs	r3, #5
 8000f7e:	e00a      	b.n	8000f96 <HAL_GPIO_Init+0x1fa>
 8000f80:	2306      	movs	r3, #6
 8000f82:	e008      	b.n	8000f96 <HAL_GPIO_Init+0x1fa>
 8000f84:	2304      	movs	r3, #4
 8000f86:	e006      	b.n	8000f96 <HAL_GPIO_Init+0x1fa>
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e004      	b.n	8000f96 <HAL_GPIO_Init+0x1fa>
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	e002      	b.n	8000f96 <HAL_GPIO_Init+0x1fa>
 8000f90:	2301      	movs	r3, #1
 8000f92:	e000      	b.n	8000f96 <HAL_GPIO_Init+0x1fa>
 8000f94:	2300      	movs	r3, #0
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	f002 0203 	and.w	r2, r2, #3
 8000f9c:	0092      	lsls	r2, r2, #2
 8000f9e:	4093      	lsls	r3, r2
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fa6:	4937      	ldr	r1, [pc, #220]	@ (8001084 <HAL_GPIO_Init+0x2e8>)
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	089b      	lsrs	r3, r3, #2
 8000fac:	3302      	adds	r3, #2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fb4:	4b39      	ldr	r3, [pc, #228]	@ (800109c <HAL_GPIO_Init+0x300>)
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fd8:	4a30      	ldr	r2, [pc, #192]	@ (800109c <HAL_GPIO_Init+0x300>)
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fde:	4b2f      	ldr	r3, [pc, #188]	@ (800109c <HAL_GPIO_Init+0x300>)
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001002:	4a26      	ldr	r2, [pc, #152]	@ (800109c <HAL_GPIO_Init+0x300>)
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001008:	4b24      	ldr	r3, [pc, #144]	@ (800109c <HAL_GPIO_Init+0x300>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	43db      	mvns	r3, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800102c:	4a1b      	ldr	r2, [pc, #108]	@ (800109c <HAL_GPIO_Init+0x300>)
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001032:	4b1a      	ldr	r3, [pc, #104]	@ (800109c <HAL_GPIO_Init+0x300>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	43db      	mvns	r3, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4313      	orrs	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001056:	4a11      	ldr	r2, [pc, #68]	@ (800109c <HAL_GPIO_Init+0x300>)
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	3301      	adds	r3, #1
 8001060:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	fa22 f303 	lsr.w	r3, r2, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	f47f ae9d 	bne.w	8000dac <HAL_GPIO_Init+0x10>
  }
}
 8001072:	bf00      	nop
 8001074:	bf00      	nop
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	40021000 	.word	0x40021000
 8001084:	40010000 	.word	0x40010000
 8001088:	48000400 	.word	0x48000400
 800108c:	48000800 	.word	0x48000800
 8001090:	48000c00 	.word	0x48000c00
 8001094:	48001000 	.word	0x48001000
 8001098:	48001400 	.word	0x48001400
 800109c:	40010400 	.word	0x40010400

080010a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	807b      	strh	r3, [r7, #2]
 80010ac:	4613      	mov	r3, r2
 80010ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010b0:	787b      	ldrb	r3, [r7, #1]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010bc:	e002      	b.n	80010c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010be:	887a      	ldrh	r2, [r7, #2]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	695b      	ldr	r3, [r3, #20]
 80010e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010e2:	887a      	ldrh	r2, [r7, #2]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4013      	ands	r3, r2
 80010e8:	041a      	lsls	r2, r3, #16
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	43d9      	mvns	r1, r3
 80010ee:	887b      	ldrh	r3, [r7, #2]
 80010f0:	400b      	ands	r3, r1
 80010f2:	431a      	orrs	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	619a      	str	r2, [r3, #24]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d141      	bne.n	8001196 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001112:	4b4b      	ldr	r3, [pc, #300]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800111a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800111e:	d131      	bne.n	8001184 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001120:	4b47      	ldr	r3, [pc, #284]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001122:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001126:	4a46      	ldr	r2, [pc, #280]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001128:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800112c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001130:	4b43      	ldr	r3, [pc, #268]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001138:	4a41      	ldr	r2, [pc, #260]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800113a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800113e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001140:	4b40      	ldr	r3, [pc, #256]	@ (8001244 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2232      	movs	r2, #50	@ 0x32
 8001146:	fb02 f303 	mul.w	r3, r2, r3
 800114a:	4a3f      	ldr	r2, [pc, #252]	@ (8001248 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800114c:	fba2 2303 	umull	r2, r3, r2, r3
 8001150:	0c9b      	lsrs	r3, r3, #18
 8001152:	3301      	adds	r3, #1
 8001154:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001156:	e002      	b.n	800115e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	3b01      	subs	r3, #1
 800115c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800115e:	4b38      	ldr	r3, [pc, #224]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800116a:	d102      	bne.n	8001172 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f2      	bne.n	8001158 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001172:	4b33      	ldr	r3, [pc, #204]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800117a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800117e:	d158      	bne.n	8001232 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e057      	b.n	8001234 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001184:	4b2e      	ldr	r3, [pc, #184]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001186:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800118a:	4a2d      	ldr	r2, [pc, #180]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800118c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001190:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001194:	e04d      	b.n	8001232 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800119c:	d141      	bne.n	8001222 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800119e:	4b28      	ldr	r3, [pc, #160]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011aa:	d131      	bne.n	8001210 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011ac:	4b24      	ldr	r3, [pc, #144]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011b2:	4a23      	ldr	r2, [pc, #140]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011bc:	4b20      	ldr	r3, [pc, #128]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011c4:	4a1e      	ldr	r2, [pc, #120]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001244 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2232      	movs	r2, #50	@ 0x32
 80011d2:	fb02 f303 	mul.w	r3, r2, r3
 80011d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001248 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80011d8:	fba2 2303 	umull	r2, r3, r2, r3
 80011dc:	0c9b      	lsrs	r3, r3, #18
 80011de:	3301      	adds	r3, #1
 80011e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011e2:	e002      	b.n	80011ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011ea:	4b15      	ldr	r3, [pc, #84]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011f6:	d102      	bne.n	80011fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1f2      	bne.n	80011e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011fe:	4b10      	ldr	r3, [pc, #64]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001206:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800120a:	d112      	bne.n	8001232 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e011      	b.n	8001234 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001210:	4b0b      	ldr	r3, [pc, #44]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001216:	4a0a      	ldr	r2, [pc, #40]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800121c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001220:	e007      	b.n	8001232 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001222:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800122a:	4a05      	ldr	r2, [pc, #20]	@ (8001240 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800122c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001230:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	40007000 	.word	0x40007000
 8001244:	20000008 	.word	0x20000008
 8001248:	431bde83 	.word	0x431bde83

0800124c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001250:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	4a04      	ldr	r2, [pc, #16]	@ (8001268 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001256:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800125a:	6093      	str	r3, [r2, #8]
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40007000 	.word	0x40007000

0800126c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e2fe      	b.n	800187c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	d075      	beq.n	8001376 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800128a:	4b97      	ldr	r3, [pc, #604]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001294:	4b94      	ldr	r3, [pc, #592]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	2b0c      	cmp	r3, #12
 80012a2:	d102      	bne.n	80012aa <HAL_RCC_OscConfig+0x3e>
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	2b03      	cmp	r3, #3
 80012a8:	d002      	beq.n	80012b0 <HAL_RCC_OscConfig+0x44>
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	2b08      	cmp	r3, #8
 80012ae:	d10b      	bne.n	80012c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b0:	4b8d      	ldr	r3, [pc, #564]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d05b      	beq.n	8001374 <HAL_RCC_OscConfig+0x108>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d157      	bne.n	8001374 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e2d9      	b.n	800187c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012d0:	d106      	bne.n	80012e0 <HAL_RCC_OscConfig+0x74>
 80012d2:	4b85      	ldr	r3, [pc, #532]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a84      	ldr	r2, [pc, #528]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 80012d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	e01d      	b.n	800131c <HAL_RCC_OscConfig+0xb0>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012e8:	d10c      	bne.n	8001304 <HAL_RCC_OscConfig+0x98>
 80012ea:	4b7f      	ldr	r3, [pc, #508]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a7e      	ldr	r2, [pc, #504]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 80012f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	4b7c      	ldr	r3, [pc, #496]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a7b      	ldr	r2, [pc, #492]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 80012fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	e00b      	b.n	800131c <HAL_RCC_OscConfig+0xb0>
 8001304:	4b78      	ldr	r3, [pc, #480]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a77      	ldr	r2, [pc, #476]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 800130a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b75      	ldr	r3, [pc, #468]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a74      	ldr	r2, [pc, #464]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 8001316:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800131a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d013      	beq.n	800134c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001324:	f7ff fc28 	bl	8000b78 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800132c:	f7ff fc24 	bl	8000b78 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b64      	cmp	r3, #100	@ 0x64
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e29e      	b.n	800187c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800133e:	4b6a      	ldr	r3, [pc, #424]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0f0      	beq.n	800132c <HAL_RCC_OscConfig+0xc0>
 800134a:	e014      	b.n	8001376 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134c:	f7ff fc14 	bl	8000b78 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001354:	f7ff fc10 	bl	8000b78 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b64      	cmp	r3, #100	@ 0x64
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e28a      	b.n	800187c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001366:	4b60      	ldr	r3, [pc, #384]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <HAL_RCC_OscConfig+0xe8>
 8001372:	e000      	b.n	8001376 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d075      	beq.n	800146e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001382:	4b59      	ldr	r3, [pc, #356]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 030c 	and.w	r3, r3, #12
 800138a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800138c:	4b56      	ldr	r3, [pc, #344]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	2b0c      	cmp	r3, #12
 800139a:	d102      	bne.n	80013a2 <HAL_RCC_OscConfig+0x136>
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d002      	beq.n	80013a8 <HAL_RCC_OscConfig+0x13c>
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	2b04      	cmp	r3, #4
 80013a6:	d11f      	bne.n	80013e8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013a8:	4b4f      	ldr	r3, [pc, #316]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <HAL_RCC_OscConfig+0x154>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d101      	bne.n	80013c0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e25d      	b.n	800187c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c0:	4b49      	ldr	r3, [pc, #292]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	061b      	lsls	r3, r3, #24
 80013ce:	4946      	ldr	r1, [pc, #280]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80013d4:	4b45      	ldr	r3, [pc, #276]	@ (80014ec <HAL_RCC_OscConfig+0x280>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fb81 	bl	8000ae0 <HAL_InitTick>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d043      	beq.n	800146c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e249      	b.n	800187c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d023      	beq.n	8001438 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f0:	4b3d      	ldr	r3, [pc, #244]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a3c      	ldr	r2, [pc, #240]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 80013f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fc:	f7ff fbbc 	bl	8000b78 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001404:	f7ff fbb8 	bl	8000b78 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e232      	b.n	800187c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001416:	4b34      	ldr	r3, [pc, #208]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f0      	beq.n	8001404 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001422:	4b31      	ldr	r3, [pc, #196]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	061b      	lsls	r3, r3, #24
 8001430:	492d      	ldr	r1, [pc, #180]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 8001432:	4313      	orrs	r3, r2
 8001434:	604b      	str	r3, [r1, #4]
 8001436:	e01a      	b.n	800146e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001438:	4b2b      	ldr	r3, [pc, #172]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a2a      	ldr	r2, [pc, #168]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 800143e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001444:	f7ff fb98 	bl	8000b78 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800144c:	f7ff fb94 	bl	8000b78 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e20e      	b.n	800187c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800145e:	4b22      	ldr	r3, [pc, #136]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x1e0>
 800146a:	e000      	b.n	800146e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800146c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	2b00      	cmp	r3, #0
 8001478:	d041      	beq.n	80014fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d01c      	beq.n	80014bc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001482:	4b19      	ldr	r3, [pc, #100]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 8001484:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001488:	4a17      	ldr	r2, [pc, #92]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001492:	f7ff fb71 	bl	8000b78 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800149a:	f7ff fb6d 	bl	8000b78 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e1e7      	b.n	800187c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014ac:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 80014ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0ef      	beq.n	800149a <HAL_RCC_OscConfig+0x22e>
 80014ba:	e020      	b.n	80014fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014bc:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 80014be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014c2:	4a09      	ldr	r2, [pc, #36]	@ (80014e8 <HAL_RCC_OscConfig+0x27c>)
 80014c4:	f023 0301 	bic.w	r3, r3, #1
 80014c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014cc:	f7ff fb54 	bl	8000b78 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014d2:	e00d      	b.n	80014f0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d4:	f7ff fb50 	bl	8000b78 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d906      	bls.n	80014f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e1ca      	b.n	800187c <HAL_RCC_OscConfig+0x610>
 80014e6:	bf00      	nop
 80014e8:	40021000 	.word	0x40021000
 80014ec:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014f0:	4b8c      	ldr	r3, [pc, #560]	@ (8001724 <HAL_RCC_OscConfig+0x4b8>)
 80014f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1ea      	bne.n	80014d4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 80a6 	beq.w	8001658 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800150c:	2300      	movs	r3, #0
 800150e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001510:	4b84      	ldr	r3, [pc, #528]	@ (8001724 <HAL_RCC_OscConfig+0x4b8>)
 8001512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_RCC_OscConfig+0x2b4>
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <HAL_RCC_OscConfig+0x2b6>
 8001520:	2300      	movs	r3, #0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00d      	beq.n	8001542 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001526:	4b7f      	ldr	r3, [pc, #508]	@ (8001724 <HAL_RCC_OscConfig+0x4b8>)
 8001528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152a:	4a7e      	ldr	r2, [pc, #504]	@ (8001724 <HAL_RCC_OscConfig+0x4b8>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001530:	6593      	str	r3, [r2, #88]	@ 0x58
 8001532:	4b7c      	ldr	r3, [pc, #496]	@ (8001724 <HAL_RCC_OscConfig+0x4b8>)
 8001534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800153e:	2301      	movs	r3, #1
 8001540:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001542:	4b79      	ldr	r3, [pc, #484]	@ (8001728 <HAL_RCC_OscConfig+0x4bc>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800154a:	2b00      	cmp	r3, #0
 800154c:	d118      	bne.n	8001580 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800154e:	4b76      	ldr	r3, [pc, #472]	@ (8001728 <HAL_RCC_OscConfig+0x4bc>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a75      	ldr	r2, [pc, #468]	@ (8001728 <HAL_RCC_OscConfig+0x4bc>)
 8001554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800155a:	f7ff fb0d 	bl	8000b78 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001562:	f7ff fb09 	bl	8000b78 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e183      	b.n	800187c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001574:	4b6c      	ldr	r3, [pc, #432]	@ (8001728 <HAL_RCC_OscConfig+0x4bc>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d108      	bne.n	800159a <HAL_RCC_OscConfig+0x32e>
 8001588:	4b66      	ldr	r3, [pc, #408]	@ (8001724 <HAL_RCC_OscConfig+0x4b8>)
 800158a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800158e:	4a65      	ldr	r2, [pc, #404]	@ (8001724 <HAL_RCC_OscConfig+0x4b8>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001598:	e024      	b.n	80015e4 <HAL_RCC_OscConfig+0x378>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	2b05      	cmp	r3, #5
 80015a0:	d110      	bne.n	80015c4 <HAL_RCC_OscConfig+0x358>
 80015a2:	4b60      	ldr	r3, [pc, #384]	@ (8001724 <HAL_RCC_OscConfig+0x4b8>)
 80015a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015a8:	4a5e      	ldr	r2, [pc, #376]	@ (8001724 <HAL_RCC_OscConfig+0x4b8>)
 80015aa:	f043 0304 	orr.w	r3, r3, #4
 80015ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015b2:	4b5c      	ldr	r3, [pc, #368]	@ (8001724 <HAL_RCC_OscConfig+0x4b8>)
 80015b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015b8:	4a5a      	ldr	r2, [pc, #360]	@ (8001724 <HAL_RCC_OscConfig+0x4b8>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015c2:	e00f      	b.n	80015e4 <HAL_RCC_OscConfig+0x378>
 80015c4:	4b57      	ldr	r3, [pc, #348]	@ (8001724 <HAL_RCC_OscConfig+0x4b8>)
 80015c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015ca:	4a56      	ldr	r2, [pc, #344]	@ (8001724 <HAL_RCC_OscConfig+0x4b8>)
 80015cc:	f023 0301 	bic.w	r3, r3, #1
 80015d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015d4:	4b53      	ldr	r3, [pc, #332]	@ (8001724 <HAL_RCC_OscConfig+0x4b8>)
 80015d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015da:	4a52      	ldr	r2, [pc, #328]	@ (8001724 <HAL_RCC_OscConfig+0x4b8>)
 80015dc:	f023 0304 	bic.w	r3, r3, #4
 80015e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d016      	beq.n	800161a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ec:	f7ff fac4 	bl	8000b78 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015f2:	e00a      	b.n	800160a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f4:	f7ff fac0 	bl	8000b78 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001602:	4293      	cmp	r3, r2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e138      	b.n	800187c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800160a:	4b46      	ldr	r3, [pc, #280]	@ (8001724 <HAL_RCC_OscConfig+0x4b8>)
 800160c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0ed      	beq.n	80015f4 <HAL_RCC_OscConfig+0x388>
 8001618:	e015      	b.n	8001646 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161a:	f7ff faad 	bl	8000b78 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001620:	e00a      	b.n	8001638 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001622:	f7ff faa9 	bl	8000b78 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001630:	4293      	cmp	r3, r2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e121      	b.n	800187c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001638:	4b3a      	ldr	r3, [pc, #232]	@ (8001724 <HAL_RCC_OscConfig+0x4b8>)
 800163a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1ed      	bne.n	8001622 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001646:	7ffb      	ldrb	r3, [r7, #31]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d105      	bne.n	8001658 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800164c:	4b35      	ldr	r3, [pc, #212]	@ (8001724 <HAL_RCC_OscConfig+0x4b8>)
 800164e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001650:	4a34      	ldr	r2, [pc, #208]	@ (8001724 <HAL_RCC_OscConfig+0x4b8>)
 8001652:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001656:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0320 	and.w	r3, r3, #32
 8001660:	2b00      	cmp	r3, #0
 8001662:	d03c      	beq.n	80016de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d01c      	beq.n	80016a6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800166c:	4b2d      	ldr	r3, [pc, #180]	@ (8001724 <HAL_RCC_OscConfig+0x4b8>)
 800166e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001672:	4a2c      	ldr	r2, [pc, #176]	@ (8001724 <HAL_RCC_OscConfig+0x4b8>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167c:	f7ff fa7c 	bl	8000b78 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001684:	f7ff fa78 	bl	8000b78 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e0f2      	b.n	800187c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001696:	4b23      	ldr	r3, [pc, #140]	@ (8001724 <HAL_RCC_OscConfig+0x4b8>)
 8001698:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0ef      	beq.n	8001684 <HAL_RCC_OscConfig+0x418>
 80016a4:	e01b      	b.n	80016de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001724 <HAL_RCC_OscConfig+0x4b8>)
 80016a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001724 <HAL_RCC_OscConfig+0x4b8>)
 80016ae:	f023 0301 	bic.w	r3, r3, #1
 80016b2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b6:	f7ff fa5f 	bl	8000b78 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016be:	f7ff fa5b 	bl	8000b78 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e0d5      	b.n	800187c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016d0:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <HAL_RCC_OscConfig+0x4b8>)
 80016d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1ef      	bne.n	80016be <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 80c9 	beq.w	800187a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001724 <HAL_RCC_OscConfig+0x4b8>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 030c 	and.w	r3, r3, #12
 80016f0:	2b0c      	cmp	r3, #12
 80016f2:	f000 8083 	beq.w	80017fc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d15e      	bne.n	80017bc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fe:	4b09      	ldr	r3, [pc, #36]	@ (8001724 <HAL_RCC_OscConfig+0x4b8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a08      	ldr	r2, [pc, #32]	@ (8001724 <HAL_RCC_OscConfig+0x4b8>)
 8001704:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170a:	f7ff fa35 	bl	8000b78 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001710:	e00c      	b.n	800172c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001712:	f7ff fa31 	bl	8000b78 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d905      	bls.n	800172c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e0ab      	b.n	800187c <HAL_RCC_OscConfig+0x610>
 8001724:	40021000 	.word	0x40021000
 8001728:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800172c:	4b55      	ldr	r3, [pc, #340]	@ (8001884 <HAL_RCC_OscConfig+0x618>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1ec      	bne.n	8001712 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001738:	4b52      	ldr	r3, [pc, #328]	@ (8001884 <HAL_RCC_OscConfig+0x618>)
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	4b52      	ldr	r3, [pc, #328]	@ (8001888 <HAL_RCC_OscConfig+0x61c>)
 800173e:	4013      	ands	r3, r2
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6a11      	ldr	r1, [r2, #32]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001748:	3a01      	subs	r2, #1
 800174a:	0112      	lsls	r2, r2, #4
 800174c:	4311      	orrs	r1, r2
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001752:	0212      	lsls	r2, r2, #8
 8001754:	4311      	orrs	r1, r2
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800175a:	0852      	lsrs	r2, r2, #1
 800175c:	3a01      	subs	r2, #1
 800175e:	0552      	lsls	r2, r2, #21
 8001760:	4311      	orrs	r1, r2
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001766:	0852      	lsrs	r2, r2, #1
 8001768:	3a01      	subs	r2, #1
 800176a:	0652      	lsls	r2, r2, #25
 800176c:	4311      	orrs	r1, r2
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001772:	06d2      	lsls	r2, r2, #27
 8001774:	430a      	orrs	r2, r1
 8001776:	4943      	ldr	r1, [pc, #268]	@ (8001884 <HAL_RCC_OscConfig+0x618>)
 8001778:	4313      	orrs	r3, r2
 800177a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800177c:	4b41      	ldr	r3, [pc, #260]	@ (8001884 <HAL_RCC_OscConfig+0x618>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a40      	ldr	r2, [pc, #256]	@ (8001884 <HAL_RCC_OscConfig+0x618>)
 8001782:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001786:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001788:	4b3e      	ldr	r3, [pc, #248]	@ (8001884 <HAL_RCC_OscConfig+0x618>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	4a3d      	ldr	r2, [pc, #244]	@ (8001884 <HAL_RCC_OscConfig+0x618>)
 800178e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001792:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff f9f0 	bl	8000b78 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179c:	f7ff f9ec 	bl	8000b78 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e066      	b.n	800187c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ae:	4b35      	ldr	r3, [pc, #212]	@ (8001884 <HAL_RCC_OscConfig+0x618>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0x530>
 80017ba:	e05e      	b.n	800187a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017bc:	4b31      	ldr	r3, [pc, #196]	@ (8001884 <HAL_RCC_OscConfig+0x618>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a30      	ldr	r2, [pc, #192]	@ (8001884 <HAL_RCC_OscConfig+0x618>)
 80017c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c8:	f7ff f9d6 	bl	8000b78 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d0:	f7ff f9d2 	bl	8000b78 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e04c      	b.n	800187c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017e2:	4b28      	ldr	r3, [pc, #160]	@ (8001884 <HAL_RCC_OscConfig+0x618>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80017ee:	4b25      	ldr	r3, [pc, #148]	@ (8001884 <HAL_RCC_OscConfig+0x618>)
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	4924      	ldr	r1, [pc, #144]	@ (8001884 <HAL_RCC_OscConfig+0x618>)
 80017f4:	4b25      	ldr	r3, [pc, #148]	@ (800188c <HAL_RCC_OscConfig+0x620>)
 80017f6:	4013      	ands	r3, r2
 80017f8:	60cb      	str	r3, [r1, #12]
 80017fa:	e03e      	b.n	800187a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d101      	bne.n	8001808 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e039      	b.n	800187c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001808:	4b1e      	ldr	r3, [pc, #120]	@ (8001884 <HAL_RCC_OscConfig+0x618>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f003 0203 	and.w	r2, r3, #3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	429a      	cmp	r2, r3
 800181a:	d12c      	bne.n	8001876 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001826:	3b01      	subs	r3, #1
 8001828:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800182a:	429a      	cmp	r2, r3
 800182c:	d123      	bne.n	8001876 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001838:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800183a:	429a      	cmp	r2, r3
 800183c:	d11b      	bne.n	8001876 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001848:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800184a:	429a      	cmp	r2, r3
 800184c:	d113      	bne.n	8001876 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001858:	085b      	lsrs	r3, r3, #1
 800185a:	3b01      	subs	r3, #1
 800185c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800185e:	429a      	cmp	r2, r3
 8001860:	d109      	bne.n	8001876 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800186c:	085b      	lsrs	r3, r3, #1
 800186e:	3b01      	subs	r3, #1
 8001870:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001872:	429a      	cmp	r2, r3
 8001874:	d001      	beq.n	800187a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40021000 	.word	0x40021000
 8001888:	019f800c 	.word	0x019f800c
 800188c:	feeefffc 	.word	0xfeeefffc

08001890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e11e      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018a8:	4b91      	ldr	r3, [pc, #580]	@ (8001af0 <HAL_RCC_ClockConfig+0x260>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 030f 	and.w	r3, r3, #15
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d910      	bls.n	80018d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b6:	4b8e      	ldr	r3, [pc, #568]	@ (8001af0 <HAL_RCC_ClockConfig+0x260>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f023 020f 	bic.w	r2, r3, #15
 80018be:	498c      	ldr	r1, [pc, #560]	@ (8001af0 <HAL_RCC_ClockConfig+0x260>)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c6:	4b8a      	ldr	r3, [pc, #552]	@ (8001af0 <HAL_RCC_ClockConfig+0x260>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e106      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d073      	beq.n	80019cc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	d129      	bne.n	8001940 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ec:	4b81      	ldr	r3, [pc, #516]	@ (8001af4 <HAL_RCC_ClockConfig+0x264>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0f4      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80018fc:	f000 f966 	bl	8001bcc <RCC_GetSysClockFreqFromPLLSource>
 8001900:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	4a7c      	ldr	r2, [pc, #496]	@ (8001af8 <HAL_RCC_ClockConfig+0x268>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d93f      	bls.n	800198a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800190a:	4b7a      	ldr	r3, [pc, #488]	@ (8001af4 <HAL_RCC_ClockConfig+0x264>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d009      	beq.n	800192a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800191e:	2b00      	cmp	r3, #0
 8001920:	d033      	beq.n	800198a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001926:	2b00      	cmp	r3, #0
 8001928:	d12f      	bne.n	800198a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800192a:	4b72      	ldr	r3, [pc, #456]	@ (8001af4 <HAL_RCC_ClockConfig+0x264>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001932:	4a70      	ldr	r2, [pc, #448]	@ (8001af4 <HAL_RCC_ClockConfig+0x264>)
 8001934:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001938:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800193a:	2380      	movs	r3, #128	@ 0x80
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	e024      	b.n	800198a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d107      	bne.n	8001958 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001948:	4b6a      	ldr	r3, [pc, #424]	@ (8001af4 <HAL_RCC_ClockConfig+0x264>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d109      	bne.n	8001968 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0c6      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001958:	4b66      	ldr	r3, [pc, #408]	@ (8001af4 <HAL_RCC_ClockConfig+0x264>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0be      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001968:	f000 f8ce 	bl	8001b08 <HAL_RCC_GetSysClockFreq>
 800196c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4a61      	ldr	r2, [pc, #388]	@ (8001af8 <HAL_RCC_ClockConfig+0x268>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d909      	bls.n	800198a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001976:	4b5f      	ldr	r3, [pc, #380]	@ (8001af4 <HAL_RCC_ClockConfig+0x264>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800197e:	4a5d      	ldr	r2, [pc, #372]	@ (8001af4 <HAL_RCC_ClockConfig+0x264>)
 8001980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001984:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001986:	2380      	movs	r3, #128	@ 0x80
 8001988:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800198a:	4b5a      	ldr	r3, [pc, #360]	@ (8001af4 <HAL_RCC_ClockConfig+0x264>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f023 0203 	bic.w	r2, r3, #3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	4957      	ldr	r1, [pc, #348]	@ (8001af4 <HAL_RCC_ClockConfig+0x264>)
 8001998:	4313      	orrs	r3, r2
 800199a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800199c:	f7ff f8ec 	bl	8000b78 <HAL_GetTick>
 80019a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a2:	e00a      	b.n	80019ba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a4:	f7ff f8e8 	bl	8000b78 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e095      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ba:	4b4e      	ldr	r3, [pc, #312]	@ (8001af4 <HAL_RCC_ClockConfig+0x264>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 020c 	and.w	r2, r3, #12
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d1eb      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d023      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019e4:	4b43      	ldr	r3, [pc, #268]	@ (8001af4 <HAL_RCC_ClockConfig+0x264>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	4a42      	ldr	r2, [pc, #264]	@ (8001af4 <HAL_RCC_ClockConfig+0x264>)
 80019ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80019ee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d007      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80019fc:	4b3d      	ldr	r3, [pc, #244]	@ (8001af4 <HAL_RCC_ClockConfig+0x264>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001a04:	4a3b      	ldr	r2, [pc, #236]	@ (8001af4 <HAL_RCC_ClockConfig+0x264>)
 8001a06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a0c:	4b39      	ldr	r3, [pc, #228]	@ (8001af4 <HAL_RCC_ClockConfig+0x264>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	4936      	ldr	r1, [pc, #216]	@ (8001af4 <HAL_RCC_ClockConfig+0x264>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	608b      	str	r3, [r1, #8]
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	2b80      	cmp	r3, #128	@ 0x80
 8001a24:	d105      	bne.n	8001a32 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001a26:	4b33      	ldr	r3, [pc, #204]	@ (8001af4 <HAL_RCC_ClockConfig+0x264>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	4a32      	ldr	r2, [pc, #200]	@ (8001af4 <HAL_RCC_ClockConfig+0x264>)
 8001a2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a30:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a32:	4b2f      	ldr	r3, [pc, #188]	@ (8001af0 <HAL_RCC_ClockConfig+0x260>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d21d      	bcs.n	8001a7c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a40:	4b2b      	ldr	r3, [pc, #172]	@ (8001af0 <HAL_RCC_ClockConfig+0x260>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f023 020f 	bic.w	r2, r3, #15
 8001a48:	4929      	ldr	r1, [pc, #164]	@ (8001af0 <HAL_RCC_ClockConfig+0x260>)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a50:	f7ff f892 	bl	8000b78 <HAL_GetTick>
 8001a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a58:	f7ff f88e 	bl	8000b78 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e03b      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6e:	4b20      	ldr	r3, [pc, #128]	@ (8001af0 <HAL_RCC_ClockConfig+0x260>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d1ed      	bne.n	8001a58 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d008      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a88:	4b1a      	ldr	r3, [pc, #104]	@ (8001af4 <HAL_RCC_ClockConfig+0x264>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	4917      	ldr	r1, [pc, #92]	@ (8001af4 <HAL_RCC_ClockConfig+0x264>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d009      	beq.n	8001aba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aa6:	4b13      	ldr	r3, [pc, #76]	@ (8001af4 <HAL_RCC_ClockConfig+0x264>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	490f      	ldr	r1, [pc, #60]	@ (8001af4 <HAL_RCC_ClockConfig+0x264>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001aba:	f000 f825 	bl	8001b08 <HAL_RCC_GetSysClockFreq>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8001af4 <HAL_RCC_ClockConfig+0x264>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	490c      	ldr	r1, [pc, #48]	@ (8001afc <HAL_RCC_ClockConfig+0x26c>)
 8001acc:	5ccb      	ldrb	r3, [r1, r3]
 8001ace:	f003 031f 	and.w	r3, r3, #31
 8001ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8001b00 <HAL_RCC_ClockConfig+0x270>)
 8001ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ada:	4b0a      	ldr	r3, [pc, #40]	@ (8001b04 <HAL_RCC_ClockConfig+0x274>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fffe 	bl	8000ae0 <HAL_InitTick>
 8001ae4:	4603      	mov	r3, r0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40022000 	.word	0x40022000
 8001af4:	40021000 	.word	0x40021000
 8001af8:	04c4b400 	.word	0x04c4b400
 8001afc:	08003580 	.word	0x08003580
 8001b00:	20000008 	.word	0x20000008
 8001b04:	2000000c 	.word	0x2000000c

08001b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b087      	sub	sp, #28
 8001b0c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b0e:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d102      	bne.n	8001b20 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b1a:	4b2a      	ldr	r3, [pc, #168]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	e047      	b.n	8001bb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b20:	4b27      	ldr	r3, [pc, #156]	@ (8001bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 030c 	and.w	r3, r3, #12
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d102      	bne.n	8001b32 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b2c:	4b26      	ldr	r3, [pc, #152]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	e03e      	b.n	8001bb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001b32:	4b23      	ldr	r3, [pc, #140]	@ (8001bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 030c 	and.w	r3, r3, #12
 8001b3a:	2b0c      	cmp	r3, #12
 8001b3c:	d136      	bne.n	8001bac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b3e:	4b20      	ldr	r3, [pc, #128]	@ (8001bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b48:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	3301      	adds	r3, #1
 8001b54:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d10c      	bne.n	8001b76 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b5c:	4a1a      	ldr	r2, [pc, #104]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b64:	4a16      	ldr	r2, [pc, #88]	@ (8001bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b66:	68d2      	ldr	r2, [r2, #12]
 8001b68:	0a12      	lsrs	r2, r2, #8
 8001b6a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001b6e:	fb02 f303 	mul.w	r3, r2, r3
 8001b72:	617b      	str	r3, [r7, #20]
      break;
 8001b74:	e00c      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b76:	4a13      	ldr	r2, [pc, #76]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7e:	4a10      	ldr	r2, [pc, #64]	@ (8001bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b80:	68d2      	ldr	r2, [r2, #12]
 8001b82:	0a12      	lsrs	r2, r2, #8
 8001b84:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001b88:	fb02 f303 	mul.w	r3, r2, r3
 8001b8c:	617b      	str	r3, [r7, #20]
      break;
 8001b8e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b90:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	0e5b      	lsrs	r3, r3, #25
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	e001      	b.n	8001bb0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001bb0:	693b      	ldr	r3, [r7, #16]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	371c      	adds	r7, #28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	00f42400 	.word	0x00f42400
 8001bc8:	007a1200 	.word	0x007a1200

08001bcc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b087      	sub	sp, #28
 8001bd0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	3301      	adds	r3, #1
 8001be8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	d10c      	bne.n	8001c0a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bf0:	4a17      	ldr	r2, [pc, #92]	@ (8001c50 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf8:	4a14      	ldr	r2, [pc, #80]	@ (8001c4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bfa:	68d2      	ldr	r2, [r2, #12]
 8001bfc:	0a12      	lsrs	r2, r2, #8
 8001bfe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c02:	fb02 f303 	mul.w	r3, r2, r3
 8001c06:	617b      	str	r3, [r7, #20]
    break;
 8001c08:	e00c      	b.n	8001c24 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c0a:	4a12      	ldr	r2, [pc, #72]	@ (8001c54 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c12:	4a0e      	ldr	r2, [pc, #56]	@ (8001c4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c14:	68d2      	ldr	r2, [r2, #12]
 8001c16:	0a12      	lsrs	r2, r2, #8
 8001c18:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c1c:	fb02 f303 	mul.w	r3, r2, r3
 8001c20:	617b      	str	r3, [r7, #20]
    break;
 8001c22:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c24:	4b09      	ldr	r3, [pc, #36]	@ (8001c4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	0e5b      	lsrs	r3, r3, #25
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	3301      	adds	r3, #1
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001c3e:	687b      	ldr	r3, [r7, #4]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	371c      	adds	r7, #28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	007a1200 	.word	0x007a1200
 8001c54:	00f42400 	.word	0x00f42400

08001c58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e09d      	b.n	8001da6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d108      	bne.n	8001c84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001c7a:	d009      	beq.n	8001c90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
 8001c82:	e005      	b.n	8001c90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d106      	bne.n	8001cb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7fe fdca 	bl	8000844 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001cc6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001cd0:	d902      	bls.n	8001cd8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	e002      	b.n	8001cde <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001cd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cdc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001ce6:	d007      	beq.n	8001cf8 <HAL_SPI_Init+0xa0>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001cf0:	d002      	beq.n	8001cf8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d30:	431a      	orrs	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d3a:	ea42 0103 	orr.w	r1, r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d42:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	0c1b      	lsrs	r3, r3, #16
 8001d54:	f003 0204 	and.w	r2, r3, #4
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001d74:	ea42 0103 	orr.w	r1, r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	69da      	ldr	r2, [r3, #28]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b08a      	sub	sp, #40	@ 0x28
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d101      	bne.n	8001dd4 <HAL_SPI_TransmitReceive+0x26>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e20a      	b.n	80021ea <HAL_SPI_TransmitReceive+0x43c>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ddc:	f7fe fecc 	bl	8000b78 <HAL_GetTick>
 8001de0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001de8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001df0:	887b      	ldrh	r3, [r7, #2]
 8001df2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8001df4:	887b      	ldrh	r3, [r7, #2]
 8001df6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001df8:	7efb      	ldrb	r3, [r7, #27]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d00e      	beq.n	8001e1c <HAL_SPI_TransmitReceive+0x6e>
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001e04:	d106      	bne.n	8001e14 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d102      	bne.n	8001e14 <HAL_SPI_TransmitReceive+0x66>
 8001e0e:	7efb      	ldrb	r3, [r7, #27]
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d003      	beq.n	8001e1c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8001e14:	2302      	movs	r3, #2
 8001e16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8001e1a:	e1e0      	b.n	80021de <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d005      	beq.n	8001e2e <HAL_SPI_TransmitReceive+0x80>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <HAL_SPI_TransmitReceive+0x80>
 8001e28:	887b      	ldrh	r3, [r7, #2]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d103      	bne.n	8001e36 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8001e34:	e1d3      	b.n	80021de <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d003      	beq.n	8001e4a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2205      	movs	r2, #5
 8001e46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	887a      	ldrh	r2, [r7, #2]
 8001e5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	887a      	ldrh	r2, [r7, #2]
 8001e62:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	887a      	ldrh	r2, [r7, #2]
 8001e70:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	887a      	ldrh	r2, [r7, #2]
 8001e76:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001e8c:	d802      	bhi.n	8001e94 <HAL_SPI_TransmitReceive+0xe6>
 8001e8e:	8a3b      	ldrh	r3, [r7, #16]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d908      	bls.n	8001ea6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	e007      	b.n	8001eb6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001eb4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ec0:	2b40      	cmp	r3, #64	@ 0x40
 8001ec2:	d007      	beq.n	8001ed4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ed2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001edc:	f240 8081 	bls.w	8001fe2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <HAL_SPI_TransmitReceive+0x140>
 8001ee8:	8a7b      	ldrh	r3, [r7, #18]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d16d      	bne.n	8001fca <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ef2:	881a      	ldrh	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001efe:	1c9a      	adds	r2, r3, #2
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f12:	e05a      	b.n	8001fca <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d11b      	bne.n	8001f5a <HAL_SPI_TransmitReceive+0x1ac>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d016      	beq.n	8001f5a <HAL_SPI_TransmitReceive+0x1ac>
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d113      	bne.n	8001f5a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f36:	881a      	ldrh	r2, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f42:	1c9a      	adds	r2, r3, #2
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d11c      	bne.n	8001fa2 <HAL_SPI_TransmitReceive+0x1f4>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d016      	beq.n	8001fa2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7e:	b292      	uxth	r2, r2
 8001f80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f86:	1c9a      	adds	r2, r3, #2
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001fa2:	f7fe fde9 	bl	8000b78 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d80b      	bhi.n	8001fca <HAL_SPI_TransmitReceive+0x21c>
 8001fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001fb8:	d007      	beq.n	8001fca <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8001fc8:	e109      	b.n	80021de <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d19f      	bne.n	8001f14 <HAL_SPI_TransmitReceive+0x166>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d199      	bne.n	8001f14 <HAL_SPI_TransmitReceive+0x166>
 8001fe0:	e0e3      	b.n	80021aa <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_SPI_TransmitReceive+0x244>
 8001fea:	8a7b      	ldrh	r3, [r7, #18]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	f040 80cf 	bne.w	8002190 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d912      	bls.n	8002022 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002000:	881a      	ldrh	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800200c:	1c9a      	adds	r2, r3, #2
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002016:	b29b      	uxth	r3, r3
 8002018:	3b02      	subs	r3, #2
 800201a:	b29a      	uxth	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002020:	e0b6      	b.n	8002190 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	330c      	adds	r3, #12
 800202c:	7812      	ldrb	r2, [r2, #0]
 800202e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002034:	1c5a      	adds	r2, r3, #1
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800203e:	b29b      	uxth	r3, r3
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002048:	e0a2      	b.n	8002190 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b02      	cmp	r3, #2
 8002056:	d134      	bne.n	80020c2 <HAL_SPI_TransmitReceive+0x314>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800205c:	b29b      	uxth	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d02f      	beq.n	80020c2 <HAL_SPI_TransmitReceive+0x314>
 8002062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002064:	2b01      	cmp	r3, #1
 8002066:	d12c      	bne.n	80020c2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800206c:	b29b      	uxth	r3, r3
 800206e:	2b01      	cmp	r3, #1
 8002070:	d912      	bls.n	8002098 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002076:	881a      	ldrh	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002082:	1c9a      	adds	r2, r3, #2
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800208c:	b29b      	uxth	r3, r3
 800208e:	3b02      	subs	r3, #2
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002096:	e012      	b.n	80020be <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	330c      	adds	r3, #12
 80020a2:	7812      	ldrb	r2, [r2, #0]
 80020a4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	3b01      	subs	r3, #1
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d148      	bne.n	8002162 <HAL_SPI_TransmitReceive+0x3b4>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d042      	beq.n	8002162 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d923      	bls.n	8002130 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f2:	b292      	uxth	r2, r2
 80020f4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fa:	1c9a      	adds	r2, r3, #2
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002106:	b29b      	uxth	r3, r3
 8002108:	3b02      	subs	r3, #2
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002118:	b29b      	uxth	r3, r3
 800211a:	2b01      	cmp	r3, #1
 800211c:	d81f      	bhi.n	800215e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	e016      	b.n	800215e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f103 020c 	add.w	r2, r3, #12
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213c:	7812      	ldrb	r2, [r2, #0]
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002152:	b29b      	uxth	r3, r3
 8002154:	3b01      	subs	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800215e:	2301      	movs	r3, #1
 8002160:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002162:	f7fe fd09 	bl	8000b78 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800216e:	429a      	cmp	r2, r3
 8002170:	d803      	bhi.n	800217a <HAL_SPI_TransmitReceive+0x3cc>
 8002172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002174:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002178:	d102      	bne.n	8002180 <HAL_SPI_TransmitReceive+0x3d2>
 800217a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800217c:	2b00      	cmp	r3, #0
 800217e:	d107      	bne.n	8002190 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800218e:	e026      	b.n	80021de <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002194:	b29b      	uxth	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	f47f af57 	bne.w	800204a <HAL_SPI_TransmitReceive+0x29c>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f47f af50 	bne.w	800204a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021aa:	69fa      	ldr	r2, [r7, #28]
 80021ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 f93e 	bl	8002430 <SPI_EndRxTxTransaction>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d005      	beq.n	80021c6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2220      	movs	r2, #32
 80021c4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80021d4:	e003      	b.n	80021de <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80021e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3728      	adds	r7, #40	@ 0x28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	603b      	str	r3, [r7, #0]
 8002200:	4613      	mov	r3, r2
 8002202:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002204:	f7fe fcb8 	bl	8000b78 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800220c:	1a9b      	subs	r3, r3, r2
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	4413      	add	r3, r2
 8002212:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002214:	f7fe fcb0 	bl	8000b78 <HAL_GetTick>
 8002218:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800221a:	4b39      	ldr	r3, [pc, #228]	@ (8002300 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	015b      	lsls	r3, r3, #5
 8002220:	0d1b      	lsrs	r3, r3, #20
 8002222:	69fa      	ldr	r2, [r7, #28]
 8002224:	fb02 f303 	mul.w	r3, r2, r3
 8002228:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800222a:	e054      	b.n	80022d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002232:	d050      	beq.n	80022d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002234:	f7fe fca0 	bl	8000b78 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	69fa      	ldr	r2, [r7, #28]
 8002240:	429a      	cmp	r2, r3
 8002242:	d902      	bls.n	800224a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d13d      	bne.n	80022c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002258:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002262:	d111      	bne.n	8002288 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800226c:	d004      	beq.n	8002278 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002276:	d107      	bne.n	8002288 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002286:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800228c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002290:	d10f      	bne.n	80022b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e017      	b.n	80022f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	4013      	ands	r3, r2
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	bf0c      	ite	eq
 80022e6:	2301      	moveq	r3, #1
 80022e8:	2300      	movne	r3, #0
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	461a      	mov	r2, r3
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d19b      	bne.n	800222c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3720      	adds	r7, #32
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000008 	.word	0x20000008

08002304 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	@ 0x28
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
 8002310:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002312:	2300      	movs	r3, #0
 8002314:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002316:	f7fe fc2f 	bl	8000b78 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800231e:	1a9b      	subs	r3, r3, r2
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	4413      	add	r3, r2
 8002324:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002326:	f7fe fc27 	bl	8000b78 <HAL_GetTick>
 800232a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	330c      	adds	r3, #12
 8002332:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002334:	4b3d      	ldr	r3, [pc, #244]	@ (800242c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4613      	mov	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	00da      	lsls	r2, r3, #3
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	0d1b      	lsrs	r3, r3, #20
 8002344:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002346:	fb02 f303 	mul.w	r3, r2, r3
 800234a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800234c:	e060      	b.n	8002410 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002354:	d107      	bne.n	8002366 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d104      	bne.n	8002366 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002364:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800236c:	d050      	beq.n	8002410 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800236e:	f7fe fc03 	bl	8000b78 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800237a:	429a      	cmp	r2, r3
 800237c:	d902      	bls.n	8002384 <SPI_WaitFifoStateUntilTimeout+0x80>
 800237e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002380:	2b00      	cmp	r3, #0
 8002382:	d13d      	bne.n	8002400 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002392:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800239c:	d111      	bne.n	80023c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023a6:	d004      	beq.n	80023b2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023b0:	d107      	bne.n	80023c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023ca:	d10f      	bne.n	80023ec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e010      	b.n	8002422 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	3b01      	subs	r3, #1
 800240e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	4013      	ands	r3, r2
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	429a      	cmp	r2, r3
 800241e:	d196      	bne.n	800234e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3728      	adds	r7, #40	@ 0x28
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000008 	.word	0x20000008

08002430 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af02      	add	r7, sp, #8
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2200      	movs	r2, #0
 8002444:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f7ff ff5b 	bl	8002304 <SPI_WaitFifoStateUntilTimeout>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d007      	beq.n	8002464 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002458:	f043 0220 	orr.w	r2, r3, #32
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e027      	b.n	80024b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2200      	movs	r2, #0
 800246c:	2180      	movs	r1, #128	@ 0x80
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f7ff fec0 	bl	80021f4 <SPI_WaitFlagStateUntilTimeout>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d007      	beq.n	800248a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800247e:	f043 0220 	orr.w	r2, r3, #32
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e014      	b.n	80024b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2200      	movs	r2, #0
 8002492:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f7ff ff34 	bl	8002304 <SPI_WaitFifoStateUntilTimeout>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d007      	beq.n	80024b2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024a6:	f043 0220 	orr.w	r2, r3, #32
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e000      	b.n	80024b4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <std>:
 80024bc:	2300      	movs	r3, #0
 80024be:	b510      	push	{r4, lr}
 80024c0:	4604      	mov	r4, r0
 80024c2:	e9c0 3300 	strd	r3, r3, [r0]
 80024c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80024ca:	6083      	str	r3, [r0, #8]
 80024cc:	8181      	strh	r1, [r0, #12]
 80024ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80024d0:	81c2      	strh	r2, [r0, #14]
 80024d2:	6183      	str	r3, [r0, #24]
 80024d4:	4619      	mov	r1, r3
 80024d6:	2208      	movs	r2, #8
 80024d8:	305c      	adds	r0, #92	@ 0x5c
 80024da:	f000 f9f9 	bl	80028d0 <memset>
 80024de:	4b0d      	ldr	r3, [pc, #52]	@ (8002514 <std+0x58>)
 80024e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80024e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002518 <std+0x5c>)
 80024e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80024e6:	4b0d      	ldr	r3, [pc, #52]	@ (800251c <std+0x60>)
 80024e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80024ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002520 <std+0x64>)
 80024ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80024ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002524 <std+0x68>)
 80024f0:	6224      	str	r4, [r4, #32]
 80024f2:	429c      	cmp	r4, r3
 80024f4:	d006      	beq.n	8002504 <std+0x48>
 80024f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80024fa:	4294      	cmp	r4, r2
 80024fc:	d002      	beq.n	8002504 <std+0x48>
 80024fe:	33d0      	adds	r3, #208	@ 0xd0
 8002500:	429c      	cmp	r4, r3
 8002502:	d105      	bne.n	8002510 <std+0x54>
 8002504:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800250c:	f000 ba58 	b.w	80029c0 <__retarget_lock_init_recursive>
 8002510:	bd10      	pop	{r4, pc}
 8002512:	bf00      	nop
 8002514:	08002721 	.word	0x08002721
 8002518:	08002743 	.word	0x08002743
 800251c:	0800277b 	.word	0x0800277b
 8002520:	0800279f 	.word	0x0800279f
 8002524:	20000100 	.word	0x20000100

08002528 <stdio_exit_handler>:
 8002528:	4a02      	ldr	r2, [pc, #8]	@ (8002534 <stdio_exit_handler+0xc>)
 800252a:	4903      	ldr	r1, [pc, #12]	@ (8002538 <stdio_exit_handler+0x10>)
 800252c:	4803      	ldr	r0, [pc, #12]	@ (800253c <stdio_exit_handler+0x14>)
 800252e:	f000 b869 	b.w	8002604 <_fwalk_sglue>
 8002532:	bf00      	nop
 8002534:	20000014 	.word	0x20000014
 8002538:	08003261 	.word	0x08003261
 800253c:	20000024 	.word	0x20000024

08002540 <cleanup_stdio>:
 8002540:	6841      	ldr	r1, [r0, #4]
 8002542:	4b0c      	ldr	r3, [pc, #48]	@ (8002574 <cleanup_stdio+0x34>)
 8002544:	4299      	cmp	r1, r3
 8002546:	b510      	push	{r4, lr}
 8002548:	4604      	mov	r4, r0
 800254a:	d001      	beq.n	8002550 <cleanup_stdio+0x10>
 800254c:	f000 fe88 	bl	8003260 <_fflush_r>
 8002550:	68a1      	ldr	r1, [r4, #8]
 8002552:	4b09      	ldr	r3, [pc, #36]	@ (8002578 <cleanup_stdio+0x38>)
 8002554:	4299      	cmp	r1, r3
 8002556:	d002      	beq.n	800255e <cleanup_stdio+0x1e>
 8002558:	4620      	mov	r0, r4
 800255a:	f000 fe81 	bl	8003260 <_fflush_r>
 800255e:	68e1      	ldr	r1, [r4, #12]
 8002560:	4b06      	ldr	r3, [pc, #24]	@ (800257c <cleanup_stdio+0x3c>)
 8002562:	4299      	cmp	r1, r3
 8002564:	d004      	beq.n	8002570 <cleanup_stdio+0x30>
 8002566:	4620      	mov	r0, r4
 8002568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800256c:	f000 be78 	b.w	8003260 <_fflush_r>
 8002570:	bd10      	pop	{r4, pc}
 8002572:	bf00      	nop
 8002574:	20000100 	.word	0x20000100
 8002578:	20000168 	.word	0x20000168
 800257c:	200001d0 	.word	0x200001d0

08002580 <global_stdio_init.part.0>:
 8002580:	b510      	push	{r4, lr}
 8002582:	4b0b      	ldr	r3, [pc, #44]	@ (80025b0 <global_stdio_init.part.0+0x30>)
 8002584:	4c0b      	ldr	r4, [pc, #44]	@ (80025b4 <global_stdio_init.part.0+0x34>)
 8002586:	4a0c      	ldr	r2, [pc, #48]	@ (80025b8 <global_stdio_init.part.0+0x38>)
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	4620      	mov	r0, r4
 800258c:	2200      	movs	r2, #0
 800258e:	2104      	movs	r1, #4
 8002590:	f7ff ff94 	bl	80024bc <std>
 8002594:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002598:	2201      	movs	r2, #1
 800259a:	2109      	movs	r1, #9
 800259c:	f7ff ff8e 	bl	80024bc <std>
 80025a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80025a4:	2202      	movs	r2, #2
 80025a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025aa:	2112      	movs	r1, #18
 80025ac:	f7ff bf86 	b.w	80024bc <std>
 80025b0:	20000238 	.word	0x20000238
 80025b4:	20000100 	.word	0x20000100
 80025b8:	08002529 	.word	0x08002529

080025bc <__sfp_lock_acquire>:
 80025bc:	4801      	ldr	r0, [pc, #4]	@ (80025c4 <__sfp_lock_acquire+0x8>)
 80025be:	f000 ba00 	b.w	80029c2 <__retarget_lock_acquire_recursive>
 80025c2:	bf00      	nop
 80025c4:	20000241 	.word	0x20000241

080025c8 <__sfp_lock_release>:
 80025c8:	4801      	ldr	r0, [pc, #4]	@ (80025d0 <__sfp_lock_release+0x8>)
 80025ca:	f000 b9fb 	b.w	80029c4 <__retarget_lock_release_recursive>
 80025ce:	bf00      	nop
 80025d0:	20000241 	.word	0x20000241

080025d4 <__sinit>:
 80025d4:	b510      	push	{r4, lr}
 80025d6:	4604      	mov	r4, r0
 80025d8:	f7ff fff0 	bl	80025bc <__sfp_lock_acquire>
 80025dc:	6a23      	ldr	r3, [r4, #32]
 80025de:	b11b      	cbz	r3, 80025e8 <__sinit+0x14>
 80025e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025e4:	f7ff bff0 	b.w	80025c8 <__sfp_lock_release>
 80025e8:	4b04      	ldr	r3, [pc, #16]	@ (80025fc <__sinit+0x28>)
 80025ea:	6223      	str	r3, [r4, #32]
 80025ec:	4b04      	ldr	r3, [pc, #16]	@ (8002600 <__sinit+0x2c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f5      	bne.n	80025e0 <__sinit+0xc>
 80025f4:	f7ff ffc4 	bl	8002580 <global_stdio_init.part.0>
 80025f8:	e7f2      	b.n	80025e0 <__sinit+0xc>
 80025fa:	bf00      	nop
 80025fc:	08002541 	.word	0x08002541
 8002600:	20000238 	.word	0x20000238

08002604 <_fwalk_sglue>:
 8002604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002608:	4607      	mov	r7, r0
 800260a:	4688      	mov	r8, r1
 800260c:	4614      	mov	r4, r2
 800260e:	2600      	movs	r6, #0
 8002610:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002614:	f1b9 0901 	subs.w	r9, r9, #1
 8002618:	d505      	bpl.n	8002626 <_fwalk_sglue+0x22>
 800261a:	6824      	ldr	r4, [r4, #0]
 800261c:	2c00      	cmp	r4, #0
 800261e:	d1f7      	bne.n	8002610 <_fwalk_sglue+0xc>
 8002620:	4630      	mov	r0, r6
 8002622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002626:	89ab      	ldrh	r3, [r5, #12]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d907      	bls.n	800263c <_fwalk_sglue+0x38>
 800262c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002630:	3301      	adds	r3, #1
 8002632:	d003      	beq.n	800263c <_fwalk_sglue+0x38>
 8002634:	4629      	mov	r1, r5
 8002636:	4638      	mov	r0, r7
 8002638:	47c0      	blx	r8
 800263a:	4306      	orrs	r6, r0
 800263c:	3568      	adds	r5, #104	@ 0x68
 800263e:	e7e9      	b.n	8002614 <_fwalk_sglue+0x10>

08002640 <iprintf>:
 8002640:	b40f      	push	{r0, r1, r2, r3}
 8002642:	b507      	push	{r0, r1, r2, lr}
 8002644:	4906      	ldr	r1, [pc, #24]	@ (8002660 <iprintf+0x20>)
 8002646:	ab04      	add	r3, sp, #16
 8002648:	6808      	ldr	r0, [r1, #0]
 800264a:	f853 2b04 	ldr.w	r2, [r3], #4
 800264e:	6881      	ldr	r1, [r0, #8]
 8002650:	9301      	str	r3, [sp, #4]
 8002652:	f000 fadb 	bl	8002c0c <_vfiprintf_r>
 8002656:	b003      	add	sp, #12
 8002658:	f85d eb04 	ldr.w	lr, [sp], #4
 800265c:	b004      	add	sp, #16
 800265e:	4770      	bx	lr
 8002660:	20000020 	.word	0x20000020

08002664 <_puts_r>:
 8002664:	6a03      	ldr	r3, [r0, #32]
 8002666:	b570      	push	{r4, r5, r6, lr}
 8002668:	6884      	ldr	r4, [r0, #8]
 800266a:	4605      	mov	r5, r0
 800266c:	460e      	mov	r6, r1
 800266e:	b90b      	cbnz	r3, 8002674 <_puts_r+0x10>
 8002670:	f7ff ffb0 	bl	80025d4 <__sinit>
 8002674:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002676:	07db      	lsls	r3, r3, #31
 8002678:	d405      	bmi.n	8002686 <_puts_r+0x22>
 800267a:	89a3      	ldrh	r3, [r4, #12]
 800267c:	0598      	lsls	r0, r3, #22
 800267e:	d402      	bmi.n	8002686 <_puts_r+0x22>
 8002680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002682:	f000 f99e 	bl	80029c2 <__retarget_lock_acquire_recursive>
 8002686:	89a3      	ldrh	r3, [r4, #12]
 8002688:	0719      	lsls	r1, r3, #28
 800268a:	d502      	bpl.n	8002692 <_puts_r+0x2e>
 800268c:	6923      	ldr	r3, [r4, #16]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d135      	bne.n	80026fe <_puts_r+0x9a>
 8002692:	4621      	mov	r1, r4
 8002694:	4628      	mov	r0, r5
 8002696:	f000 f8c5 	bl	8002824 <__swsetup_r>
 800269a:	b380      	cbz	r0, 80026fe <_puts_r+0x9a>
 800269c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80026a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80026a2:	07da      	lsls	r2, r3, #31
 80026a4:	d405      	bmi.n	80026b2 <_puts_r+0x4e>
 80026a6:	89a3      	ldrh	r3, [r4, #12]
 80026a8:	059b      	lsls	r3, r3, #22
 80026aa:	d402      	bmi.n	80026b2 <_puts_r+0x4e>
 80026ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80026ae:	f000 f989 	bl	80029c4 <__retarget_lock_release_recursive>
 80026b2:	4628      	mov	r0, r5
 80026b4:	bd70      	pop	{r4, r5, r6, pc}
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	da04      	bge.n	80026c4 <_puts_r+0x60>
 80026ba:	69a2      	ldr	r2, [r4, #24]
 80026bc:	429a      	cmp	r2, r3
 80026be:	dc17      	bgt.n	80026f0 <_puts_r+0x8c>
 80026c0:	290a      	cmp	r1, #10
 80026c2:	d015      	beq.n	80026f0 <_puts_r+0x8c>
 80026c4:	6823      	ldr	r3, [r4, #0]
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	6022      	str	r2, [r4, #0]
 80026ca:	7019      	strb	r1, [r3, #0]
 80026cc:	68a3      	ldr	r3, [r4, #8]
 80026ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80026d2:	3b01      	subs	r3, #1
 80026d4:	60a3      	str	r3, [r4, #8]
 80026d6:	2900      	cmp	r1, #0
 80026d8:	d1ed      	bne.n	80026b6 <_puts_r+0x52>
 80026da:	2b00      	cmp	r3, #0
 80026dc:	da11      	bge.n	8002702 <_puts_r+0x9e>
 80026de:	4622      	mov	r2, r4
 80026e0:	210a      	movs	r1, #10
 80026e2:	4628      	mov	r0, r5
 80026e4:	f000 f85f 	bl	80027a6 <__swbuf_r>
 80026e8:	3001      	adds	r0, #1
 80026ea:	d0d7      	beq.n	800269c <_puts_r+0x38>
 80026ec:	250a      	movs	r5, #10
 80026ee:	e7d7      	b.n	80026a0 <_puts_r+0x3c>
 80026f0:	4622      	mov	r2, r4
 80026f2:	4628      	mov	r0, r5
 80026f4:	f000 f857 	bl	80027a6 <__swbuf_r>
 80026f8:	3001      	adds	r0, #1
 80026fa:	d1e7      	bne.n	80026cc <_puts_r+0x68>
 80026fc:	e7ce      	b.n	800269c <_puts_r+0x38>
 80026fe:	3e01      	subs	r6, #1
 8002700:	e7e4      	b.n	80026cc <_puts_r+0x68>
 8002702:	6823      	ldr	r3, [r4, #0]
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	6022      	str	r2, [r4, #0]
 8002708:	220a      	movs	r2, #10
 800270a:	701a      	strb	r2, [r3, #0]
 800270c:	e7ee      	b.n	80026ec <_puts_r+0x88>
	...

08002710 <puts>:
 8002710:	4b02      	ldr	r3, [pc, #8]	@ (800271c <puts+0xc>)
 8002712:	4601      	mov	r1, r0
 8002714:	6818      	ldr	r0, [r3, #0]
 8002716:	f7ff bfa5 	b.w	8002664 <_puts_r>
 800271a:	bf00      	nop
 800271c:	20000020 	.word	0x20000020

08002720 <__sread>:
 8002720:	b510      	push	{r4, lr}
 8002722:	460c      	mov	r4, r1
 8002724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002728:	f000 f8fc 	bl	8002924 <_read_r>
 800272c:	2800      	cmp	r0, #0
 800272e:	bfab      	itete	ge
 8002730:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002732:	89a3      	ldrhlt	r3, [r4, #12]
 8002734:	181b      	addge	r3, r3, r0
 8002736:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800273a:	bfac      	ite	ge
 800273c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800273e:	81a3      	strhlt	r3, [r4, #12]
 8002740:	bd10      	pop	{r4, pc}

08002742 <__swrite>:
 8002742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002746:	461f      	mov	r7, r3
 8002748:	898b      	ldrh	r3, [r1, #12]
 800274a:	05db      	lsls	r3, r3, #23
 800274c:	4605      	mov	r5, r0
 800274e:	460c      	mov	r4, r1
 8002750:	4616      	mov	r6, r2
 8002752:	d505      	bpl.n	8002760 <__swrite+0x1e>
 8002754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002758:	2302      	movs	r3, #2
 800275a:	2200      	movs	r2, #0
 800275c:	f000 f8d0 	bl	8002900 <_lseek_r>
 8002760:	89a3      	ldrh	r3, [r4, #12]
 8002762:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002766:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800276a:	81a3      	strh	r3, [r4, #12]
 800276c:	4632      	mov	r2, r6
 800276e:	463b      	mov	r3, r7
 8002770:	4628      	mov	r0, r5
 8002772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002776:	f000 b8e7 	b.w	8002948 <_write_r>

0800277a <__sseek>:
 800277a:	b510      	push	{r4, lr}
 800277c:	460c      	mov	r4, r1
 800277e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002782:	f000 f8bd 	bl	8002900 <_lseek_r>
 8002786:	1c43      	adds	r3, r0, #1
 8002788:	89a3      	ldrh	r3, [r4, #12]
 800278a:	bf15      	itete	ne
 800278c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800278e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002792:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002796:	81a3      	strheq	r3, [r4, #12]
 8002798:	bf18      	it	ne
 800279a:	81a3      	strhne	r3, [r4, #12]
 800279c:	bd10      	pop	{r4, pc}

0800279e <__sclose>:
 800279e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027a2:	f000 b89d 	b.w	80028e0 <_close_r>

080027a6 <__swbuf_r>:
 80027a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a8:	460e      	mov	r6, r1
 80027aa:	4614      	mov	r4, r2
 80027ac:	4605      	mov	r5, r0
 80027ae:	b118      	cbz	r0, 80027b8 <__swbuf_r+0x12>
 80027b0:	6a03      	ldr	r3, [r0, #32]
 80027b2:	b90b      	cbnz	r3, 80027b8 <__swbuf_r+0x12>
 80027b4:	f7ff ff0e 	bl	80025d4 <__sinit>
 80027b8:	69a3      	ldr	r3, [r4, #24]
 80027ba:	60a3      	str	r3, [r4, #8]
 80027bc:	89a3      	ldrh	r3, [r4, #12]
 80027be:	071a      	lsls	r2, r3, #28
 80027c0:	d501      	bpl.n	80027c6 <__swbuf_r+0x20>
 80027c2:	6923      	ldr	r3, [r4, #16]
 80027c4:	b943      	cbnz	r3, 80027d8 <__swbuf_r+0x32>
 80027c6:	4621      	mov	r1, r4
 80027c8:	4628      	mov	r0, r5
 80027ca:	f000 f82b 	bl	8002824 <__swsetup_r>
 80027ce:	b118      	cbz	r0, 80027d8 <__swbuf_r+0x32>
 80027d0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80027d4:	4638      	mov	r0, r7
 80027d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027d8:	6823      	ldr	r3, [r4, #0]
 80027da:	6922      	ldr	r2, [r4, #16]
 80027dc:	1a98      	subs	r0, r3, r2
 80027de:	6963      	ldr	r3, [r4, #20]
 80027e0:	b2f6      	uxtb	r6, r6
 80027e2:	4283      	cmp	r3, r0
 80027e4:	4637      	mov	r7, r6
 80027e6:	dc05      	bgt.n	80027f4 <__swbuf_r+0x4e>
 80027e8:	4621      	mov	r1, r4
 80027ea:	4628      	mov	r0, r5
 80027ec:	f000 fd38 	bl	8003260 <_fflush_r>
 80027f0:	2800      	cmp	r0, #0
 80027f2:	d1ed      	bne.n	80027d0 <__swbuf_r+0x2a>
 80027f4:	68a3      	ldr	r3, [r4, #8]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	60a3      	str	r3, [r4, #8]
 80027fa:	6823      	ldr	r3, [r4, #0]
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	6022      	str	r2, [r4, #0]
 8002800:	701e      	strb	r6, [r3, #0]
 8002802:	6962      	ldr	r2, [r4, #20]
 8002804:	1c43      	adds	r3, r0, #1
 8002806:	429a      	cmp	r2, r3
 8002808:	d004      	beq.n	8002814 <__swbuf_r+0x6e>
 800280a:	89a3      	ldrh	r3, [r4, #12]
 800280c:	07db      	lsls	r3, r3, #31
 800280e:	d5e1      	bpl.n	80027d4 <__swbuf_r+0x2e>
 8002810:	2e0a      	cmp	r6, #10
 8002812:	d1df      	bne.n	80027d4 <__swbuf_r+0x2e>
 8002814:	4621      	mov	r1, r4
 8002816:	4628      	mov	r0, r5
 8002818:	f000 fd22 	bl	8003260 <_fflush_r>
 800281c:	2800      	cmp	r0, #0
 800281e:	d0d9      	beq.n	80027d4 <__swbuf_r+0x2e>
 8002820:	e7d6      	b.n	80027d0 <__swbuf_r+0x2a>
	...

08002824 <__swsetup_r>:
 8002824:	b538      	push	{r3, r4, r5, lr}
 8002826:	4b29      	ldr	r3, [pc, #164]	@ (80028cc <__swsetup_r+0xa8>)
 8002828:	4605      	mov	r5, r0
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	460c      	mov	r4, r1
 800282e:	b118      	cbz	r0, 8002838 <__swsetup_r+0x14>
 8002830:	6a03      	ldr	r3, [r0, #32]
 8002832:	b90b      	cbnz	r3, 8002838 <__swsetup_r+0x14>
 8002834:	f7ff fece 	bl	80025d4 <__sinit>
 8002838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800283c:	0719      	lsls	r1, r3, #28
 800283e:	d422      	bmi.n	8002886 <__swsetup_r+0x62>
 8002840:	06da      	lsls	r2, r3, #27
 8002842:	d407      	bmi.n	8002854 <__swsetup_r+0x30>
 8002844:	2209      	movs	r2, #9
 8002846:	602a      	str	r2, [r5, #0]
 8002848:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800284c:	81a3      	strh	r3, [r4, #12]
 800284e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002852:	e033      	b.n	80028bc <__swsetup_r+0x98>
 8002854:	0758      	lsls	r0, r3, #29
 8002856:	d512      	bpl.n	800287e <__swsetup_r+0x5a>
 8002858:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800285a:	b141      	cbz	r1, 800286e <__swsetup_r+0x4a>
 800285c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002860:	4299      	cmp	r1, r3
 8002862:	d002      	beq.n	800286a <__swsetup_r+0x46>
 8002864:	4628      	mov	r0, r5
 8002866:	f000 f8af 	bl	80029c8 <_free_r>
 800286a:	2300      	movs	r3, #0
 800286c:	6363      	str	r3, [r4, #52]	@ 0x34
 800286e:	89a3      	ldrh	r3, [r4, #12]
 8002870:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002874:	81a3      	strh	r3, [r4, #12]
 8002876:	2300      	movs	r3, #0
 8002878:	6063      	str	r3, [r4, #4]
 800287a:	6923      	ldr	r3, [r4, #16]
 800287c:	6023      	str	r3, [r4, #0]
 800287e:	89a3      	ldrh	r3, [r4, #12]
 8002880:	f043 0308 	orr.w	r3, r3, #8
 8002884:	81a3      	strh	r3, [r4, #12]
 8002886:	6923      	ldr	r3, [r4, #16]
 8002888:	b94b      	cbnz	r3, 800289e <__swsetup_r+0x7a>
 800288a:	89a3      	ldrh	r3, [r4, #12]
 800288c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002890:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002894:	d003      	beq.n	800289e <__swsetup_r+0x7a>
 8002896:	4621      	mov	r1, r4
 8002898:	4628      	mov	r0, r5
 800289a:	f000 fd2f 	bl	80032fc <__smakebuf_r>
 800289e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028a2:	f013 0201 	ands.w	r2, r3, #1
 80028a6:	d00a      	beq.n	80028be <__swsetup_r+0x9a>
 80028a8:	2200      	movs	r2, #0
 80028aa:	60a2      	str	r2, [r4, #8]
 80028ac:	6962      	ldr	r2, [r4, #20]
 80028ae:	4252      	negs	r2, r2
 80028b0:	61a2      	str	r2, [r4, #24]
 80028b2:	6922      	ldr	r2, [r4, #16]
 80028b4:	b942      	cbnz	r2, 80028c8 <__swsetup_r+0xa4>
 80028b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80028ba:	d1c5      	bne.n	8002848 <__swsetup_r+0x24>
 80028bc:	bd38      	pop	{r3, r4, r5, pc}
 80028be:	0799      	lsls	r1, r3, #30
 80028c0:	bf58      	it	pl
 80028c2:	6962      	ldrpl	r2, [r4, #20]
 80028c4:	60a2      	str	r2, [r4, #8]
 80028c6:	e7f4      	b.n	80028b2 <__swsetup_r+0x8e>
 80028c8:	2000      	movs	r0, #0
 80028ca:	e7f7      	b.n	80028bc <__swsetup_r+0x98>
 80028cc:	20000020 	.word	0x20000020

080028d0 <memset>:
 80028d0:	4402      	add	r2, r0
 80028d2:	4603      	mov	r3, r0
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d100      	bne.n	80028da <memset+0xa>
 80028d8:	4770      	bx	lr
 80028da:	f803 1b01 	strb.w	r1, [r3], #1
 80028de:	e7f9      	b.n	80028d4 <memset+0x4>

080028e0 <_close_r>:
 80028e0:	b538      	push	{r3, r4, r5, lr}
 80028e2:	4d06      	ldr	r5, [pc, #24]	@ (80028fc <_close_r+0x1c>)
 80028e4:	2300      	movs	r3, #0
 80028e6:	4604      	mov	r4, r0
 80028e8:	4608      	mov	r0, r1
 80028ea:	602b      	str	r3, [r5, #0]
 80028ec:	f7fe f83a 	bl	8000964 <_close>
 80028f0:	1c43      	adds	r3, r0, #1
 80028f2:	d102      	bne.n	80028fa <_close_r+0x1a>
 80028f4:	682b      	ldr	r3, [r5, #0]
 80028f6:	b103      	cbz	r3, 80028fa <_close_r+0x1a>
 80028f8:	6023      	str	r3, [r4, #0]
 80028fa:	bd38      	pop	{r3, r4, r5, pc}
 80028fc:	2000023c 	.word	0x2000023c

08002900 <_lseek_r>:
 8002900:	b538      	push	{r3, r4, r5, lr}
 8002902:	4d07      	ldr	r5, [pc, #28]	@ (8002920 <_lseek_r+0x20>)
 8002904:	4604      	mov	r4, r0
 8002906:	4608      	mov	r0, r1
 8002908:	4611      	mov	r1, r2
 800290a:	2200      	movs	r2, #0
 800290c:	602a      	str	r2, [r5, #0]
 800290e:	461a      	mov	r2, r3
 8002910:	f7fe f84f 	bl	80009b2 <_lseek>
 8002914:	1c43      	adds	r3, r0, #1
 8002916:	d102      	bne.n	800291e <_lseek_r+0x1e>
 8002918:	682b      	ldr	r3, [r5, #0]
 800291a:	b103      	cbz	r3, 800291e <_lseek_r+0x1e>
 800291c:	6023      	str	r3, [r4, #0]
 800291e:	bd38      	pop	{r3, r4, r5, pc}
 8002920:	2000023c 	.word	0x2000023c

08002924 <_read_r>:
 8002924:	b538      	push	{r3, r4, r5, lr}
 8002926:	4d07      	ldr	r5, [pc, #28]	@ (8002944 <_read_r+0x20>)
 8002928:	4604      	mov	r4, r0
 800292a:	4608      	mov	r0, r1
 800292c:	4611      	mov	r1, r2
 800292e:	2200      	movs	r2, #0
 8002930:	602a      	str	r2, [r5, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	f7fd fff9 	bl	800092a <_read>
 8002938:	1c43      	adds	r3, r0, #1
 800293a:	d102      	bne.n	8002942 <_read_r+0x1e>
 800293c:	682b      	ldr	r3, [r5, #0]
 800293e:	b103      	cbz	r3, 8002942 <_read_r+0x1e>
 8002940:	6023      	str	r3, [r4, #0]
 8002942:	bd38      	pop	{r3, r4, r5, pc}
 8002944:	2000023c 	.word	0x2000023c

08002948 <_write_r>:
 8002948:	b538      	push	{r3, r4, r5, lr}
 800294a:	4d07      	ldr	r5, [pc, #28]	@ (8002968 <_write_r+0x20>)
 800294c:	4604      	mov	r4, r0
 800294e:	4608      	mov	r0, r1
 8002950:	4611      	mov	r1, r2
 8002952:	2200      	movs	r2, #0
 8002954:	602a      	str	r2, [r5, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	f7fd ff2e 	bl	80007b8 <_write>
 800295c:	1c43      	adds	r3, r0, #1
 800295e:	d102      	bne.n	8002966 <_write_r+0x1e>
 8002960:	682b      	ldr	r3, [r5, #0]
 8002962:	b103      	cbz	r3, 8002966 <_write_r+0x1e>
 8002964:	6023      	str	r3, [r4, #0]
 8002966:	bd38      	pop	{r3, r4, r5, pc}
 8002968:	2000023c 	.word	0x2000023c

0800296c <__errno>:
 800296c:	4b01      	ldr	r3, [pc, #4]	@ (8002974 <__errno+0x8>)
 800296e:	6818      	ldr	r0, [r3, #0]
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	20000020 	.word	0x20000020

08002978 <__libc_init_array>:
 8002978:	b570      	push	{r4, r5, r6, lr}
 800297a:	4d0d      	ldr	r5, [pc, #52]	@ (80029b0 <__libc_init_array+0x38>)
 800297c:	4c0d      	ldr	r4, [pc, #52]	@ (80029b4 <__libc_init_array+0x3c>)
 800297e:	1b64      	subs	r4, r4, r5
 8002980:	10a4      	asrs	r4, r4, #2
 8002982:	2600      	movs	r6, #0
 8002984:	42a6      	cmp	r6, r4
 8002986:	d109      	bne.n	800299c <__libc_init_array+0x24>
 8002988:	4d0b      	ldr	r5, [pc, #44]	@ (80029b8 <__libc_init_array+0x40>)
 800298a:	4c0c      	ldr	r4, [pc, #48]	@ (80029bc <__libc_init_array+0x44>)
 800298c:	f000 fd24 	bl	80033d8 <_init>
 8002990:	1b64      	subs	r4, r4, r5
 8002992:	10a4      	asrs	r4, r4, #2
 8002994:	2600      	movs	r6, #0
 8002996:	42a6      	cmp	r6, r4
 8002998:	d105      	bne.n	80029a6 <__libc_init_array+0x2e>
 800299a:	bd70      	pop	{r4, r5, r6, pc}
 800299c:	f855 3b04 	ldr.w	r3, [r5], #4
 80029a0:	4798      	blx	r3
 80029a2:	3601      	adds	r6, #1
 80029a4:	e7ee      	b.n	8002984 <__libc_init_array+0xc>
 80029a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80029aa:	4798      	blx	r3
 80029ac:	3601      	adds	r6, #1
 80029ae:	e7f2      	b.n	8002996 <__libc_init_array+0x1e>
 80029b0:	080035cc 	.word	0x080035cc
 80029b4:	080035cc 	.word	0x080035cc
 80029b8:	080035cc 	.word	0x080035cc
 80029bc:	080035d0 	.word	0x080035d0

080029c0 <__retarget_lock_init_recursive>:
 80029c0:	4770      	bx	lr

080029c2 <__retarget_lock_acquire_recursive>:
 80029c2:	4770      	bx	lr

080029c4 <__retarget_lock_release_recursive>:
 80029c4:	4770      	bx	lr
	...

080029c8 <_free_r>:
 80029c8:	b538      	push	{r3, r4, r5, lr}
 80029ca:	4605      	mov	r5, r0
 80029cc:	2900      	cmp	r1, #0
 80029ce:	d041      	beq.n	8002a54 <_free_r+0x8c>
 80029d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029d4:	1f0c      	subs	r4, r1, #4
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	bfb8      	it	lt
 80029da:	18e4      	addlt	r4, r4, r3
 80029dc:	f000 f8e0 	bl	8002ba0 <__malloc_lock>
 80029e0:	4a1d      	ldr	r2, [pc, #116]	@ (8002a58 <_free_r+0x90>)
 80029e2:	6813      	ldr	r3, [r2, #0]
 80029e4:	b933      	cbnz	r3, 80029f4 <_free_r+0x2c>
 80029e6:	6063      	str	r3, [r4, #4]
 80029e8:	6014      	str	r4, [r2, #0]
 80029ea:	4628      	mov	r0, r5
 80029ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029f0:	f000 b8dc 	b.w	8002bac <__malloc_unlock>
 80029f4:	42a3      	cmp	r3, r4
 80029f6:	d908      	bls.n	8002a0a <_free_r+0x42>
 80029f8:	6820      	ldr	r0, [r4, #0]
 80029fa:	1821      	adds	r1, r4, r0
 80029fc:	428b      	cmp	r3, r1
 80029fe:	bf01      	itttt	eq
 8002a00:	6819      	ldreq	r1, [r3, #0]
 8002a02:	685b      	ldreq	r3, [r3, #4]
 8002a04:	1809      	addeq	r1, r1, r0
 8002a06:	6021      	streq	r1, [r4, #0]
 8002a08:	e7ed      	b.n	80029e6 <_free_r+0x1e>
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	b10b      	cbz	r3, 8002a14 <_free_r+0x4c>
 8002a10:	42a3      	cmp	r3, r4
 8002a12:	d9fa      	bls.n	8002a0a <_free_r+0x42>
 8002a14:	6811      	ldr	r1, [r2, #0]
 8002a16:	1850      	adds	r0, r2, r1
 8002a18:	42a0      	cmp	r0, r4
 8002a1a:	d10b      	bne.n	8002a34 <_free_r+0x6c>
 8002a1c:	6820      	ldr	r0, [r4, #0]
 8002a1e:	4401      	add	r1, r0
 8002a20:	1850      	adds	r0, r2, r1
 8002a22:	4283      	cmp	r3, r0
 8002a24:	6011      	str	r1, [r2, #0]
 8002a26:	d1e0      	bne.n	80029ea <_free_r+0x22>
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	6053      	str	r3, [r2, #4]
 8002a2e:	4408      	add	r0, r1
 8002a30:	6010      	str	r0, [r2, #0]
 8002a32:	e7da      	b.n	80029ea <_free_r+0x22>
 8002a34:	d902      	bls.n	8002a3c <_free_r+0x74>
 8002a36:	230c      	movs	r3, #12
 8002a38:	602b      	str	r3, [r5, #0]
 8002a3a:	e7d6      	b.n	80029ea <_free_r+0x22>
 8002a3c:	6820      	ldr	r0, [r4, #0]
 8002a3e:	1821      	adds	r1, r4, r0
 8002a40:	428b      	cmp	r3, r1
 8002a42:	bf04      	itt	eq
 8002a44:	6819      	ldreq	r1, [r3, #0]
 8002a46:	685b      	ldreq	r3, [r3, #4]
 8002a48:	6063      	str	r3, [r4, #4]
 8002a4a:	bf04      	itt	eq
 8002a4c:	1809      	addeq	r1, r1, r0
 8002a4e:	6021      	streq	r1, [r4, #0]
 8002a50:	6054      	str	r4, [r2, #4]
 8002a52:	e7ca      	b.n	80029ea <_free_r+0x22>
 8002a54:	bd38      	pop	{r3, r4, r5, pc}
 8002a56:	bf00      	nop
 8002a58:	20000248 	.word	0x20000248

08002a5c <sbrk_aligned>:
 8002a5c:	b570      	push	{r4, r5, r6, lr}
 8002a5e:	4e0f      	ldr	r6, [pc, #60]	@ (8002a9c <sbrk_aligned+0x40>)
 8002a60:	460c      	mov	r4, r1
 8002a62:	6831      	ldr	r1, [r6, #0]
 8002a64:	4605      	mov	r5, r0
 8002a66:	b911      	cbnz	r1, 8002a6e <sbrk_aligned+0x12>
 8002a68:	f000 fca6 	bl	80033b8 <_sbrk_r>
 8002a6c:	6030      	str	r0, [r6, #0]
 8002a6e:	4621      	mov	r1, r4
 8002a70:	4628      	mov	r0, r5
 8002a72:	f000 fca1 	bl	80033b8 <_sbrk_r>
 8002a76:	1c43      	adds	r3, r0, #1
 8002a78:	d103      	bne.n	8002a82 <sbrk_aligned+0x26>
 8002a7a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002a7e:	4620      	mov	r0, r4
 8002a80:	bd70      	pop	{r4, r5, r6, pc}
 8002a82:	1cc4      	adds	r4, r0, #3
 8002a84:	f024 0403 	bic.w	r4, r4, #3
 8002a88:	42a0      	cmp	r0, r4
 8002a8a:	d0f8      	beq.n	8002a7e <sbrk_aligned+0x22>
 8002a8c:	1a21      	subs	r1, r4, r0
 8002a8e:	4628      	mov	r0, r5
 8002a90:	f000 fc92 	bl	80033b8 <_sbrk_r>
 8002a94:	3001      	adds	r0, #1
 8002a96:	d1f2      	bne.n	8002a7e <sbrk_aligned+0x22>
 8002a98:	e7ef      	b.n	8002a7a <sbrk_aligned+0x1e>
 8002a9a:	bf00      	nop
 8002a9c:	20000244 	.word	0x20000244

08002aa0 <_malloc_r>:
 8002aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002aa4:	1ccd      	adds	r5, r1, #3
 8002aa6:	f025 0503 	bic.w	r5, r5, #3
 8002aaa:	3508      	adds	r5, #8
 8002aac:	2d0c      	cmp	r5, #12
 8002aae:	bf38      	it	cc
 8002ab0:	250c      	movcc	r5, #12
 8002ab2:	2d00      	cmp	r5, #0
 8002ab4:	4606      	mov	r6, r0
 8002ab6:	db01      	blt.n	8002abc <_malloc_r+0x1c>
 8002ab8:	42a9      	cmp	r1, r5
 8002aba:	d904      	bls.n	8002ac6 <_malloc_r+0x26>
 8002abc:	230c      	movs	r3, #12
 8002abe:	6033      	str	r3, [r6, #0]
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ac6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002b9c <_malloc_r+0xfc>
 8002aca:	f000 f869 	bl	8002ba0 <__malloc_lock>
 8002ace:	f8d8 3000 	ldr.w	r3, [r8]
 8002ad2:	461c      	mov	r4, r3
 8002ad4:	bb44      	cbnz	r4, 8002b28 <_malloc_r+0x88>
 8002ad6:	4629      	mov	r1, r5
 8002ad8:	4630      	mov	r0, r6
 8002ada:	f7ff ffbf 	bl	8002a5c <sbrk_aligned>
 8002ade:	1c43      	adds	r3, r0, #1
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	d158      	bne.n	8002b96 <_malloc_r+0xf6>
 8002ae4:	f8d8 4000 	ldr.w	r4, [r8]
 8002ae8:	4627      	mov	r7, r4
 8002aea:	2f00      	cmp	r7, #0
 8002aec:	d143      	bne.n	8002b76 <_malloc_r+0xd6>
 8002aee:	2c00      	cmp	r4, #0
 8002af0:	d04b      	beq.n	8002b8a <_malloc_r+0xea>
 8002af2:	6823      	ldr	r3, [r4, #0]
 8002af4:	4639      	mov	r1, r7
 8002af6:	4630      	mov	r0, r6
 8002af8:	eb04 0903 	add.w	r9, r4, r3
 8002afc:	f000 fc5c 	bl	80033b8 <_sbrk_r>
 8002b00:	4581      	cmp	r9, r0
 8002b02:	d142      	bne.n	8002b8a <_malloc_r+0xea>
 8002b04:	6821      	ldr	r1, [r4, #0]
 8002b06:	1a6d      	subs	r5, r5, r1
 8002b08:	4629      	mov	r1, r5
 8002b0a:	4630      	mov	r0, r6
 8002b0c:	f7ff ffa6 	bl	8002a5c <sbrk_aligned>
 8002b10:	3001      	adds	r0, #1
 8002b12:	d03a      	beq.n	8002b8a <_malloc_r+0xea>
 8002b14:	6823      	ldr	r3, [r4, #0]
 8002b16:	442b      	add	r3, r5
 8002b18:	6023      	str	r3, [r4, #0]
 8002b1a:	f8d8 3000 	ldr.w	r3, [r8]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	bb62      	cbnz	r2, 8002b7c <_malloc_r+0xdc>
 8002b22:	f8c8 7000 	str.w	r7, [r8]
 8002b26:	e00f      	b.n	8002b48 <_malloc_r+0xa8>
 8002b28:	6822      	ldr	r2, [r4, #0]
 8002b2a:	1b52      	subs	r2, r2, r5
 8002b2c:	d420      	bmi.n	8002b70 <_malloc_r+0xd0>
 8002b2e:	2a0b      	cmp	r2, #11
 8002b30:	d917      	bls.n	8002b62 <_malloc_r+0xc2>
 8002b32:	1961      	adds	r1, r4, r5
 8002b34:	42a3      	cmp	r3, r4
 8002b36:	6025      	str	r5, [r4, #0]
 8002b38:	bf18      	it	ne
 8002b3a:	6059      	strne	r1, [r3, #4]
 8002b3c:	6863      	ldr	r3, [r4, #4]
 8002b3e:	bf08      	it	eq
 8002b40:	f8c8 1000 	streq.w	r1, [r8]
 8002b44:	5162      	str	r2, [r4, r5]
 8002b46:	604b      	str	r3, [r1, #4]
 8002b48:	4630      	mov	r0, r6
 8002b4a:	f000 f82f 	bl	8002bac <__malloc_unlock>
 8002b4e:	f104 000b 	add.w	r0, r4, #11
 8002b52:	1d23      	adds	r3, r4, #4
 8002b54:	f020 0007 	bic.w	r0, r0, #7
 8002b58:	1ac2      	subs	r2, r0, r3
 8002b5a:	bf1c      	itt	ne
 8002b5c:	1a1b      	subne	r3, r3, r0
 8002b5e:	50a3      	strne	r3, [r4, r2]
 8002b60:	e7af      	b.n	8002ac2 <_malloc_r+0x22>
 8002b62:	6862      	ldr	r2, [r4, #4]
 8002b64:	42a3      	cmp	r3, r4
 8002b66:	bf0c      	ite	eq
 8002b68:	f8c8 2000 	streq.w	r2, [r8]
 8002b6c:	605a      	strne	r2, [r3, #4]
 8002b6e:	e7eb      	b.n	8002b48 <_malloc_r+0xa8>
 8002b70:	4623      	mov	r3, r4
 8002b72:	6864      	ldr	r4, [r4, #4]
 8002b74:	e7ae      	b.n	8002ad4 <_malloc_r+0x34>
 8002b76:	463c      	mov	r4, r7
 8002b78:	687f      	ldr	r7, [r7, #4]
 8002b7a:	e7b6      	b.n	8002aea <_malloc_r+0x4a>
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	42a3      	cmp	r3, r4
 8002b82:	d1fb      	bne.n	8002b7c <_malloc_r+0xdc>
 8002b84:	2300      	movs	r3, #0
 8002b86:	6053      	str	r3, [r2, #4]
 8002b88:	e7de      	b.n	8002b48 <_malloc_r+0xa8>
 8002b8a:	230c      	movs	r3, #12
 8002b8c:	6033      	str	r3, [r6, #0]
 8002b8e:	4630      	mov	r0, r6
 8002b90:	f000 f80c 	bl	8002bac <__malloc_unlock>
 8002b94:	e794      	b.n	8002ac0 <_malloc_r+0x20>
 8002b96:	6005      	str	r5, [r0, #0]
 8002b98:	e7d6      	b.n	8002b48 <_malloc_r+0xa8>
 8002b9a:	bf00      	nop
 8002b9c:	20000248 	.word	0x20000248

08002ba0 <__malloc_lock>:
 8002ba0:	4801      	ldr	r0, [pc, #4]	@ (8002ba8 <__malloc_lock+0x8>)
 8002ba2:	f7ff bf0e 	b.w	80029c2 <__retarget_lock_acquire_recursive>
 8002ba6:	bf00      	nop
 8002ba8:	20000240 	.word	0x20000240

08002bac <__malloc_unlock>:
 8002bac:	4801      	ldr	r0, [pc, #4]	@ (8002bb4 <__malloc_unlock+0x8>)
 8002bae:	f7ff bf09 	b.w	80029c4 <__retarget_lock_release_recursive>
 8002bb2:	bf00      	nop
 8002bb4:	20000240 	.word	0x20000240

08002bb8 <__sfputc_r>:
 8002bb8:	6893      	ldr	r3, [r2, #8]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	b410      	push	{r4}
 8002bc0:	6093      	str	r3, [r2, #8]
 8002bc2:	da08      	bge.n	8002bd6 <__sfputc_r+0x1e>
 8002bc4:	6994      	ldr	r4, [r2, #24]
 8002bc6:	42a3      	cmp	r3, r4
 8002bc8:	db01      	blt.n	8002bce <__sfputc_r+0x16>
 8002bca:	290a      	cmp	r1, #10
 8002bcc:	d103      	bne.n	8002bd6 <__sfputc_r+0x1e>
 8002bce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002bd2:	f7ff bde8 	b.w	80027a6 <__swbuf_r>
 8002bd6:	6813      	ldr	r3, [r2, #0]
 8002bd8:	1c58      	adds	r0, r3, #1
 8002bda:	6010      	str	r0, [r2, #0]
 8002bdc:	7019      	strb	r1, [r3, #0]
 8002bde:	4608      	mov	r0, r1
 8002be0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <__sfputs_r>:
 8002be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be8:	4606      	mov	r6, r0
 8002bea:	460f      	mov	r7, r1
 8002bec:	4614      	mov	r4, r2
 8002bee:	18d5      	adds	r5, r2, r3
 8002bf0:	42ac      	cmp	r4, r5
 8002bf2:	d101      	bne.n	8002bf8 <__sfputs_r+0x12>
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	e007      	b.n	8002c08 <__sfputs_r+0x22>
 8002bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bfc:	463a      	mov	r2, r7
 8002bfe:	4630      	mov	r0, r6
 8002c00:	f7ff ffda 	bl	8002bb8 <__sfputc_r>
 8002c04:	1c43      	adds	r3, r0, #1
 8002c06:	d1f3      	bne.n	8002bf0 <__sfputs_r+0xa>
 8002c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c0c <_vfiprintf_r>:
 8002c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c10:	460d      	mov	r5, r1
 8002c12:	b09d      	sub	sp, #116	@ 0x74
 8002c14:	4614      	mov	r4, r2
 8002c16:	4698      	mov	r8, r3
 8002c18:	4606      	mov	r6, r0
 8002c1a:	b118      	cbz	r0, 8002c24 <_vfiprintf_r+0x18>
 8002c1c:	6a03      	ldr	r3, [r0, #32]
 8002c1e:	b90b      	cbnz	r3, 8002c24 <_vfiprintf_r+0x18>
 8002c20:	f7ff fcd8 	bl	80025d4 <__sinit>
 8002c24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002c26:	07d9      	lsls	r1, r3, #31
 8002c28:	d405      	bmi.n	8002c36 <_vfiprintf_r+0x2a>
 8002c2a:	89ab      	ldrh	r3, [r5, #12]
 8002c2c:	059a      	lsls	r2, r3, #22
 8002c2e:	d402      	bmi.n	8002c36 <_vfiprintf_r+0x2a>
 8002c30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002c32:	f7ff fec6 	bl	80029c2 <__retarget_lock_acquire_recursive>
 8002c36:	89ab      	ldrh	r3, [r5, #12]
 8002c38:	071b      	lsls	r3, r3, #28
 8002c3a:	d501      	bpl.n	8002c40 <_vfiprintf_r+0x34>
 8002c3c:	692b      	ldr	r3, [r5, #16]
 8002c3e:	b99b      	cbnz	r3, 8002c68 <_vfiprintf_r+0x5c>
 8002c40:	4629      	mov	r1, r5
 8002c42:	4630      	mov	r0, r6
 8002c44:	f7ff fdee 	bl	8002824 <__swsetup_r>
 8002c48:	b170      	cbz	r0, 8002c68 <_vfiprintf_r+0x5c>
 8002c4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002c4c:	07dc      	lsls	r4, r3, #31
 8002c4e:	d504      	bpl.n	8002c5a <_vfiprintf_r+0x4e>
 8002c50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c54:	b01d      	add	sp, #116	@ 0x74
 8002c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c5a:	89ab      	ldrh	r3, [r5, #12]
 8002c5c:	0598      	lsls	r0, r3, #22
 8002c5e:	d4f7      	bmi.n	8002c50 <_vfiprintf_r+0x44>
 8002c60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002c62:	f7ff feaf 	bl	80029c4 <__retarget_lock_release_recursive>
 8002c66:	e7f3      	b.n	8002c50 <_vfiprintf_r+0x44>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c6c:	2320      	movs	r3, #32
 8002c6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002c72:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c76:	2330      	movs	r3, #48	@ 0x30
 8002c78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002e28 <_vfiprintf_r+0x21c>
 8002c7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002c80:	f04f 0901 	mov.w	r9, #1
 8002c84:	4623      	mov	r3, r4
 8002c86:	469a      	mov	sl, r3
 8002c88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c8c:	b10a      	cbz	r2, 8002c92 <_vfiprintf_r+0x86>
 8002c8e:	2a25      	cmp	r2, #37	@ 0x25
 8002c90:	d1f9      	bne.n	8002c86 <_vfiprintf_r+0x7a>
 8002c92:	ebba 0b04 	subs.w	fp, sl, r4
 8002c96:	d00b      	beq.n	8002cb0 <_vfiprintf_r+0xa4>
 8002c98:	465b      	mov	r3, fp
 8002c9a:	4622      	mov	r2, r4
 8002c9c:	4629      	mov	r1, r5
 8002c9e:	4630      	mov	r0, r6
 8002ca0:	f7ff ffa1 	bl	8002be6 <__sfputs_r>
 8002ca4:	3001      	adds	r0, #1
 8002ca6:	f000 80a7 	beq.w	8002df8 <_vfiprintf_r+0x1ec>
 8002caa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002cac:	445a      	add	r2, fp
 8002cae:	9209      	str	r2, [sp, #36]	@ 0x24
 8002cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 809f 	beq.w	8002df8 <_vfiprintf_r+0x1ec>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002cc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002cc4:	f10a 0a01 	add.w	sl, sl, #1
 8002cc8:	9304      	str	r3, [sp, #16]
 8002cca:	9307      	str	r3, [sp, #28]
 8002ccc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002cd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8002cd2:	4654      	mov	r4, sl
 8002cd4:	2205      	movs	r2, #5
 8002cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cda:	4853      	ldr	r0, [pc, #332]	@ (8002e28 <_vfiprintf_r+0x21c>)
 8002cdc:	f7fd faa0 	bl	8000220 <memchr>
 8002ce0:	9a04      	ldr	r2, [sp, #16]
 8002ce2:	b9d8      	cbnz	r0, 8002d1c <_vfiprintf_r+0x110>
 8002ce4:	06d1      	lsls	r1, r2, #27
 8002ce6:	bf44      	itt	mi
 8002ce8:	2320      	movmi	r3, #32
 8002cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002cee:	0713      	lsls	r3, r2, #28
 8002cf0:	bf44      	itt	mi
 8002cf2:	232b      	movmi	r3, #43	@ 0x2b
 8002cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8002cfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8002cfe:	d015      	beq.n	8002d2c <_vfiprintf_r+0x120>
 8002d00:	9a07      	ldr	r2, [sp, #28]
 8002d02:	4654      	mov	r4, sl
 8002d04:	2000      	movs	r0, #0
 8002d06:	f04f 0c0a 	mov.w	ip, #10
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d10:	3b30      	subs	r3, #48	@ 0x30
 8002d12:	2b09      	cmp	r3, #9
 8002d14:	d94b      	bls.n	8002dae <_vfiprintf_r+0x1a2>
 8002d16:	b1b0      	cbz	r0, 8002d46 <_vfiprintf_r+0x13a>
 8002d18:	9207      	str	r2, [sp, #28]
 8002d1a:	e014      	b.n	8002d46 <_vfiprintf_r+0x13a>
 8002d1c:	eba0 0308 	sub.w	r3, r0, r8
 8002d20:	fa09 f303 	lsl.w	r3, r9, r3
 8002d24:	4313      	orrs	r3, r2
 8002d26:	9304      	str	r3, [sp, #16]
 8002d28:	46a2      	mov	sl, r4
 8002d2a:	e7d2      	b.n	8002cd2 <_vfiprintf_r+0xc6>
 8002d2c:	9b03      	ldr	r3, [sp, #12]
 8002d2e:	1d19      	adds	r1, r3, #4
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	9103      	str	r1, [sp, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	bfbb      	ittet	lt
 8002d38:	425b      	neglt	r3, r3
 8002d3a:	f042 0202 	orrlt.w	r2, r2, #2
 8002d3e:	9307      	strge	r3, [sp, #28]
 8002d40:	9307      	strlt	r3, [sp, #28]
 8002d42:	bfb8      	it	lt
 8002d44:	9204      	strlt	r2, [sp, #16]
 8002d46:	7823      	ldrb	r3, [r4, #0]
 8002d48:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d4a:	d10a      	bne.n	8002d62 <_vfiprintf_r+0x156>
 8002d4c:	7863      	ldrb	r3, [r4, #1]
 8002d4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d50:	d132      	bne.n	8002db8 <_vfiprintf_r+0x1ac>
 8002d52:	9b03      	ldr	r3, [sp, #12]
 8002d54:	1d1a      	adds	r2, r3, #4
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	9203      	str	r2, [sp, #12]
 8002d5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002d5e:	3402      	adds	r4, #2
 8002d60:	9305      	str	r3, [sp, #20]
 8002d62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002e38 <_vfiprintf_r+0x22c>
 8002d66:	7821      	ldrb	r1, [r4, #0]
 8002d68:	2203      	movs	r2, #3
 8002d6a:	4650      	mov	r0, sl
 8002d6c:	f7fd fa58 	bl	8000220 <memchr>
 8002d70:	b138      	cbz	r0, 8002d82 <_vfiprintf_r+0x176>
 8002d72:	9b04      	ldr	r3, [sp, #16]
 8002d74:	eba0 000a 	sub.w	r0, r0, sl
 8002d78:	2240      	movs	r2, #64	@ 0x40
 8002d7a:	4082      	lsls	r2, r0
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	3401      	adds	r4, #1
 8002d80:	9304      	str	r3, [sp, #16]
 8002d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d86:	4829      	ldr	r0, [pc, #164]	@ (8002e2c <_vfiprintf_r+0x220>)
 8002d88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002d8c:	2206      	movs	r2, #6
 8002d8e:	f7fd fa47 	bl	8000220 <memchr>
 8002d92:	2800      	cmp	r0, #0
 8002d94:	d03f      	beq.n	8002e16 <_vfiprintf_r+0x20a>
 8002d96:	4b26      	ldr	r3, [pc, #152]	@ (8002e30 <_vfiprintf_r+0x224>)
 8002d98:	bb1b      	cbnz	r3, 8002de2 <_vfiprintf_r+0x1d6>
 8002d9a:	9b03      	ldr	r3, [sp, #12]
 8002d9c:	3307      	adds	r3, #7
 8002d9e:	f023 0307 	bic.w	r3, r3, #7
 8002da2:	3308      	adds	r3, #8
 8002da4:	9303      	str	r3, [sp, #12]
 8002da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002da8:	443b      	add	r3, r7
 8002daa:	9309      	str	r3, [sp, #36]	@ 0x24
 8002dac:	e76a      	b.n	8002c84 <_vfiprintf_r+0x78>
 8002dae:	fb0c 3202 	mla	r2, ip, r2, r3
 8002db2:	460c      	mov	r4, r1
 8002db4:	2001      	movs	r0, #1
 8002db6:	e7a8      	b.n	8002d0a <_vfiprintf_r+0xfe>
 8002db8:	2300      	movs	r3, #0
 8002dba:	3401      	adds	r4, #1
 8002dbc:	9305      	str	r3, [sp, #20]
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	f04f 0c0a 	mov.w	ip, #10
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002dca:	3a30      	subs	r2, #48	@ 0x30
 8002dcc:	2a09      	cmp	r2, #9
 8002dce:	d903      	bls.n	8002dd8 <_vfiprintf_r+0x1cc>
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0c6      	beq.n	8002d62 <_vfiprintf_r+0x156>
 8002dd4:	9105      	str	r1, [sp, #20]
 8002dd6:	e7c4      	b.n	8002d62 <_vfiprintf_r+0x156>
 8002dd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ddc:	4604      	mov	r4, r0
 8002dde:	2301      	movs	r3, #1
 8002de0:	e7f0      	b.n	8002dc4 <_vfiprintf_r+0x1b8>
 8002de2:	ab03      	add	r3, sp, #12
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	462a      	mov	r2, r5
 8002de8:	4b12      	ldr	r3, [pc, #72]	@ (8002e34 <_vfiprintf_r+0x228>)
 8002dea:	a904      	add	r1, sp, #16
 8002dec:	4630      	mov	r0, r6
 8002dee:	f3af 8000 	nop.w
 8002df2:	4607      	mov	r7, r0
 8002df4:	1c78      	adds	r0, r7, #1
 8002df6:	d1d6      	bne.n	8002da6 <_vfiprintf_r+0x19a>
 8002df8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002dfa:	07d9      	lsls	r1, r3, #31
 8002dfc:	d405      	bmi.n	8002e0a <_vfiprintf_r+0x1fe>
 8002dfe:	89ab      	ldrh	r3, [r5, #12]
 8002e00:	059a      	lsls	r2, r3, #22
 8002e02:	d402      	bmi.n	8002e0a <_vfiprintf_r+0x1fe>
 8002e04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002e06:	f7ff fddd 	bl	80029c4 <__retarget_lock_release_recursive>
 8002e0a:	89ab      	ldrh	r3, [r5, #12]
 8002e0c:	065b      	lsls	r3, r3, #25
 8002e0e:	f53f af1f 	bmi.w	8002c50 <_vfiprintf_r+0x44>
 8002e12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002e14:	e71e      	b.n	8002c54 <_vfiprintf_r+0x48>
 8002e16:	ab03      	add	r3, sp, #12
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	462a      	mov	r2, r5
 8002e1c:	4b05      	ldr	r3, [pc, #20]	@ (8002e34 <_vfiprintf_r+0x228>)
 8002e1e:	a904      	add	r1, sp, #16
 8002e20:	4630      	mov	r0, r6
 8002e22:	f000 f879 	bl	8002f18 <_printf_i>
 8002e26:	e7e4      	b.n	8002df2 <_vfiprintf_r+0x1e6>
 8002e28:	08003590 	.word	0x08003590
 8002e2c:	0800359a 	.word	0x0800359a
 8002e30:	00000000 	.word	0x00000000
 8002e34:	08002be7 	.word	0x08002be7
 8002e38:	08003596 	.word	0x08003596

08002e3c <_printf_common>:
 8002e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e40:	4616      	mov	r6, r2
 8002e42:	4698      	mov	r8, r3
 8002e44:	688a      	ldr	r2, [r1, #8]
 8002e46:	690b      	ldr	r3, [r1, #16]
 8002e48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	bfb8      	it	lt
 8002e50:	4613      	movlt	r3, r2
 8002e52:	6033      	str	r3, [r6, #0]
 8002e54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002e58:	4607      	mov	r7, r0
 8002e5a:	460c      	mov	r4, r1
 8002e5c:	b10a      	cbz	r2, 8002e62 <_printf_common+0x26>
 8002e5e:	3301      	adds	r3, #1
 8002e60:	6033      	str	r3, [r6, #0]
 8002e62:	6823      	ldr	r3, [r4, #0]
 8002e64:	0699      	lsls	r1, r3, #26
 8002e66:	bf42      	ittt	mi
 8002e68:	6833      	ldrmi	r3, [r6, #0]
 8002e6a:	3302      	addmi	r3, #2
 8002e6c:	6033      	strmi	r3, [r6, #0]
 8002e6e:	6825      	ldr	r5, [r4, #0]
 8002e70:	f015 0506 	ands.w	r5, r5, #6
 8002e74:	d106      	bne.n	8002e84 <_printf_common+0x48>
 8002e76:	f104 0a19 	add.w	sl, r4, #25
 8002e7a:	68e3      	ldr	r3, [r4, #12]
 8002e7c:	6832      	ldr	r2, [r6, #0]
 8002e7e:	1a9b      	subs	r3, r3, r2
 8002e80:	42ab      	cmp	r3, r5
 8002e82:	dc26      	bgt.n	8002ed2 <_printf_common+0x96>
 8002e84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002e88:	6822      	ldr	r2, [r4, #0]
 8002e8a:	3b00      	subs	r3, #0
 8002e8c:	bf18      	it	ne
 8002e8e:	2301      	movne	r3, #1
 8002e90:	0692      	lsls	r2, r2, #26
 8002e92:	d42b      	bmi.n	8002eec <_printf_common+0xb0>
 8002e94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002e98:	4641      	mov	r1, r8
 8002e9a:	4638      	mov	r0, r7
 8002e9c:	47c8      	blx	r9
 8002e9e:	3001      	adds	r0, #1
 8002ea0:	d01e      	beq.n	8002ee0 <_printf_common+0xa4>
 8002ea2:	6823      	ldr	r3, [r4, #0]
 8002ea4:	6922      	ldr	r2, [r4, #16]
 8002ea6:	f003 0306 	and.w	r3, r3, #6
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	bf02      	ittt	eq
 8002eae:	68e5      	ldreq	r5, [r4, #12]
 8002eb0:	6833      	ldreq	r3, [r6, #0]
 8002eb2:	1aed      	subeq	r5, r5, r3
 8002eb4:	68a3      	ldr	r3, [r4, #8]
 8002eb6:	bf0c      	ite	eq
 8002eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ebc:	2500      	movne	r5, #0
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	bfc4      	itt	gt
 8002ec2:	1a9b      	subgt	r3, r3, r2
 8002ec4:	18ed      	addgt	r5, r5, r3
 8002ec6:	2600      	movs	r6, #0
 8002ec8:	341a      	adds	r4, #26
 8002eca:	42b5      	cmp	r5, r6
 8002ecc:	d11a      	bne.n	8002f04 <_printf_common+0xc8>
 8002ece:	2000      	movs	r0, #0
 8002ed0:	e008      	b.n	8002ee4 <_printf_common+0xa8>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	4652      	mov	r2, sl
 8002ed6:	4641      	mov	r1, r8
 8002ed8:	4638      	mov	r0, r7
 8002eda:	47c8      	blx	r9
 8002edc:	3001      	adds	r0, #1
 8002ede:	d103      	bne.n	8002ee8 <_printf_common+0xac>
 8002ee0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ee8:	3501      	adds	r5, #1
 8002eea:	e7c6      	b.n	8002e7a <_printf_common+0x3e>
 8002eec:	18e1      	adds	r1, r4, r3
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	2030      	movs	r0, #48	@ 0x30
 8002ef2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002ef6:	4422      	add	r2, r4
 8002ef8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002efc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002f00:	3302      	adds	r3, #2
 8002f02:	e7c7      	b.n	8002e94 <_printf_common+0x58>
 8002f04:	2301      	movs	r3, #1
 8002f06:	4622      	mov	r2, r4
 8002f08:	4641      	mov	r1, r8
 8002f0a:	4638      	mov	r0, r7
 8002f0c:	47c8      	blx	r9
 8002f0e:	3001      	adds	r0, #1
 8002f10:	d0e6      	beq.n	8002ee0 <_printf_common+0xa4>
 8002f12:	3601      	adds	r6, #1
 8002f14:	e7d9      	b.n	8002eca <_printf_common+0x8e>
	...

08002f18 <_printf_i>:
 8002f18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f1c:	7e0f      	ldrb	r7, [r1, #24]
 8002f1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002f20:	2f78      	cmp	r7, #120	@ 0x78
 8002f22:	4691      	mov	r9, r2
 8002f24:	4680      	mov	r8, r0
 8002f26:	460c      	mov	r4, r1
 8002f28:	469a      	mov	sl, r3
 8002f2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002f2e:	d807      	bhi.n	8002f40 <_printf_i+0x28>
 8002f30:	2f62      	cmp	r7, #98	@ 0x62
 8002f32:	d80a      	bhi.n	8002f4a <_printf_i+0x32>
 8002f34:	2f00      	cmp	r7, #0
 8002f36:	f000 80d2 	beq.w	80030de <_printf_i+0x1c6>
 8002f3a:	2f58      	cmp	r7, #88	@ 0x58
 8002f3c:	f000 80b9 	beq.w	80030b2 <_printf_i+0x19a>
 8002f40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002f44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002f48:	e03a      	b.n	8002fc0 <_printf_i+0xa8>
 8002f4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002f4e:	2b15      	cmp	r3, #21
 8002f50:	d8f6      	bhi.n	8002f40 <_printf_i+0x28>
 8002f52:	a101      	add	r1, pc, #4	@ (adr r1, 8002f58 <_printf_i+0x40>)
 8002f54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f58:	08002fb1 	.word	0x08002fb1
 8002f5c:	08002fc5 	.word	0x08002fc5
 8002f60:	08002f41 	.word	0x08002f41
 8002f64:	08002f41 	.word	0x08002f41
 8002f68:	08002f41 	.word	0x08002f41
 8002f6c:	08002f41 	.word	0x08002f41
 8002f70:	08002fc5 	.word	0x08002fc5
 8002f74:	08002f41 	.word	0x08002f41
 8002f78:	08002f41 	.word	0x08002f41
 8002f7c:	08002f41 	.word	0x08002f41
 8002f80:	08002f41 	.word	0x08002f41
 8002f84:	080030c5 	.word	0x080030c5
 8002f88:	08002fef 	.word	0x08002fef
 8002f8c:	0800307f 	.word	0x0800307f
 8002f90:	08002f41 	.word	0x08002f41
 8002f94:	08002f41 	.word	0x08002f41
 8002f98:	080030e7 	.word	0x080030e7
 8002f9c:	08002f41 	.word	0x08002f41
 8002fa0:	08002fef 	.word	0x08002fef
 8002fa4:	08002f41 	.word	0x08002f41
 8002fa8:	08002f41 	.word	0x08002f41
 8002fac:	08003087 	.word	0x08003087
 8002fb0:	6833      	ldr	r3, [r6, #0]
 8002fb2:	1d1a      	adds	r2, r3, #4
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6032      	str	r2, [r6, #0]
 8002fb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002fbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e09d      	b.n	8003100 <_printf_i+0x1e8>
 8002fc4:	6833      	ldr	r3, [r6, #0]
 8002fc6:	6820      	ldr	r0, [r4, #0]
 8002fc8:	1d19      	adds	r1, r3, #4
 8002fca:	6031      	str	r1, [r6, #0]
 8002fcc:	0606      	lsls	r6, r0, #24
 8002fce:	d501      	bpl.n	8002fd4 <_printf_i+0xbc>
 8002fd0:	681d      	ldr	r5, [r3, #0]
 8002fd2:	e003      	b.n	8002fdc <_printf_i+0xc4>
 8002fd4:	0645      	lsls	r5, r0, #25
 8002fd6:	d5fb      	bpl.n	8002fd0 <_printf_i+0xb8>
 8002fd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002fdc:	2d00      	cmp	r5, #0
 8002fde:	da03      	bge.n	8002fe8 <_printf_i+0xd0>
 8002fe0:	232d      	movs	r3, #45	@ 0x2d
 8002fe2:	426d      	negs	r5, r5
 8002fe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002fe8:	4859      	ldr	r0, [pc, #356]	@ (8003150 <_printf_i+0x238>)
 8002fea:	230a      	movs	r3, #10
 8002fec:	e011      	b.n	8003012 <_printf_i+0xfa>
 8002fee:	6821      	ldr	r1, [r4, #0]
 8002ff0:	6833      	ldr	r3, [r6, #0]
 8002ff2:	0608      	lsls	r0, r1, #24
 8002ff4:	f853 5b04 	ldr.w	r5, [r3], #4
 8002ff8:	d402      	bmi.n	8003000 <_printf_i+0xe8>
 8002ffa:	0649      	lsls	r1, r1, #25
 8002ffc:	bf48      	it	mi
 8002ffe:	b2ad      	uxthmi	r5, r5
 8003000:	2f6f      	cmp	r7, #111	@ 0x6f
 8003002:	4853      	ldr	r0, [pc, #332]	@ (8003150 <_printf_i+0x238>)
 8003004:	6033      	str	r3, [r6, #0]
 8003006:	bf14      	ite	ne
 8003008:	230a      	movne	r3, #10
 800300a:	2308      	moveq	r3, #8
 800300c:	2100      	movs	r1, #0
 800300e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003012:	6866      	ldr	r6, [r4, #4]
 8003014:	60a6      	str	r6, [r4, #8]
 8003016:	2e00      	cmp	r6, #0
 8003018:	bfa2      	ittt	ge
 800301a:	6821      	ldrge	r1, [r4, #0]
 800301c:	f021 0104 	bicge.w	r1, r1, #4
 8003020:	6021      	strge	r1, [r4, #0]
 8003022:	b90d      	cbnz	r5, 8003028 <_printf_i+0x110>
 8003024:	2e00      	cmp	r6, #0
 8003026:	d04b      	beq.n	80030c0 <_printf_i+0x1a8>
 8003028:	4616      	mov	r6, r2
 800302a:	fbb5 f1f3 	udiv	r1, r5, r3
 800302e:	fb03 5711 	mls	r7, r3, r1, r5
 8003032:	5dc7      	ldrb	r7, [r0, r7]
 8003034:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003038:	462f      	mov	r7, r5
 800303a:	42bb      	cmp	r3, r7
 800303c:	460d      	mov	r5, r1
 800303e:	d9f4      	bls.n	800302a <_printf_i+0x112>
 8003040:	2b08      	cmp	r3, #8
 8003042:	d10b      	bne.n	800305c <_printf_i+0x144>
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	07df      	lsls	r7, r3, #31
 8003048:	d508      	bpl.n	800305c <_printf_i+0x144>
 800304a:	6923      	ldr	r3, [r4, #16]
 800304c:	6861      	ldr	r1, [r4, #4]
 800304e:	4299      	cmp	r1, r3
 8003050:	bfde      	ittt	le
 8003052:	2330      	movle	r3, #48	@ 0x30
 8003054:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003058:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800305c:	1b92      	subs	r2, r2, r6
 800305e:	6122      	str	r2, [r4, #16]
 8003060:	f8cd a000 	str.w	sl, [sp]
 8003064:	464b      	mov	r3, r9
 8003066:	aa03      	add	r2, sp, #12
 8003068:	4621      	mov	r1, r4
 800306a:	4640      	mov	r0, r8
 800306c:	f7ff fee6 	bl	8002e3c <_printf_common>
 8003070:	3001      	adds	r0, #1
 8003072:	d14a      	bne.n	800310a <_printf_i+0x1f2>
 8003074:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003078:	b004      	add	sp, #16
 800307a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800307e:	6823      	ldr	r3, [r4, #0]
 8003080:	f043 0320 	orr.w	r3, r3, #32
 8003084:	6023      	str	r3, [r4, #0]
 8003086:	4833      	ldr	r0, [pc, #204]	@ (8003154 <_printf_i+0x23c>)
 8003088:	2778      	movs	r7, #120	@ 0x78
 800308a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800308e:	6823      	ldr	r3, [r4, #0]
 8003090:	6831      	ldr	r1, [r6, #0]
 8003092:	061f      	lsls	r7, r3, #24
 8003094:	f851 5b04 	ldr.w	r5, [r1], #4
 8003098:	d402      	bmi.n	80030a0 <_printf_i+0x188>
 800309a:	065f      	lsls	r7, r3, #25
 800309c:	bf48      	it	mi
 800309e:	b2ad      	uxthmi	r5, r5
 80030a0:	6031      	str	r1, [r6, #0]
 80030a2:	07d9      	lsls	r1, r3, #31
 80030a4:	bf44      	itt	mi
 80030a6:	f043 0320 	orrmi.w	r3, r3, #32
 80030aa:	6023      	strmi	r3, [r4, #0]
 80030ac:	b11d      	cbz	r5, 80030b6 <_printf_i+0x19e>
 80030ae:	2310      	movs	r3, #16
 80030b0:	e7ac      	b.n	800300c <_printf_i+0xf4>
 80030b2:	4827      	ldr	r0, [pc, #156]	@ (8003150 <_printf_i+0x238>)
 80030b4:	e7e9      	b.n	800308a <_printf_i+0x172>
 80030b6:	6823      	ldr	r3, [r4, #0]
 80030b8:	f023 0320 	bic.w	r3, r3, #32
 80030bc:	6023      	str	r3, [r4, #0]
 80030be:	e7f6      	b.n	80030ae <_printf_i+0x196>
 80030c0:	4616      	mov	r6, r2
 80030c2:	e7bd      	b.n	8003040 <_printf_i+0x128>
 80030c4:	6833      	ldr	r3, [r6, #0]
 80030c6:	6825      	ldr	r5, [r4, #0]
 80030c8:	6961      	ldr	r1, [r4, #20]
 80030ca:	1d18      	adds	r0, r3, #4
 80030cc:	6030      	str	r0, [r6, #0]
 80030ce:	062e      	lsls	r6, r5, #24
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	d501      	bpl.n	80030d8 <_printf_i+0x1c0>
 80030d4:	6019      	str	r1, [r3, #0]
 80030d6:	e002      	b.n	80030de <_printf_i+0x1c6>
 80030d8:	0668      	lsls	r0, r5, #25
 80030da:	d5fb      	bpl.n	80030d4 <_printf_i+0x1bc>
 80030dc:	8019      	strh	r1, [r3, #0]
 80030de:	2300      	movs	r3, #0
 80030e0:	6123      	str	r3, [r4, #16]
 80030e2:	4616      	mov	r6, r2
 80030e4:	e7bc      	b.n	8003060 <_printf_i+0x148>
 80030e6:	6833      	ldr	r3, [r6, #0]
 80030e8:	1d1a      	adds	r2, r3, #4
 80030ea:	6032      	str	r2, [r6, #0]
 80030ec:	681e      	ldr	r6, [r3, #0]
 80030ee:	6862      	ldr	r2, [r4, #4]
 80030f0:	2100      	movs	r1, #0
 80030f2:	4630      	mov	r0, r6
 80030f4:	f7fd f894 	bl	8000220 <memchr>
 80030f8:	b108      	cbz	r0, 80030fe <_printf_i+0x1e6>
 80030fa:	1b80      	subs	r0, r0, r6
 80030fc:	6060      	str	r0, [r4, #4]
 80030fe:	6863      	ldr	r3, [r4, #4]
 8003100:	6123      	str	r3, [r4, #16]
 8003102:	2300      	movs	r3, #0
 8003104:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003108:	e7aa      	b.n	8003060 <_printf_i+0x148>
 800310a:	6923      	ldr	r3, [r4, #16]
 800310c:	4632      	mov	r2, r6
 800310e:	4649      	mov	r1, r9
 8003110:	4640      	mov	r0, r8
 8003112:	47d0      	blx	sl
 8003114:	3001      	adds	r0, #1
 8003116:	d0ad      	beq.n	8003074 <_printf_i+0x15c>
 8003118:	6823      	ldr	r3, [r4, #0]
 800311a:	079b      	lsls	r3, r3, #30
 800311c:	d413      	bmi.n	8003146 <_printf_i+0x22e>
 800311e:	68e0      	ldr	r0, [r4, #12]
 8003120:	9b03      	ldr	r3, [sp, #12]
 8003122:	4298      	cmp	r0, r3
 8003124:	bfb8      	it	lt
 8003126:	4618      	movlt	r0, r3
 8003128:	e7a6      	b.n	8003078 <_printf_i+0x160>
 800312a:	2301      	movs	r3, #1
 800312c:	4632      	mov	r2, r6
 800312e:	4649      	mov	r1, r9
 8003130:	4640      	mov	r0, r8
 8003132:	47d0      	blx	sl
 8003134:	3001      	adds	r0, #1
 8003136:	d09d      	beq.n	8003074 <_printf_i+0x15c>
 8003138:	3501      	adds	r5, #1
 800313a:	68e3      	ldr	r3, [r4, #12]
 800313c:	9903      	ldr	r1, [sp, #12]
 800313e:	1a5b      	subs	r3, r3, r1
 8003140:	42ab      	cmp	r3, r5
 8003142:	dcf2      	bgt.n	800312a <_printf_i+0x212>
 8003144:	e7eb      	b.n	800311e <_printf_i+0x206>
 8003146:	2500      	movs	r5, #0
 8003148:	f104 0619 	add.w	r6, r4, #25
 800314c:	e7f5      	b.n	800313a <_printf_i+0x222>
 800314e:	bf00      	nop
 8003150:	080035a1 	.word	0x080035a1
 8003154:	080035b2 	.word	0x080035b2

08003158 <__sflush_r>:
 8003158:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800315c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003160:	0716      	lsls	r6, r2, #28
 8003162:	4605      	mov	r5, r0
 8003164:	460c      	mov	r4, r1
 8003166:	d454      	bmi.n	8003212 <__sflush_r+0xba>
 8003168:	684b      	ldr	r3, [r1, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	dc02      	bgt.n	8003174 <__sflush_r+0x1c>
 800316e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003170:	2b00      	cmp	r3, #0
 8003172:	dd48      	ble.n	8003206 <__sflush_r+0xae>
 8003174:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003176:	2e00      	cmp	r6, #0
 8003178:	d045      	beq.n	8003206 <__sflush_r+0xae>
 800317a:	2300      	movs	r3, #0
 800317c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003180:	682f      	ldr	r7, [r5, #0]
 8003182:	6a21      	ldr	r1, [r4, #32]
 8003184:	602b      	str	r3, [r5, #0]
 8003186:	d030      	beq.n	80031ea <__sflush_r+0x92>
 8003188:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800318a:	89a3      	ldrh	r3, [r4, #12]
 800318c:	0759      	lsls	r1, r3, #29
 800318e:	d505      	bpl.n	800319c <__sflush_r+0x44>
 8003190:	6863      	ldr	r3, [r4, #4]
 8003192:	1ad2      	subs	r2, r2, r3
 8003194:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003196:	b10b      	cbz	r3, 800319c <__sflush_r+0x44>
 8003198:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800319a:	1ad2      	subs	r2, r2, r3
 800319c:	2300      	movs	r3, #0
 800319e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80031a0:	6a21      	ldr	r1, [r4, #32]
 80031a2:	4628      	mov	r0, r5
 80031a4:	47b0      	blx	r6
 80031a6:	1c43      	adds	r3, r0, #1
 80031a8:	89a3      	ldrh	r3, [r4, #12]
 80031aa:	d106      	bne.n	80031ba <__sflush_r+0x62>
 80031ac:	6829      	ldr	r1, [r5, #0]
 80031ae:	291d      	cmp	r1, #29
 80031b0:	d82b      	bhi.n	800320a <__sflush_r+0xb2>
 80031b2:	4a2a      	ldr	r2, [pc, #168]	@ (800325c <__sflush_r+0x104>)
 80031b4:	410a      	asrs	r2, r1
 80031b6:	07d6      	lsls	r6, r2, #31
 80031b8:	d427      	bmi.n	800320a <__sflush_r+0xb2>
 80031ba:	2200      	movs	r2, #0
 80031bc:	6062      	str	r2, [r4, #4]
 80031be:	04d9      	lsls	r1, r3, #19
 80031c0:	6922      	ldr	r2, [r4, #16]
 80031c2:	6022      	str	r2, [r4, #0]
 80031c4:	d504      	bpl.n	80031d0 <__sflush_r+0x78>
 80031c6:	1c42      	adds	r2, r0, #1
 80031c8:	d101      	bne.n	80031ce <__sflush_r+0x76>
 80031ca:	682b      	ldr	r3, [r5, #0]
 80031cc:	b903      	cbnz	r3, 80031d0 <__sflush_r+0x78>
 80031ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80031d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80031d2:	602f      	str	r7, [r5, #0]
 80031d4:	b1b9      	cbz	r1, 8003206 <__sflush_r+0xae>
 80031d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80031da:	4299      	cmp	r1, r3
 80031dc:	d002      	beq.n	80031e4 <__sflush_r+0x8c>
 80031de:	4628      	mov	r0, r5
 80031e0:	f7ff fbf2 	bl	80029c8 <_free_r>
 80031e4:	2300      	movs	r3, #0
 80031e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80031e8:	e00d      	b.n	8003206 <__sflush_r+0xae>
 80031ea:	2301      	movs	r3, #1
 80031ec:	4628      	mov	r0, r5
 80031ee:	47b0      	blx	r6
 80031f0:	4602      	mov	r2, r0
 80031f2:	1c50      	adds	r0, r2, #1
 80031f4:	d1c9      	bne.n	800318a <__sflush_r+0x32>
 80031f6:	682b      	ldr	r3, [r5, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0c6      	beq.n	800318a <__sflush_r+0x32>
 80031fc:	2b1d      	cmp	r3, #29
 80031fe:	d001      	beq.n	8003204 <__sflush_r+0xac>
 8003200:	2b16      	cmp	r3, #22
 8003202:	d11e      	bne.n	8003242 <__sflush_r+0xea>
 8003204:	602f      	str	r7, [r5, #0]
 8003206:	2000      	movs	r0, #0
 8003208:	e022      	b.n	8003250 <__sflush_r+0xf8>
 800320a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800320e:	b21b      	sxth	r3, r3
 8003210:	e01b      	b.n	800324a <__sflush_r+0xf2>
 8003212:	690f      	ldr	r7, [r1, #16]
 8003214:	2f00      	cmp	r7, #0
 8003216:	d0f6      	beq.n	8003206 <__sflush_r+0xae>
 8003218:	0793      	lsls	r3, r2, #30
 800321a:	680e      	ldr	r6, [r1, #0]
 800321c:	bf08      	it	eq
 800321e:	694b      	ldreq	r3, [r1, #20]
 8003220:	600f      	str	r7, [r1, #0]
 8003222:	bf18      	it	ne
 8003224:	2300      	movne	r3, #0
 8003226:	eba6 0807 	sub.w	r8, r6, r7
 800322a:	608b      	str	r3, [r1, #8]
 800322c:	f1b8 0f00 	cmp.w	r8, #0
 8003230:	dde9      	ble.n	8003206 <__sflush_r+0xae>
 8003232:	6a21      	ldr	r1, [r4, #32]
 8003234:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003236:	4643      	mov	r3, r8
 8003238:	463a      	mov	r2, r7
 800323a:	4628      	mov	r0, r5
 800323c:	47b0      	blx	r6
 800323e:	2800      	cmp	r0, #0
 8003240:	dc08      	bgt.n	8003254 <__sflush_r+0xfc>
 8003242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003246:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800324a:	81a3      	strh	r3, [r4, #12]
 800324c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003254:	4407      	add	r7, r0
 8003256:	eba8 0800 	sub.w	r8, r8, r0
 800325a:	e7e7      	b.n	800322c <__sflush_r+0xd4>
 800325c:	dfbffffe 	.word	0xdfbffffe

08003260 <_fflush_r>:
 8003260:	b538      	push	{r3, r4, r5, lr}
 8003262:	690b      	ldr	r3, [r1, #16]
 8003264:	4605      	mov	r5, r0
 8003266:	460c      	mov	r4, r1
 8003268:	b913      	cbnz	r3, 8003270 <_fflush_r+0x10>
 800326a:	2500      	movs	r5, #0
 800326c:	4628      	mov	r0, r5
 800326e:	bd38      	pop	{r3, r4, r5, pc}
 8003270:	b118      	cbz	r0, 800327a <_fflush_r+0x1a>
 8003272:	6a03      	ldr	r3, [r0, #32]
 8003274:	b90b      	cbnz	r3, 800327a <_fflush_r+0x1a>
 8003276:	f7ff f9ad 	bl	80025d4 <__sinit>
 800327a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f3      	beq.n	800326a <_fflush_r+0xa>
 8003282:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003284:	07d0      	lsls	r0, r2, #31
 8003286:	d404      	bmi.n	8003292 <_fflush_r+0x32>
 8003288:	0599      	lsls	r1, r3, #22
 800328a:	d402      	bmi.n	8003292 <_fflush_r+0x32>
 800328c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800328e:	f7ff fb98 	bl	80029c2 <__retarget_lock_acquire_recursive>
 8003292:	4628      	mov	r0, r5
 8003294:	4621      	mov	r1, r4
 8003296:	f7ff ff5f 	bl	8003158 <__sflush_r>
 800329a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800329c:	07da      	lsls	r2, r3, #31
 800329e:	4605      	mov	r5, r0
 80032a0:	d4e4      	bmi.n	800326c <_fflush_r+0xc>
 80032a2:	89a3      	ldrh	r3, [r4, #12]
 80032a4:	059b      	lsls	r3, r3, #22
 80032a6:	d4e1      	bmi.n	800326c <_fflush_r+0xc>
 80032a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80032aa:	f7ff fb8b 	bl	80029c4 <__retarget_lock_release_recursive>
 80032ae:	e7dd      	b.n	800326c <_fflush_r+0xc>

080032b0 <__swhatbuf_r>:
 80032b0:	b570      	push	{r4, r5, r6, lr}
 80032b2:	460c      	mov	r4, r1
 80032b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032b8:	2900      	cmp	r1, #0
 80032ba:	b096      	sub	sp, #88	@ 0x58
 80032bc:	4615      	mov	r5, r2
 80032be:	461e      	mov	r6, r3
 80032c0:	da0d      	bge.n	80032de <__swhatbuf_r+0x2e>
 80032c2:	89a3      	ldrh	r3, [r4, #12]
 80032c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80032c8:	f04f 0100 	mov.w	r1, #0
 80032cc:	bf14      	ite	ne
 80032ce:	2340      	movne	r3, #64	@ 0x40
 80032d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80032d4:	2000      	movs	r0, #0
 80032d6:	6031      	str	r1, [r6, #0]
 80032d8:	602b      	str	r3, [r5, #0]
 80032da:	b016      	add	sp, #88	@ 0x58
 80032dc:	bd70      	pop	{r4, r5, r6, pc}
 80032de:	466a      	mov	r2, sp
 80032e0:	f000 f848 	bl	8003374 <_fstat_r>
 80032e4:	2800      	cmp	r0, #0
 80032e6:	dbec      	blt.n	80032c2 <__swhatbuf_r+0x12>
 80032e8:	9901      	ldr	r1, [sp, #4]
 80032ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80032ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80032f2:	4259      	negs	r1, r3
 80032f4:	4159      	adcs	r1, r3
 80032f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032fa:	e7eb      	b.n	80032d4 <__swhatbuf_r+0x24>

080032fc <__smakebuf_r>:
 80032fc:	898b      	ldrh	r3, [r1, #12]
 80032fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003300:	079d      	lsls	r5, r3, #30
 8003302:	4606      	mov	r6, r0
 8003304:	460c      	mov	r4, r1
 8003306:	d507      	bpl.n	8003318 <__smakebuf_r+0x1c>
 8003308:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800330c:	6023      	str	r3, [r4, #0]
 800330e:	6123      	str	r3, [r4, #16]
 8003310:	2301      	movs	r3, #1
 8003312:	6163      	str	r3, [r4, #20]
 8003314:	b003      	add	sp, #12
 8003316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003318:	ab01      	add	r3, sp, #4
 800331a:	466a      	mov	r2, sp
 800331c:	f7ff ffc8 	bl	80032b0 <__swhatbuf_r>
 8003320:	9f00      	ldr	r7, [sp, #0]
 8003322:	4605      	mov	r5, r0
 8003324:	4639      	mov	r1, r7
 8003326:	4630      	mov	r0, r6
 8003328:	f7ff fbba 	bl	8002aa0 <_malloc_r>
 800332c:	b948      	cbnz	r0, 8003342 <__smakebuf_r+0x46>
 800332e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003332:	059a      	lsls	r2, r3, #22
 8003334:	d4ee      	bmi.n	8003314 <__smakebuf_r+0x18>
 8003336:	f023 0303 	bic.w	r3, r3, #3
 800333a:	f043 0302 	orr.w	r3, r3, #2
 800333e:	81a3      	strh	r3, [r4, #12]
 8003340:	e7e2      	b.n	8003308 <__smakebuf_r+0xc>
 8003342:	89a3      	ldrh	r3, [r4, #12]
 8003344:	6020      	str	r0, [r4, #0]
 8003346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800334a:	81a3      	strh	r3, [r4, #12]
 800334c:	9b01      	ldr	r3, [sp, #4]
 800334e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003352:	b15b      	cbz	r3, 800336c <__smakebuf_r+0x70>
 8003354:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003358:	4630      	mov	r0, r6
 800335a:	f000 f81d 	bl	8003398 <_isatty_r>
 800335e:	b128      	cbz	r0, 800336c <__smakebuf_r+0x70>
 8003360:	89a3      	ldrh	r3, [r4, #12]
 8003362:	f023 0303 	bic.w	r3, r3, #3
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	81a3      	strh	r3, [r4, #12]
 800336c:	89a3      	ldrh	r3, [r4, #12]
 800336e:	431d      	orrs	r5, r3
 8003370:	81a5      	strh	r5, [r4, #12]
 8003372:	e7cf      	b.n	8003314 <__smakebuf_r+0x18>

08003374 <_fstat_r>:
 8003374:	b538      	push	{r3, r4, r5, lr}
 8003376:	4d07      	ldr	r5, [pc, #28]	@ (8003394 <_fstat_r+0x20>)
 8003378:	2300      	movs	r3, #0
 800337a:	4604      	mov	r4, r0
 800337c:	4608      	mov	r0, r1
 800337e:	4611      	mov	r1, r2
 8003380:	602b      	str	r3, [r5, #0]
 8003382:	f7fd fafb 	bl	800097c <_fstat>
 8003386:	1c43      	adds	r3, r0, #1
 8003388:	d102      	bne.n	8003390 <_fstat_r+0x1c>
 800338a:	682b      	ldr	r3, [r5, #0]
 800338c:	b103      	cbz	r3, 8003390 <_fstat_r+0x1c>
 800338e:	6023      	str	r3, [r4, #0]
 8003390:	bd38      	pop	{r3, r4, r5, pc}
 8003392:	bf00      	nop
 8003394:	2000023c 	.word	0x2000023c

08003398 <_isatty_r>:
 8003398:	b538      	push	{r3, r4, r5, lr}
 800339a:	4d06      	ldr	r5, [pc, #24]	@ (80033b4 <_isatty_r+0x1c>)
 800339c:	2300      	movs	r3, #0
 800339e:	4604      	mov	r4, r0
 80033a0:	4608      	mov	r0, r1
 80033a2:	602b      	str	r3, [r5, #0]
 80033a4:	f7fd fafa 	bl	800099c <_isatty>
 80033a8:	1c43      	adds	r3, r0, #1
 80033aa:	d102      	bne.n	80033b2 <_isatty_r+0x1a>
 80033ac:	682b      	ldr	r3, [r5, #0]
 80033ae:	b103      	cbz	r3, 80033b2 <_isatty_r+0x1a>
 80033b0:	6023      	str	r3, [r4, #0]
 80033b2:	bd38      	pop	{r3, r4, r5, pc}
 80033b4:	2000023c 	.word	0x2000023c

080033b8 <_sbrk_r>:
 80033b8:	b538      	push	{r3, r4, r5, lr}
 80033ba:	4d06      	ldr	r5, [pc, #24]	@ (80033d4 <_sbrk_r+0x1c>)
 80033bc:	2300      	movs	r3, #0
 80033be:	4604      	mov	r4, r0
 80033c0:	4608      	mov	r0, r1
 80033c2:	602b      	str	r3, [r5, #0]
 80033c4:	f7fd fb02 	bl	80009cc <_sbrk>
 80033c8:	1c43      	adds	r3, r0, #1
 80033ca:	d102      	bne.n	80033d2 <_sbrk_r+0x1a>
 80033cc:	682b      	ldr	r3, [r5, #0]
 80033ce:	b103      	cbz	r3, 80033d2 <_sbrk_r+0x1a>
 80033d0:	6023      	str	r3, [r4, #0]
 80033d2:	bd38      	pop	{r3, r4, r5, pc}
 80033d4:	2000023c 	.word	0x2000023c

080033d8 <_init>:
 80033d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033da:	bf00      	nop
 80033dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033de:	bc08      	pop	{r3}
 80033e0:	469e      	mov	lr, r3
 80033e2:	4770      	bx	lr

080033e4 <_fini>:
 80033e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e6:	bf00      	nop
 80033e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ea:	bc08      	pop	{r3}
 80033ec:	469e      	mov	lr, r3
 80033ee:	4770      	bx	lr
