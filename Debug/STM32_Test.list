
STM32_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064d4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  080066b4  080066b4  000076b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068a8  080068a8  00008070  2**0
                  CONTENTS
  4 .ARM          00000008  080068a8  080068a8  000078a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068b0  080068b0  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068b0  080068b0  000078b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068b4  080068b4  000078b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080068b8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  20000070  08006928  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08006928  000083c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015603  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a74  00000000  00000000  0001d6a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  00020118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000116c  00000000  00000000  00021788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021484  00000000  00000000  000228f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017dad  00000000  00000000  00043d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc193  00000000  00000000  0005bb25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137cb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068f4  00000000  00000000  00137cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0013e5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800669c 	.word	0x0800669c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	0800669c 	.word	0x0800669c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002cc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80002d0:	f003 0301 	and.w	r3, r3, #1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d013      	beq.n	8000300 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80002d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002dc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80002e0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d00b      	beq.n	8000300 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002e8:	e000      	b.n	80002ec <ITM_SendChar+0x2c>
    {
      __NOP();
 80002ea:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002ec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d0f9      	beq.n	80002ea <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002f6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	b2d2      	uxtb	r2, r2
 80002fe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000300:	687b      	ldr	r3, [r7, #4]
}
 8000302:	4618      	mov	r0, r3
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
	...

08000310 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b08a      	sub	sp, #40	@ 0x28
 8000314:	af02      	add	r7, sp, #8

	/* USER CODE BEGIN 1 */
	uint16_t AD_RES = 0;
 8000316:	2300      	movs	r3, #0
 8000318:	83fb      	strh	r3, [r7, #30]
	float AD_RES_float = 0;
 800031a:	f04f 0300 	mov.w	r3, #0
 800031e:	61bb      	str	r3, [r7, #24]
	float low_pressure = 0;
 8000320:	f04f 0300 	mov.w	r3, #0
 8000324:	617b      	str	r3, [r7, #20]
	uint16_t SPI_buffer;

	// Variables for CO2 level sensor
	uint8_t CO2_buffer[12];
	int CO2_level_int = 33;
 8000326:	2321      	movs	r3, #33	@ 0x21
 8000328:	613b      	str	r3, [r7, #16]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800032a:	f000 fee4 	bl	80010f6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800032e:	f000 f9cb 	bl	80006c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000332:	f000 fbe5 	bl	8000b00 <MX_GPIO_Init>
	MX_SPI2_Init();
 8000336:	f000 fb31 	bl	800099c <MX_SPI2_Init>
	MX_ADC2_Init();
 800033a:	f000 fa89 	bl	8000850 <MX_ADC2_Init>
	MX_ADC1_Init();
 800033e:	f000 fa0f 	bl	8000760 <MX_ADC1_Init>
	MX_TIM2_Init();
 8000342:	f000 fb69 	bl	8000a18 <MX_TIM2_Init>
	MX_I2C2_Init();
 8000346:	f000 fae9 	bl	800091c <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800034a:	2201      	movs	r2, #1
 800034c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000350:	4899      	ldr	r0, [pc, #612]	@ (80005b8 <main+0x2a8>)
 8000352:	f002 fd6f 	bl	8002e34 <HAL_GPIO_WritePin>
	printf("Requesting SPI Identifier from Pressure Sensor... \r\n");
 8000356:	4899      	ldr	r0, [pc, #612]	@ (80005bc <main+0x2ac>)
 8000358:	f005 fb3c 	bl	80059d4 <puts>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800035c:	2200      	movs	r2, #0
 800035e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000362:	4895      	ldr	r0, [pc, #596]	@ (80005b8 <main+0x2a8>)
 8000364:	f002 fd66 	bl	8002e34 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) &request_identifier,
 8000368:	f107 020e 	add.w	r2, r7, #14
 800036c:	2364      	movs	r3, #100	@ 0x64
 800036e:	9300      	str	r3, [sp, #0]
 8000370:	2301      	movs	r3, #1
 8000372:	4993      	ldr	r1, [pc, #588]	@ (80005c0 <main+0x2b0>)
 8000374:	4893      	ldr	r0, [pc, #588]	@ (80005c4 <main+0x2b4>)
 8000376:	f003 ff06 	bl	8004186 <HAL_SPI_TransmitReceive>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d002      	beq.n	8000386 <main+0x76>
			(uint8_t*) &SPI_buffer, 1, 100) != HAL_OK) {
		printf("ERROR: SPI failed the HAL_OK check \r\n");
 8000380:	4891      	ldr	r0, [pc, #580]	@ (80005c8 <main+0x2b8>)
 8000382:	f005 fb27 	bl	80059d4 <puts>
	}
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000386:	2201      	movs	r2, #1
 8000388:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800038c:	488a      	ldr	r0, [pc, #552]	@ (80005b8 <main+0x2a8>)
 800038e:	f002 fd51 	bl	8002e34 <HAL_GPIO_WritePin>
	// Check if received data is notifying about any errors
	// Check for communication error
	if (SPI_buffer == com_error_mask) {
 8000392:	89fb      	ldrh	r3, [r7, #14]
 8000394:	2201      	movs	r2, #1
 8000396:	4293      	cmp	r3, r2
 8000398:	d103      	bne.n	80003a2 <main+0x92>
		printf("ERROR: Communication Error \r\n");
 800039a:	488c      	ldr	r0, [pc, #560]	@ (80005cc <main+0x2bc>)
 800039c:	f005 fb1a 	bl	80059d4 <puts>
 80003a0:	e04b      	b.n	800043a <main+0x12a>
	}
	// Check for FEC Error
	else if ((SPI_buffer & FEC_error_mask) != 0) {
 80003a2:	89fb      	ldrh	r3, [r7, #14]
 80003a4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80003a8:	4013      	ands	r3, r2
 80003aa:	b29b      	uxth	r3, r3
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d003      	beq.n	80003b8 <main+0xa8>
		printf("ERROR: FEC Error \r\n");
 80003b0:	4887      	ldr	r0, [pc, #540]	@ (80005d0 <main+0x2c0>)
 80003b2:	f005 fb0f 	bl	80059d4 <puts>
 80003b6:	e040      	b.n	800043a <main+0x12a>
	}
	// Check for Acquisition Chain Failure
	else if ((SPI_buffer & no_error_mask) == Diag1_mask) {
 80003b8:	89fb      	ldrh	r3, [r7, #14]
 80003ba:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80003be:	4013      	ands	r3, r2
 80003c0:	b29b      	uxth	r3, r3
 80003c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d103      	bne.n	80003d2 <main+0xc2>
		printf("ERROR: Acquisition chain failure \r\n");
 80003ca:	4882      	ldr	r0, [pc, #520]	@ (80005d4 <main+0x2c4>)
 80003cc:	f005 fb02 	bl	80059d4 <puts>
 80003d0:	e033      	b.n	800043a <main+0x12a>
	}
	// Check for Sensor Cell Failure
	else if ((SPI_buffer & Diag2_mask) != 0) {
 80003d2:	89fb      	ldrh	r3, [r7, #14]
 80003d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80003d8:	4013      	ands	r3, r2
 80003da:	b29b      	uxth	r3, r3
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d003      	beq.n	80003e8 <main+0xd8>
		printf("ERROR: Sensor cell failure \r\n");
 80003e0:	487d      	ldr	r0, [pc, #500]	@ (80005d8 <main+0x2c8>)
 80003e2:	f005 faf7 	bl	80059d4 <puts>
 80003e6:	e028      	b.n	800043a <main+0x12a>
	}
	// Check if pressure is above measuring range maximum
	else if ((SPI_buffer & no_error_mask) == pressure_over_max_mask) {
 80003e8:	89fb      	ldrh	r3, [r7, #14]
 80003ea:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80003ee:	4013      	ands	r3, r2
 80003f0:	b29b      	uxth	r3, r3
 80003f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d103      	bne.n	8000402 <main+0xf2>
		printf("ERROR: Pressure above measuring range maximum \r\n");
 80003fa:	4878      	ldr	r0, [pc, #480]	@ (80005dc <main+0x2cc>)
 80003fc:	f005 faea 	bl	80059d4 <puts>
 8000400:	e01b      	b.n	800043a <main+0x12a>
	}
	// Check if pressure is below measuring range minimum
	else if ((SPI_buffer & pressure_under_min_mask) != 0) {
 8000402:	89fb      	ldrh	r3, [r7, #14]
 8000404:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000408:	4013      	ands	r3, r2
 800040a:	b29b      	uxth	r3, r3
 800040c:	2b00      	cmp	r3, #0
 800040e:	d003      	beq.n	8000418 <main+0x108>
		printf("ERROR: Pressure below measuring range minimum \r\n");
 8000410:	4873      	ldr	r0, [pc, #460]	@ (80005e0 <main+0x2d0>)
 8000412:	f005 fadf 	bl	80059d4 <puts>
 8000416:	e010      	b.n	800043a <main+0x12a>
	}
	// Check if no errors were detected
	else if ((SPI_buffer & no_error_mask) == no_error_mask) {
 8000418:	89fb      	ldrh	r3, [r7, #14]
 800041a:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800041e:	4013      	ands	r3, r2
 8000420:	b29b      	uxth	r3, r3
 8000422:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000426:	4293      	cmp	r3, r2
 8000428:	d107      	bne.n	800043a <main+0x12a>
		printf("No errors detected \r\n");
 800042a:	486e      	ldr	r0, [pc, #440]	@ (80005e4 <main+0x2d4>)
 800042c:	f005 fad2 	bl	80059d4 <puts>
		printf("Identifier: %u \r\n", SPI_buffer);
 8000430:	89fb      	ldrh	r3, [r7, #14]
 8000432:	4619      	mov	r1, r3
 8000434:	486c      	ldr	r0, [pc, #432]	@ (80005e8 <main+0x2d8>)
 8000436:	f005 fa65 	bl	8005904 <iprintf>
	}

	// Start ADC calibration and ADC conversion
	HAL_ADCEx_Calibration_Start(&hadc1, 1);
 800043a:	2101      	movs	r1, #1
 800043c:	486b      	ldr	r0, [pc, #428]	@ (80005ec <main+0x2dc>)
 800043e:	f002 f98d 	bl	800275c <HAL_ADCEx_Calibration_Start>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		// Toggle the LEDs
		HAL_GPIO_TogglePin(GPIOB, PRS_Ready_Pin);
 8000442:	2140      	movs	r1, #64	@ 0x40
 8000444:	485c      	ldr	r0, [pc, #368]	@ (80005b8 <main+0x2a8>)
 8000446:	f002 fd0d 	bl	8002e64 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 800044a:	2064      	movs	r0, #100	@ 0x64
 800044c:	f000 fec4 	bl	80011d8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, PRS_Ready_Pin);
 8000450:	2140      	movs	r1, #64	@ 0x40
 8000452:	4859      	ldr	r0, [pc, #356]	@ (80005b8 <main+0x2a8>)
 8000454:	f002 fd06 	bl	8002e64 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, System_Ready_Pin);
 8000458:	2180      	movs	r1, #128	@ 0x80
 800045a:	4857      	ldr	r0, [pc, #348]	@ (80005b8 <main+0x2a8>)
 800045c:	f002 fd02 	bl	8002e64 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000460:	2064      	movs	r0, #100	@ 0x64
 8000462:	f000 feb9 	bl	80011d8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, System_Ready_Pin);
 8000466:	2180      	movs	r1, #128	@ 0x80
 8000468:	4853      	ldr	r0, [pc, #332]	@ (80005b8 <main+0x2a8>)
 800046a:	f002 fcfb 	bl	8002e64 <HAL_GPIO_TogglePin>

		HAL_GPIO_TogglePin(GPIOB, PRS_Ready_Pin);
 800046e:	2140      	movs	r1, #64	@ 0x40
 8000470:	4851      	ldr	r0, [pc, #324]	@ (80005b8 <main+0x2a8>)
 8000472:	f002 fcf7 	bl	8002e64 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000476:	2064      	movs	r0, #100	@ 0x64
 8000478:	f000 feae 	bl	80011d8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, PRS_Ready_Pin);
 800047c:	2140      	movs	r1, #64	@ 0x40
 800047e:	484e      	ldr	r0, [pc, #312]	@ (80005b8 <main+0x2a8>)
 8000480:	f002 fcf0 	bl	8002e64 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, System_Ready_Pin);
 8000484:	2180      	movs	r1, #128	@ 0x80
 8000486:	484c      	ldr	r0, [pc, #304]	@ (80005b8 <main+0x2a8>)
 8000488:	f002 fcec 	bl	8002e64 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 800048c:	2064      	movs	r0, #100	@ 0x64
 800048e:	f000 fea3 	bl	80011d8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, System_Ready_Pin);
 8000492:	2180      	movs	r1, #128	@ 0x80
 8000494:	4848      	ldr	r0, [pc, #288]	@ (80005b8 <main+0x2a8>)
 8000496:	f002 fce5 	bl	8002e64 <HAL_GPIO_TogglePin>

		HAL_GPIO_TogglePin(GPIOB, PRS_Ready_Pin);
 800049a:	2140      	movs	r1, #64	@ 0x40
 800049c:	4846      	ldr	r0, [pc, #280]	@ (80005b8 <main+0x2a8>)
 800049e:	f002 fce1 	bl	8002e64 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80004a2:	2064      	movs	r0, #100	@ 0x64
 80004a4:	f000 fe98 	bl	80011d8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, PRS_Ready_Pin);
 80004a8:	2140      	movs	r1, #64	@ 0x40
 80004aa:	4843      	ldr	r0, [pc, #268]	@ (80005b8 <main+0x2a8>)
 80004ac:	f002 fcda 	bl	8002e64 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, System_Ready_Pin);
 80004b0:	2180      	movs	r1, #128	@ 0x80
 80004b2:	4841      	ldr	r0, [pc, #260]	@ (80005b8 <main+0x2a8>)
 80004b4:	f002 fcd6 	bl	8002e64 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80004b8:	2064      	movs	r0, #100	@ 0x64
 80004ba:	f000 fe8d 	bl	80011d8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, System_Ready_Pin);
 80004be:	2180      	movs	r1, #128	@ 0x80
 80004c0:	483d      	ldr	r0, [pc, #244]	@ (80005b8 <main+0x2a8>)
 80004c2:	f002 fccf 	bl	8002e64 <HAL_GPIO_TogglePin>

		HAL_GPIO_TogglePin(GPIOB, PRS_Ready_Pin);
 80004c6:	2140      	movs	r1, #64	@ 0x40
 80004c8:	483b      	ldr	r0, [pc, #236]	@ (80005b8 <main+0x2a8>)
 80004ca:	f002 fccb 	bl	8002e64 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80004ce:	2064      	movs	r0, #100	@ 0x64
 80004d0:	f000 fe82 	bl	80011d8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, PRS_Ready_Pin);
 80004d4:	2140      	movs	r1, #64	@ 0x40
 80004d6:	4838      	ldr	r0, [pc, #224]	@ (80005b8 <main+0x2a8>)
 80004d8:	f002 fcc4 	bl	8002e64 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, System_Ready_Pin);
 80004dc:	2180      	movs	r1, #128	@ 0x80
 80004de:	4836      	ldr	r0, [pc, #216]	@ (80005b8 <main+0x2a8>)
 80004e0:	f002 fcc0 	bl	8002e64 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80004e4:	2064      	movs	r0, #100	@ 0x64
 80004e6:	f000 fe77 	bl	80011d8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, System_Ready_Pin);
 80004ea:	2180      	movs	r1, #128	@ 0x80
 80004ec:	4832      	ldr	r0, [pc, #200]	@ (80005b8 <main+0x2a8>)
 80004ee:	f002 fcb9 	bl	8002e64 <HAL_GPIO_TogglePin>

		// Measure Pod Pressure
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004f8:	482f      	ldr	r0, [pc, #188]	@ (80005b8 <main+0x2a8>)
 80004fa:	f002 fc9b 	bl	8002e34 <HAL_GPIO_WritePin>
		if (HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) &request_pressure,
 80004fe:	f107 020e 	add.w	r2, r7, #14
 8000502:	2364      	movs	r3, #100	@ 0x64
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	2301      	movs	r3, #1
 8000508:	4939      	ldr	r1, [pc, #228]	@ (80005f0 <main+0x2e0>)
 800050a:	482e      	ldr	r0, [pc, #184]	@ (80005c4 <main+0x2b4>)
 800050c:	f003 fe3b 	bl	8004186 <HAL_SPI_TransmitReceive>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d002      	beq.n	800051c <main+0x20c>
				(uint8_t*) &SPI_buffer, 1, 100) != HAL_OK) {
			printf("ERROR: SPI failed the HAL_OK check \r\n");
 8000516:	482c      	ldr	r0, [pc, #176]	@ (80005c8 <main+0x2b8>)
 8000518:	f005 fa5c 	bl	80059d4 <puts>
		}
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000522:	4825      	ldr	r0, [pc, #148]	@ (80005b8 <main+0x2a8>)
 8000524:	f002 fc86 	bl	8002e34 <HAL_GPIO_WritePin>
		// Check if received data is notifying about any errors
		// Check for communication error
		if (SPI_buffer == com_error_mask) {
 8000528:	89fb      	ldrh	r3, [r7, #14]
 800052a:	2201      	movs	r2, #1
 800052c:	4293      	cmp	r3, r2
 800052e:	d103      	bne.n	8000538 <main+0x228>
			printf("ERROR: Communication Error \r\n");
 8000530:	4826      	ldr	r0, [pc, #152]	@ (80005cc <main+0x2bc>)
 8000532:	f005 fa4f 	bl	80059d4 <puts>
 8000536:	e091      	b.n	800065c <main+0x34c>
		}
		// Check for FEC Error
		else if ((SPI_buffer & FEC_error_mask) != 0) {
 8000538:	89fb      	ldrh	r3, [r7, #14]
 800053a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800053e:	4013      	ands	r3, r2
 8000540:	b29b      	uxth	r3, r3
 8000542:	2b00      	cmp	r3, #0
 8000544:	d003      	beq.n	800054e <main+0x23e>
			printf("ERROR: FEC Error \r\n");
 8000546:	4822      	ldr	r0, [pc, #136]	@ (80005d0 <main+0x2c0>)
 8000548:	f005 fa44 	bl	80059d4 <puts>
 800054c:	e086      	b.n	800065c <main+0x34c>
		}
		// Check for Acquisition Chain Failure
		else if ((SPI_buffer & no_error_mask) == Diag1_mask) {
 800054e:	89fb      	ldrh	r3, [r7, #14]
 8000550:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000554:	4013      	ands	r3, r2
 8000556:	b29b      	uxth	r3, r3
 8000558:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800055c:	4293      	cmp	r3, r2
 800055e:	d108      	bne.n	8000572 <main+0x262>
			printf("ERROR: Acquisition chain failure \r\n");
 8000560:	481c      	ldr	r0, [pc, #112]	@ (80005d4 <main+0x2c4>)
 8000562:	f005 fa37 	bl	80059d4 <puts>
			printf("Received bytes = %u", SPI_buffer);
 8000566:	89fb      	ldrh	r3, [r7, #14]
 8000568:	4619      	mov	r1, r3
 800056a:	4822      	ldr	r0, [pc, #136]	@ (80005f4 <main+0x2e4>)
 800056c:	f005 f9ca 	bl	8005904 <iprintf>
 8000570:	e074      	b.n	800065c <main+0x34c>
		}
		// Check for Sensor Cell Failure
		else if ((SPI_buffer & Diag2_mask) != 0) {
 8000572:	89fb      	ldrh	r3, [r7, #14]
 8000574:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000578:	4013      	ands	r3, r2
 800057a:	b29b      	uxth	r3, r3
 800057c:	2b00      	cmp	r3, #0
 800057e:	d003      	beq.n	8000588 <main+0x278>
			printf("ERROR: Sensor cell failure \r\n");
 8000580:	4815      	ldr	r0, [pc, #84]	@ (80005d8 <main+0x2c8>)
 8000582:	f005 fa27 	bl	80059d4 <puts>
 8000586:	e069      	b.n	800065c <main+0x34c>
		}
		// Check if pressure is above measuring range maximum
		else if ((SPI_buffer & no_error_mask) == pressure_over_max_mask) {
 8000588:	89fb      	ldrh	r3, [r7, #14]
 800058a:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800058e:	4013      	ands	r3, r2
 8000590:	b29b      	uxth	r3, r3
 8000592:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000596:	4293      	cmp	r3, r2
 8000598:	d103      	bne.n	80005a2 <main+0x292>
			printf("ERROR: Pressure above measuring range maximum \r\n");
 800059a:	4810      	ldr	r0, [pc, #64]	@ (80005dc <main+0x2cc>)
 800059c:	f005 fa1a 	bl	80059d4 <puts>
 80005a0:	e05c      	b.n	800065c <main+0x34c>
		}
		// Check if pressure is below measuring range minimum
		else if ((SPI_buffer & pressure_under_min_mask) != 0) {
 80005a2:	89fb      	ldrh	r3, [r7, #14]
 80005a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80005a8:	4013      	ands	r3, r2
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d023      	beq.n	80005f8 <main+0x2e8>
			printf("ERROR: Pressure below measuring range minimum \r\n");
 80005b0:	480b      	ldr	r0, [pc, #44]	@ (80005e0 <main+0x2d0>)
 80005b2:	f005 fa0f 	bl	80059d4 <puts>
 80005b6:	e051      	b.n	800065c <main+0x34c>
 80005b8:	48000400 	.word	0x48000400
 80005bc:	080066b4 	.word	0x080066b4
 80005c0:	08006860 	.word	0x08006860
 80005c4:	200001b8 	.word	0x200001b8
 80005c8:	080066e8 	.word	0x080066e8
 80005cc:	08006710 	.word	0x08006710
 80005d0:	08006730 	.word	0x08006730
 80005d4:	08006744 	.word	0x08006744
 80005d8:	08006768 	.word	0x08006768
 80005dc:	08006788 	.word	0x08006788
 80005e0:	080067b8 	.word	0x080067b8
 80005e4:	080067e8 	.word	0x080067e8
 80005e8:	08006800 	.word	0x08006800
 80005ec:	2000008c 	.word	0x2000008c
 80005f0:	0800685e 	.word	0x0800685e
 80005f4:	08006814 	.word	0x08006814
		}
		// Check if no errors were detected
		else if ((SPI_buffer & no_error_mask) == no_error_mask) {
 80005f8:	89fb      	ldrh	r3, [r7, #14]
 80005fa:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80005fe:	4013      	ands	r3, r2
 8000600:	b29b      	uxth	r3, r3
 8000602:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000606:	4293      	cmp	r3, r2
 8000608:	d128      	bne.n	800065c <main+0x34c>
			printf("No errors detected \r\n");
 800060a:	4827      	ldr	r0, [pc, #156]	@ (80006a8 <main+0x398>)
 800060c:	f005 f9e2 	bl	80059d4 <puts>
			// Get the pressure data using a bit mask and right shift operator to get rid of parity bit
			pressure_LSB = (SPI_buffer & data_mask) >> 1;
 8000610:	89fb      	ldrh	r3, [r7, #14]
 8000612:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8000616:	4013      	ands	r3, r2
 8000618:	b29b      	uxth	r3, r3
 800061a:	085b      	lsrs	r3, r3, #1
 800061c:	b29a      	uxth	r2, r3
 800061e:	4b23      	ldr	r3, [pc, #140]	@ (80006ac <main+0x39c>)
 8000620:	801a      	strh	r2, [r3, #0]
			// Convert pressure from LSB to kPa using transfer function from data sheet
			pressure_Bar = ((float) pressure_LSB - offs_p) / S_p;
 8000622:	4b22      	ldr	r3, [pc, #136]	@ (80006ac <main+0x39c>)
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	ee07 3a90 	vmov	s15, r3
 800062a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800062e:	4b20      	ldr	r3, [pc, #128]	@ (80006b0 <main+0x3a0>)
 8000630:	edd3 7a00 	vldr	s15, [r3]
 8000634:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000638:	4b1e      	ldr	r3, [pc, #120]	@ (80006b4 <main+0x3a4>)
 800063a:	ed93 7a00 	vldr	s14, [r3]
 800063e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000642:	4b1d      	ldr	r3, [pc, #116]	@ (80006b8 <main+0x3a8>)
 8000644:	edc3 7a00 	vstr	s15, [r3]
			// Convert pressure from Bar to kPa
			// pressure_Bar = pressure_Bar/100;
			// Print pressure value
			printf("Measured pressure: %i kPa \r\n", (int) pressure_Bar);
 8000648:	4b1b      	ldr	r3, [pc, #108]	@ (80006b8 <main+0x3a8>)
 800064a:	edd3 7a00 	vldr	s15, [r3]
 800064e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000652:	ee17 1a90 	vmov	r1, s15
 8000656:	4819      	ldr	r0, [pc, #100]	@ (80006bc <main+0x3ac>)
 8000658:	f005 f954 	bl	8005904 <iprintf>

		}

		// Start ADC Conversion
		HAL_ADC_Start(&hadc1);
 800065c:	4818      	ldr	r0, [pc, #96]	@ (80006c0 <main+0x3b0>)
 800065e:	f001 f9b3 	bl	80019c8 <HAL_ADC_Start>
		// Poll ADC2 Peripheral & TimeOut = 1mSec
		HAL_ADC_PollForConversion(&hadc1, 1);
 8000662:	2101      	movs	r1, #1
 8000664:	4816      	ldr	r0, [pc, #88]	@ (80006c0 <main+0x3b0>)
 8000666:	f001 fa6b 	bl	8001b40 <HAL_ADC_PollForConversion>
		// Read The ADC Conversion Result & Print it
		AD_RES = HAL_ADC_GetValue(&hadc1);
 800066a:	4815      	ldr	r0, [pc, #84]	@ (80006c0 <main+0x3b0>)
 800066c:	f001 fb40 	bl	8001cf0 <HAL_ADC_GetValue>
 8000670:	4603      	mov	r3, r0
 8000672:	83fb      	strh	r3, [r7, #30]
		printf("ADC value = %i mBar\r\n", (int) AD_RES);
 8000674:	8bfb      	ldrh	r3, [r7, #30]
 8000676:	4619      	mov	r1, r3
 8000678:	4812      	ldr	r0, [pc, #72]	@ (80006c4 <main+0x3b4>)
 800067a:	f005 f943 	bl	8005904 <iprintf>
		 printf("ADC value = %i mBar\r\n", (int) low_pressure);
		 HAL_Delay(1);
		 */

		// Trigger solenoid valve
		HAL_GPIO_WritePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin,
 800067e:	2201      	movs	r2, #1
 8000680:	2140      	movs	r1, #64	@ 0x40
 8000682:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000686:	f002 fbd5 	bl	8002e34 <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		HAL_Delay(500);
 800068a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800068e:	f000 fda3 	bl	80011d8 <HAL_Delay>
		HAL_GPIO_WritePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin,
 8000692:	2200      	movs	r2, #0
 8000694:	2140      	movs	r1, #64	@ 0x40
 8000696:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069a:	f002 fbcb 	bl	8002e34 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_Delay(500);
 800069e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006a2:	f000 fd99 	bl	80011d8 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, PRS_Ready_Pin);
 80006a6:	e6cc      	b.n	8000442 <main+0x132>
 80006a8:	080067e8 	.word	0x080067e8
 80006ac:	20000268 	.word	0x20000268
 80006b0:	20000000 	.word	0x20000000
 80006b4:	20000004 	.word	0x20000004
 80006b8:	2000026c 	.word	0x2000026c
 80006bc:	08006828 	.word	0x08006828
 80006c0:	2000008c 	.word	0x2000008c
 80006c4:	08006848 	.word	0x08006848

080006c8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	@ 0x50
 80006cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006ce:	f107 0318 	add.w	r3, r7, #24
 80006d2:	2238      	movs	r2, #56	@ 0x38
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f005 fa5c 	bl	8005b94 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006ee:	f002 fd05 	bl	80030fc <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f2:	2302      	movs	r3, #2
 80006f4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006fa:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2340      	movs	r3, #64	@ 0x40
 80006fe:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2302      	movs	r3, #2
 8000706:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000708:	2301      	movs	r3, #1
 800070a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 8;
 800070c:	2308      	movs	r3, #8
 800070e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV16;
 8000710:	2310      	movs	r3, #16
 8000712:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000714:	2302      	movs	r3, #2
 8000716:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000718:	2302      	movs	r3, #2
 800071a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800071c:	f107 0318 	add.w	r3, r7, #24
 8000720:	4618      	mov	r0, r3
 8000722:	f002 fd9f 	bl	8003264 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x68>
		Error_Handler();
 800072c:	f000 fa68 	bl	8000c00 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000734:	2303      	movs	r3, #3
 8000736:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2102      	movs	r1, #2
 8000748:	4618      	mov	r0, r3
 800074a:	f003 f89d 	bl	8003888 <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x90>
		Error_Handler();
 8000754:	f000 fa54 	bl	8000c00 <Error_Handler>
	}
}
 8000758:	bf00      	nop
 800075a:	3750      	adds	r7, #80	@ 0x50
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b08c      	sub	sp, #48	@ 0x30
 8000764:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8000766:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2220      	movs	r2, #32
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f005 fa0b 	bl	8005b94 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800077e:	4b32      	ldr	r3, [pc, #200]	@ (8000848 <MX_ADC1_Init+0xe8>)
 8000780:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000784:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000786:	4b30      	ldr	r3, [pc, #192]	@ (8000848 <MX_ADC1_Init+0xe8>)
 8000788:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800078c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800078e:	4b2e      	ldr	r3, [pc, #184]	@ (8000848 <MX_ADC1_Init+0xe8>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000794:	4b2c      	ldr	r3, [pc, #176]	@ (8000848 <MX_ADC1_Init+0xe8>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 800079a:	4b2b      	ldr	r3, [pc, #172]	@ (8000848 <MX_ADC1_Init+0xe8>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007a0:	4b29      	ldr	r3, [pc, #164]	@ (8000848 <MX_ADC1_Init+0xe8>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a6:	4b28      	ldr	r3, [pc, #160]	@ (8000848 <MX_ADC1_Init+0xe8>)
 80007a8:	2204      	movs	r2, #4
 80007aa:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ac:	4b26      	ldr	r3, [pc, #152]	@ (8000848 <MX_ADC1_Init+0xe8>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80007b2:	4b25      	ldr	r3, [pc, #148]	@ (8000848 <MX_ADC1_Init+0xe8>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 1;
 80007b8:	4b23      	ldr	r3, [pc, #140]	@ (8000848 <MX_ADC1_Init+0xe8>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007be:	4b22      	ldr	r3, [pc, #136]	@ (8000848 <MX_ADC1_Init+0xe8>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007c6:	4b20      	ldr	r3, [pc, #128]	@ (8000848 <MX_ADC1_Init+0xe8>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000848 <MX_ADC1_Init+0xe8>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80007d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000848 <MX_ADC1_Init+0xe8>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007da:	4b1b      	ldr	r3, [pc, #108]	@ (8000848 <MX_ADC1_Init+0xe8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 80007e0:	4b19      	ldr	r3, [pc, #100]	@ (8000848 <MX_ADC1_Init+0xe8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80007e8:	4817      	ldr	r0, [pc, #92]	@ (8000848 <MX_ADC1_Init+0xe8>)
 80007ea:	f000 ff69 	bl	80016c0 <HAL_ADC_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC1_Init+0x98>
		Error_Handler();
 80007f4:	f000 fa04 	bl	8000c00 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80007fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000800:	4619      	mov	r1, r3
 8000802:	4811      	ldr	r0, [pc, #68]	@ (8000848 <MX_ADC1_Init+0xe8>)
 8000804:	f002 f80c 	bl	8002820 <HAL_ADCEx_MultiModeConfigChannel>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_ADC1_Init+0xb2>
		Error_Handler();
 800080e:	f000 f9f7 	bl	8000c00 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 8000812:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <MX_ADC1_Init+0xec>)
 8000814:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000816:	2306      	movs	r3, #6
 8000818:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800081e:	237f      	movs	r3, #127	@ 0x7f
 8000820:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000822:	2304      	movs	r3, #4
 8000824:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	4619      	mov	r1, r3
 800082e:	4806      	ldr	r0, [pc, #24]	@ (8000848 <MX_ADC1_Init+0xe8>)
 8000830:	f001 fa6c 	bl	8001d0c <HAL_ADC_ConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0xde>
		Error_Handler();
 800083a:	f000 f9e1 	bl	8000c00 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	3730      	adds	r7, #48	@ 0x30
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	2000008c 	.word	0x2000008c
 800084c:	32601000 	.word	0x32601000

08000850 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000856:	463b      	mov	r3, r7
 8000858:	2220      	movs	r2, #32
 800085a:	2100      	movs	r1, #0
 800085c:	4618      	mov	r0, r3
 800085e:	f005 f999 	bl	8005b94 <memset>

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 8000862:	4b2b      	ldr	r3, [pc, #172]	@ (8000910 <MX_ADC2_Init+0xc0>)
 8000864:	4a2b      	ldr	r2, [pc, #172]	@ (8000914 <MX_ADC2_Init+0xc4>)
 8000866:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000868:	4b29      	ldr	r3, [pc, #164]	@ (8000910 <MX_ADC2_Init+0xc0>)
 800086a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800086e:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000870:	4b27      	ldr	r3, [pc, #156]	@ (8000910 <MX_ADC2_Init+0xc0>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000876:	4b26      	ldr	r3, [pc, #152]	@ (8000910 <MX_ADC2_Init+0xc0>)
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
	hadc2.Init.GainCompensation = 0;
 800087c:	4b24      	ldr	r3, [pc, #144]	@ (8000910 <MX_ADC2_Init+0xc0>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000882:	4b23      	ldr	r3, [pc, #140]	@ (8000910 <MX_ADC2_Init+0xc0>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000888:	4b21      	ldr	r3, [pc, #132]	@ (8000910 <MX_ADC2_Init+0xc0>)
 800088a:	2204      	movs	r2, #4
 800088c:	619a      	str	r2, [r3, #24]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 800088e:	4b20      	ldr	r3, [pc, #128]	@ (8000910 <MX_ADC2_Init+0xc0>)
 8000890:	2200      	movs	r2, #0
 8000892:	771a      	strb	r2, [r3, #28]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8000894:	4b1e      	ldr	r3, [pc, #120]	@ (8000910 <MX_ADC2_Init+0xc0>)
 8000896:	2200      	movs	r2, #0
 8000898:	775a      	strb	r2, [r3, #29]
	hadc2.Init.NbrOfConversion = 1;
 800089a:	4b1d      	ldr	r3, [pc, #116]	@ (8000910 <MX_ADC2_Init+0xc0>)
 800089c:	2201      	movs	r2, #1
 800089e:	621a      	str	r2, [r3, #32]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000910 <MX_ADC2_Init+0xc0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a8:	4b19      	ldr	r3, [pc, #100]	@ (8000910 <MX_ADC2_Init+0xc0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ae:	4b18      	ldr	r3, [pc, #96]	@ (8000910 <MX_ADC2_Init+0xc0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc2.Init.DMAContinuousRequests = DISABLE;
 80008b4:	4b16      	ldr	r3, [pc, #88]	@ (8000910 <MX_ADC2_Init+0xc0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008bc:	4b14      	ldr	r3, [pc, #80]	@ (8000910 <MX_ADC2_Init+0xc0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc2.Init.OversamplingMode = DISABLE;
 80008c2:	4b13      	ldr	r3, [pc, #76]	@ (8000910 <MX_ADC2_Init+0xc0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 80008ca:	4811      	ldr	r0, [pc, #68]	@ (8000910 <MX_ADC2_Init+0xc0>)
 80008cc:	f000 fef8 	bl	80016c0 <HAL_ADC_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC2_Init+0x8a>
		Error_Handler();
 80008d6:	f000 f993 	bl	8000c00 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 80008da:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <MX_ADC2_Init+0xc8>)
 80008dc:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80008de:	2306      	movs	r3, #6
 80008e0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008e6:	237f      	movs	r3, #127	@ 0x7f
 80008e8:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ea:	2304      	movs	r3, #4
 80008ec:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 80008f2:	463b      	mov	r3, r7
 80008f4:	4619      	mov	r1, r3
 80008f6:	4806      	ldr	r0, [pc, #24]	@ (8000910 <MX_ADC2_Init+0xc0>)
 80008f8:	f001 fa08 	bl	8001d0c <HAL_ADC_ConfigChannel>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_ADC2_Init+0xb6>
		Error_Handler();
 8000902:	f000 f97d 	bl	8000c00 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	3720      	adds	r7, #32
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200000f8 	.word	0x200000f8
 8000914:	50000100 	.word	0x50000100
 8000918:	36902000 	.word	0x36902000

0800091c <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000920:	4b1b      	ldr	r3, [pc, #108]	@ (8000990 <MX_I2C2_Init+0x74>)
 8000922:	4a1c      	ldr	r2, [pc, #112]	@ (8000994 <MX_I2C2_Init+0x78>)
 8000924:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x10707DBC;
 8000926:	4b1a      	ldr	r3, [pc, #104]	@ (8000990 <MX_I2C2_Init+0x74>)
 8000928:	4a1b      	ldr	r2, [pc, #108]	@ (8000998 <MX_I2C2_Init+0x7c>)
 800092a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 800092c:	4b18      	ldr	r3, [pc, #96]	@ (8000990 <MX_I2C2_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000932:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <MX_I2C2_Init+0x74>)
 8000934:	2201      	movs	r2, #1
 8000936:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000938:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <MX_I2C2_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 800093e:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <MX_I2C2_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000944:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <MX_I2C2_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800094a:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <MX_I2C2_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000950:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_I2C2_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8000956:	480e      	ldr	r0, [pc, #56]	@ (8000990 <MX_I2C2_Init+0x74>)
 8000958:	f002 fa9e 	bl	8002e98 <HAL_I2C_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_I2C2_Init+0x4a>
		Error_Handler();
 8000962:	f000 f94d 	bl	8000c00 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8000966:	2100      	movs	r1, #0
 8000968:	4809      	ldr	r0, [pc, #36]	@ (8000990 <MX_I2C2_Init+0x74>)
 800096a:	f002 fb30 	bl	8002fce <HAL_I2CEx_ConfigAnalogFilter>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000974:	f000 f944 	bl	8000c00 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8000978:	2100      	movs	r1, #0
 800097a:	4805      	ldr	r0, [pc, #20]	@ (8000990 <MX_I2C2_Init+0x74>)
 800097c:	f002 fb72 	bl	8003064 <HAL_I2CEx_ConfigDigitalFilter>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_I2C2_Init+0x6e>
		Error_Handler();
 8000986:	f000 f93b 	bl	8000c00 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000164 	.word	0x20000164
 8000994:	40005800 	.word	0x40005800
 8000998:	10707dbc 	.word	0x10707dbc

0800099c <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <MX_SPI2_Init+0x74>)
 80009a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a14 <MX_SPI2_Init+0x78>)
 80009a4:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <MX_SPI2_Init+0x74>)
 80009a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009ac:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009ae:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <MX_SPI2_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80009b4:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <MX_SPI2_Init+0x74>)
 80009b6:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80009ba:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009bc:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <MX_SPI2_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80009c2:	4b13      	ldr	r3, [pc, #76]	@ (8000a10 <MX_SPI2_Init+0x74>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80009c8:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <MX_SPI2_Init+0x74>)
 80009ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009ce:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <MX_SPI2_Init+0x74>)
 80009d2:	2220      	movs	r2, #32
 80009d4:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <MX_SPI2_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <MX_SPI2_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <MX_SPI2_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 7;
 80009e8:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <MX_SPI2_Init+0x74>)
 80009ea:	2207      	movs	r2, #7
 80009ec:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009ee:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <MX_SPI2_Init+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <MX_SPI2_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80009fa:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <MX_SPI2_Init+0x74>)
 80009fc:	f003 fb18 	bl	8004030 <HAL_SPI_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_SPI2_Init+0x6e>
		Error_Handler();
 8000a06:	f000 f8fb 	bl	8000c00 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200001b8 	.word	0x200001b8
 8000a14:	40003800 	.word	0x40003800

08000a18 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08e      	sub	sp, #56	@ 0x38
 8000a1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000a1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000a38:	463b      	mov	r3, r7
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]
 8000a46:	615a      	str	r2, [r3, #20]
 8000a48:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000a4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000afc <MX_TIM2_Init+0xe4>)
 8000a4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a50:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 60000 - 1;
 8000a52:	4b2a      	ldr	r3, [pc, #168]	@ (8000afc <MX_TIM2_Init+0xe4>)
 8000a54:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000a58:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5a:	4b28      	ldr	r3, [pc, #160]	@ (8000afc <MX_TIM2_Init+0xe4>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 499;
 8000a60:	4b26      	ldr	r3, [pc, #152]	@ (8000afc <MX_TIM2_Init+0xe4>)
 8000a62:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000a66:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a68:	4b24      	ldr	r3, [pc, #144]	@ (8000afc <MX_TIM2_Init+0xe4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6e:	4b23      	ldr	r3, [pc, #140]	@ (8000afc <MX_TIM2_Init+0xe4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000a74:	4821      	ldr	r0, [pc, #132]	@ (8000afc <MX_TIM2_Init+0xe4>)
 8000a76:	f003 ff0d 	bl	8004894 <HAL_TIM_Base_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM2_Init+0x6c>
		Error_Handler();
 8000a80:	f000 f8be 	bl	8000c00 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a88:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000a8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	481a      	ldr	r0, [pc, #104]	@ (8000afc <MX_TIM2_Init+0xe4>)
 8000a92:	f004 f8cb 	bl	8004c2c <HAL_TIM_ConfigClockSource>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM2_Init+0x88>
		Error_Handler();
 8000a9c:	f000 f8b0 	bl	8000c00 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000aa0:	4816      	ldr	r0, [pc, #88]	@ (8000afc <MX_TIM2_Init+0xe4>)
 8000aa2:	f003 ff4e 	bl	8004942 <HAL_TIM_PWM_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM2_Init+0x98>
		Error_Handler();
 8000aac:	f000 f8a8 	bl	8000c00 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ab0:	2320      	movs	r3, #32
 8000ab2:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	480f      	ldr	r0, [pc, #60]	@ (8000afc <MX_TIM2_Init+0xe4>)
 8000ac0:	f004 fddc 	bl	800567c <HAL_TIMEx_MasterConfigSynchronization>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM2_Init+0xb6>
			!= HAL_OK) {
		Error_Handler();
 8000aca:	f000 f899 	bl	8000c00 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ace:	2360      	movs	r3, #96	@ 0x60
 8000ad0:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000ade:	463b      	mov	r3, r7
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4805      	ldr	r0, [pc, #20]	@ (8000afc <MX_TIM2_Init+0xe4>)
 8000ae6:	f003 ff8d 	bl	8004a04 <HAL_TIM_PWM_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM2_Init+0xdc>
			!= HAL_OK) {
		Error_Handler();
 8000af0:	f000 f886 	bl	8000c00 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	3738      	adds	r7, #56	@ 0x38
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2000021c 	.word	0x2000021c

08000b00 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc0 <MX_GPIO_Init+0xc0>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1a:	4a29      	ldr	r2, [pc, #164]	@ (8000bc0 <MX_GPIO_Init+0xc0>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b22:	4b27      	ldr	r3, [pc, #156]	@ (8000bc0 <MX_GPIO_Init+0xc0>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	4b24      	ldr	r3, [pc, #144]	@ (8000bc0 <MX_GPIO_Init+0xc0>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b32:	4a23      	ldr	r2, [pc, #140]	@ (8000bc0 <MX_GPIO_Init+0xc0>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b3a:	4b21      	ldr	r3, [pc, #132]	@ (8000bc0 <MX_GPIO_Init+0xc0>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin, GPIO_PIN_SET);
 8000b46:	2201      	movs	r2, #1
 8000b48:	2140      	movs	r1, #64	@ 0x40
 8000b4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b4e:	f002 f971 	bl	8002e34 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin | PRS_Ready_Pin | System_Ready_Pin,
 8000b52:	2201      	movs	r2, #1
 8000b54:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 8000b58:	481a      	ldr	r0, [pc, #104]	@ (8000bc4 <MX_GPIO_Init+0xc4>)
 8000b5a:	f002 f96b 	bl	8002e34 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin : Valve_Enable_Pin */
	GPIO_InitStruct.Pin = Valve_Enable_Pin;
 8000b5e:	2340      	movs	r3, #64	@ 0x40
 8000b60:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b66:	2302      	movs	r3, #2
 8000b68:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(Valve_Enable_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	4619      	mov	r1, r3
 8000b74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b78:	f001 ffda 	bl	8002b30 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI_CS_Pin */
	GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000b7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b80:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	4619      	mov	r1, r3
 8000b94:	480b      	ldr	r0, [pc, #44]	@ (8000bc4 <MX_GPIO_Init+0xc4>)
 8000b96:	f001 ffcb 	bl	8002b30 <HAL_GPIO_Init>

	/*Configure GPIO pins : PRS_Ready_Pin System_Ready_Pin */
	GPIO_InitStruct.Pin = PRS_Ready_Pin | System_Ready_Pin;
 8000b9a:	23c0      	movs	r3, #192	@ 0xc0
 8000b9c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000baa:	f107 030c 	add.w	r3, r7, #12
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4804      	ldr	r0, [pc, #16]	@ (8000bc4 <MX_GPIO_Init+0xc4>)
 8000bb2:	f001 ffbd 	bl	8002b30 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb6:	bf00      	nop
 8000bb8:	3720      	adds	r7, #32
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	48000400 	.word	0x48000400

08000bc8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	e009      	b.n	8000bee <_write+0x26>
		ITM_SendChar(*ptr++);
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	1c5a      	adds	r2, r3, #1
 8000bde:	60ba      	str	r2, [r7, #8]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fb6c 	bl	80002c0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	3301      	adds	r3, #1
 8000bec:	617b      	str	r3, [r7, #20]
 8000bee:	697a      	ldr	r2, [r7, #20]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	dbf1      	blt.n	8000bda <_write+0x12>
	}
	return len;
 8000bf6:	687b      	ldr	r3, [r7, #4]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <Error_Handler+0x8>

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c16:	4a0e      	ldr	r2, [pc, #56]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c2e:	4a08      	ldr	r2, [pc, #32]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c34:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c42:	f002 faff 	bl	8003244 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40021000 	.word	0x40021000

08000c54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b09c      	sub	sp, #112	@ 0x70
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c6c:	f107 0318 	add.w	r3, r7, #24
 8000c70:	2244      	movs	r2, #68	@ 0x44
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f004 ff8d 	bl	8005b94 <memset>
  if(hadc->Instance==ADC1)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c82:	d13d      	bne.n	8000d00 <HAL_ADC_MspInit+0xac>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000c84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c88:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8000c8a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c8e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c90:	f107 0318 	add.w	r3, r7, #24
 8000c94:	4618      	mov	r0, r3
 8000c96:	f002 ffdb 	bl	8003c50 <HAL_RCCEx_PeriphCLKConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000ca0:	f7ff ffae 	bl	8000c00 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ca4:	4b3a      	ldr	r3, [pc, #232]	@ (8000d90 <HAL_ADC_MspInit+0x13c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	4a39      	ldr	r2, [pc, #228]	@ (8000d90 <HAL_ADC_MspInit+0x13c>)
 8000cac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000cae:	4b38      	ldr	r3, [pc, #224]	@ (8000d90 <HAL_ADC_MspInit+0x13c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d10b      	bne.n	8000cce <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000cb6:	4b37      	ldr	r3, [pc, #220]	@ (8000d94 <HAL_ADC_MspInit+0x140>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cba:	4a36      	ldr	r2, [pc, #216]	@ (8000d94 <HAL_ADC_MspInit+0x140>)
 8000cbc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000cc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cc2:	4b34      	ldr	r3, [pc, #208]	@ (8000d94 <HAL_ADC_MspInit+0x140>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	4b31      	ldr	r3, [pc, #196]	@ (8000d94 <HAL_ADC_MspInit+0x140>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd2:	4a30      	ldr	r2, [pc, #192]	@ (8000d94 <HAL_ADC_MspInit+0x140>)
 8000cd4:	f043 0302 	orr.w	r3, r3, #2
 8000cd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cda:	4b2e      	ldr	r3, [pc, #184]	@ (8000d94 <HAL_ADC_MspInit+0x140>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Low_Pressure_ADC_Pin;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cea:	2303      	movs	r3, #3
 8000cec:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(Low_Pressure_ADC_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4827      	ldr	r0, [pc, #156]	@ (8000d98 <HAL_ADC_MspInit+0x144>)
 8000cfa:	f001 ff19 	bl	8002b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000cfe:	e042      	b.n	8000d86 <HAL_ADC_MspInit+0x132>
  else if(hadc->Instance==ADC2)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a25      	ldr	r2, [pc, #148]	@ (8000d9c <HAL_ADC_MspInit+0x148>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d13d      	bne.n	8000d86 <HAL_ADC_MspInit+0x132>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000d0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8000d10:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d14:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d16:	f107 0318 	add.w	r3, r7, #24
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f002 ff98 	bl	8003c50 <HAL_RCCEx_PeriphCLKConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_ADC_MspInit+0xd6>
      Error_Handler();
 8000d26:	f7ff ff6b 	bl	8000c00 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d2a:	4b19      	ldr	r3, [pc, #100]	@ (8000d90 <HAL_ADC_MspInit+0x13c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	4a17      	ldr	r2, [pc, #92]	@ (8000d90 <HAL_ADC_MspInit+0x13c>)
 8000d32:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d34:	4b16      	ldr	r3, [pc, #88]	@ (8000d90 <HAL_ADC_MspInit+0x13c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d10b      	bne.n	8000d54 <HAL_ADC_MspInit+0x100>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d3c:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <HAL_ADC_MspInit+0x140>)
 8000d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d40:	4a14      	ldr	r2, [pc, #80]	@ (8000d94 <HAL_ADC_MspInit+0x140>)
 8000d42:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d48:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <HAL_ADC_MspInit+0x140>)
 8000d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d54:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <HAL_ADC_MspInit+0x140>)
 8000d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d58:	4a0e      	ldr	r2, [pc, #56]	@ (8000d94 <HAL_ADC_MspInit+0x140>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d60:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <HAL_ADC_MspInit+0x140>)
 8000d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = High_Pressure_ADC_Pin;
 8000d6c:	2320      	movs	r3, #32
 8000d6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d70:	2303      	movs	r3, #3
 8000d72:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(High_Pressure_ADC_GPIO_Port, &GPIO_InitStruct);
 8000d78:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d82:	f001 fed5 	bl	8002b30 <HAL_GPIO_Init>
}
 8000d86:	bf00      	nop
 8000d88:	3770      	adds	r7, #112	@ 0x70
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000270 	.word	0x20000270
 8000d94:	40021000 	.word	0x40021000
 8000d98:	48000400 	.word	0x48000400
 8000d9c:	50000100 	.word	0x50000100

08000da0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b09a      	sub	sp, #104	@ 0x68
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	2244      	movs	r2, #68	@ 0x44
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f004 fee7 	bl	8005b94 <memset>
  if(hi2c->Instance==I2C2)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a1f      	ldr	r2, [pc, #124]	@ (8000e48 <HAL_I2C_MspInit+0xa8>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d137      	bne.n	8000e40 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000dd0:	2380      	movs	r3, #128	@ 0x80
 8000dd2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd8:	f107 0310 	add.w	r3, r7, #16
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f002 ff37 	bl	8003c50 <HAL_RCCEx_PeriphCLKConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000de8:	f7ff ff0a 	bl	8000c00 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dec:	4b17      	ldr	r3, [pc, #92]	@ (8000e4c <HAL_I2C_MspInit+0xac>)
 8000dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df0:	4a16      	ldr	r2, [pc, #88]	@ (8000e4c <HAL_I2C_MspInit+0xac>)
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df8:	4b14      	ldr	r3, [pc, #80]	@ (8000e4c <HAL_I2C_MspInit+0xac>)
 8000dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e04:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e08:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e0a:	2312      	movs	r3, #18
 8000e0c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e16:	2304      	movs	r3, #4
 8000e18:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e24:	f001 fe84 	bl	8002b30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e28:	4b08      	ldr	r3, [pc, #32]	@ (8000e4c <HAL_I2C_MspInit+0xac>)
 8000e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e2c:	4a07      	ldr	r2, [pc, #28]	@ (8000e4c <HAL_I2C_MspInit+0xac>)
 8000e2e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e32:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e34:	4b05      	ldr	r3, [pc, #20]	@ (8000e4c <HAL_I2C_MspInit+0xac>)
 8000e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e40:	bf00      	nop
 8000e42:	3768      	adds	r7, #104	@ 0x68
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40005800 	.word	0x40005800
 8000e4c:	40021000 	.word	0x40021000

08000e50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	@ 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a17      	ldr	r2, [pc, #92]	@ (8000ecc <HAL_SPI_MspInit+0x7c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d128      	bne.n	8000ec4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e72:	4b17      	ldr	r3, [pc, #92]	@ (8000ed0 <HAL_SPI_MspInit+0x80>)
 8000e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e76:	4a16      	ldr	r2, [pc, #88]	@ (8000ed0 <HAL_SPI_MspInit+0x80>)
 8000e78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e7e:	4b14      	ldr	r3, [pc, #80]	@ (8000ed0 <HAL_SPI_MspInit+0x80>)
 8000e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <HAL_SPI_MspInit+0x80>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8e:	4a10      	ldr	r2, [pc, #64]	@ (8000ed0 <HAL_SPI_MspInit+0x80>)
 8000e90:	f043 0302 	orr.w	r3, r3, #2
 8000e94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <HAL_SPI_MspInit+0x80>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000ea2:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eb4:	2305      	movs	r3, #5
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4805      	ldr	r0, [pc, #20]	@ (8000ed4 <HAL_SPI_MspInit+0x84>)
 8000ec0:	f001 fe36 	bl	8002b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ec4:	bf00      	nop
 8000ec6:	3728      	adds	r7, #40	@ 0x28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40003800 	.word	0x40003800
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	48000400 	.word	0x48000400

08000ed8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ee8:	d10b      	bne.n	8000f02 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eea:	4b09      	ldr	r3, [pc, #36]	@ (8000f10 <HAL_TIM_Base_MspInit+0x38>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eee:	4a08      	ldr	r2, [pc, #32]	@ (8000f10 <HAL_TIM_Base_MspInit+0x38>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ef6:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <HAL_TIM_Base_MspInit+0x38>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000

08000f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <NMI_Handler+0x4>

08000f1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <HardFault_Handler+0x4>

08000f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <MemManage_Handler+0x4>

08000f2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <BusFault_Handler+0x4>

08000f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <UsageFault_Handler+0x4>

08000f3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f6a:	f000 f917 	bl	800119c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	e00a      	b.n	8000f9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f84:	f3af 8000 	nop.w
 8000f88:	4601      	mov	r1, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1c5a      	adds	r2, r3, #1
 8000f8e:	60ba      	str	r2, [r7, #8]
 8000f90:	b2ca      	uxtb	r2, r1
 8000f92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	3301      	adds	r3, #1
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	dbf0      	blt.n	8000f84 <_read+0x12>
  }

  return len;
 8000fa2:	687b      	ldr	r3, [r7, #4]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <_close>:
  }
  return len;
}

int _close(int file)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fd4:	605a      	str	r2, [r3, #4]
  return 0;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <_isatty>:

int _isatty(int file)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fec:	2301      	movs	r3, #1
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b085      	sub	sp, #20
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	60f8      	str	r0, [r7, #12]
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800101c:	4a14      	ldr	r2, [pc, #80]	@ (8001070 <_sbrk+0x5c>)
 800101e:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <_sbrk+0x60>)
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001028:	4b13      	ldr	r3, [pc, #76]	@ (8001078 <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d102      	bne.n	8001036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001030:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <_sbrk+0x64>)
 8001032:	4a12      	ldr	r2, [pc, #72]	@ (800107c <_sbrk+0x68>)
 8001034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001036:	4b10      	ldr	r3, [pc, #64]	@ (8001078 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	429a      	cmp	r2, r3
 8001042:	d207      	bcs.n	8001054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001044:	f004 fdf4 	bl	8005c30 <__errno>
 8001048:	4603      	mov	r3, r0
 800104a:	220c      	movs	r2, #12
 800104c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800104e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001052:	e009      	b.n	8001068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001054:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800105a:	4b07      	ldr	r3, [pc, #28]	@ (8001078 <_sbrk+0x64>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	4a05      	ldr	r2, [pc, #20]	@ (8001078 <_sbrk+0x64>)
 8001064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001066:	68fb      	ldr	r3, [r7, #12]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20008000 	.word	0x20008000
 8001074:	00000400 	.word	0x00000400
 8001078:	20000274 	.word	0x20000274
 800107c:	200003c8 	.word	0x200003c8

08001080 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001084:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <SystemInit+0x20>)
 8001086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800108a:	4a05      	ldr	r2, [pc, #20]	@ (80010a0 <SystemInit+0x20>)
 800108c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001090:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010a4:	480d      	ldr	r0, [pc, #52]	@ (80010dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010a6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80010a8:	f7ff ffea 	bl	8001080 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010ac:	480c      	ldr	r0, [pc, #48]	@ (80010e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80010ae:	490d      	ldr	r1, [pc, #52]	@ (80010e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010b0:	4a0d      	ldr	r2, [pc, #52]	@ (80010e8 <LoopForever+0xe>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80010b4:	e002      	b.n	80010bc <LoopCopyDataInit>

080010b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ba:	3304      	adds	r3, #4

080010bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c0:	d3f9      	bcc.n	80010b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c2:	4a0a      	ldr	r2, [pc, #40]	@ (80010ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80010c4:	4c0a      	ldr	r4, [pc, #40]	@ (80010f0 <LoopForever+0x16>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c8:	e001      	b.n	80010ce <LoopFillZerobss>

080010ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010cc:	3204      	adds	r2, #4

080010ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d0:	d3fb      	bcc.n	80010ca <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80010d2:	f004 fdb3 	bl	8005c3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010d6:	f7ff f91b 	bl	8000310 <main>

080010da <LoopForever>:

LoopForever:
    b LoopForever
 80010da:	e7fe      	b.n	80010da <LoopForever>
  ldr   r0, =_estack
 80010dc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80010e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010e8:	080068b8 	.word	0x080068b8
  ldr r2, =_sbss
 80010ec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010f0:	200003c8 	.word	0x200003c8

080010f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010f4:	e7fe      	b.n	80010f4 <ADC1_2_IRQHandler>

080010f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010fc:	2300      	movs	r3, #0
 80010fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001100:	2003      	movs	r0, #3
 8001102:	f001 fce3 	bl	8002acc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001106:	200f      	movs	r0, #15
 8001108:	f000 f80e 	bl	8001128 <HAL_InitTick>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d002      	beq.n	8001118 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	71fb      	strb	r3, [r7, #7]
 8001116:	e001      	b.n	800111c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001118:	f7ff fd78 	bl	8000c0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800111c:	79fb      	ldrb	r3, [r7, #7]

}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001130:	2300      	movs	r3, #0
 8001132:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001134:	4b16      	ldr	r3, [pc, #88]	@ (8001190 <HAL_InitTick+0x68>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d022      	beq.n	8001182 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800113c:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <HAL_InitTick+0x6c>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <HAL_InitTick+0x68>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001148:	fbb1 f3f3 	udiv	r3, r1, r3
 800114c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001150:	4618      	mov	r0, r3
 8001152:	f001 fce0 	bl	8002b16 <HAL_SYSTICK_Config>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d10f      	bne.n	800117c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b0f      	cmp	r3, #15
 8001160:	d809      	bhi.n	8001176 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001162:	2200      	movs	r2, #0
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800116a:	f001 fcba 	bl	8002ae2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800116e:	4a0a      	ldr	r2, [pc, #40]	@ (8001198 <HAL_InitTick+0x70>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	e007      	b.n	8001186 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	73fb      	strb	r3, [r7, #15]
 800117a:	e004      	b.n	8001186 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	73fb      	strb	r3, [r7, #15]
 8001180:	e001      	b.n	8001186 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001186:	7bfb      	ldrb	r3, [r7, #15]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000010 	.word	0x20000010
 8001194:	20000008 	.word	0x20000008
 8001198:	2000000c 	.word	0x2000000c

0800119c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a0:	4b05      	ldr	r3, [pc, #20]	@ (80011b8 <HAL_IncTick+0x1c>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b05      	ldr	r3, [pc, #20]	@ (80011bc <HAL_IncTick+0x20>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4413      	add	r3, r2
 80011aa:	4a03      	ldr	r2, [pc, #12]	@ (80011b8 <HAL_IncTick+0x1c>)
 80011ac:	6013      	str	r3, [r2, #0]
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	20000278 	.word	0x20000278
 80011bc:	20000010 	.word	0x20000010

080011c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return uwTick;
 80011c4:	4b03      	ldr	r3, [pc, #12]	@ (80011d4 <HAL_GetTick+0x14>)
 80011c6:	681b      	ldr	r3, [r3, #0]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20000278 	.word	0x20000278

080011d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e0:	f7ff ffee 	bl	80011c0 <HAL_GetTick>
 80011e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011f0:	d004      	beq.n	80011fc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f2:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <HAL_Delay+0x40>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	4413      	add	r3, r2
 80011fa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011fc:	bf00      	nop
 80011fe:	f7ff ffdf 	bl	80011c0 <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	68fa      	ldr	r2, [r7, #12]
 800120a:	429a      	cmp	r2, r3
 800120c:	d8f7      	bhi.n	80011fe <HAL_Delay+0x26>
  {
  }
}
 800120e:	bf00      	nop
 8001210:	bf00      	nop
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000010 	.word	0x20000010

0800121c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	609a      	str	r2, [r3, #8]
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	609a      	str	r2, [r3, #8]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001284:	b480      	push	{r7}
 8001286:	b087      	sub	sp, #28
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
 8001290:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	3360      	adds	r3, #96	@ 0x60
 8001296:	461a      	mov	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4413      	add	r3, r2
 800129e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <LL_ADC_SetOffset+0x44>)
 80012a6:	4013      	ands	r3, r2
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	4313      	orrs	r3, r2
 80012b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80012bc:	bf00      	nop
 80012be:	371c      	adds	r7, #28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	03fff000 	.word	0x03fff000

080012cc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3360      	adds	r3, #96	@ 0x60
 80012da:	461a      	mov	r2, r3
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b087      	sub	sp, #28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	3360      	adds	r3, #96	@ 0x60
 8001308:	461a      	mov	r2, r3
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	431a      	orrs	r2, r3
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001322:	bf00      	nop
 8001324:	371c      	adds	r7, #28
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800132e:	b480      	push	{r7}
 8001330:	b087      	sub	sp, #28
 8001332:	af00      	add	r7, sp, #0
 8001334:	60f8      	str	r0, [r7, #12]
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	3360      	adds	r3, #96	@ 0x60
 800133e:	461a      	mov	r2, r3
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	431a      	orrs	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001358:	bf00      	nop
 800135a:	371c      	adds	r7, #28
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001364:	b480      	push	{r7}
 8001366:	b087      	sub	sp, #28
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	3360      	adds	r3, #96	@ 0x60
 8001374:	461a      	mov	r2, r3
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	431a      	orrs	r2, r3
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800138e:	bf00      	nop
 8001390:	371c      	adds	r7, #28
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	431a      	orrs	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	615a      	str	r2, [r3, #20]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80013d4:	2301      	movs	r3, #1
 80013d6:	e000      	b.n	80013da <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b087      	sub	sp, #28
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	60f8      	str	r0, [r7, #12]
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	3330      	adds	r3, #48	@ 0x30
 80013f6:	461a      	mov	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	0a1b      	lsrs	r3, r3, #8
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	f003 030c 	and.w	r3, r3, #12
 8001402:	4413      	add	r3, r2
 8001404:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	f003 031f 	and.w	r3, r3, #31
 8001410:	211f      	movs	r1, #31
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	401a      	ands	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	0e9b      	lsrs	r3, r3, #26
 800141e:	f003 011f 	and.w	r1, r3, #31
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	f003 031f 	and.w	r3, r3, #31
 8001428:	fa01 f303 	lsl.w	r3, r1, r3
 800142c:	431a      	orrs	r2, r3
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001432:	bf00      	nop
 8001434:	371c      	adds	r7, #28
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800143e:	b480      	push	{r7}
 8001440:	b087      	sub	sp, #28
 8001442:	af00      	add	r7, sp, #0
 8001444:	60f8      	str	r0, [r7, #12]
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	3314      	adds	r3, #20
 800144e:	461a      	mov	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	0e5b      	lsrs	r3, r3, #25
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	4413      	add	r3, r2
 800145c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	0d1b      	lsrs	r3, r3, #20
 8001466:	f003 031f 	and.w	r3, r3, #31
 800146a:	2107      	movs	r1, #7
 800146c:	fa01 f303 	lsl.w	r3, r1, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	401a      	ands	r2, r3
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	0d1b      	lsrs	r3, r3, #20
 8001478:	f003 031f 	and.w	r3, r3, #31
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	fa01 f303 	lsl.w	r3, r1, r3
 8001482:	431a      	orrs	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001488:	bf00      	nop
 800148a:	371c      	adds	r7, #28
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014ac:	43db      	mvns	r3, r3
 80014ae:	401a      	ands	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f003 0318 	and.w	r3, r3, #24
 80014b6:	4908      	ldr	r1, [pc, #32]	@ (80014d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80014b8:	40d9      	lsrs	r1, r3
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	400b      	ands	r3, r1
 80014be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014c2:	431a      	orrs	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80014ca:	bf00      	nop
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	0007ffff 	.word	0x0007ffff

080014dc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 031f 	and.w	r3, r3, #31
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001524:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6093      	str	r3, [r2, #8]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001548:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800154c:	d101      	bne.n	8001552 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800154e:	2301      	movs	r3, #1
 8001550:	e000      	b.n	8001554 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001570:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001574:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001598:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800159c:	d101      	bne.n	80015a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015c4:	f043 0201 	orr.w	r2, r3, #1
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015ec:	f043 0202 	orr.w	r2, r3, #2
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b01      	cmp	r3, #1
 8001612:	d101      	bne.n	8001618 <LL_ADC_IsEnabled+0x18>
 8001614:	2301      	movs	r3, #1
 8001616:	e000      	b.n	800161a <LL_ADC_IsEnabled+0x1a>
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b02      	cmp	r3, #2
 8001638:	d101      	bne.n	800163e <LL_ADC_IsDisableOngoing+0x18>
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <LL_ADC_IsDisableOngoing+0x1a>
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800165c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001660:	f043 0204 	orr.w	r2, r3, #4
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b04      	cmp	r3, #4
 8001686:	d101      	bne.n	800168c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001688:	2301      	movs	r3, #1
 800168a:	e000      	b.n	800168e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	2b08      	cmp	r3, #8
 80016ac:	d101      	bne.n	80016b2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016c0:	b590      	push	{r4, r7, lr}
 80016c2:	b089      	sub	sp, #36	@ 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016c8:	2300      	movs	r3, #0
 80016ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e167      	b.n	80019aa <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d109      	bne.n	80016fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff fab3 	bl	8000c54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff19 	bl	8001538 <LL_ADC_IsDeepPowerDownEnabled>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d004      	beq.n	8001716 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff feff 	bl	8001514 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff ff34 	bl	8001588 <LL_ADC_IsInternalRegulatorEnabled>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d115      	bne.n	8001752 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff ff18 	bl	8001560 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001730:	4ba0      	ldr	r3, [pc, #640]	@ (80019b4 <HAL_ADC_Init+0x2f4>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	099b      	lsrs	r3, r3, #6
 8001736:	4aa0      	ldr	r2, [pc, #640]	@ (80019b8 <HAL_ADC_Init+0x2f8>)
 8001738:	fba2 2303 	umull	r2, r3, r2, r3
 800173c:	099b      	lsrs	r3, r3, #6
 800173e:	3301      	adds	r3, #1
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001744:	e002      	b.n	800174c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	3b01      	subs	r3, #1
 800174a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f9      	bne.n	8001746 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff ff16 	bl	8001588 <LL_ADC_IsInternalRegulatorEnabled>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10d      	bne.n	800177e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001766:	f043 0210 	orr.w	r2, r3, #16
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001772:	f043 0201 	orr.w	r2, r3, #1
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff ff76 	bl	8001674 <LL_ADC_REG_IsConversionOngoing>
 8001788:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800178e:	f003 0310 	and.w	r3, r3, #16
 8001792:	2b00      	cmp	r3, #0
 8001794:	f040 8100 	bne.w	8001998 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	2b00      	cmp	r3, #0
 800179c:	f040 80fc 	bne.w	8001998 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80017a8:	f043 0202 	orr.w	r2, r3, #2
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff23 	bl	8001600 <LL_ADC_IsEnabled>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d111      	bne.n	80017e4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017c0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80017c4:	f7ff ff1c 	bl	8001600 <LL_ADC_IsEnabled>
 80017c8:	4604      	mov	r4, r0
 80017ca:	487c      	ldr	r0, [pc, #496]	@ (80019bc <HAL_ADC_Init+0x2fc>)
 80017cc:	f7ff ff18 	bl	8001600 <LL_ADC_IsEnabled>
 80017d0:	4603      	mov	r3, r0
 80017d2:	4323      	orrs	r3, r4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d105      	bne.n	80017e4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	4619      	mov	r1, r3
 80017de:	4878      	ldr	r0, [pc, #480]	@ (80019c0 <HAL_ADC_Init+0x300>)
 80017e0:	f7ff fd1c 	bl	800121c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	7f5b      	ldrb	r3, [r3, #29]
 80017e8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017ee:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80017f4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80017fa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001802:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800180e:	2b01      	cmp	r3, #1
 8001810:	d106      	bne.n	8001820 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001816:	3b01      	subs	r3, #1
 8001818:	045b      	lsls	r3, r3, #17
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4313      	orrs	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001824:	2b00      	cmp	r3, #0
 8001826:	d009      	beq.n	800183c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001834:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4313      	orrs	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	4b60      	ldr	r3, [pc, #384]	@ (80019c4 <HAL_ADC_Init+0x304>)
 8001844:	4013      	ands	r3, r2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6812      	ldr	r2, [r2, #0]
 800184a:	69b9      	ldr	r1, [r7, #24]
 800184c:	430b      	orrs	r3, r1
 800184e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ff15 	bl	800169a <LL_ADC_INJ_IsConversionOngoing>
 8001870:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d16d      	bne.n	8001954 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d16a      	bne.n	8001954 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001882:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800188a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800189a:	f023 0302 	bic.w	r3, r3, #2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6812      	ldr	r2, [r2, #0]
 80018a2:	69b9      	ldr	r1, [r7, #24]
 80018a4:	430b      	orrs	r3, r1
 80018a6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d017      	beq.n	80018e0 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	691a      	ldr	r2, [r3, #16]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80018be:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80018c8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80018cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6911      	ldr	r1, [r2, #16]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	430b      	orrs	r3, r1
 80018da:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80018de:	e013      	b.n	8001908 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	691a      	ldr	r2, [r3, #16]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80018ee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001900:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001904:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800190e:	2b01      	cmp	r3, #1
 8001910:	d118      	bne.n	8001944 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800191c:	f023 0304 	bic.w	r3, r3, #4
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001928:	4311      	orrs	r1, r2
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800192e:	4311      	orrs	r1, r2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001934:	430a      	orrs	r2, r1
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f042 0201 	orr.w	r2, r2, #1
 8001940:	611a      	str	r2, [r3, #16]
 8001942:	e007      	b.n	8001954 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	691a      	ldr	r2, [r3, #16]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0201 	bic.w	r2, r2, #1
 8001952:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d10c      	bne.n	8001976 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	f023 010f 	bic.w	r1, r3, #15
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	1e5a      	subs	r2, r3, #1
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	631a      	str	r2, [r3, #48]	@ 0x30
 8001974:	e007      	b.n	8001986 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 020f 	bic.w	r2, r2, #15
 8001984:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800198a:	f023 0303 	bic.w	r3, r3, #3
 800198e:	f043 0201 	orr.w	r2, r3, #1
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001996:	e007      	b.n	80019a8 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800199c:	f043 0210 	orr.w	r2, r3, #16
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80019a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3724      	adds	r7, #36	@ 0x24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd90      	pop	{r4, r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000008 	.word	0x20000008
 80019b8:	053e2d63 	.word	0x053e2d63
 80019bc:	50000100 	.word	0x50000100
 80019c0:	50000300 	.word	0x50000300
 80019c4:	fff04007 	.word	0xfff04007

080019c8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019d0:	4859      	ldr	r0, [pc, #356]	@ (8001b38 <HAL_ADC_Start+0x170>)
 80019d2:	f7ff fd83 	bl	80014dc <LL_ADC_GetMultimode>
 80019d6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fe49 	bl	8001674 <LL_ADC_REG_IsConversionOngoing>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f040 809f 	bne.w	8001b28 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d101      	bne.n	80019f8 <HAL_ADC_Start+0x30>
 80019f4:	2302      	movs	r3, #2
 80019f6:	e09a      	b.n	8001b2e <HAL_ADC_Start+0x166>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 fd73 	bl	80024ec <ADC_Enable>
 8001a06:	4603      	mov	r3, r0
 8001a08:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a0a:	7dfb      	ldrb	r3, [r7, #23]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f040 8086 	bne.w	8001b1e <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a16:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a1a:	f023 0301 	bic.w	r3, r3, #1
 8001a1e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a44      	ldr	r2, [pc, #272]	@ (8001b3c <HAL_ADC_Start+0x174>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d002      	beq.n	8001a36 <HAL_ADC_Start+0x6e>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	e001      	b.n	8001a3a <HAL_ADC_Start+0x72>
 8001a36:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6812      	ldr	r2, [r2, #0]
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d002      	beq.n	8001a48 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d105      	bne.n	8001a54 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a4c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a60:	d106      	bne.n	8001a70 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a66:	f023 0206 	bic.w	r2, r3, #6
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	661a      	str	r2, [r3, #96]	@ 0x60
 8001a6e:	e002      	b.n	8001a76 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	221c      	movs	r2, #28
 8001a7c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a2c      	ldr	r2, [pc, #176]	@ (8001b3c <HAL_ADC_Start+0x174>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d002      	beq.n	8001a96 <HAL_ADC_Start+0xce>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	e001      	b.n	8001a9a <HAL_ADC_Start+0xd2>
 8001a96:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d008      	beq.n	8001ab4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	2b05      	cmp	r3, #5
 8001aac:	d002      	beq.n	8001ab4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	2b09      	cmp	r3, #9
 8001ab2:	d114      	bne.n	8001ade <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d007      	beq.n	8001ad2 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001aca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fdb8 	bl	800164c <LL_ADC_REG_StartConversion>
 8001adc:	e026      	b.n	8001b2c <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ae2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a13      	ldr	r2, [pc, #76]	@ (8001b3c <HAL_ADC_Start+0x174>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d002      	beq.n	8001afa <HAL_ADC_Start+0x132>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	e001      	b.n	8001afe <HAL_ADC_Start+0x136>
 8001afa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001afe:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00f      	beq.n	8001b2c <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b10:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b14:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b1c:	e006      	b.n	8001b2c <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001b26:	e001      	b.n	8001b2c <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	50000300 	.word	0x50000300
 8001b3c:	50000100 	.word	0x50000100

08001b40 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b4a:	4867      	ldr	r0, [pc, #412]	@ (8001ce8 <HAL_ADC_PollForConversion+0x1a8>)
 8001b4c:	f7ff fcc6 	bl	80014dc <LL_ADC_GetMultimode>
 8001b50:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d102      	bne.n	8001b60 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001b5a:	2308      	movs	r3, #8
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	e02a      	b.n	8001bb6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d005      	beq.n	8001b72 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	2b05      	cmp	r3, #5
 8001b6a:	d002      	beq.n	8001b72 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	2b09      	cmp	r3, #9
 8001b70:	d111      	bne.n	8001b96 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d007      	beq.n	8001b90 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b84:	f043 0220 	orr.w	r2, r3, #32
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0a6      	b.n	8001cde <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001b90:	2304      	movs	r3, #4
 8001b92:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001b94:	e00f      	b.n	8001bb6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001b96:	4854      	ldr	r0, [pc, #336]	@ (8001ce8 <HAL_ADC_PollForConversion+0x1a8>)
 8001b98:	f7ff fcae 	bl	80014f8 <LL_ADC_GetMultiDMATransfer>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d007      	beq.n	8001bb2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba6:	f043 0220 	orr.w	r2, r3, #32
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e095      	b.n	8001cde <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001bb6:	f7ff fb03 	bl	80011c0 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001bbc:	e021      	b.n	8001c02 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001bc4:	d01d      	beq.n	8001c02 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001bc6:	f7ff fafb 	bl	80011c0 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d302      	bcc.n	8001bdc <HAL_ADC_PollForConversion+0x9c>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d112      	bne.n	8001c02 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	4013      	ands	r3, r2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10b      	bne.n	8001c02 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bee:	f043 0204 	orr.w	r2, r3, #4
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e06d      	b.n	8001cde <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0d6      	beq.n	8001bbe <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c14:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fbcd 	bl	80013c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d01c      	beq.n	8001c66 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	7f5b      	ldrb	r3, [r3, #29]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d118      	bne.n	8001c66 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d111      	bne.n	8001c66 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c46:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d105      	bne.n	8001c66 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c5e:	f043 0201 	orr.w	r2, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a20      	ldr	r2, [pc, #128]	@ (8001cec <HAL_ADC_PollForConversion+0x1ac>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d002      	beq.n	8001c76 <HAL_ADC_PollForConversion+0x136>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	e001      	b.n	8001c7a <HAL_ADC_PollForConversion+0x13a>
 8001c76:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d008      	beq.n	8001c94 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	2b05      	cmp	r3, #5
 8001c8c:	d002      	beq.n	8001c94 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	2b09      	cmp	r3, #9
 8001c92:	d104      	bne.n	8001c9e <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	61bb      	str	r3, [r7, #24]
 8001c9c:	e00d      	b.n	8001cba <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a12      	ldr	r2, [pc, #72]	@ (8001cec <HAL_ADC_PollForConversion+0x1ac>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d002      	beq.n	8001cae <HAL_ADC_PollForConversion+0x16e>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	e001      	b.n	8001cb2 <HAL_ADC_PollForConversion+0x172>
 8001cae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001cb2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d104      	bne.n	8001cca <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2208      	movs	r2, #8
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	e008      	b.n	8001cdc <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d103      	bne.n	8001cdc <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	220c      	movs	r2, #12
 8001cda:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3720      	adds	r7, #32
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	50000300 	.word	0x50000300
 8001cec:	50000100 	.word	0x50000100

08001cf0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
	...

08001d0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b0b6      	sub	sp, #216	@ 0xd8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x22>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e3c8      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x7b4>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fc9a 	bl	8001674 <LL_ADC_REG_IsConversionOngoing>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f040 83ad 	bne.w	80024a2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	6859      	ldr	r1, [r3, #4]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	f7ff fb46 	bl	80013e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff fc88 	bl	8001674 <LL_ADC_REG_IsConversionOngoing>
 8001d64:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fc94 	bl	800169a <LL_ADC_INJ_IsConversionOngoing>
 8001d72:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d76:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f040 81d9 	bne.w	8002132 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f040 81d4 	bne.w	8002132 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001d92:	d10f      	bne.n	8001db4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6818      	ldr	r0, [r3, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f7ff fb4d 	bl	800143e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff faf4 	bl	800139a <LL_ADC_SetSamplingTimeCommonConfig>
 8001db2:	e00e      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	6819      	ldr	r1, [r3, #0]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	f7ff fb3c 	bl	800143e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2100      	movs	r1, #0
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff fae4 	bl	800139a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	695a      	ldr	r2, [r3, #20]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	08db      	lsrs	r3, r3, #3
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d022      	beq.n	8001e3a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	6919      	ldr	r1, [r3, #16]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001e04:	f7ff fa3e 	bl	8001284 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	6919      	ldr	r1, [r3, #16]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	461a      	mov	r2, r3
 8001e16:	f7ff fa8a 	bl	800132e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d102      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x124>
 8001e2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e2e:	e000      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x126>
 8001e30:	2300      	movs	r3, #0
 8001e32:	461a      	mov	r2, r3
 8001e34:	f7ff fa96 	bl	8001364 <LL_ADC_SetOffsetSaturation>
 8001e38:	e17b      	b.n	8002132 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fa43 	bl	80012cc <LL_ADC_GetOffsetChannel>
 8001e46:	4603      	mov	r3, r0
 8001e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10a      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x15a>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fa38 	bl	80012cc <LL_ADC_GetOffsetChannel>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	0e9b      	lsrs	r3, r3, #26
 8001e60:	f003 021f 	and.w	r2, r3, #31
 8001e64:	e01e      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x198>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fa2d 	bl	80012cc <LL_ADC_GetOffsetChannel>
 8001e72:	4603      	mov	r3, r0
 8001e74:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e7c:	fa93 f3a3 	rbit	r3, r3
 8001e80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001e94:	2320      	movs	r3, #32
 8001e96:	e004      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001e98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e9c:	fab3 f383 	clz	r3, r3
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d105      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x1b0>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	0e9b      	lsrs	r3, r3, #26
 8001eb6:	f003 031f 	and.w	r3, r3, #31
 8001eba:	e018      	b.n	8001eee <HAL_ADC_ConfigChannel+0x1e2>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ec8:	fa93 f3a3 	rbit	r3, r3
 8001ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001ed0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ed4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001ed8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001ee0:	2320      	movs	r3, #32
 8001ee2:	e004      	b.n	8001eee <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001ee4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ee8:	fab3 f383 	clz	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d106      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff f9fc 	bl	80012f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2101      	movs	r1, #1
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff f9e0 	bl	80012cc <LL_ADC_GetOffsetChannel>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10a      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x220>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff f9d5 	bl	80012cc <LL_ADC_GetOffsetChannel>
 8001f22:	4603      	mov	r3, r0
 8001f24:	0e9b      	lsrs	r3, r3, #26
 8001f26:	f003 021f 	and.w	r2, r3, #31
 8001f2a:	e01e      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x25e>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2101      	movs	r1, #1
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff f9ca 	bl	80012cc <LL_ADC_GetOffsetChannel>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f42:	fa93 f3a3 	rbit	r3, r3
 8001f46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001f4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001f52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001f5a:	2320      	movs	r3, #32
 8001f5c:	e004      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001f5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d105      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x276>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	0e9b      	lsrs	r3, r3, #26
 8001f7c:	f003 031f 	and.w	r3, r3, #31
 8001f80:	e018      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x2a8>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001f96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001f9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001fa6:	2320      	movs	r3, #32
 8001fa8:	e004      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001faa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001fae:	fab3 f383 	clz	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d106      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff f999 	bl	80012f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2102      	movs	r1, #2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff f97d 	bl	80012cc <LL_ADC_GetOffsetChannel>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10a      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x2e6>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2102      	movs	r1, #2
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff f972 	bl	80012cc <LL_ADC_GetOffsetChannel>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	0e9b      	lsrs	r3, r3, #26
 8001fec:	f003 021f 	and.w	r2, r3, #31
 8001ff0:	e01e      	b.n	8002030 <HAL_ADC_ConfigChannel+0x324>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2102      	movs	r1, #2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff f967 	bl	80012cc <LL_ADC_GetOffsetChannel>
 8001ffe:	4603      	mov	r3, r0
 8002000:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002010:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002014:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002018:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002020:	2320      	movs	r3, #32
 8002022:	e004      	b.n	800202e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002024:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002028:	fab3 f383 	clz	r3, r3
 800202c:	b2db      	uxtb	r3, r3
 800202e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002038:	2b00      	cmp	r3, #0
 800203a:	d105      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x33c>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	0e9b      	lsrs	r3, r3, #26
 8002042:	f003 031f 	and.w	r3, r3, #31
 8002046:	e016      	b.n	8002076 <HAL_ADC_ConfigChannel+0x36a>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002050:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002054:	fa93 f3a3 	rbit	r3, r3
 8002058:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800205a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800205c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002060:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002068:	2320      	movs	r3, #32
 800206a:	e004      	b.n	8002076 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800206c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002070:	fab3 f383 	clz	r3, r3
 8002074:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002076:	429a      	cmp	r2, r3
 8002078:	d106      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2200      	movs	r2, #0
 8002080:	2102      	movs	r1, #2
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff f938 	bl	80012f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2103      	movs	r1, #3
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff f91c 	bl	80012cc <LL_ADC_GetOffsetChannel>
 8002094:	4603      	mov	r3, r0
 8002096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10a      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x3a8>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2103      	movs	r1, #3
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff f911 	bl	80012cc <LL_ADC_GetOffsetChannel>
 80020aa:	4603      	mov	r3, r0
 80020ac:	0e9b      	lsrs	r3, r3, #26
 80020ae:	f003 021f 	and.w	r2, r3, #31
 80020b2:	e017      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x3d8>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2103      	movs	r1, #3
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff f906 	bl	80012cc <LL_ADC_GetOffsetChannel>
 80020c0:	4603      	mov	r3, r0
 80020c2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020c6:	fa93 f3a3 	rbit	r3, r3
 80020ca:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80020cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020ce:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80020d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80020d6:	2320      	movs	r3, #32
 80020d8:	e003      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80020da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020dc:	fab3 f383 	clz	r3, r3
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d105      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x3f0>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	0e9b      	lsrs	r3, r3, #26
 80020f6:	f003 031f 	and.w	r3, r3, #31
 80020fa:	e011      	b.n	8002120 <HAL_ADC_ConfigChannel+0x414>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002102:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002104:	fa93 f3a3 	rbit	r3, r3
 8002108:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800210a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800210c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800210e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002114:	2320      	movs	r3, #32
 8002116:	e003      	b.n	8002120 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002118:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800211a:	fab3 f383 	clz	r3, r3
 800211e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002120:	429a      	cmp	r2, r3
 8002122:	d106      	bne.n	8002132 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2200      	movs	r2, #0
 800212a:	2103      	movs	r1, #3
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff f8e3 	bl	80012f8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fa62 	bl	8001600 <LL_ADC_IsEnabled>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	f040 8140 	bne.w	80023c4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6818      	ldr	r0, [r3, #0]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	6819      	ldr	r1, [r3, #0]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	461a      	mov	r2, r3
 8002152:	f7ff f99f 	bl	8001494 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	4a8f      	ldr	r2, [pc, #572]	@ (8002398 <HAL_ADC_ConfigChannel+0x68c>)
 800215c:	4293      	cmp	r3, r2
 800215e:	f040 8131 	bne.w	80023c4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10b      	bne.n	800218a <HAL_ADC_ConfigChannel+0x47e>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	0e9b      	lsrs	r3, r3, #26
 8002178:	3301      	adds	r3, #1
 800217a:	f003 031f 	and.w	r3, r3, #31
 800217e:	2b09      	cmp	r3, #9
 8002180:	bf94      	ite	ls
 8002182:	2301      	movls	r3, #1
 8002184:	2300      	movhi	r3, #0
 8002186:	b2db      	uxtb	r3, r3
 8002188:	e019      	b.n	80021be <HAL_ADC_ConfigChannel+0x4b2>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002190:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002192:	fa93 f3a3 	rbit	r3, r3
 8002196:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002198:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800219a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800219c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80021a2:	2320      	movs	r3, #32
 80021a4:	e003      	b.n	80021ae <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80021a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021a8:	fab3 f383 	clz	r3, r3
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	3301      	adds	r3, #1
 80021b0:	f003 031f 	and.w	r3, r3, #31
 80021b4:	2b09      	cmp	r3, #9
 80021b6:	bf94      	ite	ls
 80021b8:	2301      	movls	r3, #1
 80021ba:	2300      	movhi	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d079      	beq.n	80022b6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d107      	bne.n	80021de <HAL_ADC_ConfigChannel+0x4d2>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	0e9b      	lsrs	r3, r3, #26
 80021d4:	3301      	adds	r3, #1
 80021d6:	069b      	lsls	r3, r3, #26
 80021d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021dc:	e015      	b.n	800220a <HAL_ADC_ConfigChannel+0x4fe>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80021ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021ee:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80021f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80021f6:	2320      	movs	r3, #32
 80021f8:	e003      	b.n	8002202 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80021fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021fc:	fab3 f383 	clz	r3, r3
 8002200:	b2db      	uxtb	r3, r3
 8002202:	3301      	adds	r3, #1
 8002204:	069b      	lsls	r3, r3, #26
 8002206:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002212:	2b00      	cmp	r3, #0
 8002214:	d109      	bne.n	800222a <HAL_ADC_ConfigChannel+0x51e>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	0e9b      	lsrs	r3, r3, #26
 800221c:	3301      	adds	r3, #1
 800221e:	f003 031f 	and.w	r3, r3, #31
 8002222:	2101      	movs	r1, #1
 8002224:	fa01 f303 	lsl.w	r3, r1, r3
 8002228:	e017      	b.n	800225a <HAL_ADC_ConfigChannel+0x54e>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002232:	fa93 f3a3 	rbit	r3, r3
 8002236:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002238:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800223a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800223c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002242:	2320      	movs	r3, #32
 8002244:	e003      	b.n	800224e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002246:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002248:	fab3 f383 	clz	r3, r3
 800224c:	b2db      	uxtb	r3, r3
 800224e:	3301      	adds	r3, #1
 8002250:	f003 031f 	and.w	r3, r3, #31
 8002254:	2101      	movs	r1, #1
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	ea42 0103 	orr.w	r1, r2, r3
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10a      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x574>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	0e9b      	lsrs	r3, r3, #26
 8002270:	3301      	adds	r3, #1
 8002272:	f003 021f 	and.w	r2, r3, #31
 8002276:	4613      	mov	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4413      	add	r3, r2
 800227c:	051b      	lsls	r3, r3, #20
 800227e:	e018      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x5a6>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002288:	fa93 f3a3 	rbit	r3, r3
 800228c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800228e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002290:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002298:	2320      	movs	r3, #32
 800229a:	e003      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800229c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	3301      	adds	r3, #1
 80022a6:	f003 021f 	and.w	r2, r3, #31
 80022aa:	4613      	mov	r3, r2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	4413      	add	r3, r2
 80022b0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022b2:	430b      	orrs	r3, r1
 80022b4:	e081      	b.n	80023ba <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d107      	bne.n	80022d2 <HAL_ADC_ConfigChannel+0x5c6>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	0e9b      	lsrs	r3, r3, #26
 80022c8:	3301      	adds	r3, #1
 80022ca:	069b      	lsls	r3, r3, #26
 80022cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022d0:	e015      	b.n	80022fe <HAL_ADC_ConfigChannel+0x5f2>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80022e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80022e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80022ea:	2320      	movs	r3, #32
 80022ec:	e003      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80022ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f0:	fab3 f383 	clz	r3, r3
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	3301      	adds	r3, #1
 80022f8:	069b      	lsls	r3, r3, #26
 80022fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002306:	2b00      	cmp	r3, #0
 8002308:	d109      	bne.n	800231e <HAL_ADC_ConfigChannel+0x612>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	0e9b      	lsrs	r3, r3, #26
 8002310:	3301      	adds	r3, #1
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	2101      	movs	r1, #1
 8002318:	fa01 f303 	lsl.w	r3, r1, r3
 800231c:	e017      	b.n	800234e <HAL_ADC_ConfigChannel+0x642>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002324:	6a3b      	ldr	r3, [r7, #32]
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	61fb      	str	r3, [r7, #28]
  return result;
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002336:	2320      	movs	r3, #32
 8002338:	e003      	b.n	8002342 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800233a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233c:	fab3 f383 	clz	r3, r3
 8002340:	b2db      	uxtb	r3, r3
 8002342:	3301      	adds	r3, #1
 8002344:	f003 031f 	and.w	r3, r3, #31
 8002348:	2101      	movs	r1, #1
 800234a:	fa01 f303 	lsl.w	r3, r1, r3
 800234e:	ea42 0103 	orr.w	r1, r2, r3
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10d      	bne.n	800237a <HAL_ADC_ConfigChannel+0x66e>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	0e9b      	lsrs	r3, r3, #26
 8002364:	3301      	adds	r3, #1
 8002366:	f003 021f 	and.w	r2, r3, #31
 800236a:	4613      	mov	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4413      	add	r3, r2
 8002370:	3b1e      	subs	r3, #30
 8002372:	051b      	lsls	r3, r3, #20
 8002374:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002378:	e01e      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x6ac>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	fa93 f3a3 	rbit	r3, r3
 8002386:	613b      	str	r3, [r7, #16]
  return result;
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d104      	bne.n	800239c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002392:	2320      	movs	r3, #32
 8002394:	e006      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x698>
 8002396:	bf00      	nop
 8002398:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	fab3 f383 	clz	r3, r3
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	3301      	adds	r3, #1
 80023a6:	f003 021f 	and.w	r2, r3, #31
 80023aa:	4613      	mov	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4413      	add	r3, r2
 80023b0:	3b1e      	subs	r3, #30
 80023b2:	051b      	lsls	r3, r3, #20
 80023b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023b8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023be:	4619      	mov	r1, r3
 80023c0:	f7ff f83d 	bl	800143e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b3f      	ldr	r3, [pc, #252]	@ (80024c8 <HAL_ADC_ConfigChannel+0x7bc>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d071      	beq.n	80024b4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023d0:	483e      	ldr	r0, [pc, #248]	@ (80024cc <HAL_ADC_ConfigChannel+0x7c0>)
 80023d2:	f7fe ff49 	bl	8001268 <LL_ADC_GetCommonPathInternalCh>
 80023d6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a3c      	ldr	r2, [pc, #240]	@ (80024d0 <HAL_ADC_ConfigChannel+0x7c4>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d004      	beq.n	80023ee <HAL_ADC_ConfigChannel+0x6e2>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a3a      	ldr	r2, [pc, #232]	@ (80024d4 <HAL_ADC_ConfigChannel+0x7c8>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d127      	bne.n	800243e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d121      	bne.n	800243e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002402:	d157      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002404:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002408:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800240c:	4619      	mov	r1, r3
 800240e:	482f      	ldr	r0, [pc, #188]	@ (80024cc <HAL_ADC_ConfigChannel+0x7c0>)
 8002410:	f7fe ff17 	bl	8001242 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002414:	4b30      	ldr	r3, [pc, #192]	@ (80024d8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	099b      	lsrs	r3, r3, #6
 800241a:	4a30      	ldr	r2, [pc, #192]	@ (80024dc <HAL_ADC_ConfigChannel+0x7d0>)
 800241c:	fba2 2303 	umull	r2, r3, r2, r3
 8002420:	099b      	lsrs	r3, r3, #6
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	4613      	mov	r3, r2
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	4413      	add	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800242e:	e002      	b.n	8002436 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	3b01      	subs	r3, #1
 8002434:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1f9      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800243c:	e03a      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a27      	ldr	r2, [pc, #156]	@ (80024e0 <HAL_ADC_ConfigChannel+0x7d4>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d113      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002448:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800244c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10d      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a22      	ldr	r2, [pc, #136]	@ (80024e4 <HAL_ADC_ConfigChannel+0x7d8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d02a      	beq.n	80024b4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800245e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002462:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002466:	4619      	mov	r1, r3
 8002468:	4818      	ldr	r0, [pc, #96]	@ (80024cc <HAL_ADC_ConfigChannel+0x7c0>)
 800246a:	f7fe feea 	bl	8001242 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800246e:	e021      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a1c      	ldr	r2, [pc, #112]	@ (80024e8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d11c      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800247a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800247e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d116      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a16      	ldr	r2, [pc, #88]	@ (80024e4 <HAL_ADC_ConfigChannel+0x7d8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d011      	beq.n	80024b4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002490:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002494:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002498:	4619      	mov	r1, r3
 800249a:	480c      	ldr	r0, [pc, #48]	@ (80024cc <HAL_ADC_ConfigChannel+0x7c0>)
 800249c:	f7fe fed1 	bl	8001242 <LL_ADC_SetCommonPathInternalCh>
 80024a0:	e008      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a6:	f043 0220 	orr.w	r2, r3, #32
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80024bc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	37d8      	adds	r7, #216	@ 0xd8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	80080000 	.word	0x80080000
 80024cc:	50000300 	.word	0x50000300
 80024d0:	c3210000 	.word	0xc3210000
 80024d4:	90c00010 	.word	0x90c00010
 80024d8:	20000008 	.word	0x20000008
 80024dc:	053e2d63 	.word	0x053e2d63
 80024e0:	c7520000 	.word	0xc7520000
 80024e4:	50000100 	.word	0x50000100
 80024e8:	cb840000 	.word	0xcb840000

080024ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff f87f 	bl	8001600 <LL_ADC_IsEnabled>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d169      	bne.n	80025dc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	4b36      	ldr	r3, [pc, #216]	@ (80025e8 <ADC_Enable+0xfc>)
 8002510:	4013      	ands	r3, r2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00d      	beq.n	8002532 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800251a:	f043 0210 	orr.w	r2, r3, #16
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002526:	f043 0201 	orr.w	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e055      	b.n	80025de <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff f83a 	bl	80015b0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800253c:	482b      	ldr	r0, [pc, #172]	@ (80025ec <ADC_Enable+0x100>)
 800253e:	f7fe fe93 	bl	8001268 <LL_ADC_GetCommonPathInternalCh>
 8002542:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002544:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002548:	2b00      	cmp	r3, #0
 800254a:	d013      	beq.n	8002574 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800254c:	4b28      	ldr	r3, [pc, #160]	@ (80025f0 <ADC_Enable+0x104>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	099b      	lsrs	r3, r3, #6
 8002552:	4a28      	ldr	r2, [pc, #160]	@ (80025f4 <ADC_Enable+0x108>)
 8002554:	fba2 2303 	umull	r2, r3, r2, r3
 8002558:	099b      	lsrs	r3, r3, #6
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	4613      	mov	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4413      	add	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002566:	e002      	b.n	800256e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	3b01      	subs	r3, #1
 800256c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f9      	bne.n	8002568 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002574:	f7fe fe24 	bl	80011c0 <HAL_GetTick>
 8002578:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800257a:	e028      	b.n	80025ce <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff f83d 	bl	8001600 <LL_ADC_IsEnabled>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d104      	bne.n	8002596 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff f80d 	bl	80015b0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002596:	f7fe fe13 	bl	80011c0 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d914      	bls.n	80025ce <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d00d      	beq.n	80025ce <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b6:	f043 0210 	orr.w	r2, r3, #16
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025c2:	f043 0201 	orr.w	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e007      	b.n	80025de <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d1cf      	bne.n	800257c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	8000003f 	.word	0x8000003f
 80025ec:	50000300 	.word	0x50000300
 80025f0:	20000008 	.word	0x20000008
 80025f4:	053e2d63 	.word	0x053e2d63

080025f8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff f80e 	bl	8001626 <LL_ADC_IsDisableOngoing>
 800260a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f7fe fff5 	bl	8001600 <LL_ADC_IsEnabled>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d047      	beq.n	80026ac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d144      	bne.n	80026ac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 030d 	and.w	r3, r3, #13
 800262c:	2b01      	cmp	r3, #1
 800262e:	d10c      	bne.n	800264a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f7fe ffcf 	bl	80015d8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2203      	movs	r2, #3
 8002640:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002642:	f7fe fdbd 	bl	80011c0 <HAL_GetTick>
 8002646:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002648:	e029      	b.n	800269e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264e:	f043 0210 	orr.w	r2, r3, #16
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800265a:	f043 0201 	orr.w	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e023      	b.n	80026ae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002666:	f7fe fdab 	bl	80011c0 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d914      	bls.n	800269e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00d      	beq.n	800269e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002686:	f043 0210 	orr.w	r2, r3, #16
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002692:	f043 0201 	orr.w	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e007      	b.n	80026ae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1dc      	bne.n	8002666 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <LL_ADC_IsEnabled>:
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <LL_ADC_IsEnabled+0x18>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <LL_ADC_IsEnabled+0x1a>
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <LL_ADC_StartCalibration>:
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80026ee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	609a      	str	r2, [r3, #8]
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <LL_ADC_IsCalibrationOnGoing>:
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800271e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002722:	d101      	bne.n	8002728 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <LL_ADC_REG_IsConversionOngoing>:
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	2b04      	cmp	r3, #4
 8002748:	d101      	bne.n	800274e <LL_ADC_REG_IsConversionOngoing+0x18>
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_ADCEx_Calibration_Start+0x1c>
 8002774:	2302      	movs	r3, #2
 8002776:	e04d      	b.n	8002814 <HAL_ADCEx_Calibration_Start+0xb8>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff ff39 	bl	80025f8 <ADC_Disable>
 8002786:	4603      	mov	r3, r0
 8002788:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800278a:	7bfb      	ldrb	r3, [r7, #15]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d136      	bne.n	80027fe <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002794:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002798:	f023 0302 	bic.w	r3, r3, #2
 800279c:	f043 0202 	orr.w	r2, r3, #2
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6839      	ldr	r1, [r7, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ff96 	bl	80026dc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80027b0:	e014      	b.n	80027dc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	3301      	adds	r3, #1
 80027b6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	4a18      	ldr	r2, [pc, #96]	@ (800281c <HAL_ADCEx_Calibration_Start+0xc0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d90d      	bls.n	80027dc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c4:	f023 0312 	bic.w	r3, r3, #18
 80027c8:	f043 0210 	orr.w	r2, r3, #16
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e01b      	b.n	8002814 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff94 	bl	800270e <LL_ADC_IsCalibrationOnGoing>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1e2      	bne.n	80027b2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f0:	f023 0303 	bic.w	r3, r3, #3
 80027f4:	f043 0201 	orr.w	r2, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80027fc:	e005      	b.n	800280a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002802:	f043 0210 	orr.w	r2, r3, #16
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002812:	7bfb      	ldrb	r3, [r7, #15]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	0004de01 	.word	0x0004de01

08002820 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b0a1      	sub	sp, #132	@ 0x84
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002836:	2b01      	cmp	r3, #1
 8002838:	d101      	bne.n	800283e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800283a:	2302      	movs	r3, #2
 800283c:	e08b      	b.n	8002956 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002846:	2300      	movs	r3, #0
 8002848:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800284a:	2300      	movs	r3, #0
 800284c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002856:	d102      	bne.n	800285e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002858:	4b41      	ldr	r3, [pc, #260]	@ (8002960 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	e001      	b.n	8002862 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10b      	bne.n	8002880 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286c:	f043 0220 	orr.w	r2, r3, #32
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e06a      	b.n	8002956 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff ff57 	bl	8002736 <LL_ADC_REG_IsConversionOngoing>
 8002888:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff ff51 	bl	8002736 <LL_ADC_REG_IsConversionOngoing>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d14c      	bne.n	8002934 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800289a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800289c:	2b00      	cmp	r3, #0
 800289e:	d149      	bne.n	8002934 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80028a0:	4b30      	ldr	r3, [pc, #192]	@ (8002964 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80028a2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d028      	beq.n	80028fe <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80028ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	6859      	ldr	r1, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80028be:	035b      	lsls	r3, r3, #13
 80028c0:	430b      	orrs	r3, r1
 80028c2:	431a      	orrs	r2, r3
 80028c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028c6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028c8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80028cc:	f7ff fef3 	bl	80026b6 <LL_ADC_IsEnabled>
 80028d0:	4604      	mov	r4, r0
 80028d2:	4823      	ldr	r0, [pc, #140]	@ (8002960 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80028d4:	f7ff feef 	bl	80026b6 <LL_ADC_IsEnabled>
 80028d8:	4603      	mov	r3, r0
 80028da:	4323      	orrs	r3, r4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d133      	bne.n	8002948 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80028e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80028e8:	f023 030f 	bic.w	r3, r3, #15
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	6811      	ldr	r1, [r2, #0]
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	6892      	ldr	r2, [r2, #8]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	431a      	orrs	r2, r3
 80028f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028fa:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028fc:	e024      	b.n	8002948 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80028fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002906:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002908:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800290a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800290e:	f7ff fed2 	bl	80026b6 <LL_ADC_IsEnabled>
 8002912:	4604      	mov	r4, r0
 8002914:	4812      	ldr	r0, [pc, #72]	@ (8002960 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002916:	f7ff fece 	bl	80026b6 <LL_ADC_IsEnabled>
 800291a:	4603      	mov	r3, r0
 800291c:	4323      	orrs	r3, r4
 800291e:	2b00      	cmp	r3, #0
 8002920:	d112      	bne.n	8002948 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002922:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800292a:	f023 030f 	bic.w	r3, r3, #15
 800292e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002930:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002932:	e009      	b.n	8002948 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002938:	f043 0220 	orr.w	r2, r3, #32
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002946:	e000      	b.n	800294a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002948:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002952:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002956:	4618      	mov	r0, r3
 8002958:	3784      	adds	r7, #132	@ 0x84
 800295a:	46bd      	mov	sp, r7
 800295c:	bd90      	pop	{r4, r7, pc}
 800295e:	bf00      	nop
 8002960:	50000100 	.word	0x50000100
 8002964:	50000300 	.word	0x50000300

08002968 <__NVIC_SetPriorityGrouping>:
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002978:	4b0c      	ldr	r3, [pc, #48]	@ (80029ac <__NVIC_SetPriorityGrouping+0x44>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002984:	4013      	ands	r3, r2
 8002986:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002990:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002994:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800299a:	4a04      	ldr	r2, [pc, #16]	@ (80029ac <__NVIC_SetPriorityGrouping+0x44>)
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	60d3      	str	r3, [r2, #12]
}
 80029a0:	bf00      	nop
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	e000ed00 	.word	0xe000ed00

080029b0 <__NVIC_GetPriorityGrouping>:
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029b4:	4b04      	ldr	r3, [pc, #16]	@ (80029c8 <__NVIC_GetPriorityGrouping+0x18>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	0a1b      	lsrs	r3, r3, #8
 80029ba:	f003 0307 	and.w	r3, r3, #7
}
 80029be:	4618      	mov	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <__NVIC_SetPriority>:
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	6039      	str	r1, [r7, #0]
 80029d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	db0a      	blt.n	80029f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	490c      	ldr	r1, [pc, #48]	@ (8002a18 <__NVIC_SetPriority+0x4c>)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	0112      	lsls	r2, r2, #4
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	440b      	add	r3, r1
 80029f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80029f4:	e00a      	b.n	8002a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	4908      	ldr	r1, [pc, #32]	@ (8002a1c <__NVIC_SetPriority+0x50>)
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	3b04      	subs	r3, #4
 8002a04:	0112      	lsls	r2, r2, #4
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	440b      	add	r3, r1
 8002a0a:	761a      	strb	r2, [r3, #24]
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000e100 	.word	0xe000e100
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <NVIC_EncodePriority>:
{
 8002a20:	b480      	push	{r7}
 8002a22:	b089      	sub	sp, #36	@ 0x24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f1c3 0307 	rsb	r3, r3, #7
 8002a3a:	2b04      	cmp	r3, #4
 8002a3c:	bf28      	it	cs
 8002a3e:	2304      	movcs	r3, #4
 8002a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3304      	adds	r3, #4
 8002a46:	2b06      	cmp	r3, #6
 8002a48:	d902      	bls.n	8002a50 <NVIC_EncodePriority+0x30>
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3b03      	subs	r3, #3
 8002a4e:	e000      	b.n	8002a52 <NVIC_EncodePriority+0x32>
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43da      	mvns	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	401a      	ands	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a68:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a72:	43d9      	mvns	r1, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a78:	4313      	orrs	r3, r2
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3724      	adds	r7, #36	@ 0x24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <SysTick_Config>:
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a98:	d301      	bcc.n	8002a9e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e00f      	b.n	8002abe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ac8 <SysTick_Config+0x40>)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aa6:	210f      	movs	r1, #15
 8002aa8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002aac:	f7ff ff8e 	bl	80029cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ab0:	4b05      	ldr	r3, [pc, #20]	@ (8002ac8 <SysTick_Config+0x40>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ab6:	4b04      	ldr	r3, [pc, #16]	@ (8002ac8 <SysTick_Config+0x40>)
 8002ab8:	2207      	movs	r2, #7
 8002aba:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	e000e010 	.word	0xe000e010

08002acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff ff47 	bl	8002968 <__NVIC_SetPriorityGrouping>
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b086      	sub	sp, #24
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	4603      	mov	r3, r0
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002af0:	f7ff ff5e 	bl	80029b0 <__NVIC_GetPriorityGrouping>
 8002af4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	68b9      	ldr	r1, [r7, #8]
 8002afa:	6978      	ldr	r0, [r7, #20]
 8002afc:	f7ff ff90 	bl	8002a20 <NVIC_EncodePriority>
 8002b00:	4602      	mov	r2, r0
 8002b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b06:	4611      	mov	r1, r2
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff5f 	bl	80029cc <__NVIC_SetPriority>
}
 8002b0e:	bf00      	nop
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff ffb2 	bl	8002a88 <SysTick_Config>
 8002b24:	4603      	mov	r3, r0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b3e:	e15a      	b.n	8002df6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	2101      	movs	r1, #1
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 814c 	beq.w	8002df0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d005      	beq.n	8002b70 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d130      	bne.n	8002bd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4013      	ands	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	091b      	lsrs	r3, r3, #4
 8002bbc:	f003 0201 	and.w	r2, r3, #1
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d017      	beq.n	8002c0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	2203      	movs	r2, #3
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d123      	bne.n	8002c62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	08da      	lsrs	r2, r3, #3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3208      	adds	r2, #8
 8002c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	220f      	movs	r2, #15
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	691a      	ldr	r2, [r3, #16]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	08da      	lsrs	r2, r3, #3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3208      	adds	r2, #8
 8002c5c:	6939      	ldr	r1, [r7, #16]
 8002c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4013      	ands	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 0203 	and.w	r2, r3, #3
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 80a6 	beq.w	8002df0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ca4:	4b5b      	ldr	r3, [pc, #364]	@ (8002e14 <HAL_GPIO_Init+0x2e4>)
 8002ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ca8:	4a5a      	ldr	r2, [pc, #360]	@ (8002e14 <HAL_GPIO_Init+0x2e4>)
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cb0:	4b58      	ldr	r3, [pc, #352]	@ (8002e14 <HAL_GPIO_Init+0x2e4>)
 8002cb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cbc:	4a56      	ldr	r2, [pc, #344]	@ (8002e18 <HAL_GPIO_Init+0x2e8>)
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	089b      	lsrs	r3, r3, #2
 8002cc2:	3302      	adds	r3, #2
 8002cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	220f      	movs	r2, #15
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ce6:	d01f      	beq.n	8002d28 <HAL_GPIO_Init+0x1f8>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a4c      	ldr	r2, [pc, #304]	@ (8002e1c <HAL_GPIO_Init+0x2ec>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d019      	beq.n	8002d24 <HAL_GPIO_Init+0x1f4>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a4b      	ldr	r2, [pc, #300]	@ (8002e20 <HAL_GPIO_Init+0x2f0>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d013      	beq.n	8002d20 <HAL_GPIO_Init+0x1f0>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a4a      	ldr	r2, [pc, #296]	@ (8002e24 <HAL_GPIO_Init+0x2f4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d00d      	beq.n	8002d1c <HAL_GPIO_Init+0x1ec>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a49      	ldr	r2, [pc, #292]	@ (8002e28 <HAL_GPIO_Init+0x2f8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d007      	beq.n	8002d18 <HAL_GPIO_Init+0x1e8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a48      	ldr	r2, [pc, #288]	@ (8002e2c <HAL_GPIO_Init+0x2fc>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d101      	bne.n	8002d14 <HAL_GPIO_Init+0x1e4>
 8002d10:	2305      	movs	r3, #5
 8002d12:	e00a      	b.n	8002d2a <HAL_GPIO_Init+0x1fa>
 8002d14:	2306      	movs	r3, #6
 8002d16:	e008      	b.n	8002d2a <HAL_GPIO_Init+0x1fa>
 8002d18:	2304      	movs	r3, #4
 8002d1a:	e006      	b.n	8002d2a <HAL_GPIO_Init+0x1fa>
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e004      	b.n	8002d2a <HAL_GPIO_Init+0x1fa>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e002      	b.n	8002d2a <HAL_GPIO_Init+0x1fa>
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <HAL_GPIO_Init+0x1fa>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	f002 0203 	and.w	r2, r2, #3
 8002d30:	0092      	lsls	r2, r2, #2
 8002d32:	4093      	lsls	r3, r2
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d3a:	4937      	ldr	r1, [pc, #220]	@ (8002e18 <HAL_GPIO_Init+0x2e8>)
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	089b      	lsrs	r3, r3, #2
 8002d40:	3302      	adds	r3, #2
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d48:	4b39      	ldr	r3, [pc, #228]	@ (8002e30 <HAL_GPIO_Init+0x300>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	43db      	mvns	r3, r3
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4013      	ands	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d6c:	4a30      	ldr	r2, [pc, #192]	@ (8002e30 <HAL_GPIO_Init+0x300>)
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d72:	4b2f      	ldr	r3, [pc, #188]	@ (8002e30 <HAL_GPIO_Init+0x300>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d96:	4a26      	ldr	r2, [pc, #152]	@ (8002e30 <HAL_GPIO_Init+0x300>)
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002d9c:	4b24      	ldr	r3, [pc, #144]	@ (8002e30 <HAL_GPIO_Init+0x300>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	43db      	mvns	r3, r3
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4013      	ands	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8002e30 <HAL_GPIO_Init+0x300>)
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8002e30 <HAL_GPIO_Init+0x300>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002dea:	4a11      	ldr	r2, [pc, #68]	@ (8002e30 <HAL_GPIO_Init+0x300>)
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	3301      	adds	r3, #1
 8002df4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f47f ae9d 	bne.w	8002b40 <HAL_GPIO_Init+0x10>
  }
}
 8002e06:	bf00      	nop
 8002e08:	bf00      	nop
 8002e0a:	371c      	adds	r7, #28
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	40021000 	.word	0x40021000
 8002e18:	40010000 	.word	0x40010000
 8002e1c:	48000400 	.word	0x48000400
 8002e20:	48000800 	.word	0x48000800
 8002e24:	48000c00 	.word	0x48000c00
 8002e28:	48001000 	.word	0x48001000
 8002e2c:	48001400 	.word	0x48001400
 8002e30:	40010400 	.word	0x40010400

08002e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	807b      	strh	r3, [r7, #2]
 8002e40:	4613      	mov	r3, r2
 8002e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e44:	787b      	ldrb	r3, [r7, #1]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e4a:	887a      	ldrh	r2, [r7, #2]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e50:	e002      	b.n	8002e58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e52:	887a      	ldrh	r2, [r7, #2]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e76:	887a      	ldrh	r2, [r7, #2]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	041a      	lsls	r2, r3, #16
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	43d9      	mvns	r1, r3
 8002e82:	887b      	ldrh	r3, [r7, #2]
 8002e84:	400b      	ands	r3, r1
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	619a      	str	r2, [r3, #24]
}
 8002e8c:	bf00      	nop
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e08d      	b.n	8002fc6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fd ff6e 	bl	8000da0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2224      	movs	r2, #36	@ 0x24
 8002ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0201 	bic.w	r2, r2, #1
 8002eda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ee8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ef8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d107      	bne.n	8002f12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	e006      	b.n	8002f20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002f1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d108      	bne.n	8002f3a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f36:	605a      	str	r2, [r3, #4]
 8002f38:	e007      	b.n	8002f4a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6812      	ldr	r2, [r2, #0]
 8002f54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691a      	ldr	r2, [r3, #16]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69d9      	ldr	r1, [r3, #28]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a1a      	ldr	r2, [r3, #32]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	d138      	bne.n	8003056 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e032      	b.n	8003058 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2224      	movs	r2, #36	@ 0x24
 8002ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0201 	bic.w	r2, r2, #1
 8003010:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003020:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6819      	ldr	r1, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 0201 	orr.w	r2, r2, #1
 8003040:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2220      	movs	r2, #32
 8003046:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	e000      	b.n	8003058 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003056:	2302      	movs	r3, #2
  }
}
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b20      	cmp	r3, #32
 8003078:	d139      	bne.n	80030ee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003084:	2302      	movs	r3, #2
 8003086:	e033      	b.n	80030f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2224      	movs	r2, #36	@ 0x24
 8003094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0201 	bic.w	r2, r2, #1
 80030a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80030b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	021b      	lsls	r3, r3, #8
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f042 0201 	orr.w	r2, r2, #1
 80030d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2220      	movs	r2, #32
 80030de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	e000      	b.n	80030f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030ee:	2302      	movs	r3, #2
  }
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d141      	bne.n	800318e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800310a:	4b4b      	ldr	r3, [pc, #300]	@ (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003112:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003116:	d131      	bne.n	800317c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003118:	4b47      	ldr	r3, [pc, #284]	@ (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800311a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800311e:	4a46      	ldr	r2, [pc, #280]	@ (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003120:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003124:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003128:	4b43      	ldr	r3, [pc, #268]	@ (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003130:	4a41      	ldr	r2, [pc, #260]	@ (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003132:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003136:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003138:	4b40      	ldr	r3, [pc, #256]	@ (800323c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2232      	movs	r2, #50	@ 0x32
 800313e:	fb02 f303 	mul.w	r3, r2, r3
 8003142:	4a3f      	ldr	r2, [pc, #252]	@ (8003240 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003144:	fba2 2303 	umull	r2, r3, r2, r3
 8003148:	0c9b      	lsrs	r3, r3, #18
 800314a:	3301      	adds	r3, #1
 800314c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800314e:	e002      	b.n	8003156 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	3b01      	subs	r3, #1
 8003154:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003156:	4b38      	ldr	r3, [pc, #224]	@ (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800315e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003162:	d102      	bne.n	800316a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f2      	bne.n	8003150 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800316a:	4b33      	ldr	r3, [pc, #204]	@ (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003176:	d158      	bne.n	800322a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e057      	b.n	800322c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800317c:	4b2e      	ldr	r3, [pc, #184]	@ (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800317e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003182:	4a2d      	ldr	r2, [pc, #180]	@ (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003184:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003188:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800318c:	e04d      	b.n	800322a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003194:	d141      	bne.n	800321a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003196:	4b28      	ldr	r3, [pc, #160]	@ (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800319e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031a2:	d131      	bne.n	8003208 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031a4:	4b24      	ldr	r3, [pc, #144]	@ (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031aa:	4a23      	ldr	r2, [pc, #140]	@ (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031b4:	4b20      	ldr	r3, [pc, #128]	@ (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031c4:	4b1d      	ldr	r3, [pc, #116]	@ (800323c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2232      	movs	r2, #50	@ 0x32
 80031ca:	fb02 f303 	mul.w	r3, r2, r3
 80031ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003240 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031d0:	fba2 2303 	umull	r2, r3, r2, r3
 80031d4:	0c9b      	lsrs	r3, r3, #18
 80031d6:	3301      	adds	r3, #1
 80031d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031da:	e002      	b.n	80031e2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	3b01      	subs	r3, #1
 80031e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031e2:	4b15      	ldr	r3, [pc, #84]	@ (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031ee:	d102      	bne.n	80031f6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f2      	bne.n	80031dc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031f6:	4b10      	ldr	r3, [pc, #64]	@ (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003202:	d112      	bne.n	800322a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e011      	b.n	800322c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003208:	4b0b      	ldr	r3, [pc, #44]	@ (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800320a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800320e:	4a0a      	ldr	r2, [pc, #40]	@ (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003214:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003218:	e007      	b.n	800322a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800321a:	4b07      	ldr	r3, [pc, #28]	@ (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003222:	4a05      	ldr	r2, [pc, #20]	@ (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003224:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003228:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	40007000 	.word	0x40007000
 800323c:	20000008 	.word	0x20000008
 8003240:	431bde83 	.word	0x431bde83

08003244 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003248:	4b05      	ldr	r3, [pc, #20]	@ (8003260 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	4a04      	ldr	r2, [pc, #16]	@ (8003260 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800324e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003252:	6093      	str	r3, [r2, #8]
}
 8003254:	bf00      	nop
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	40007000 	.word	0x40007000

08003264 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e2fe      	b.n	8003874 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d075      	beq.n	800336e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003282:	4b97      	ldr	r3, [pc, #604]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
 800328a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800328c:	4b94      	ldr	r3, [pc, #592]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	2b0c      	cmp	r3, #12
 800329a:	d102      	bne.n	80032a2 <HAL_RCC_OscConfig+0x3e>
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2b03      	cmp	r3, #3
 80032a0:	d002      	beq.n	80032a8 <HAL_RCC_OscConfig+0x44>
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d10b      	bne.n	80032c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a8:	4b8d      	ldr	r3, [pc, #564]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d05b      	beq.n	800336c <HAL_RCC_OscConfig+0x108>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d157      	bne.n	800336c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e2d9      	b.n	8003874 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032c8:	d106      	bne.n	80032d8 <HAL_RCC_OscConfig+0x74>
 80032ca:	4b85      	ldr	r3, [pc, #532]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a84      	ldr	r2, [pc, #528]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 80032d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	e01d      	b.n	8003314 <HAL_RCC_OscConfig+0xb0>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032e0:	d10c      	bne.n	80032fc <HAL_RCC_OscConfig+0x98>
 80032e2:	4b7f      	ldr	r3, [pc, #508]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a7e      	ldr	r2, [pc, #504]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 80032e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	4b7c      	ldr	r3, [pc, #496]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a7b      	ldr	r2, [pc, #492]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 80032f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	e00b      	b.n	8003314 <HAL_RCC_OscConfig+0xb0>
 80032fc:	4b78      	ldr	r3, [pc, #480]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a77      	ldr	r2, [pc, #476]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 8003302:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003306:	6013      	str	r3, [r2, #0]
 8003308:	4b75      	ldr	r3, [pc, #468]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a74      	ldr	r2, [pc, #464]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 800330e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d013      	beq.n	8003344 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fd ff50 	bl	80011c0 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003324:	f7fd ff4c 	bl	80011c0 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b64      	cmp	r3, #100	@ 0x64
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e29e      	b.n	8003874 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003336:	4b6a      	ldr	r3, [pc, #424]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0xc0>
 8003342:	e014      	b.n	800336e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7fd ff3c 	bl	80011c0 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800334c:	f7fd ff38 	bl	80011c0 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b64      	cmp	r3, #100	@ 0x64
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e28a      	b.n	8003874 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800335e:	4b60      	ldr	r3, [pc, #384]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0xe8>
 800336a:	e000      	b.n	800336e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800336c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d075      	beq.n	8003466 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800337a:	4b59      	ldr	r3, [pc, #356]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
 8003382:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003384:	4b56      	ldr	r3, [pc, #344]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f003 0303 	and.w	r3, r3, #3
 800338c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	2b0c      	cmp	r3, #12
 8003392:	d102      	bne.n	800339a <HAL_RCC_OscConfig+0x136>
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2b02      	cmp	r3, #2
 8003398:	d002      	beq.n	80033a0 <HAL_RCC_OscConfig+0x13c>
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	2b04      	cmp	r3, #4
 800339e:	d11f      	bne.n	80033e0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033a0:	4b4f      	ldr	r3, [pc, #316]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d005      	beq.n	80033b8 <HAL_RCC_OscConfig+0x154>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e25d      	b.n	8003874 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b8:	4b49      	ldr	r3, [pc, #292]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	061b      	lsls	r3, r3, #24
 80033c6:	4946      	ldr	r1, [pc, #280]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033cc:	4b45      	ldr	r3, [pc, #276]	@ (80034e4 <HAL_RCC_OscConfig+0x280>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fd fea9 	bl	8001128 <HAL_InitTick>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d043      	beq.n	8003464 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e249      	b.n	8003874 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d023      	beq.n	8003430 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033e8:	4b3d      	ldr	r3, [pc, #244]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a3c      	ldr	r2, [pc, #240]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 80033ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7fd fee4 	bl	80011c0 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033fc:	f7fd fee0 	bl	80011c0 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e232      	b.n	8003874 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800340e:	4b34      	ldr	r3, [pc, #208]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800341a:	4b31      	ldr	r3, [pc, #196]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	061b      	lsls	r3, r3, #24
 8003428:	492d      	ldr	r1, [pc, #180]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 800342a:	4313      	orrs	r3, r2
 800342c:	604b      	str	r3, [r1, #4]
 800342e:	e01a      	b.n	8003466 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003430:	4b2b      	ldr	r3, [pc, #172]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a2a      	ldr	r2, [pc, #168]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 8003436:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800343a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343c:	f7fd fec0 	bl	80011c0 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003444:	f7fd febc 	bl	80011c0 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e20e      	b.n	8003874 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003456:	4b22      	ldr	r3, [pc, #136]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f0      	bne.n	8003444 <HAL_RCC_OscConfig+0x1e0>
 8003462:	e000      	b.n	8003466 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003464:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d041      	beq.n	80034f6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d01c      	beq.n	80034b4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800347a:	4b19      	ldr	r3, [pc, #100]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 800347c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003480:	4a17      	ldr	r2, [pc, #92]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348a:	f7fd fe99 	bl	80011c0 <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003492:	f7fd fe95 	bl	80011c0 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e1e7      	b.n	8003874 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034a4:	4b0e      	ldr	r3, [pc, #56]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 80034a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0ef      	beq.n	8003492 <HAL_RCC_OscConfig+0x22e>
 80034b2:	e020      	b.n	80034f6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034b4:	4b0a      	ldr	r3, [pc, #40]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 80034b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034ba:	4a09      	ldr	r2, [pc, #36]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 80034bc:	f023 0301 	bic.w	r3, r3, #1
 80034c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c4:	f7fd fe7c 	bl	80011c0 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034ca:	e00d      	b.n	80034e8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034cc:	f7fd fe78 	bl	80011c0 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d906      	bls.n	80034e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e1ca      	b.n	8003874 <HAL_RCC_OscConfig+0x610>
 80034de:	bf00      	nop
 80034e0:	40021000 	.word	0x40021000
 80034e4:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034e8:	4b8c      	ldr	r3, [pc, #560]	@ (800371c <HAL_RCC_OscConfig+0x4b8>)
 80034ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1ea      	bne.n	80034cc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 80a6 	beq.w	8003650 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003504:	2300      	movs	r3, #0
 8003506:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003508:	4b84      	ldr	r3, [pc, #528]	@ (800371c <HAL_RCC_OscConfig+0x4b8>)
 800350a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_RCC_OscConfig+0x2b4>
 8003514:	2301      	movs	r3, #1
 8003516:	e000      	b.n	800351a <HAL_RCC_OscConfig+0x2b6>
 8003518:	2300      	movs	r3, #0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00d      	beq.n	800353a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800351e:	4b7f      	ldr	r3, [pc, #508]	@ (800371c <HAL_RCC_OscConfig+0x4b8>)
 8003520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003522:	4a7e      	ldr	r2, [pc, #504]	@ (800371c <HAL_RCC_OscConfig+0x4b8>)
 8003524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003528:	6593      	str	r3, [r2, #88]	@ 0x58
 800352a:	4b7c      	ldr	r3, [pc, #496]	@ (800371c <HAL_RCC_OscConfig+0x4b8>)
 800352c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003536:	2301      	movs	r3, #1
 8003538:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800353a:	4b79      	ldr	r3, [pc, #484]	@ (8003720 <HAL_RCC_OscConfig+0x4bc>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003542:	2b00      	cmp	r3, #0
 8003544:	d118      	bne.n	8003578 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003546:	4b76      	ldr	r3, [pc, #472]	@ (8003720 <HAL_RCC_OscConfig+0x4bc>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a75      	ldr	r2, [pc, #468]	@ (8003720 <HAL_RCC_OscConfig+0x4bc>)
 800354c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003552:	f7fd fe35 	bl	80011c0 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800355a:	f7fd fe31 	bl	80011c0 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e183      	b.n	8003874 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800356c:	4b6c      	ldr	r3, [pc, #432]	@ (8003720 <HAL_RCC_OscConfig+0x4bc>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0f0      	beq.n	800355a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d108      	bne.n	8003592 <HAL_RCC_OscConfig+0x32e>
 8003580:	4b66      	ldr	r3, [pc, #408]	@ (800371c <HAL_RCC_OscConfig+0x4b8>)
 8003582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003586:	4a65      	ldr	r2, [pc, #404]	@ (800371c <HAL_RCC_OscConfig+0x4b8>)
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003590:	e024      	b.n	80035dc <HAL_RCC_OscConfig+0x378>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	2b05      	cmp	r3, #5
 8003598:	d110      	bne.n	80035bc <HAL_RCC_OscConfig+0x358>
 800359a:	4b60      	ldr	r3, [pc, #384]	@ (800371c <HAL_RCC_OscConfig+0x4b8>)
 800359c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a0:	4a5e      	ldr	r2, [pc, #376]	@ (800371c <HAL_RCC_OscConfig+0x4b8>)
 80035a2:	f043 0304 	orr.w	r3, r3, #4
 80035a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035aa:	4b5c      	ldr	r3, [pc, #368]	@ (800371c <HAL_RCC_OscConfig+0x4b8>)
 80035ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b0:	4a5a      	ldr	r2, [pc, #360]	@ (800371c <HAL_RCC_OscConfig+0x4b8>)
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035ba:	e00f      	b.n	80035dc <HAL_RCC_OscConfig+0x378>
 80035bc:	4b57      	ldr	r3, [pc, #348]	@ (800371c <HAL_RCC_OscConfig+0x4b8>)
 80035be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c2:	4a56      	ldr	r2, [pc, #344]	@ (800371c <HAL_RCC_OscConfig+0x4b8>)
 80035c4:	f023 0301 	bic.w	r3, r3, #1
 80035c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035cc:	4b53      	ldr	r3, [pc, #332]	@ (800371c <HAL_RCC_OscConfig+0x4b8>)
 80035ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d2:	4a52      	ldr	r2, [pc, #328]	@ (800371c <HAL_RCC_OscConfig+0x4b8>)
 80035d4:	f023 0304 	bic.w	r3, r3, #4
 80035d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d016      	beq.n	8003612 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e4:	f7fd fdec 	bl	80011c0 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ea:	e00a      	b.n	8003602 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ec:	f7fd fde8 	bl	80011c0 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e138      	b.n	8003874 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003602:	4b46      	ldr	r3, [pc, #280]	@ (800371c <HAL_RCC_OscConfig+0x4b8>)
 8003604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0ed      	beq.n	80035ec <HAL_RCC_OscConfig+0x388>
 8003610:	e015      	b.n	800363e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003612:	f7fd fdd5 	bl	80011c0 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003618:	e00a      	b.n	8003630 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361a:	f7fd fdd1 	bl	80011c0 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003628:	4293      	cmp	r3, r2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e121      	b.n	8003874 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003630:	4b3a      	ldr	r3, [pc, #232]	@ (800371c <HAL_RCC_OscConfig+0x4b8>)
 8003632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1ed      	bne.n	800361a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800363e:	7ffb      	ldrb	r3, [r7, #31]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d105      	bne.n	8003650 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003644:	4b35      	ldr	r3, [pc, #212]	@ (800371c <HAL_RCC_OscConfig+0x4b8>)
 8003646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003648:	4a34      	ldr	r2, [pc, #208]	@ (800371c <HAL_RCC_OscConfig+0x4b8>)
 800364a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800364e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	2b00      	cmp	r3, #0
 800365a:	d03c      	beq.n	80036d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d01c      	beq.n	800369e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003664:	4b2d      	ldr	r3, [pc, #180]	@ (800371c <HAL_RCC_OscConfig+0x4b8>)
 8003666:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800366a:	4a2c      	ldr	r2, [pc, #176]	@ (800371c <HAL_RCC_OscConfig+0x4b8>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003674:	f7fd fda4 	bl	80011c0 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800367c:	f7fd fda0 	bl	80011c0 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e0f2      	b.n	8003874 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800368e:	4b23      	ldr	r3, [pc, #140]	@ (800371c <HAL_RCC_OscConfig+0x4b8>)
 8003690:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0ef      	beq.n	800367c <HAL_RCC_OscConfig+0x418>
 800369c:	e01b      	b.n	80036d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800369e:	4b1f      	ldr	r3, [pc, #124]	@ (800371c <HAL_RCC_OscConfig+0x4b8>)
 80036a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036a4:	4a1d      	ldr	r2, [pc, #116]	@ (800371c <HAL_RCC_OscConfig+0x4b8>)
 80036a6:	f023 0301 	bic.w	r3, r3, #1
 80036aa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ae:	f7fd fd87 	bl	80011c0 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036b6:	f7fd fd83 	bl	80011c0 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e0d5      	b.n	8003874 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036c8:	4b14      	ldr	r3, [pc, #80]	@ (800371c <HAL_RCC_OscConfig+0x4b8>)
 80036ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1ef      	bne.n	80036b6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 80c9 	beq.w	8003872 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036e0:	4b0e      	ldr	r3, [pc, #56]	@ (800371c <HAL_RCC_OscConfig+0x4b8>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 030c 	and.w	r3, r3, #12
 80036e8:	2b0c      	cmp	r3, #12
 80036ea:	f000 8083 	beq.w	80037f4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d15e      	bne.n	80037b4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f6:	4b09      	ldr	r3, [pc, #36]	@ (800371c <HAL_RCC_OscConfig+0x4b8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a08      	ldr	r2, [pc, #32]	@ (800371c <HAL_RCC_OscConfig+0x4b8>)
 80036fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003702:	f7fd fd5d 	bl	80011c0 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003708:	e00c      	b.n	8003724 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800370a:	f7fd fd59 	bl	80011c0 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d905      	bls.n	8003724 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e0ab      	b.n	8003874 <HAL_RCC_OscConfig+0x610>
 800371c:	40021000 	.word	0x40021000
 8003720:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003724:	4b55      	ldr	r3, [pc, #340]	@ (800387c <HAL_RCC_OscConfig+0x618>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1ec      	bne.n	800370a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003730:	4b52      	ldr	r3, [pc, #328]	@ (800387c <HAL_RCC_OscConfig+0x618>)
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	4b52      	ldr	r3, [pc, #328]	@ (8003880 <HAL_RCC_OscConfig+0x61c>)
 8003736:	4013      	ands	r3, r2
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6a11      	ldr	r1, [r2, #32]
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003740:	3a01      	subs	r2, #1
 8003742:	0112      	lsls	r2, r2, #4
 8003744:	4311      	orrs	r1, r2
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800374a:	0212      	lsls	r2, r2, #8
 800374c:	4311      	orrs	r1, r2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003752:	0852      	lsrs	r2, r2, #1
 8003754:	3a01      	subs	r2, #1
 8003756:	0552      	lsls	r2, r2, #21
 8003758:	4311      	orrs	r1, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800375e:	0852      	lsrs	r2, r2, #1
 8003760:	3a01      	subs	r2, #1
 8003762:	0652      	lsls	r2, r2, #25
 8003764:	4311      	orrs	r1, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800376a:	06d2      	lsls	r2, r2, #27
 800376c:	430a      	orrs	r2, r1
 800376e:	4943      	ldr	r1, [pc, #268]	@ (800387c <HAL_RCC_OscConfig+0x618>)
 8003770:	4313      	orrs	r3, r2
 8003772:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003774:	4b41      	ldr	r3, [pc, #260]	@ (800387c <HAL_RCC_OscConfig+0x618>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a40      	ldr	r2, [pc, #256]	@ (800387c <HAL_RCC_OscConfig+0x618>)
 800377a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800377e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003780:	4b3e      	ldr	r3, [pc, #248]	@ (800387c <HAL_RCC_OscConfig+0x618>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4a3d      	ldr	r2, [pc, #244]	@ (800387c <HAL_RCC_OscConfig+0x618>)
 8003786:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800378a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378c:	f7fd fd18 	bl	80011c0 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003794:	f7fd fd14 	bl	80011c0 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e066      	b.n	8003874 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037a6:	4b35      	ldr	r3, [pc, #212]	@ (800387c <HAL_RCC_OscConfig+0x618>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0x530>
 80037b2:	e05e      	b.n	8003872 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b4:	4b31      	ldr	r3, [pc, #196]	@ (800387c <HAL_RCC_OscConfig+0x618>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a30      	ldr	r2, [pc, #192]	@ (800387c <HAL_RCC_OscConfig+0x618>)
 80037ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c0:	f7fd fcfe 	bl	80011c0 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c8:	f7fd fcfa 	bl	80011c0 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e04c      	b.n	8003874 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037da:	4b28      	ldr	r3, [pc, #160]	@ (800387c <HAL_RCC_OscConfig+0x618>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80037e6:	4b25      	ldr	r3, [pc, #148]	@ (800387c <HAL_RCC_OscConfig+0x618>)
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	4924      	ldr	r1, [pc, #144]	@ (800387c <HAL_RCC_OscConfig+0x618>)
 80037ec:	4b25      	ldr	r3, [pc, #148]	@ (8003884 <HAL_RCC_OscConfig+0x620>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	60cb      	str	r3, [r1, #12]
 80037f2:	e03e      	b.n	8003872 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e039      	b.n	8003874 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003800:	4b1e      	ldr	r3, [pc, #120]	@ (800387c <HAL_RCC_OscConfig+0x618>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f003 0203 	and.w	r2, r3, #3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	429a      	cmp	r2, r3
 8003812:	d12c      	bne.n	800386e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381e:	3b01      	subs	r3, #1
 8003820:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003822:	429a      	cmp	r2, r3
 8003824:	d123      	bne.n	800386e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003830:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003832:	429a      	cmp	r2, r3
 8003834:	d11b      	bne.n	800386e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003840:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003842:	429a      	cmp	r2, r3
 8003844:	d113      	bne.n	800386e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003850:	085b      	lsrs	r3, r3, #1
 8003852:	3b01      	subs	r3, #1
 8003854:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003856:	429a      	cmp	r2, r3
 8003858:	d109      	bne.n	800386e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003864:	085b      	lsrs	r3, r3, #1
 8003866:	3b01      	subs	r3, #1
 8003868:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800386a:	429a      	cmp	r2, r3
 800386c:	d001      	beq.n	8003872 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3720      	adds	r7, #32
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40021000 	.word	0x40021000
 8003880:	019f800c 	.word	0x019f800c
 8003884:	feeefffc 	.word	0xfeeefffc

08003888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e11e      	b.n	8003ade <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038a0:	4b91      	ldr	r3, [pc, #580]	@ (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 030f 	and.w	r3, r3, #15
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d910      	bls.n	80038d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ae:	4b8e      	ldr	r3, [pc, #568]	@ (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f023 020f 	bic.w	r2, r3, #15
 80038b6:	498c      	ldr	r1, [pc, #560]	@ (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038be:	4b8a      	ldr	r3, [pc, #552]	@ (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e106      	b.n	8003ade <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d073      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d129      	bne.n	8003938 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038e4:	4b81      	ldr	r3, [pc, #516]	@ (8003aec <HAL_RCC_ClockConfig+0x264>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0f4      	b.n	8003ade <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80038f4:	f000 f966 	bl	8003bc4 <RCC_GetSysClockFreqFromPLLSource>
 80038f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4a7c      	ldr	r2, [pc, #496]	@ (8003af0 <HAL_RCC_ClockConfig+0x268>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d93f      	bls.n	8003982 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003902:	4b7a      	ldr	r3, [pc, #488]	@ (8003aec <HAL_RCC_ClockConfig+0x264>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d009      	beq.n	8003922 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003916:	2b00      	cmp	r3, #0
 8003918:	d033      	beq.n	8003982 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800391e:	2b00      	cmp	r3, #0
 8003920:	d12f      	bne.n	8003982 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003922:	4b72      	ldr	r3, [pc, #456]	@ (8003aec <HAL_RCC_ClockConfig+0x264>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800392a:	4a70      	ldr	r2, [pc, #448]	@ (8003aec <HAL_RCC_ClockConfig+0x264>)
 800392c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003930:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003932:	2380      	movs	r3, #128	@ 0x80
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	e024      	b.n	8003982 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2b02      	cmp	r3, #2
 800393e:	d107      	bne.n	8003950 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003940:	4b6a      	ldr	r3, [pc, #424]	@ (8003aec <HAL_RCC_ClockConfig+0x264>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d109      	bne.n	8003960 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0c6      	b.n	8003ade <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003950:	4b66      	ldr	r3, [pc, #408]	@ (8003aec <HAL_RCC_ClockConfig+0x264>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e0be      	b.n	8003ade <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003960:	f000 f8ce 	bl	8003b00 <HAL_RCC_GetSysClockFreq>
 8003964:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	4a61      	ldr	r2, [pc, #388]	@ (8003af0 <HAL_RCC_ClockConfig+0x268>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d909      	bls.n	8003982 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800396e:	4b5f      	ldr	r3, [pc, #380]	@ (8003aec <HAL_RCC_ClockConfig+0x264>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003976:	4a5d      	ldr	r2, [pc, #372]	@ (8003aec <HAL_RCC_ClockConfig+0x264>)
 8003978:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800397c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800397e:	2380      	movs	r3, #128	@ 0x80
 8003980:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003982:	4b5a      	ldr	r3, [pc, #360]	@ (8003aec <HAL_RCC_ClockConfig+0x264>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f023 0203 	bic.w	r2, r3, #3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	4957      	ldr	r1, [pc, #348]	@ (8003aec <HAL_RCC_ClockConfig+0x264>)
 8003990:	4313      	orrs	r3, r2
 8003992:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003994:	f7fd fc14 	bl	80011c0 <HAL_GetTick>
 8003998:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399a:	e00a      	b.n	80039b2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800399c:	f7fd fc10 	bl	80011c0 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e095      	b.n	8003ade <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b2:	4b4e      	ldr	r3, [pc, #312]	@ (8003aec <HAL_RCC_ClockConfig+0x264>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 020c 	and.w	r2, r3, #12
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d1eb      	bne.n	800399c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d023      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039dc:	4b43      	ldr	r3, [pc, #268]	@ (8003aec <HAL_RCC_ClockConfig+0x264>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	4a42      	ldr	r2, [pc, #264]	@ (8003aec <HAL_RCC_ClockConfig+0x264>)
 80039e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80039e6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d007      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80039f4:	4b3d      	ldr	r3, [pc, #244]	@ (8003aec <HAL_RCC_ClockConfig+0x264>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80039fc:	4a3b      	ldr	r2, [pc, #236]	@ (8003aec <HAL_RCC_ClockConfig+0x264>)
 80039fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a04:	4b39      	ldr	r3, [pc, #228]	@ (8003aec <HAL_RCC_ClockConfig+0x264>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	4936      	ldr	r1, [pc, #216]	@ (8003aec <HAL_RCC_ClockConfig+0x264>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	608b      	str	r3, [r1, #8]
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	2b80      	cmp	r3, #128	@ 0x80
 8003a1c:	d105      	bne.n	8003a2a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a1e:	4b33      	ldr	r3, [pc, #204]	@ (8003aec <HAL_RCC_ClockConfig+0x264>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	4a32      	ldr	r2, [pc, #200]	@ (8003aec <HAL_RCC_ClockConfig+0x264>)
 8003a24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a28:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a2a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d21d      	bcs.n	8003a74 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a38:	4b2b      	ldr	r3, [pc, #172]	@ (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f023 020f 	bic.w	r2, r3, #15
 8003a40:	4929      	ldr	r1, [pc, #164]	@ (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a48:	f7fd fbba 	bl	80011c0 <HAL_GetTick>
 8003a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4e:	e00a      	b.n	8003a66 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a50:	f7fd fbb6 	bl	80011c0 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e03b      	b.n	8003ade <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a66:	4b20      	ldr	r3, [pc, #128]	@ (8003ae8 <HAL_RCC_ClockConfig+0x260>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d1ed      	bne.n	8003a50 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a80:	4b1a      	ldr	r3, [pc, #104]	@ (8003aec <HAL_RCC_ClockConfig+0x264>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	4917      	ldr	r1, [pc, #92]	@ (8003aec <HAL_RCC_ClockConfig+0x264>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d009      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a9e:	4b13      	ldr	r3, [pc, #76]	@ (8003aec <HAL_RCC_ClockConfig+0x264>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	490f      	ldr	r1, [pc, #60]	@ (8003aec <HAL_RCC_ClockConfig+0x264>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ab2:	f000 f825 	bl	8003b00 <HAL_RCC_GetSysClockFreq>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8003aec <HAL_RCC_ClockConfig+0x264>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	091b      	lsrs	r3, r3, #4
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	490c      	ldr	r1, [pc, #48]	@ (8003af4 <HAL_RCC_ClockConfig+0x26c>)
 8003ac4:	5ccb      	ldrb	r3, [r1, r3]
 8003ac6:	f003 031f 	and.w	r3, r3, #31
 8003aca:	fa22 f303 	lsr.w	r3, r2, r3
 8003ace:	4a0a      	ldr	r2, [pc, #40]	@ (8003af8 <HAL_RCC_ClockConfig+0x270>)
 8003ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8003afc <HAL_RCC_ClockConfig+0x274>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fd fb26 	bl	8001128 <HAL_InitTick>
 8003adc:	4603      	mov	r3, r0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40022000 	.word	0x40022000
 8003aec:	40021000 	.word	0x40021000
 8003af0:	04c4b400 	.word	0x04c4b400
 8003af4:	08006864 	.word	0x08006864
 8003af8:	20000008 	.word	0x20000008
 8003afc:	2000000c 	.word	0x2000000c

08003b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003b06:	4b2c      	ldr	r3, [pc, #176]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 030c 	and.w	r3, r3, #12
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d102      	bne.n	8003b18 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b12:	4b2a      	ldr	r3, [pc, #168]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b14:	613b      	str	r3, [r7, #16]
 8003b16:	e047      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b18:	4b27      	ldr	r3, [pc, #156]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 030c 	and.w	r3, r3, #12
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d102      	bne.n	8003b2a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b24:	4b26      	ldr	r3, [pc, #152]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b26:	613b      	str	r3, [r7, #16]
 8003b28:	e03e      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003b2a:	4b23      	ldr	r3, [pc, #140]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 030c 	and.w	r3, r3, #12
 8003b32:	2b0c      	cmp	r3, #12
 8003b34:	d136      	bne.n	8003ba4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b36:	4b20      	ldr	r3, [pc, #128]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b40:	4b1d      	ldr	r3, [pc, #116]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	091b      	lsrs	r3, r3, #4
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b03      	cmp	r3, #3
 8003b52:	d10c      	bne.n	8003b6e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b54:	4a1a      	ldr	r2, [pc, #104]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5c:	4a16      	ldr	r2, [pc, #88]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b5e:	68d2      	ldr	r2, [r2, #12]
 8003b60:	0a12      	lsrs	r2, r2, #8
 8003b62:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b66:	fb02 f303 	mul.w	r3, r2, r3
 8003b6a:	617b      	str	r3, [r7, #20]
      break;
 8003b6c:	e00c      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b6e:	4a13      	ldr	r2, [pc, #76]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b76:	4a10      	ldr	r2, [pc, #64]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b78:	68d2      	ldr	r2, [r2, #12]
 8003b7a:	0a12      	lsrs	r2, r2, #8
 8003b7c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b80:	fb02 f303 	mul.w	r3, r2, r3
 8003b84:	617b      	str	r3, [r7, #20]
      break;
 8003b86:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b88:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	0e5b      	lsrs	r3, r3, #25
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	3301      	adds	r3, #1
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	e001      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003ba8:	693b      	ldr	r3, [r7, #16]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	371c      	adds	r7, #28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	00f42400 	.word	0x00f42400
 8003bc0:	007a1200 	.word	0x007a1200

08003bc4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bca:	4b1e      	ldr	r3, [pc, #120]	@ (8003c44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	091b      	lsrs	r3, r3, #4
 8003bda:	f003 030f 	and.w	r3, r3, #15
 8003bde:	3301      	adds	r3, #1
 8003be0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	2b03      	cmp	r3, #3
 8003be6:	d10c      	bne.n	8003c02 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003be8:	4a17      	ldr	r2, [pc, #92]	@ (8003c48 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf0:	4a14      	ldr	r2, [pc, #80]	@ (8003c44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bf2:	68d2      	ldr	r2, [r2, #12]
 8003bf4:	0a12      	lsrs	r2, r2, #8
 8003bf6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003bfa:	fb02 f303 	mul.w	r3, r2, r3
 8003bfe:	617b      	str	r3, [r7, #20]
    break;
 8003c00:	e00c      	b.n	8003c1c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c02:	4a12      	ldr	r2, [pc, #72]	@ (8003c4c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0a:	4a0e      	ldr	r2, [pc, #56]	@ (8003c44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c0c:	68d2      	ldr	r2, [r2, #12]
 8003c0e:	0a12      	lsrs	r2, r2, #8
 8003c10:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c14:	fb02 f303 	mul.w	r3, r2, r3
 8003c18:	617b      	str	r3, [r7, #20]
    break;
 8003c1a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c1c:	4b09      	ldr	r3, [pc, #36]	@ (8003c44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	0e5b      	lsrs	r3, r3, #25
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	3301      	adds	r3, #1
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c34:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003c36:	687b      	ldr	r3, [r7, #4]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	371c      	adds	r7, #28
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	40021000 	.word	0x40021000
 8003c48:	007a1200 	.word	0x007a1200
 8003c4c:	00f42400 	.word	0x00f42400

08003c50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c58:	2300      	movs	r3, #0
 8003c5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 8098 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c72:	4b43      	ldr	r3, [pc, #268]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10d      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c7e:	4b40      	ldr	r3, [pc, #256]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c82:	4a3f      	ldr	r2, [pc, #252]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c88:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c8a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c92:	60bb      	str	r3, [r7, #8]
 8003c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c96:	2301      	movs	r3, #1
 8003c98:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c9a:	4b3a      	ldr	r3, [pc, #232]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a39      	ldr	r2, [pc, #228]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ca0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ca4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ca6:	f7fd fa8b 	bl	80011c0 <HAL_GetTick>
 8003caa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cac:	e009      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cae:	f7fd fa87 	bl	80011c0 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d902      	bls.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	74fb      	strb	r3, [r7, #19]
        break;
 8003cc0:	e005      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cc2:	4b30      	ldr	r3, [pc, #192]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0ef      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003cce:	7cfb      	ldrb	r3, [r7, #19]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d159      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cde:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d01e      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d019      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cf0:	4b23      	ldr	r3, [pc, #140]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cfa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cfc:	4b20      	ldr	r3, [pc, #128]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d02:	4a1f      	ldr	r2, [pc, #124]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d12:	4a1b      	ldr	r2, [pc, #108]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d1c:	4a18      	ldr	r2, [pc, #96]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d016      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2e:	f7fd fa47 	bl	80011c0 <HAL_GetTick>
 8003d32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d34:	e00b      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d36:	f7fd fa43 	bl	80011c0 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d902      	bls.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	74fb      	strb	r3, [r7, #19]
            break;
 8003d4c:	e006      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0ec      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003d5c:	7cfb      	ldrb	r3, [r7, #19]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10b      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d62:	4b07      	ldr	r3, [pc, #28]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d70:	4903      	ldr	r1, [pc, #12]	@ (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003d78:	e008      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d7a:	7cfb      	ldrb	r3, [r7, #19]
 8003d7c:	74bb      	strb	r3, [r7, #18]
 8003d7e:	e005      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003d80:	40021000 	.word	0x40021000
 8003d84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d88:	7cfb      	ldrb	r3, [r7, #19]
 8003d8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d8c:	7c7b      	ldrb	r3, [r7, #17]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d105      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d92:	4ba6      	ldr	r3, [pc, #664]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d96:	4aa5      	ldr	r2, [pc, #660]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d9c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003daa:	4ba0      	ldr	r3, [pc, #640]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db0:	f023 0203 	bic.w	r2, r3, #3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	499c      	ldr	r1, [pc, #624]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dcc:	4b97      	ldr	r3, [pc, #604]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd2:	f023 020c 	bic.w	r2, r3, #12
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	4994      	ldr	r1, [pc, #592]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dee:	4b8f      	ldr	r3, [pc, #572]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	498b      	ldr	r1, [pc, #556]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e10:	4b86      	ldr	r3, [pc, #536]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	4983      	ldr	r1, [pc, #524]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e32:	4b7e      	ldr	r3, [pc, #504]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e38:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	497a      	ldr	r1, [pc, #488]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e54:	4b75      	ldr	r3, [pc, #468]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	4972      	ldr	r1, [pc, #456]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e76:	4b6d      	ldr	r3, [pc, #436]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e7c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	4969      	ldr	r1, [pc, #420]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e98:	4b64      	ldr	r3, [pc, #400]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	4961      	ldr	r1, [pc, #388]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eba:	4b5c      	ldr	r3, [pc, #368]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec8:	4958      	ldr	r1, [pc, #352]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d015      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003edc:	4b53      	ldr	r3, [pc, #332]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eea:	4950      	ldr	r1, [pc, #320]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003efa:	d105      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003efc:	4b4b      	ldr	r3, [pc, #300]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	4a4a      	ldr	r2, [pc, #296]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f06:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d015      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f14:	4b45      	ldr	r3, [pc, #276]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f1a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f22:	4942      	ldr	r1, [pc, #264]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f32:	d105      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f34:	4b3d      	ldr	r3, [pc, #244]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4a3c      	ldr	r2, [pc, #240]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f3e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d015      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f4c:	4b37      	ldr	r3, [pc, #220]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f52:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5a:	4934      	ldr	r1, [pc, #208]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f6a:	d105      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f6c:	4b2f      	ldr	r3, [pc, #188]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	4a2e      	ldr	r2, [pc, #184]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f76:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d015      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f84:	4b29      	ldr	r3, [pc, #164]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f92:	4926      	ldr	r1, [pc, #152]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fa2:	d105      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fa4:	4b21      	ldr	r3, [pc, #132]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	4a20      	ldr	r2, [pc, #128]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003faa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d015      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fca:	4918      	ldr	r1, [pc, #96]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fda:	d105      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fdc:	4b13      	ldr	r3, [pc, #76]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	4a12      	ldr	r2, [pc, #72]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fe6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d015      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ffa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004002:	490a      	ldr	r1, [pc, #40]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800400e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004012:	d105      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004014:	4b05      	ldr	r3, [pc, #20]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	4a04      	ldr	r2, [pc, #16]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800401a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800401e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004020:	7cbb      	ldrb	r3, [r7, #18]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40021000 	.word	0x40021000

08004030 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e09d      	b.n	800417e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004046:	2b00      	cmp	r3, #0
 8004048:	d108      	bne.n	800405c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004052:	d009      	beq.n	8004068 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	61da      	str	r2, [r3, #28]
 800405a:	e005      	b.n	8004068 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fc fee4 	bl	8000e50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800409e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80040a8:	d902      	bls.n	80040b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80040aa:	2300      	movs	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	e002      	b.n	80040b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80040b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80040be:	d007      	beq.n	80040d0 <HAL_SPI_Init+0xa0>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80040c8:	d002      	beq.n	80040d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	431a      	orrs	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004108:	431a      	orrs	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004112:	ea42 0103 	orr.w	r1, r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800411a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	0c1b      	lsrs	r3, r3, #16
 800412c:	f003 0204 	and.w	r2, r3, #4
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004134:	f003 0310 	and.w	r3, r3, #16
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800414c:	ea42 0103 	orr.w	r1, r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	69da      	ldr	r2, [r3, #28]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800416c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b08a      	sub	sp, #40	@ 0x28
 800418a:	af00      	add	r7, sp, #0
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	607a      	str	r2, [r7, #4]
 8004192:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004194:	2301      	movs	r3, #1
 8004196:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_SPI_TransmitReceive+0x26>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e20a      	b.n	80045c2 <HAL_SPI_TransmitReceive+0x43c>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041b4:	f7fd f804 	bl	80011c0 <HAL_GetTick>
 80041b8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80041c0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80041c8:	887b      	ldrh	r3, [r7, #2]
 80041ca:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80041cc:	887b      	ldrh	r3, [r7, #2]
 80041ce:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041d0:	7efb      	ldrb	r3, [r7, #27]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d00e      	beq.n	80041f4 <HAL_SPI_TransmitReceive+0x6e>
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041dc:	d106      	bne.n	80041ec <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d102      	bne.n	80041ec <HAL_SPI_TransmitReceive+0x66>
 80041e6:	7efb      	ldrb	r3, [r7, #27]
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d003      	beq.n	80041f4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80041ec:	2302      	movs	r3, #2
 80041ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80041f2:	e1e0      	b.n	80045b6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d005      	beq.n	8004206 <HAL_SPI_TransmitReceive+0x80>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <HAL_SPI_TransmitReceive+0x80>
 8004200:	887b      	ldrh	r3, [r7, #2]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d103      	bne.n	800420e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800420c:	e1d3      	b.n	80045b6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b04      	cmp	r3, #4
 8004218:	d003      	beq.n	8004222 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2205      	movs	r2, #5
 800421e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	887a      	ldrh	r2, [r7, #2]
 8004232:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	887a      	ldrh	r2, [r7, #2]
 800423a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	887a      	ldrh	r2, [r7, #2]
 8004248:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	887a      	ldrh	r2, [r7, #2]
 800424e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004264:	d802      	bhi.n	800426c <HAL_SPI_TransmitReceive+0xe6>
 8004266:	8a3b      	ldrh	r3, [r7, #16]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d908      	bls.n	800427e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800427a:	605a      	str	r2, [r3, #4]
 800427c:	e007      	b.n	800428e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800428c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004298:	2b40      	cmp	r3, #64	@ 0x40
 800429a:	d007      	beq.n	80042ac <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80042b4:	f240 8081 	bls.w	80043ba <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <HAL_SPI_TransmitReceive+0x140>
 80042c0:	8a7b      	ldrh	r3, [r7, #18]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d16d      	bne.n	80043a2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ca:	881a      	ldrh	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d6:	1c9a      	adds	r2, r3, #2
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042ea:	e05a      	b.n	80043a2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d11b      	bne.n	8004332 <HAL_SPI_TransmitReceive+0x1ac>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d016      	beq.n	8004332 <HAL_SPI_TransmitReceive+0x1ac>
 8004304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004306:	2b01      	cmp	r3, #1
 8004308:	d113      	bne.n	8004332 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800430e:	881a      	ldrh	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800431a:	1c9a      	adds	r2, r3, #2
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b01      	cmp	r3, #1
 800433e:	d11c      	bne.n	800437a <HAL_SPI_TransmitReceive+0x1f4>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004346:	b29b      	uxth	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	d016      	beq.n	800437a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004356:	b292      	uxth	r2, r2
 8004358:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435e:	1c9a      	adds	r2, r3, #2
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800436a:	b29b      	uxth	r3, r3
 800436c:	3b01      	subs	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004376:	2301      	movs	r3, #1
 8004378:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800437a:	f7fc ff21 	bl	80011c0 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004386:	429a      	cmp	r2, r3
 8004388:	d80b      	bhi.n	80043a2 <HAL_SPI_TransmitReceive+0x21c>
 800438a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800438c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004390:	d007      	beq.n	80043a2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80043a0:	e109      	b.n	80045b6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d19f      	bne.n	80042ec <HAL_SPI_TransmitReceive+0x166>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d199      	bne.n	80042ec <HAL_SPI_TransmitReceive+0x166>
 80043b8:	e0e3      	b.n	8004582 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_SPI_TransmitReceive+0x244>
 80043c2:	8a7b      	ldrh	r3, [r7, #18]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	f040 80cf 	bne.w	8004568 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d912      	bls.n	80043fa <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043d8:	881a      	ldrh	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e4:	1c9a      	adds	r2, r3, #2
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	3b02      	subs	r3, #2
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80043f8:	e0b6      	b.n	8004568 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	330c      	adds	r3, #12
 8004404:	7812      	ldrb	r2, [r2, #0]
 8004406:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004420:	e0a2      	b.n	8004568 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b02      	cmp	r3, #2
 800442e:	d134      	bne.n	800449a <HAL_SPI_TransmitReceive+0x314>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004434:	b29b      	uxth	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d02f      	beq.n	800449a <HAL_SPI_TransmitReceive+0x314>
 800443a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443c:	2b01      	cmp	r3, #1
 800443e:	d12c      	bne.n	800449a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b01      	cmp	r3, #1
 8004448:	d912      	bls.n	8004470 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800444e:	881a      	ldrh	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800445a:	1c9a      	adds	r2, r3, #2
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004464:	b29b      	uxth	r3, r3
 8004466:	3b02      	subs	r3, #2
 8004468:	b29a      	uxth	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800446e:	e012      	b.n	8004496 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	330c      	adds	r3, #12
 800447a:	7812      	ldrb	r2, [r2, #0]
 800447c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004482:	1c5a      	adds	r2, r3, #1
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800448c:	b29b      	uxth	r3, r3
 800448e:	3b01      	subs	r3, #1
 8004490:	b29a      	uxth	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d148      	bne.n	800453a <HAL_SPI_TransmitReceive+0x3b4>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d042      	beq.n	800453a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d923      	bls.n	8004508 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ca:	b292      	uxth	r2, r2
 80044cc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d2:	1c9a      	adds	r2, r3, #2
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044de:	b29b      	uxth	r3, r3
 80044e0:	3b02      	subs	r3, #2
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d81f      	bhi.n	8004536 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004504:	605a      	str	r2, [r3, #4]
 8004506:	e016      	b.n	8004536 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f103 020c 	add.w	r2, r3, #12
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004514:	7812      	ldrb	r2, [r2, #0]
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800452a:	b29b      	uxth	r3, r3
 800452c:	3b01      	subs	r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004536:	2301      	movs	r3, #1
 8004538:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800453a:	f7fc fe41 	bl	80011c0 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004546:	429a      	cmp	r2, r3
 8004548:	d803      	bhi.n	8004552 <HAL_SPI_TransmitReceive+0x3cc>
 800454a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004550:	d102      	bne.n	8004558 <HAL_SPI_TransmitReceive+0x3d2>
 8004552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004554:	2b00      	cmp	r3, #0
 8004556:	d107      	bne.n	8004568 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004566:	e026      	b.n	80045b6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	f47f af57 	bne.w	8004422 <HAL_SPI_TransmitReceive+0x29c>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800457a:	b29b      	uxth	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	f47f af50 	bne.w	8004422 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004582:	69fa      	ldr	r2, [r7, #28]
 8004584:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 f93e 	bl	8004808 <SPI_EndRxTxTransaction>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d005      	beq.n	800459e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2220      	movs	r2, #32
 800459c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ac:	e003      	b.n	80045b6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80045be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3728      	adds	r7, #40	@ 0x28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
	...

080045cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b088      	sub	sp, #32
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	603b      	str	r3, [r7, #0]
 80045d8:	4613      	mov	r3, r2
 80045da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045dc:	f7fc fdf0 	bl	80011c0 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e4:	1a9b      	subs	r3, r3, r2
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	4413      	add	r3, r2
 80045ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045ec:	f7fc fde8 	bl	80011c0 <HAL_GetTick>
 80045f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045f2:	4b39      	ldr	r3, [pc, #228]	@ (80046d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	015b      	lsls	r3, r3, #5
 80045f8:	0d1b      	lsrs	r3, r3, #20
 80045fa:	69fa      	ldr	r2, [r7, #28]
 80045fc:	fb02 f303 	mul.w	r3, r2, r3
 8004600:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004602:	e054      	b.n	80046ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800460a:	d050      	beq.n	80046ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800460c:	f7fc fdd8 	bl	80011c0 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	69fa      	ldr	r2, [r7, #28]
 8004618:	429a      	cmp	r2, r3
 800461a:	d902      	bls.n	8004622 <SPI_WaitFlagStateUntilTimeout+0x56>
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d13d      	bne.n	800469e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004630:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800463a:	d111      	bne.n	8004660 <SPI_WaitFlagStateUntilTimeout+0x94>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004644:	d004      	beq.n	8004650 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800464e:	d107      	bne.n	8004660 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800465e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004664:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004668:	d10f      	bne.n	800468a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004688:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e017      	b.n	80046ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4013      	ands	r3, r2
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	bf0c      	ite	eq
 80046be:	2301      	moveq	r3, #1
 80046c0:	2300      	movne	r3, #0
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	461a      	mov	r2, r3
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d19b      	bne.n	8004604 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3720      	adds	r7, #32
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20000008 	.word	0x20000008

080046dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08a      	sub	sp, #40	@ 0x28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80046ea:	2300      	movs	r3, #0
 80046ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80046ee:	f7fc fd67 	bl	80011c0 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f6:	1a9b      	subs	r3, r3, r2
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	4413      	add	r3, r2
 80046fc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80046fe:	f7fc fd5f 	bl	80011c0 <HAL_GetTick>
 8004702:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	330c      	adds	r3, #12
 800470a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800470c:	4b3d      	ldr	r3, [pc, #244]	@ (8004804 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	4613      	mov	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	00da      	lsls	r2, r3, #3
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	0d1b      	lsrs	r3, r3, #20
 800471c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800471e:	fb02 f303 	mul.w	r3, r2, r3
 8004722:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004724:	e060      	b.n	80047e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800472c:	d107      	bne.n	800473e <SPI_WaitFifoStateUntilTimeout+0x62>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d104      	bne.n	800473e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	b2db      	uxtb	r3, r3
 800473a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800473c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004744:	d050      	beq.n	80047e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004746:	f7fc fd3b 	bl	80011c0 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004752:	429a      	cmp	r2, r3
 8004754:	d902      	bls.n	800475c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004758:	2b00      	cmp	r3, #0
 800475a:	d13d      	bne.n	80047d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800476a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004774:	d111      	bne.n	800479a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800477e:	d004      	beq.n	800478a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004788:	d107      	bne.n	800479a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004798:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047a2:	d10f      	bne.n	80047c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e010      	b.n	80047fa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80047de:	2300      	movs	r3, #0
 80047e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	3b01      	subs	r3, #1
 80047e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689a      	ldr	r2, [r3, #8]
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	4013      	ands	r3, r2
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d196      	bne.n	8004726 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3728      	adds	r7, #40	@ 0x28
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	20000008 	.word	0x20000008

08004808 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af02      	add	r7, sp, #8
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2200      	movs	r2, #0
 800481c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f7ff ff5b 	bl	80046dc <SPI_WaitFifoStateUntilTimeout>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d007      	beq.n	800483c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004830:	f043 0220 	orr.w	r2, r3, #32
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e027      	b.n	800488c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2200      	movs	r2, #0
 8004844:	2180      	movs	r1, #128	@ 0x80
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f7ff fec0 	bl	80045cc <SPI_WaitFlagStateUntilTimeout>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d007      	beq.n	8004862 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004856:	f043 0220 	orr.w	r2, r3, #32
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e014      	b.n	800488c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2200      	movs	r2, #0
 800486a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f7ff ff34 	bl	80046dc <SPI_WaitFifoStateUntilTimeout>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d007      	beq.n	800488a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800487e:	f043 0220 	orr.w	r2, r3, #32
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e000      	b.n	800488c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e049      	b.n	800493a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d106      	bne.n	80048c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fc fb0c 	bl	8000ed8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3304      	adds	r3, #4
 80048d0:	4619      	mov	r1, r3
 80048d2:	4610      	mov	r0, r2
 80048d4:	f000 faa4 	bl	8004e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b082      	sub	sp, #8
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e049      	b.n	80049e8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	d106      	bne.n	800496e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f841 	bl	80049f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2202      	movs	r2, #2
 8004972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	3304      	adds	r3, #4
 800497e:	4619      	mov	r1, r3
 8004980:	4610      	mov	r0, r2
 8004982:	f000 fa4d 	bl	8004e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a10:	2300      	movs	r3, #0
 8004a12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e0ff      	b.n	8004c22 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b14      	cmp	r3, #20
 8004a2e:	f200 80f0 	bhi.w	8004c12 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a32:	a201      	add	r2, pc, #4	@ (adr r2, 8004a38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a38:	08004a8d 	.word	0x08004a8d
 8004a3c:	08004c13 	.word	0x08004c13
 8004a40:	08004c13 	.word	0x08004c13
 8004a44:	08004c13 	.word	0x08004c13
 8004a48:	08004acd 	.word	0x08004acd
 8004a4c:	08004c13 	.word	0x08004c13
 8004a50:	08004c13 	.word	0x08004c13
 8004a54:	08004c13 	.word	0x08004c13
 8004a58:	08004b0f 	.word	0x08004b0f
 8004a5c:	08004c13 	.word	0x08004c13
 8004a60:	08004c13 	.word	0x08004c13
 8004a64:	08004c13 	.word	0x08004c13
 8004a68:	08004b4f 	.word	0x08004b4f
 8004a6c:	08004c13 	.word	0x08004c13
 8004a70:	08004c13 	.word	0x08004c13
 8004a74:	08004c13 	.word	0x08004c13
 8004a78:	08004b91 	.word	0x08004b91
 8004a7c:	08004c13 	.word	0x08004c13
 8004a80:	08004c13 	.word	0x08004c13
 8004a84:	08004c13 	.word	0x08004c13
 8004a88:	08004bd1 	.word	0x08004bd1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fa60 	bl	8004f58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	699a      	ldr	r2, [r3, #24]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0208 	orr.w	r2, r2, #8
 8004aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0204 	bic.w	r2, r2, #4
 8004ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6999      	ldr	r1, [r3, #24]
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	619a      	str	r2, [r3, #24]
      break;
 8004aca:	e0a5      	b.n	8004c18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68b9      	ldr	r1, [r7, #8]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fad0 	bl	8005078 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699a      	ldr	r2, [r3, #24]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6999      	ldr	r1, [r3, #24]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	021a      	lsls	r2, r3, #8
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	619a      	str	r2, [r3, #24]
      break;
 8004b0c:	e084      	b.n	8004c18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68b9      	ldr	r1, [r7, #8]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fb39 	bl	800518c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69da      	ldr	r2, [r3, #28]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f042 0208 	orr.w	r2, r2, #8
 8004b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0204 	bic.w	r2, r2, #4
 8004b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69d9      	ldr	r1, [r3, #28]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	61da      	str	r2, [r3, #28]
      break;
 8004b4c:	e064      	b.n	8004c18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68b9      	ldr	r1, [r7, #8]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 fba1 	bl	800529c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69da      	ldr	r2, [r3, #28]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69da      	ldr	r2, [r3, #28]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69d9      	ldr	r1, [r3, #28]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	021a      	lsls	r2, r3, #8
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	61da      	str	r2, [r3, #28]
      break;
 8004b8e:	e043      	b.n	8004c18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68b9      	ldr	r1, [r7, #8]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 fc0a 	bl	80053b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0208 	orr.w	r2, r2, #8
 8004baa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0204 	bic.w	r2, r2, #4
 8004bba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	691a      	ldr	r2, [r3, #16]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004bce:	e023      	b.n	8004c18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68b9      	ldr	r1, [r7, #8]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 fc4e 	bl	8005478 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bfa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	021a      	lsls	r2, r3, #8
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004c10:	e002      	b.n	8004c18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	75fb      	strb	r3, [r7, #23]
      break;
 8004c16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop

08004c2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d101      	bne.n	8004c48 <HAL_TIM_ConfigClockSource+0x1c>
 8004c44:	2302      	movs	r3, #2
 8004c46:	e0de      	b.n	8004e06 <HAL_TIM_ConfigClockSource+0x1da>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2202      	movs	r2, #2
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004c66:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a63      	ldr	r2, [pc, #396]	@ (8004e10 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	f000 80a9 	beq.w	8004dda <HAL_TIM_ConfigClockSource+0x1ae>
 8004c88:	4a61      	ldr	r2, [pc, #388]	@ (8004e10 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	f200 80ae 	bhi.w	8004dec <HAL_TIM_ConfigClockSource+0x1c0>
 8004c90:	4a60      	ldr	r2, [pc, #384]	@ (8004e14 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	f000 80a1 	beq.w	8004dda <HAL_TIM_ConfigClockSource+0x1ae>
 8004c98:	4a5e      	ldr	r2, [pc, #376]	@ (8004e14 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	f200 80a6 	bhi.w	8004dec <HAL_TIM_ConfigClockSource+0x1c0>
 8004ca0:	4a5d      	ldr	r2, [pc, #372]	@ (8004e18 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	f000 8099 	beq.w	8004dda <HAL_TIM_ConfigClockSource+0x1ae>
 8004ca8:	4a5b      	ldr	r2, [pc, #364]	@ (8004e18 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	f200 809e 	bhi.w	8004dec <HAL_TIM_ConfigClockSource+0x1c0>
 8004cb0:	4a5a      	ldr	r2, [pc, #360]	@ (8004e1c <HAL_TIM_ConfigClockSource+0x1f0>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	f000 8091 	beq.w	8004dda <HAL_TIM_ConfigClockSource+0x1ae>
 8004cb8:	4a58      	ldr	r2, [pc, #352]	@ (8004e1c <HAL_TIM_ConfigClockSource+0x1f0>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	f200 8096 	bhi.w	8004dec <HAL_TIM_ConfigClockSource+0x1c0>
 8004cc0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004cc4:	f000 8089 	beq.w	8004dda <HAL_TIM_ConfigClockSource+0x1ae>
 8004cc8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004ccc:	f200 808e 	bhi.w	8004dec <HAL_TIM_ConfigClockSource+0x1c0>
 8004cd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cd4:	d03e      	beq.n	8004d54 <HAL_TIM_ConfigClockSource+0x128>
 8004cd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cda:	f200 8087 	bhi.w	8004dec <HAL_TIM_ConfigClockSource+0x1c0>
 8004cde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ce2:	f000 8086 	beq.w	8004df2 <HAL_TIM_ConfigClockSource+0x1c6>
 8004ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cea:	d87f      	bhi.n	8004dec <HAL_TIM_ConfigClockSource+0x1c0>
 8004cec:	2b70      	cmp	r3, #112	@ 0x70
 8004cee:	d01a      	beq.n	8004d26 <HAL_TIM_ConfigClockSource+0xfa>
 8004cf0:	2b70      	cmp	r3, #112	@ 0x70
 8004cf2:	d87b      	bhi.n	8004dec <HAL_TIM_ConfigClockSource+0x1c0>
 8004cf4:	2b60      	cmp	r3, #96	@ 0x60
 8004cf6:	d050      	beq.n	8004d9a <HAL_TIM_ConfigClockSource+0x16e>
 8004cf8:	2b60      	cmp	r3, #96	@ 0x60
 8004cfa:	d877      	bhi.n	8004dec <HAL_TIM_ConfigClockSource+0x1c0>
 8004cfc:	2b50      	cmp	r3, #80	@ 0x50
 8004cfe:	d03c      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0x14e>
 8004d00:	2b50      	cmp	r3, #80	@ 0x50
 8004d02:	d873      	bhi.n	8004dec <HAL_TIM_ConfigClockSource+0x1c0>
 8004d04:	2b40      	cmp	r3, #64	@ 0x40
 8004d06:	d058      	beq.n	8004dba <HAL_TIM_ConfigClockSource+0x18e>
 8004d08:	2b40      	cmp	r3, #64	@ 0x40
 8004d0a:	d86f      	bhi.n	8004dec <HAL_TIM_ConfigClockSource+0x1c0>
 8004d0c:	2b30      	cmp	r3, #48	@ 0x30
 8004d0e:	d064      	beq.n	8004dda <HAL_TIM_ConfigClockSource+0x1ae>
 8004d10:	2b30      	cmp	r3, #48	@ 0x30
 8004d12:	d86b      	bhi.n	8004dec <HAL_TIM_ConfigClockSource+0x1c0>
 8004d14:	2b20      	cmp	r3, #32
 8004d16:	d060      	beq.n	8004dda <HAL_TIM_ConfigClockSource+0x1ae>
 8004d18:	2b20      	cmp	r3, #32
 8004d1a:	d867      	bhi.n	8004dec <HAL_TIM_ConfigClockSource+0x1c0>
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d05c      	beq.n	8004dda <HAL_TIM_ConfigClockSource+0x1ae>
 8004d20:	2b10      	cmp	r3, #16
 8004d22:	d05a      	beq.n	8004dda <HAL_TIM_ConfigClockSource+0x1ae>
 8004d24:	e062      	b.n	8004dec <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d36:	f000 fc81 	bl	800563c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	609a      	str	r2, [r3, #8]
      break;
 8004d52:	e04f      	b.n	8004df4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d64:	f000 fc6a 	bl	800563c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689a      	ldr	r2, [r3, #8]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d76:	609a      	str	r2, [r3, #8]
      break;
 8004d78:	e03c      	b.n	8004df4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d86:	461a      	mov	r2, r3
 8004d88:	f000 fbdc 	bl	8005544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2150      	movs	r1, #80	@ 0x50
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 fc35 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 8004d98:	e02c      	b.n	8004df4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004da6:	461a      	mov	r2, r3
 8004da8:	f000 fbfb 	bl	80055a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2160      	movs	r1, #96	@ 0x60
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fc25 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 8004db8:	e01c      	b.n	8004df4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	f000 fbbc 	bl	8005544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2140      	movs	r1, #64	@ 0x40
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fc15 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 8004dd8:	e00c      	b.n	8004df4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4619      	mov	r1, r3
 8004de4:	4610      	mov	r0, r2
 8004de6:	f000 fc0c 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 8004dea:	e003      	b.n	8004df4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	73fb      	strb	r3, [r7, #15]
      break;
 8004df0:	e000      	b.n	8004df4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004df2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	00100070 	.word	0x00100070
 8004e14:	00100040 	.word	0x00100040
 8004e18:	00100030 	.word	0x00100030
 8004e1c:	00100020 	.word	0x00100020

08004e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a42      	ldr	r2, [pc, #264]	@ (8004f3c <TIM_Base_SetConfig+0x11c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d00f      	beq.n	8004e58 <TIM_Base_SetConfig+0x38>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e3e:	d00b      	beq.n	8004e58 <TIM_Base_SetConfig+0x38>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a3f      	ldr	r2, [pc, #252]	@ (8004f40 <TIM_Base_SetConfig+0x120>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d007      	beq.n	8004e58 <TIM_Base_SetConfig+0x38>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a3e      	ldr	r2, [pc, #248]	@ (8004f44 <TIM_Base_SetConfig+0x124>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d003      	beq.n	8004e58 <TIM_Base_SetConfig+0x38>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a3d      	ldr	r2, [pc, #244]	@ (8004f48 <TIM_Base_SetConfig+0x128>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d108      	bne.n	8004e6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a33      	ldr	r2, [pc, #204]	@ (8004f3c <TIM_Base_SetConfig+0x11c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d01b      	beq.n	8004eaa <TIM_Base_SetConfig+0x8a>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e78:	d017      	beq.n	8004eaa <TIM_Base_SetConfig+0x8a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a30      	ldr	r2, [pc, #192]	@ (8004f40 <TIM_Base_SetConfig+0x120>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d013      	beq.n	8004eaa <TIM_Base_SetConfig+0x8a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a2f      	ldr	r2, [pc, #188]	@ (8004f44 <TIM_Base_SetConfig+0x124>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00f      	beq.n	8004eaa <TIM_Base_SetConfig+0x8a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a2e      	ldr	r2, [pc, #184]	@ (8004f48 <TIM_Base_SetConfig+0x128>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00b      	beq.n	8004eaa <TIM_Base_SetConfig+0x8a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a2d      	ldr	r2, [pc, #180]	@ (8004f4c <TIM_Base_SetConfig+0x12c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d007      	beq.n	8004eaa <TIM_Base_SetConfig+0x8a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a2c      	ldr	r2, [pc, #176]	@ (8004f50 <TIM_Base_SetConfig+0x130>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d003      	beq.n	8004eaa <TIM_Base_SetConfig+0x8a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a2b      	ldr	r2, [pc, #172]	@ (8004f54 <TIM_Base_SetConfig+0x134>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d108      	bne.n	8004ebc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	689a      	ldr	r2, [r3, #8]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a16      	ldr	r2, [pc, #88]	@ (8004f3c <TIM_Base_SetConfig+0x11c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d00f      	beq.n	8004f08 <TIM_Base_SetConfig+0xe8>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a17      	ldr	r2, [pc, #92]	@ (8004f48 <TIM_Base_SetConfig+0x128>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d00b      	beq.n	8004f08 <TIM_Base_SetConfig+0xe8>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a16      	ldr	r2, [pc, #88]	@ (8004f4c <TIM_Base_SetConfig+0x12c>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d007      	beq.n	8004f08 <TIM_Base_SetConfig+0xe8>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a15      	ldr	r2, [pc, #84]	@ (8004f50 <TIM_Base_SetConfig+0x130>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d003      	beq.n	8004f08 <TIM_Base_SetConfig+0xe8>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a14      	ldr	r2, [pc, #80]	@ (8004f54 <TIM_Base_SetConfig+0x134>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d103      	bne.n	8004f10 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	691a      	ldr	r2, [r3, #16]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d105      	bne.n	8004f2e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f023 0201 	bic.w	r2, r3, #1
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	611a      	str	r2, [r3, #16]
  }
}
 8004f2e:	bf00      	nop
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	40012c00 	.word	0x40012c00
 8004f40:	40000400 	.word	0x40000400
 8004f44:	40000800 	.word	0x40000800
 8004f48:	40013400 	.word	0x40013400
 8004f4c:	40014000 	.word	0x40014000
 8004f50:	40014400 	.word	0x40014400
 8004f54:	40014800 	.word	0x40014800

08004f58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	f023 0201 	bic.w	r2, r3, #1
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f023 0303 	bic.w	r3, r3, #3
 8004f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f023 0302 	bic.w	r3, r3, #2
 8004fa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a2c      	ldr	r2, [pc, #176]	@ (8005064 <TIM_OC1_SetConfig+0x10c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d00f      	beq.n	8004fd8 <TIM_OC1_SetConfig+0x80>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a2b      	ldr	r2, [pc, #172]	@ (8005068 <TIM_OC1_SetConfig+0x110>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00b      	beq.n	8004fd8 <TIM_OC1_SetConfig+0x80>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a2a      	ldr	r2, [pc, #168]	@ (800506c <TIM_OC1_SetConfig+0x114>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d007      	beq.n	8004fd8 <TIM_OC1_SetConfig+0x80>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a29      	ldr	r2, [pc, #164]	@ (8005070 <TIM_OC1_SetConfig+0x118>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d003      	beq.n	8004fd8 <TIM_OC1_SetConfig+0x80>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a28      	ldr	r2, [pc, #160]	@ (8005074 <TIM_OC1_SetConfig+0x11c>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d10c      	bne.n	8004ff2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f023 0308 	bic.w	r3, r3, #8
 8004fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f023 0304 	bic.w	r3, r3, #4
 8004ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a1b      	ldr	r2, [pc, #108]	@ (8005064 <TIM_OC1_SetConfig+0x10c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d00f      	beq.n	800501a <TIM_OC1_SetConfig+0xc2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a1a      	ldr	r2, [pc, #104]	@ (8005068 <TIM_OC1_SetConfig+0x110>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00b      	beq.n	800501a <TIM_OC1_SetConfig+0xc2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a19      	ldr	r2, [pc, #100]	@ (800506c <TIM_OC1_SetConfig+0x114>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d007      	beq.n	800501a <TIM_OC1_SetConfig+0xc2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a18      	ldr	r2, [pc, #96]	@ (8005070 <TIM_OC1_SetConfig+0x118>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d003      	beq.n	800501a <TIM_OC1_SetConfig+0xc2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a17      	ldr	r2, [pc, #92]	@ (8005074 <TIM_OC1_SetConfig+0x11c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d111      	bne.n	800503e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005020:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005028:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	4313      	orrs	r3, r2
 8005032:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	621a      	str	r2, [r3, #32]
}
 8005058:	bf00      	nop
 800505a:	371c      	adds	r7, #28
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	40012c00 	.word	0x40012c00
 8005068:	40013400 	.word	0x40013400
 800506c:	40014000 	.word	0x40014000
 8005070:	40014400 	.word	0x40014400
 8005074:	40014800 	.word	0x40014800

08005078 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	f023 0210 	bic.w	r2, r3, #16
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	021b      	lsls	r3, r3, #8
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f023 0320 	bic.w	r3, r3, #32
 80050c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a28      	ldr	r2, [pc, #160]	@ (8005178 <TIM_OC2_SetConfig+0x100>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d003      	beq.n	80050e4 <TIM_OC2_SetConfig+0x6c>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a27      	ldr	r2, [pc, #156]	@ (800517c <TIM_OC2_SetConfig+0x104>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d10d      	bne.n	8005100 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	011b      	lsls	r3, r3, #4
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a1d      	ldr	r2, [pc, #116]	@ (8005178 <TIM_OC2_SetConfig+0x100>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d00f      	beq.n	8005128 <TIM_OC2_SetConfig+0xb0>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a1c      	ldr	r2, [pc, #112]	@ (800517c <TIM_OC2_SetConfig+0x104>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d00b      	beq.n	8005128 <TIM_OC2_SetConfig+0xb0>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a1b      	ldr	r2, [pc, #108]	@ (8005180 <TIM_OC2_SetConfig+0x108>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d007      	beq.n	8005128 <TIM_OC2_SetConfig+0xb0>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a1a      	ldr	r2, [pc, #104]	@ (8005184 <TIM_OC2_SetConfig+0x10c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d003      	beq.n	8005128 <TIM_OC2_SetConfig+0xb0>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a19      	ldr	r2, [pc, #100]	@ (8005188 <TIM_OC2_SetConfig+0x110>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d113      	bne.n	8005150 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800512e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005136:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	4313      	orrs	r3, r2
 8005142:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	4313      	orrs	r3, r2
 800514e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	621a      	str	r2, [r3, #32]
}
 800516a:	bf00      	nop
 800516c:	371c      	adds	r7, #28
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	40012c00 	.word	0x40012c00
 800517c:	40013400 	.word	0x40013400
 8005180:	40014000 	.word	0x40014000
 8005184:	40014400 	.word	0x40014400
 8005188:	40014800 	.word	0x40014800

0800518c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 0303 	bic.w	r3, r3, #3
 80051c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	021b      	lsls	r3, r3, #8
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a27      	ldr	r2, [pc, #156]	@ (8005288 <TIM_OC3_SetConfig+0xfc>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d003      	beq.n	80051f6 <TIM_OC3_SetConfig+0x6a>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a26      	ldr	r2, [pc, #152]	@ (800528c <TIM_OC3_SetConfig+0x100>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d10d      	bne.n	8005212 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	021b      	lsls	r3, r3, #8
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	4313      	orrs	r3, r2
 8005208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a1c      	ldr	r2, [pc, #112]	@ (8005288 <TIM_OC3_SetConfig+0xfc>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d00f      	beq.n	800523a <TIM_OC3_SetConfig+0xae>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a1b      	ldr	r2, [pc, #108]	@ (800528c <TIM_OC3_SetConfig+0x100>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00b      	beq.n	800523a <TIM_OC3_SetConfig+0xae>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a1a      	ldr	r2, [pc, #104]	@ (8005290 <TIM_OC3_SetConfig+0x104>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d007      	beq.n	800523a <TIM_OC3_SetConfig+0xae>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a19      	ldr	r2, [pc, #100]	@ (8005294 <TIM_OC3_SetConfig+0x108>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d003      	beq.n	800523a <TIM_OC3_SetConfig+0xae>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a18      	ldr	r2, [pc, #96]	@ (8005298 <TIM_OC3_SetConfig+0x10c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d113      	bne.n	8005262 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	011b      	lsls	r3, r3, #4
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	4313      	orrs	r3, r2
 8005254:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	011b      	lsls	r3, r3, #4
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	4313      	orrs	r3, r2
 8005260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	621a      	str	r2, [r3, #32]
}
 800527c:	bf00      	nop
 800527e:	371c      	adds	r7, #28
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	40012c00 	.word	0x40012c00
 800528c:	40013400 	.word	0x40013400
 8005290:	40014000 	.word	0x40014000
 8005294:	40014400 	.word	0x40014400
 8005298:	40014800 	.word	0x40014800

0800529c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	021b      	lsls	r3, r3, #8
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	031b      	lsls	r3, r3, #12
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a28      	ldr	r2, [pc, #160]	@ (800539c <TIM_OC4_SetConfig+0x100>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d003      	beq.n	8005308 <TIM_OC4_SetConfig+0x6c>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a27      	ldr	r2, [pc, #156]	@ (80053a0 <TIM_OC4_SetConfig+0x104>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d10d      	bne.n	8005324 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800530e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	031b      	lsls	r3, r3, #12
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	4313      	orrs	r3, r2
 800531a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005322:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a1d      	ldr	r2, [pc, #116]	@ (800539c <TIM_OC4_SetConfig+0x100>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d00f      	beq.n	800534c <TIM_OC4_SetConfig+0xb0>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a1c      	ldr	r2, [pc, #112]	@ (80053a0 <TIM_OC4_SetConfig+0x104>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d00b      	beq.n	800534c <TIM_OC4_SetConfig+0xb0>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a1b      	ldr	r2, [pc, #108]	@ (80053a4 <TIM_OC4_SetConfig+0x108>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d007      	beq.n	800534c <TIM_OC4_SetConfig+0xb0>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a1a      	ldr	r2, [pc, #104]	@ (80053a8 <TIM_OC4_SetConfig+0x10c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d003      	beq.n	800534c <TIM_OC4_SetConfig+0xb0>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a19      	ldr	r2, [pc, #100]	@ (80053ac <TIM_OC4_SetConfig+0x110>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d113      	bne.n	8005374 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005352:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800535a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	019b      	lsls	r3, r3, #6
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	019b      	lsls	r3, r3, #6
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	4313      	orrs	r3, r2
 8005372:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	621a      	str	r2, [r3, #32]
}
 800538e:	bf00      	nop
 8005390:	371c      	adds	r7, #28
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	40012c00 	.word	0x40012c00
 80053a0:	40013400 	.word	0x40013400
 80053a4:	40014000 	.word	0x40014000
 80053a8:	40014400 	.word	0x40014400
 80053ac:	40014800 	.word	0x40014800

080053b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80053f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	041b      	lsls	r3, r3, #16
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	4313      	orrs	r3, r2
 8005400:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a17      	ldr	r2, [pc, #92]	@ (8005464 <TIM_OC5_SetConfig+0xb4>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d00f      	beq.n	800542a <TIM_OC5_SetConfig+0x7a>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a16      	ldr	r2, [pc, #88]	@ (8005468 <TIM_OC5_SetConfig+0xb8>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d00b      	beq.n	800542a <TIM_OC5_SetConfig+0x7a>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a15      	ldr	r2, [pc, #84]	@ (800546c <TIM_OC5_SetConfig+0xbc>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d007      	beq.n	800542a <TIM_OC5_SetConfig+0x7a>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a14      	ldr	r2, [pc, #80]	@ (8005470 <TIM_OC5_SetConfig+0xc0>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d003      	beq.n	800542a <TIM_OC5_SetConfig+0x7a>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a13      	ldr	r2, [pc, #76]	@ (8005474 <TIM_OC5_SetConfig+0xc4>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d109      	bne.n	800543e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005430:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	021b      	lsls	r3, r3, #8
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	4313      	orrs	r3, r2
 800543c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	621a      	str	r2, [r3, #32]
}
 8005458:	bf00      	nop
 800545a:	371c      	adds	r7, #28
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	40012c00 	.word	0x40012c00
 8005468:	40013400 	.word	0x40013400
 800546c:	40014000 	.word	0x40014000
 8005470:	40014400 	.word	0x40014400
 8005474:	40014800 	.word	0x40014800

08005478 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800549e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	021b      	lsls	r3, r3, #8
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80054be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	051b      	lsls	r3, r3, #20
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a18      	ldr	r2, [pc, #96]	@ (8005530 <TIM_OC6_SetConfig+0xb8>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00f      	beq.n	80054f4 <TIM_OC6_SetConfig+0x7c>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a17      	ldr	r2, [pc, #92]	@ (8005534 <TIM_OC6_SetConfig+0xbc>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00b      	beq.n	80054f4 <TIM_OC6_SetConfig+0x7c>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a16      	ldr	r2, [pc, #88]	@ (8005538 <TIM_OC6_SetConfig+0xc0>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d007      	beq.n	80054f4 <TIM_OC6_SetConfig+0x7c>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a15      	ldr	r2, [pc, #84]	@ (800553c <TIM_OC6_SetConfig+0xc4>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d003      	beq.n	80054f4 <TIM_OC6_SetConfig+0x7c>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a14      	ldr	r2, [pc, #80]	@ (8005540 <TIM_OC6_SetConfig+0xc8>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d109      	bne.n	8005508 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	029b      	lsls	r3, r3, #10
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	4313      	orrs	r3, r2
 8005506:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	621a      	str	r2, [r3, #32]
}
 8005522:	bf00      	nop
 8005524:	371c      	adds	r7, #28
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40012c00 	.word	0x40012c00
 8005534:	40013400 	.word	0x40013400
 8005538:	40014000 	.word	0x40014000
 800553c:	40014400 	.word	0x40014400
 8005540:	40014800 	.word	0x40014800

08005544 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005544:	b480      	push	{r7}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	f023 0201 	bic.w	r2, r3, #1
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800556e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f023 030a 	bic.w	r3, r3, #10
 8005580:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	4313      	orrs	r3, r2
 8005588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	621a      	str	r2, [r3, #32]
}
 8005596:	bf00      	nop
 8005598:	371c      	adds	r7, #28
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b087      	sub	sp, #28
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	60f8      	str	r0, [r7, #12]
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	f023 0210 	bic.w	r2, r3, #16
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	031b      	lsls	r3, r3, #12
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80055de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	621a      	str	r2, [r3, #32]
}
 80055f6:	bf00      	nop
 80055f8:	371c      	adds	r7, #28
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005602:	b480      	push	{r7}
 8005604:	b085      	sub	sp, #20
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005618:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800561c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4313      	orrs	r3, r2
 8005624:	f043 0307 	orr.w	r3, r3, #7
 8005628:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	609a      	str	r2, [r3, #8]
}
 8005630:	bf00      	nop
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
 8005648:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005656:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	021a      	lsls	r2, r3, #8
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	431a      	orrs	r2, r3
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	4313      	orrs	r3, r2
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	4313      	orrs	r3, r2
 8005668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	609a      	str	r2, [r3, #8]
}
 8005670:	bf00      	nop
 8005672:	371c      	adds	r7, #28
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800568c:	2b01      	cmp	r3, #1
 800568e:	d101      	bne.n	8005694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005690:	2302      	movs	r3, #2
 8005692:	e065      	b.n	8005760 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a2c      	ldr	r2, [pc, #176]	@ (800576c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d004      	beq.n	80056c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a2b      	ldr	r2, [pc, #172]	@ (8005770 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d108      	bne.n	80056da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80056ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80056e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a1b      	ldr	r2, [pc, #108]	@ (800576c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d018      	beq.n	8005734 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800570a:	d013      	beq.n	8005734 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a18      	ldr	r2, [pc, #96]	@ (8005774 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d00e      	beq.n	8005734 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a17      	ldr	r2, [pc, #92]	@ (8005778 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d009      	beq.n	8005734 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a12      	ldr	r2, [pc, #72]	@ (8005770 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d004      	beq.n	8005734 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a13      	ldr	r2, [pc, #76]	@ (800577c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d10c      	bne.n	800574e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800573a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	4313      	orrs	r3, r2
 8005744:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	40012c00 	.word	0x40012c00
 8005770:	40013400 	.word	0x40013400
 8005774:	40000400 	.word	0x40000400
 8005778:	40000800 	.word	0x40000800
 800577c:	40014000 	.word	0x40014000

08005780 <std>:
 8005780:	2300      	movs	r3, #0
 8005782:	b510      	push	{r4, lr}
 8005784:	4604      	mov	r4, r0
 8005786:	e9c0 3300 	strd	r3, r3, [r0]
 800578a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800578e:	6083      	str	r3, [r0, #8]
 8005790:	8181      	strh	r1, [r0, #12]
 8005792:	6643      	str	r3, [r0, #100]	@ 0x64
 8005794:	81c2      	strh	r2, [r0, #14]
 8005796:	6183      	str	r3, [r0, #24]
 8005798:	4619      	mov	r1, r3
 800579a:	2208      	movs	r2, #8
 800579c:	305c      	adds	r0, #92	@ 0x5c
 800579e:	f000 f9f9 	bl	8005b94 <memset>
 80057a2:	4b0d      	ldr	r3, [pc, #52]	@ (80057d8 <std+0x58>)
 80057a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80057a6:	4b0d      	ldr	r3, [pc, #52]	@ (80057dc <std+0x5c>)
 80057a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80057aa:	4b0d      	ldr	r3, [pc, #52]	@ (80057e0 <std+0x60>)
 80057ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80057ae:	4b0d      	ldr	r3, [pc, #52]	@ (80057e4 <std+0x64>)
 80057b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80057b2:	4b0d      	ldr	r3, [pc, #52]	@ (80057e8 <std+0x68>)
 80057b4:	6224      	str	r4, [r4, #32]
 80057b6:	429c      	cmp	r4, r3
 80057b8:	d006      	beq.n	80057c8 <std+0x48>
 80057ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80057be:	4294      	cmp	r4, r2
 80057c0:	d002      	beq.n	80057c8 <std+0x48>
 80057c2:	33d0      	adds	r3, #208	@ 0xd0
 80057c4:	429c      	cmp	r4, r3
 80057c6:	d105      	bne.n	80057d4 <std+0x54>
 80057c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80057cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057d0:	f000 ba58 	b.w	8005c84 <__retarget_lock_init_recursive>
 80057d4:	bd10      	pop	{r4, pc}
 80057d6:	bf00      	nop
 80057d8:	080059e5 	.word	0x080059e5
 80057dc:	08005a07 	.word	0x08005a07
 80057e0:	08005a3f 	.word	0x08005a3f
 80057e4:	08005a63 	.word	0x08005a63
 80057e8:	2000027c 	.word	0x2000027c

080057ec <stdio_exit_handler>:
 80057ec:	4a02      	ldr	r2, [pc, #8]	@ (80057f8 <stdio_exit_handler+0xc>)
 80057ee:	4903      	ldr	r1, [pc, #12]	@ (80057fc <stdio_exit_handler+0x10>)
 80057f0:	4803      	ldr	r0, [pc, #12]	@ (8005800 <stdio_exit_handler+0x14>)
 80057f2:	f000 b869 	b.w	80058c8 <_fwalk_sglue>
 80057f6:	bf00      	nop
 80057f8:	20000014 	.word	0x20000014
 80057fc:	08006525 	.word	0x08006525
 8005800:	20000024 	.word	0x20000024

08005804 <cleanup_stdio>:
 8005804:	6841      	ldr	r1, [r0, #4]
 8005806:	4b0c      	ldr	r3, [pc, #48]	@ (8005838 <cleanup_stdio+0x34>)
 8005808:	4299      	cmp	r1, r3
 800580a:	b510      	push	{r4, lr}
 800580c:	4604      	mov	r4, r0
 800580e:	d001      	beq.n	8005814 <cleanup_stdio+0x10>
 8005810:	f000 fe88 	bl	8006524 <_fflush_r>
 8005814:	68a1      	ldr	r1, [r4, #8]
 8005816:	4b09      	ldr	r3, [pc, #36]	@ (800583c <cleanup_stdio+0x38>)
 8005818:	4299      	cmp	r1, r3
 800581a:	d002      	beq.n	8005822 <cleanup_stdio+0x1e>
 800581c:	4620      	mov	r0, r4
 800581e:	f000 fe81 	bl	8006524 <_fflush_r>
 8005822:	68e1      	ldr	r1, [r4, #12]
 8005824:	4b06      	ldr	r3, [pc, #24]	@ (8005840 <cleanup_stdio+0x3c>)
 8005826:	4299      	cmp	r1, r3
 8005828:	d004      	beq.n	8005834 <cleanup_stdio+0x30>
 800582a:	4620      	mov	r0, r4
 800582c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005830:	f000 be78 	b.w	8006524 <_fflush_r>
 8005834:	bd10      	pop	{r4, pc}
 8005836:	bf00      	nop
 8005838:	2000027c 	.word	0x2000027c
 800583c:	200002e4 	.word	0x200002e4
 8005840:	2000034c 	.word	0x2000034c

08005844 <global_stdio_init.part.0>:
 8005844:	b510      	push	{r4, lr}
 8005846:	4b0b      	ldr	r3, [pc, #44]	@ (8005874 <global_stdio_init.part.0+0x30>)
 8005848:	4c0b      	ldr	r4, [pc, #44]	@ (8005878 <global_stdio_init.part.0+0x34>)
 800584a:	4a0c      	ldr	r2, [pc, #48]	@ (800587c <global_stdio_init.part.0+0x38>)
 800584c:	601a      	str	r2, [r3, #0]
 800584e:	4620      	mov	r0, r4
 8005850:	2200      	movs	r2, #0
 8005852:	2104      	movs	r1, #4
 8005854:	f7ff ff94 	bl	8005780 <std>
 8005858:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800585c:	2201      	movs	r2, #1
 800585e:	2109      	movs	r1, #9
 8005860:	f7ff ff8e 	bl	8005780 <std>
 8005864:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005868:	2202      	movs	r2, #2
 800586a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800586e:	2112      	movs	r1, #18
 8005870:	f7ff bf86 	b.w	8005780 <std>
 8005874:	200003b4 	.word	0x200003b4
 8005878:	2000027c 	.word	0x2000027c
 800587c:	080057ed 	.word	0x080057ed

08005880 <__sfp_lock_acquire>:
 8005880:	4801      	ldr	r0, [pc, #4]	@ (8005888 <__sfp_lock_acquire+0x8>)
 8005882:	f000 ba00 	b.w	8005c86 <__retarget_lock_acquire_recursive>
 8005886:	bf00      	nop
 8005888:	200003bd 	.word	0x200003bd

0800588c <__sfp_lock_release>:
 800588c:	4801      	ldr	r0, [pc, #4]	@ (8005894 <__sfp_lock_release+0x8>)
 800588e:	f000 b9fb 	b.w	8005c88 <__retarget_lock_release_recursive>
 8005892:	bf00      	nop
 8005894:	200003bd 	.word	0x200003bd

08005898 <__sinit>:
 8005898:	b510      	push	{r4, lr}
 800589a:	4604      	mov	r4, r0
 800589c:	f7ff fff0 	bl	8005880 <__sfp_lock_acquire>
 80058a0:	6a23      	ldr	r3, [r4, #32]
 80058a2:	b11b      	cbz	r3, 80058ac <__sinit+0x14>
 80058a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058a8:	f7ff bff0 	b.w	800588c <__sfp_lock_release>
 80058ac:	4b04      	ldr	r3, [pc, #16]	@ (80058c0 <__sinit+0x28>)
 80058ae:	6223      	str	r3, [r4, #32]
 80058b0:	4b04      	ldr	r3, [pc, #16]	@ (80058c4 <__sinit+0x2c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1f5      	bne.n	80058a4 <__sinit+0xc>
 80058b8:	f7ff ffc4 	bl	8005844 <global_stdio_init.part.0>
 80058bc:	e7f2      	b.n	80058a4 <__sinit+0xc>
 80058be:	bf00      	nop
 80058c0:	08005805 	.word	0x08005805
 80058c4:	200003b4 	.word	0x200003b4

080058c8 <_fwalk_sglue>:
 80058c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058cc:	4607      	mov	r7, r0
 80058ce:	4688      	mov	r8, r1
 80058d0:	4614      	mov	r4, r2
 80058d2:	2600      	movs	r6, #0
 80058d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058d8:	f1b9 0901 	subs.w	r9, r9, #1
 80058dc:	d505      	bpl.n	80058ea <_fwalk_sglue+0x22>
 80058de:	6824      	ldr	r4, [r4, #0]
 80058e0:	2c00      	cmp	r4, #0
 80058e2:	d1f7      	bne.n	80058d4 <_fwalk_sglue+0xc>
 80058e4:	4630      	mov	r0, r6
 80058e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ea:	89ab      	ldrh	r3, [r5, #12]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d907      	bls.n	8005900 <_fwalk_sglue+0x38>
 80058f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058f4:	3301      	adds	r3, #1
 80058f6:	d003      	beq.n	8005900 <_fwalk_sglue+0x38>
 80058f8:	4629      	mov	r1, r5
 80058fa:	4638      	mov	r0, r7
 80058fc:	47c0      	blx	r8
 80058fe:	4306      	orrs	r6, r0
 8005900:	3568      	adds	r5, #104	@ 0x68
 8005902:	e7e9      	b.n	80058d8 <_fwalk_sglue+0x10>

08005904 <iprintf>:
 8005904:	b40f      	push	{r0, r1, r2, r3}
 8005906:	b507      	push	{r0, r1, r2, lr}
 8005908:	4906      	ldr	r1, [pc, #24]	@ (8005924 <iprintf+0x20>)
 800590a:	ab04      	add	r3, sp, #16
 800590c:	6808      	ldr	r0, [r1, #0]
 800590e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005912:	6881      	ldr	r1, [r0, #8]
 8005914:	9301      	str	r3, [sp, #4]
 8005916:	f000 fadb 	bl	8005ed0 <_vfiprintf_r>
 800591a:	b003      	add	sp, #12
 800591c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005920:	b004      	add	sp, #16
 8005922:	4770      	bx	lr
 8005924:	20000020 	.word	0x20000020

08005928 <_puts_r>:
 8005928:	6a03      	ldr	r3, [r0, #32]
 800592a:	b570      	push	{r4, r5, r6, lr}
 800592c:	6884      	ldr	r4, [r0, #8]
 800592e:	4605      	mov	r5, r0
 8005930:	460e      	mov	r6, r1
 8005932:	b90b      	cbnz	r3, 8005938 <_puts_r+0x10>
 8005934:	f7ff ffb0 	bl	8005898 <__sinit>
 8005938:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800593a:	07db      	lsls	r3, r3, #31
 800593c:	d405      	bmi.n	800594a <_puts_r+0x22>
 800593e:	89a3      	ldrh	r3, [r4, #12]
 8005940:	0598      	lsls	r0, r3, #22
 8005942:	d402      	bmi.n	800594a <_puts_r+0x22>
 8005944:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005946:	f000 f99e 	bl	8005c86 <__retarget_lock_acquire_recursive>
 800594a:	89a3      	ldrh	r3, [r4, #12]
 800594c:	0719      	lsls	r1, r3, #28
 800594e:	d502      	bpl.n	8005956 <_puts_r+0x2e>
 8005950:	6923      	ldr	r3, [r4, #16]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d135      	bne.n	80059c2 <_puts_r+0x9a>
 8005956:	4621      	mov	r1, r4
 8005958:	4628      	mov	r0, r5
 800595a:	f000 f8c5 	bl	8005ae8 <__swsetup_r>
 800595e:	b380      	cbz	r0, 80059c2 <_puts_r+0x9a>
 8005960:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005964:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005966:	07da      	lsls	r2, r3, #31
 8005968:	d405      	bmi.n	8005976 <_puts_r+0x4e>
 800596a:	89a3      	ldrh	r3, [r4, #12]
 800596c:	059b      	lsls	r3, r3, #22
 800596e:	d402      	bmi.n	8005976 <_puts_r+0x4e>
 8005970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005972:	f000 f989 	bl	8005c88 <__retarget_lock_release_recursive>
 8005976:	4628      	mov	r0, r5
 8005978:	bd70      	pop	{r4, r5, r6, pc}
 800597a:	2b00      	cmp	r3, #0
 800597c:	da04      	bge.n	8005988 <_puts_r+0x60>
 800597e:	69a2      	ldr	r2, [r4, #24]
 8005980:	429a      	cmp	r2, r3
 8005982:	dc17      	bgt.n	80059b4 <_puts_r+0x8c>
 8005984:	290a      	cmp	r1, #10
 8005986:	d015      	beq.n	80059b4 <_puts_r+0x8c>
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	1c5a      	adds	r2, r3, #1
 800598c:	6022      	str	r2, [r4, #0]
 800598e:	7019      	strb	r1, [r3, #0]
 8005990:	68a3      	ldr	r3, [r4, #8]
 8005992:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005996:	3b01      	subs	r3, #1
 8005998:	60a3      	str	r3, [r4, #8]
 800599a:	2900      	cmp	r1, #0
 800599c:	d1ed      	bne.n	800597a <_puts_r+0x52>
 800599e:	2b00      	cmp	r3, #0
 80059a0:	da11      	bge.n	80059c6 <_puts_r+0x9e>
 80059a2:	4622      	mov	r2, r4
 80059a4:	210a      	movs	r1, #10
 80059a6:	4628      	mov	r0, r5
 80059a8:	f000 f85f 	bl	8005a6a <__swbuf_r>
 80059ac:	3001      	adds	r0, #1
 80059ae:	d0d7      	beq.n	8005960 <_puts_r+0x38>
 80059b0:	250a      	movs	r5, #10
 80059b2:	e7d7      	b.n	8005964 <_puts_r+0x3c>
 80059b4:	4622      	mov	r2, r4
 80059b6:	4628      	mov	r0, r5
 80059b8:	f000 f857 	bl	8005a6a <__swbuf_r>
 80059bc:	3001      	adds	r0, #1
 80059be:	d1e7      	bne.n	8005990 <_puts_r+0x68>
 80059c0:	e7ce      	b.n	8005960 <_puts_r+0x38>
 80059c2:	3e01      	subs	r6, #1
 80059c4:	e7e4      	b.n	8005990 <_puts_r+0x68>
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	1c5a      	adds	r2, r3, #1
 80059ca:	6022      	str	r2, [r4, #0]
 80059cc:	220a      	movs	r2, #10
 80059ce:	701a      	strb	r2, [r3, #0]
 80059d0:	e7ee      	b.n	80059b0 <_puts_r+0x88>
	...

080059d4 <puts>:
 80059d4:	4b02      	ldr	r3, [pc, #8]	@ (80059e0 <puts+0xc>)
 80059d6:	4601      	mov	r1, r0
 80059d8:	6818      	ldr	r0, [r3, #0]
 80059da:	f7ff bfa5 	b.w	8005928 <_puts_r>
 80059de:	bf00      	nop
 80059e0:	20000020 	.word	0x20000020

080059e4 <__sread>:
 80059e4:	b510      	push	{r4, lr}
 80059e6:	460c      	mov	r4, r1
 80059e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ec:	f000 f8fc 	bl	8005be8 <_read_r>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	bfab      	itete	ge
 80059f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80059f6:	89a3      	ldrhlt	r3, [r4, #12]
 80059f8:	181b      	addge	r3, r3, r0
 80059fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80059fe:	bfac      	ite	ge
 8005a00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a02:	81a3      	strhlt	r3, [r4, #12]
 8005a04:	bd10      	pop	{r4, pc}

08005a06 <__swrite>:
 8005a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0a:	461f      	mov	r7, r3
 8005a0c:	898b      	ldrh	r3, [r1, #12]
 8005a0e:	05db      	lsls	r3, r3, #23
 8005a10:	4605      	mov	r5, r0
 8005a12:	460c      	mov	r4, r1
 8005a14:	4616      	mov	r6, r2
 8005a16:	d505      	bpl.n	8005a24 <__swrite+0x1e>
 8005a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f000 f8d0 	bl	8005bc4 <_lseek_r>
 8005a24:	89a3      	ldrh	r3, [r4, #12]
 8005a26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a2e:	81a3      	strh	r3, [r4, #12]
 8005a30:	4632      	mov	r2, r6
 8005a32:	463b      	mov	r3, r7
 8005a34:	4628      	mov	r0, r5
 8005a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a3a:	f000 b8e7 	b.w	8005c0c <_write_r>

08005a3e <__sseek>:
 8005a3e:	b510      	push	{r4, lr}
 8005a40:	460c      	mov	r4, r1
 8005a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a46:	f000 f8bd 	bl	8005bc4 <_lseek_r>
 8005a4a:	1c43      	adds	r3, r0, #1
 8005a4c:	89a3      	ldrh	r3, [r4, #12]
 8005a4e:	bf15      	itete	ne
 8005a50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a5a:	81a3      	strheq	r3, [r4, #12]
 8005a5c:	bf18      	it	ne
 8005a5e:	81a3      	strhne	r3, [r4, #12]
 8005a60:	bd10      	pop	{r4, pc}

08005a62 <__sclose>:
 8005a62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a66:	f000 b89d 	b.w	8005ba4 <_close_r>

08005a6a <__swbuf_r>:
 8005a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6c:	460e      	mov	r6, r1
 8005a6e:	4614      	mov	r4, r2
 8005a70:	4605      	mov	r5, r0
 8005a72:	b118      	cbz	r0, 8005a7c <__swbuf_r+0x12>
 8005a74:	6a03      	ldr	r3, [r0, #32]
 8005a76:	b90b      	cbnz	r3, 8005a7c <__swbuf_r+0x12>
 8005a78:	f7ff ff0e 	bl	8005898 <__sinit>
 8005a7c:	69a3      	ldr	r3, [r4, #24]
 8005a7e:	60a3      	str	r3, [r4, #8]
 8005a80:	89a3      	ldrh	r3, [r4, #12]
 8005a82:	071a      	lsls	r2, r3, #28
 8005a84:	d501      	bpl.n	8005a8a <__swbuf_r+0x20>
 8005a86:	6923      	ldr	r3, [r4, #16]
 8005a88:	b943      	cbnz	r3, 8005a9c <__swbuf_r+0x32>
 8005a8a:	4621      	mov	r1, r4
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	f000 f82b 	bl	8005ae8 <__swsetup_r>
 8005a92:	b118      	cbz	r0, 8005a9c <__swbuf_r+0x32>
 8005a94:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005a98:	4638      	mov	r0, r7
 8005a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	6922      	ldr	r2, [r4, #16]
 8005aa0:	1a98      	subs	r0, r3, r2
 8005aa2:	6963      	ldr	r3, [r4, #20]
 8005aa4:	b2f6      	uxtb	r6, r6
 8005aa6:	4283      	cmp	r3, r0
 8005aa8:	4637      	mov	r7, r6
 8005aaa:	dc05      	bgt.n	8005ab8 <__swbuf_r+0x4e>
 8005aac:	4621      	mov	r1, r4
 8005aae:	4628      	mov	r0, r5
 8005ab0:	f000 fd38 	bl	8006524 <_fflush_r>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	d1ed      	bne.n	8005a94 <__swbuf_r+0x2a>
 8005ab8:	68a3      	ldr	r3, [r4, #8]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	60a3      	str	r3, [r4, #8]
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	6022      	str	r2, [r4, #0]
 8005ac4:	701e      	strb	r6, [r3, #0]
 8005ac6:	6962      	ldr	r2, [r4, #20]
 8005ac8:	1c43      	adds	r3, r0, #1
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d004      	beq.n	8005ad8 <__swbuf_r+0x6e>
 8005ace:	89a3      	ldrh	r3, [r4, #12]
 8005ad0:	07db      	lsls	r3, r3, #31
 8005ad2:	d5e1      	bpl.n	8005a98 <__swbuf_r+0x2e>
 8005ad4:	2e0a      	cmp	r6, #10
 8005ad6:	d1df      	bne.n	8005a98 <__swbuf_r+0x2e>
 8005ad8:	4621      	mov	r1, r4
 8005ada:	4628      	mov	r0, r5
 8005adc:	f000 fd22 	bl	8006524 <_fflush_r>
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	d0d9      	beq.n	8005a98 <__swbuf_r+0x2e>
 8005ae4:	e7d6      	b.n	8005a94 <__swbuf_r+0x2a>
	...

08005ae8 <__swsetup_r>:
 8005ae8:	b538      	push	{r3, r4, r5, lr}
 8005aea:	4b29      	ldr	r3, [pc, #164]	@ (8005b90 <__swsetup_r+0xa8>)
 8005aec:	4605      	mov	r5, r0
 8005aee:	6818      	ldr	r0, [r3, #0]
 8005af0:	460c      	mov	r4, r1
 8005af2:	b118      	cbz	r0, 8005afc <__swsetup_r+0x14>
 8005af4:	6a03      	ldr	r3, [r0, #32]
 8005af6:	b90b      	cbnz	r3, 8005afc <__swsetup_r+0x14>
 8005af8:	f7ff fece 	bl	8005898 <__sinit>
 8005afc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b00:	0719      	lsls	r1, r3, #28
 8005b02:	d422      	bmi.n	8005b4a <__swsetup_r+0x62>
 8005b04:	06da      	lsls	r2, r3, #27
 8005b06:	d407      	bmi.n	8005b18 <__swsetup_r+0x30>
 8005b08:	2209      	movs	r2, #9
 8005b0a:	602a      	str	r2, [r5, #0]
 8005b0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b10:	81a3      	strh	r3, [r4, #12]
 8005b12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b16:	e033      	b.n	8005b80 <__swsetup_r+0x98>
 8005b18:	0758      	lsls	r0, r3, #29
 8005b1a:	d512      	bpl.n	8005b42 <__swsetup_r+0x5a>
 8005b1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b1e:	b141      	cbz	r1, 8005b32 <__swsetup_r+0x4a>
 8005b20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b24:	4299      	cmp	r1, r3
 8005b26:	d002      	beq.n	8005b2e <__swsetup_r+0x46>
 8005b28:	4628      	mov	r0, r5
 8005b2a:	f000 f8af 	bl	8005c8c <_free_r>
 8005b2e:	2300      	movs	r3, #0
 8005b30:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b32:	89a3      	ldrh	r3, [r4, #12]
 8005b34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005b38:	81a3      	strh	r3, [r4, #12]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	6063      	str	r3, [r4, #4]
 8005b3e:	6923      	ldr	r3, [r4, #16]
 8005b40:	6023      	str	r3, [r4, #0]
 8005b42:	89a3      	ldrh	r3, [r4, #12]
 8005b44:	f043 0308 	orr.w	r3, r3, #8
 8005b48:	81a3      	strh	r3, [r4, #12]
 8005b4a:	6923      	ldr	r3, [r4, #16]
 8005b4c:	b94b      	cbnz	r3, 8005b62 <__swsetup_r+0x7a>
 8005b4e:	89a3      	ldrh	r3, [r4, #12]
 8005b50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005b54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b58:	d003      	beq.n	8005b62 <__swsetup_r+0x7a>
 8005b5a:	4621      	mov	r1, r4
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	f000 fd2f 	bl	80065c0 <__smakebuf_r>
 8005b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b66:	f013 0201 	ands.w	r2, r3, #1
 8005b6a:	d00a      	beq.n	8005b82 <__swsetup_r+0x9a>
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	60a2      	str	r2, [r4, #8]
 8005b70:	6962      	ldr	r2, [r4, #20]
 8005b72:	4252      	negs	r2, r2
 8005b74:	61a2      	str	r2, [r4, #24]
 8005b76:	6922      	ldr	r2, [r4, #16]
 8005b78:	b942      	cbnz	r2, 8005b8c <__swsetup_r+0xa4>
 8005b7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005b7e:	d1c5      	bne.n	8005b0c <__swsetup_r+0x24>
 8005b80:	bd38      	pop	{r3, r4, r5, pc}
 8005b82:	0799      	lsls	r1, r3, #30
 8005b84:	bf58      	it	pl
 8005b86:	6962      	ldrpl	r2, [r4, #20]
 8005b88:	60a2      	str	r2, [r4, #8]
 8005b8a:	e7f4      	b.n	8005b76 <__swsetup_r+0x8e>
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	e7f7      	b.n	8005b80 <__swsetup_r+0x98>
 8005b90:	20000020 	.word	0x20000020

08005b94 <memset>:
 8005b94:	4402      	add	r2, r0
 8005b96:	4603      	mov	r3, r0
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d100      	bne.n	8005b9e <memset+0xa>
 8005b9c:	4770      	bx	lr
 8005b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8005ba2:	e7f9      	b.n	8005b98 <memset+0x4>

08005ba4 <_close_r>:
 8005ba4:	b538      	push	{r3, r4, r5, lr}
 8005ba6:	4d06      	ldr	r5, [pc, #24]	@ (8005bc0 <_close_r+0x1c>)
 8005ba8:	2300      	movs	r3, #0
 8005baa:	4604      	mov	r4, r0
 8005bac:	4608      	mov	r0, r1
 8005bae:	602b      	str	r3, [r5, #0]
 8005bb0:	f7fb f9fc 	bl	8000fac <_close>
 8005bb4:	1c43      	adds	r3, r0, #1
 8005bb6:	d102      	bne.n	8005bbe <_close_r+0x1a>
 8005bb8:	682b      	ldr	r3, [r5, #0]
 8005bba:	b103      	cbz	r3, 8005bbe <_close_r+0x1a>
 8005bbc:	6023      	str	r3, [r4, #0]
 8005bbe:	bd38      	pop	{r3, r4, r5, pc}
 8005bc0:	200003b8 	.word	0x200003b8

08005bc4 <_lseek_r>:
 8005bc4:	b538      	push	{r3, r4, r5, lr}
 8005bc6:	4d07      	ldr	r5, [pc, #28]	@ (8005be4 <_lseek_r+0x20>)
 8005bc8:	4604      	mov	r4, r0
 8005bca:	4608      	mov	r0, r1
 8005bcc:	4611      	mov	r1, r2
 8005bce:	2200      	movs	r2, #0
 8005bd0:	602a      	str	r2, [r5, #0]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f7fb fa11 	bl	8000ffa <_lseek>
 8005bd8:	1c43      	adds	r3, r0, #1
 8005bda:	d102      	bne.n	8005be2 <_lseek_r+0x1e>
 8005bdc:	682b      	ldr	r3, [r5, #0]
 8005bde:	b103      	cbz	r3, 8005be2 <_lseek_r+0x1e>
 8005be0:	6023      	str	r3, [r4, #0]
 8005be2:	bd38      	pop	{r3, r4, r5, pc}
 8005be4:	200003b8 	.word	0x200003b8

08005be8 <_read_r>:
 8005be8:	b538      	push	{r3, r4, r5, lr}
 8005bea:	4d07      	ldr	r5, [pc, #28]	@ (8005c08 <_read_r+0x20>)
 8005bec:	4604      	mov	r4, r0
 8005bee:	4608      	mov	r0, r1
 8005bf0:	4611      	mov	r1, r2
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	602a      	str	r2, [r5, #0]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	f7fb f9bb 	bl	8000f72 <_read>
 8005bfc:	1c43      	adds	r3, r0, #1
 8005bfe:	d102      	bne.n	8005c06 <_read_r+0x1e>
 8005c00:	682b      	ldr	r3, [r5, #0]
 8005c02:	b103      	cbz	r3, 8005c06 <_read_r+0x1e>
 8005c04:	6023      	str	r3, [r4, #0]
 8005c06:	bd38      	pop	{r3, r4, r5, pc}
 8005c08:	200003b8 	.word	0x200003b8

08005c0c <_write_r>:
 8005c0c:	b538      	push	{r3, r4, r5, lr}
 8005c0e:	4d07      	ldr	r5, [pc, #28]	@ (8005c2c <_write_r+0x20>)
 8005c10:	4604      	mov	r4, r0
 8005c12:	4608      	mov	r0, r1
 8005c14:	4611      	mov	r1, r2
 8005c16:	2200      	movs	r2, #0
 8005c18:	602a      	str	r2, [r5, #0]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	f7fa ffd4 	bl	8000bc8 <_write>
 8005c20:	1c43      	adds	r3, r0, #1
 8005c22:	d102      	bne.n	8005c2a <_write_r+0x1e>
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	b103      	cbz	r3, 8005c2a <_write_r+0x1e>
 8005c28:	6023      	str	r3, [r4, #0]
 8005c2a:	bd38      	pop	{r3, r4, r5, pc}
 8005c2c:	200003b8 	.word	0x200003b8

08005c30 <__errno>:
 8005c30:	4b01      	ldr	r3, [pc, #4]	@ (8005c38 <__errno+0x8>)
 8005c32:	6818      	ldr	r0, [r3, #0]
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	20000020 	.word	0x20000020

08005c3c <__libc_init_array>:
 8005c3c:	b570      	push	{r4, r5, r6, lr}
 8005c3e:	4d0d      	ldr	r5, [pc, #52]	@ (8005c74 <__libc_init_array+0x38>)
 8005c40:	4c0d      	ldr	r4, [pc, #52]	@ (8005c78 <__libc_init_array+0x3c>)
 8005c42:	1b64      	subs	r4, r4, r5
 8005c44:	10a4      	asrs	r4, r4, #2
 8005c46:	2600      	movs	r6, #0
 8005c48:	42a6      	cmp	r6, r4
 8005c4a:	d109      	bne.n	8005c60 <__libc_init_array+0x24>
 8005c4c:	4d0b      	ldr	r5, [pc, #44]	@ (8005c7c <__libc_init_array+0x40>)
 8005c4e:	4c0c      	ldr	r4, [pc, #48]	@ (8005c80 <__libc_init_array+0x44>)
 8005c50:	f000 fd24 	bl	800669c <_init>
 8005c54:	1b64      	subs	r4, r4, r5
 8005c56:	10a4      	asrs	r4, r4, #2
 8005c58:	2600      	movs	r6, #0
 8005c5a:	42a6      	cmp	r6, r4
 8005c5c:	d105      	bne.n	8005c6a <__libc_init_array+0x2e>
 8005c5e:	bd70      	pop	{r4, r5, r6, pc}
 8005c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c64:	4798      	blx	r3
 8005c66:	3601      	adds	r6, #1
 8005c68:	e7ee      	b.n	8005c48 <__libc_init_array+0xc>
 8005c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c6e:	4798      	blx	r3
 8005c70:	3601      	adds	r6, #1
 8005c72:	e7f2      	b.n	8005c5a <__libc_init_array+0x1e>
 8005c74:	080068b0 	.word	0x080068b0
 8005c78:	080068b0 	.word	0x080068b0
 8005c7c:	080068b0 	.word	0x080068b0
 8005c80:	080068b4 	.word	0x080068b4

08005c84 <__retarget_lock_init_recursive>:
 8005c84:	4770      	bx	lr

08005c86 <__retarget_lock_acquire_recursive>:
 8005c86:	4770      	bx	lr

08005c88 <__retarget_lock_release_recursive>:
 8005c88:	4770      	bx	lr
	...

08005c8c <_free_r>:
 8005c8c:	b538      	push	{r3, r4, r5, lr}
 8005c8e:	4605      	mov	r5, r0
 8005c90:	2900      	cmp	r1, #0
 8005c92:	d041      	beq.n	8005d18 <_free_r+0x8c>
 8005c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c98:	1f0c      	subs	r4, r1, #4
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	bfb8      	it	lt
 8005c9e:	18e4      	addlt	r4, r4, r3
 8005ca0:	f000 f8e0 	bl	8005e64 <__malloc_lock>
 8005ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8005d1c <_free_r+0x90>)
 8005ca6:	6813      	ldr	r3, [r2, #0]
 8005ca8:	b933      	cbnz	r3, 8005cb8 <_free_r+0x2c>
 8005caa:	6063      	str	r3, [r4, #4]
 8005cac:	6014      	str	r4, [r2, #0]
 8005cae:	4628      	mov	r0, r5
 8005cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cb4:	f000 b8dc 	b.w	8005e70 <__malloc_unlock>
 8005cb8:	42a3      	cmp	r3, r4
 8005cba:	d908      	bls.n	8005cce <_free_r+0x42>
 8005cbc:	6820      	ldr	r0, [r4, #0]
 8005cbe:	1821      	adds	r1, r4, r0
 8005cc0:	428b      	cmp	r3, r1
 8005cc2:	bf01      	itttt	eq
 8005cc4:	6819      	ldreq	r1, [r3, #0]
 8005cc6:	685b      	ldreq	r3, [r3, #4]
 8005cc8:	1809      	addeq	r1, r1, r0
 8005cca:	6021      	streq	r1, [r4, #0]
 8005ccc:	e7ed      	b.n	8005caa <_free_r+0x1e>
 8005cce:	461a      	mov	r2, r3
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	b10b      	cbz	r3, 8005cd8 <_free_r+0x4c>
 8005cd4:	42a3      	cmp	r3, r4
 8005cd6:	d9fa      	bls.n	8005cce <_free_r+0x42>
 8005cd8:	6811      	ldr	r1, [r2, #0]
 8005cda:	1850      	adds	r0, r2, r1
 8005cdc:	42a0      	cmp	r0, r4
 8005cde:	d10b      	bne.n	8005cf8 <_free_r+0x6c>
 8005ce0:	6820      	ldr	r0, [r4, #0]
 8005ce2:	4401      	add	r1, r0
 8005ce4:	1850      	adds	r0, r2, r1
 8005ce6:	4283      	cmp	r3, r0
 8005ce8:	6011      	str	r1, [r2, #0]
 8005cea:	d1e0      	bne.n	8005cae <_free_r+0x22>
 8005cec:	6818      	ldr	r0, [r3, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	6053      	str	r3, [r2, #4]
 8005cf2:	4408      	add	r0, r1
 8005cf4:	6010      	str	r0, [r2, #0]
 8005cf6:	e7da      	b.n	8005cae <_free_r+0x22>
 8005cf8:	d902      	bls.n	8005d00 <_free_r+0x74>
 8005cfa:	230c      	movs	r3, #12
 8005cfc:	602b      	str	r3, [r5, #0]
 8005cfe:	e7d6      	b.n	8005cae <_free_r+0x22>
 8005d00:	6820      	ldr	r0, [r4, #0]
 8005d02:	1821      	adds	r1, r4, r0
 8005d04:	428b      	cmp	r3, r1
 8005d06:	bf04      	itt	eq
 8005d08:	6819      	ldreq	r1, [r3, #0]
 8005d0a:	685b      	ldreq	r3, [r3, #4]
 8005d0c:	6063      	str	r3, [r4, #4]
 8005d0e:	bf04      	itt	eq
 8005d10:	1809      	addeq	r1, r1, r0
 8005d12:	6021      	streq	r1, [r4, #0]
 8005d14:	6054      	str	r4, [r2, #4]
 8005d16:	e7ca      	b.n	8005cae <_free_r+0x22>
 8005d18:	bd38      	pop	{r3, r4, r5, pc}
 8005d1a:	bf00      	nop
 8005d1c:	200003c4 	.word	0x200003c4

08005d20 <sbrk_aligned>:
 8005d20:	b570      	push	{r4, r5, r6, lr}
 8005d22:	4e0f      	ldr	r6, [pc, #60]	@ (8005d60 <sbrk_aligned+0x40>)
 8005d24:	460c      	mov	r4, r1
 8005d26:	6831      	ldr	r1, [r6, #0]
 8005d28:	4605      	mov	r5, r0
 8005d2a:	b911      	cbnz	r1, 8005d32 <sbrk_aligned+0x12>
 8005d2c:	f000 fca6 	bl	800667c <_sbrk_r>
 8005d30:	6030      	str	r0, [r6, #0]
 8005d32:	4621      	mov	r1, r4
 8005d34:	4628      	mov	r0, r5
 8005d36:	f000 fca1 	bl	800667c <_sbrk_r>
 8005d3a:	1c43      	adds	r3, r0, #1
 8005d3c:	d103      	bne.n	8005d46 <sbrk_aligned+0x26>
 8005d3e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005d42:	4620      	mov	r0, r4
 8005d44:	bd70      	pop	{r4, r5, r6, pc}
 8005d46:	1cc4      	adds	r4, r0, #3
 8005d48:	f024 0403 	bic.w	r4, r4, #3
 8005d4c:	42a0      	cmp	r0, r4
 8005d4e:	d0f8      	beq.n	8005d42 <sbrk_aligned+0x22>
 8005d50:	1a21      	subs	r1, r4, r0
 8005d52:	4628      	mov	r0, r5
 8005d54:	f000 fc92 	bl	800667c <_sbrk_r>
 8005d58:	3001      	adds	r0, #1
 8005d5a:	d1f2      	bne.n	8005d42 <sbrk_aligned+0x22>
 8005d5c:	e7ef      	b.n	8005d3e <sbrk_aligned+0x1e>
 8005d5e:	bf00      	nop
 8005d60:	200003c0 	.word	0x200003c0

08005d64 <_malloc_r>:
 8005d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d68:	1ccd      	adds	r5, r1, #3
 8005d6a:	f025 0503 	bic.w	r5, r5, #3
 8005d6e:	3508      	adds	r5, #8
 8005d70:	2d0c      	cmp	r5, #12
 8005d72:	bf38      	it	cc
 8005d74:	250c      	movcc	r5, #12
 8005d76:	2d00      	cmp	r5, #0
 8005d78:	4606      	mov	r6, r0
 8005d7a:	db01      	blt.n	8005d80 <_malloc_r+0x1c>
 8005d7c:	42a9      	cmp	r1, r5
 8005d7e:	d904      	bls.n	8005d8a <_malloc_r+0x26>
 8005d80:	230c      	movs	r3, #12
 8005d82:	6033      	str	r3, [r6, #0]
 8005d84:	2000      	movs	r0, #0
 8005d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e60 <_malloc_r+0xfc>
 8005d8e:	f000 f869 	bl	8005e64 <__malloc_lock>
 8005d92:	f8d8 3000 	ldr.w	r3, [r8]
 8005d96:	461c      	mov	r4, r3
 8005d98:	bb44      	cbnz	r4, 8005dec <_malloc_r+0x88>
 8005d9a:	4629      	mov	r1, r5
 8005d9c:	4630      	mov	r0, r6
 8005d9e:	f7ff ffbf 	bl	8005d20 <sbrk_aligned>
 8005da2:	1c43      	adds	r3, r0, #1
 8005da4:	4604      	mov	r4, r0
 8005da6:	d158      	bne.n	8005e5a <_malloc_r+0xf6>
 8005da8:	f8d8 4000 	ldr.w	r4, [r8]
 8005dac:	4627      	mov	r7, r4
 8005dae:	2f00      	cmp	r7, #0
 8005db0:	d143      	bne.n	8005e3a <_malloc_r+0xd6>
 8005db2:	2c00      	cmp	r4, #0
 8005db4:	d04b      	beq.n	8005e4e <_malloc_r+0xea>
 8005db6:	6823      	ldr	r3, [r4, #0]
 8005db8:	4639      	mov	r1, r7
 8005dba:	4630      	mov	r0, r6
 8005dbc:	eb04 0903 	add.w	r9, r4, r3
 8005dc0:	f000 fc5c 	bl	800667c <_sbrk_r>
 8005dc4:	4581      	cmp	r9, r0
 8005dc6:	d142      	bne.n	8005e4e <_malloc_r+0xea>
 8005dc8:	6821      	ldr	r1, [r4, #0]
 8005dca:	1a6d      	subs	r5, r5, r1
 8005dcc:	4629      	mov	r1, r5
 8005dce:	4630      	mov	r0, r6
 8005dd0:	f7ff ffa6 	bl	8005d20 <sbrk_aligned>
 8005dd4:	3001      	adds	r0, #1
 8005dd6:	d03a      	beq.n	8005e4e <_malloc_r+0xea>
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	442b      	add	r3, r5
 8005ddc:	6023      	str	r3, [r4, #0]
 8005dde:	f8d8 3000 	ldr.w	r3, [r8]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	bb62      	cbnz	r2, 8005e40 <_malloc_r+0xdc>
 8005de6:	f8c8 7000 	str.w	r7, [r8]
 8005dea:	e00f      	b.n	8005e0c <_malloc_r+0xa8>
 8005dec:	6822      	ldr	r2, [r4, #0]
 8005dee:	1b52      	subs	r2, r2, r5
 8005df0:	d420      	bmi.n	8005e34 <_malloc_r+0xd0>
 8005df2:	2a0b      	cmp	r2, #11
 8005df4:	d917      	bls.n	8005e26 <_malloc_r+0xc2>
 8005df6:	1961      	adds	r1, r4, r5
 8005df8:	42a3      	cmp	r3, r4
 8005dfa:	6025      	str	r5, [r4, #0]
 8005dfc:	bf18      	it	ne
 8005dfe:	6059      	strne	r1, [r3, #4]
 8005e00:	6863      	ldr	r3, [r4, #4]
 8005e02:	bf08      	it	eq
 8005e04:	f8c8 1000 	streq.w	r1, [r8]
 8005e08:	5162      	str	r2, [r4, r5]
 8005e0a:	604b      	str	r3, [r1, #4]
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	f000 f82f 	bl	8005e70 <__malloc_unlock>
 8005e12:	f104 000b 	add.w	r0, r4, #11
 8005e16:	1d23      	adds	r3, r4, #4
 8005e18:	f020 0007 	bic.w	r0, r0, #7
 8005e1c:	1ac2      	subs	r2, r0, r3
 8005e1e:	bf1c      	itt	ne
 8005e20:	1a1b      	subne	r3, r3, r0
 8005e22:	50a3      	strne	r3, [r4, r2]
 8005e24:	e7af      	b.n	8005d86 <_malloc_r+0x22>
 8005e26:	6862      	ldr	r2, [r4, #4]
 8005e28:	42a3      	cmp	r3, r4
 8005e2a:	bf0c      	ite	eq
 8005e2c:	f8c8 2000 	streq.w	r2, [r8]
 8005e30:	605a      	strne	r2, [r3, #4]
 8005e32:	e7eb      	b.n	8005e0c <_malloc_r+0xa8>
 8005e34:	4623      	mov	r3, r4
 8005e36:	6864      	ldr	r4, [r4, #4]
 8005e38:	e7ae      	b.n	8005d98 <_malloc_r+0x34>
 8005e3a:	463c      	mov	r4, r7
 8005e3c:	687f      	ldr	r7, [r7, #4]
 8005e3e:	e7b6      	b.n	8005dae <_malloc_r+0x4a>
 8005e40:	461a      	mov	r2, r3
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	42a3      	cmp	r3, r4
 8005e46:	d1fb      	bne.n	8005e40 <_malloc_r+0xdc>
 8005e48:	2300      	movs	r3, #0
 8005e4a:	6053      	str	r3, [r2, #4]
 8005e4c:	e7de      	b.n	8005e0c <_malloc_r+0xa8>
 8005e4e:	230c      	movs	r3, #12
 8005e50:	6033      	str	r3, [r6, #0]
 8005e52:	4630      	mov	r0, r6
 8005e54:	f000 f80c 	bl	8005e70 <__malloc_unlock>
 8005e58:	e794      	b.n	8005d84 <_malloc_r+0x20>
 8005e5a:	6005      	str	r5, [r0, #0]
 8005e5c:	e7d6      	b.n	8005e0c <_malloc_r+0xa8>
 8005e5e:	bf00      	nop
 8005e60:	200003c4 	.word	0x200003c4

08005e64 <__malloc_lock>:
 8005e64:	4801      	ldr	r0, [pc, #4]	@ (8005e6c <__malloc_lock+0x8>)
 8005e66:	f7ff bf0e 	b.w	8005c86 <__retarget_lock_acquire_recursive>
 8005e6a:	bf00      	nop
 8005e6c:	200003bc 	.word	0x200003bc

08005e70 <__malloc_unlock>:
 8005e70:	4801      	ldr	r0, [pc, #4]	@ (8005e78 <__malloc_unlock+0x8>)
 8005e72:	f7ff bf09 	b.w	8005c88 <__retarget_lock_release_recursive>
 8005e76:	bf00      	nop
 8005e78:	200003bc 	.word	0x200003bc

08005e7c <__sfputc_r>:
 8005e7c:	6893      	ldr	r3, [r2, #8]
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	b410      	push	{r4}
 8005e84:	6093      	str	r3, [r2, #8]
 8005e86:	da08      	bge.n	8005e9a <__sfputc_r+0x1e>
 8005e88:	6994      	ldr	r4, [r2, #24]
 8005e8a:	42a3      	cmp	r3, r4
 8005e8c:	db01      	blt.n	8005e92 <__sfputc_r+0x16>
 8005e8e:	290a      	cmp	r1, #10
 8005e90:	d103      	bne.n	8005e9a <__sfputc_r+0x1e>
 8005e92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e96:	f7ff bde8 	b.w	8005a6a <__swbuf_r>
 8005e9a:	6813      	ldr	r3, [r2, #0]
 8005e9c:	1c58      	adds	r0, r3, #1
 8005e9e:	6010      	str	r0, [r2, #0]
 8005ea0:	7019      	strb	r1, [r3, #0]
 8005ea2:	4608      	mov	r0, r1
 8005ea4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <__sfputs_r>:
 8005eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eac:	4606      	mov	r6, r0
 8005eae:	460f      	mov	r7, r1
 8005eb0:	4614      	mov	r4, r2
 8005eb2:	18d5      	adds	r5, r2, r3
 8005eb4:	42ac      	cmp	r4, r5
 8005eb6:	d101      	bne.n	8005ebc <__sfputs_r+0x12>
 8005eb8:	2000      	movs	r0, #0
 8005eba:	e007      	b.n	8005ecc <__sfputs_r+0x22>
 8005ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ec0:	463a      	mov	r2, r7
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	f7ff ffda 	bl	8005e7c <__sfputc_r>
 8005ec8:	1c43      	adds	r3, r0, #1
 8005eca:	d1f3      	bne.n	8005eb4 <__sfputs_r+0xa>
 8005ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ed0 <_vfiprintf_r>:
 8005ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed4:	460d      	mov	r5, r1
 8005ed6:	b09d      	sub	sp, #116	@ 0x74
 8005ed8:	4614      	mov	r4, r2
 8005eda:	4698      	mov	r8, r3
 8005edc:	4606      	mov	r6, r0
 8005ede:	b118      	cbz	r0, 8005ee8 <_vfiprintf_r+0x18>
 8005ee0:	6a03      	ldr	r3, [r0, #32]
 8005ee2:	b90b      	cbnz	r3, 8005ee8 <_vfiprintf_r+0x18>
 8005ee4:	f7ff fcd8 	bl	8005898 <__sinit>
 8005ee8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005eea:	07d9      	lsls	r1, r3, #31
 8005eec:	d405      	bmi.n	8005efa <_vfiprintf_r+0x2a>
 8005eee:	89ab      	ldrh	r3, [r5, #12]
 8005ef0:	059a      	lsls	r2, r3, #22
 8005ef2:	d402      	bmi.n	8005efa <_vfiprintf_r+0x2a>
 8005ef4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ef6:	f7ff fec6 	bl	8005c86 <__retarget_lock_acquire_recursive>
 8005efa:	89ab      	ldrh	r3, [r5, #12]
 8005efc:	071b      	lsls	r3, r3, #28
 8005efe:	d501      	bpl.n	8005f04 <_vfiprintf_r+0x34>
 8005f00:	692b      	ldr	r3, [r5, #16]
 8005f02:	b99b      	cbnz	r3, 8005f2c <_vfiprintf_r+0x5c>
 8005f04:	4629      	mov	r1, r5
 8005f06:	4630      	mov	r0, r6
 8005f08:	f7ff fdee 	bl	8005ae8 <__swsetup_r>
 8005f0c:	b170      	cbz	r0, 8005f2c <_vfiprintf_r+0x5c>
 8005f0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f10:	07dc      	lsls	r4, r3, #31
 8005f12:	d504      	bpl.n	8005f1e <_vfiprintf_r+0x4e>
 8005f14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f18:	b01d      	add	sp, #116	@ 0x74
 8005f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f1e:	89ab      	ldrh	r3, [r5, #12]
 8005f20:	0598      	lsls	r0, r3, #22
 8005f22:	d4f7      	bmi.n	8005f14 <_vfiprintf_r+0x44>
 8005f24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f26:	f7ff feaf 	bl	8005c88 <__retarget_lock_release_recursive>
 8005f2a:	e7f3      	b.n	8005f14 <_vfiprintf_r+0x44>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f30:	2320      	movs	r3, #32
 8005f32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f36:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f3a:	2330      	movs	r3, #48	@ 0x30
 8005f3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80060ec <_vfiprintf_r+0x21c>
 8005f40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f44:	f04f 0901 	mov.w	r9, #1
 8005f48:	4623      	mov	r3, r4
 8005f4a:	469a      	mov	sl, r3
 8005f4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f50:	b10a      	cbz	r2, 8005f56 <_vfiprintf_r+0x86>
 8005f52:	2a25      	cmp	r2, #37	@ 0x25
 8005f54:	d1f9      	bne.n	8005f4a <_vfiprintf_r+0x7a>
 8005f56:	ebba 0b04 	subs.w	fp, sl, r4
 8005f5a:	d00b      	beq.n	8005f74 <_vfiprintf_r+0xa4>
 8005f5c:	465b      	mov	r3, fp
 8005f5e:	4622      	mov	r2, r4
 8005f60:	4629      	mov	r1, r5
 8005f62:	4630      	mov	r0, r6
 8005f64:	f7ff ffa1 	bl	8005eaa <__sfputs_r>
 8005f68:	3001      	adds	r0, #1
 8005f6a:	f000 80a7 	beq.w	80060bc <_vfiprintf_r+0x1ec>
 8005f6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f70:	445a      	add	r2, fp
 8005f72:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f74:	f89a 3000 	ldrb.w	r3, [sl]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 809f 	beq.w	80060bc <_vfiprintf_r+0x1ec>
 8005f7e:	2300      	movs	r3, #0
 8005f80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f88:	f10a 0a01 	add.w	sl, sl, #1
 8005f8c:	9304      	str	r3, [sp, #16]
 8005f8e:	9307      	str	r3, [sp, #28]
 8005f90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f94:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f96:	4654      	mov	r4, sl
 8005f98:	2205      	movs	r2, #5
 8005f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f9e:	4853      	ldr	r0, [pc, #332]	@ (80060ec <_vfiprintf_r+0x21c>)
 8005fa0:	f7fa f93e 	bl	8000220 <memchr>
 8005fa4:	9a04      	ldr	r2, [sp, #16]
 8005fa6:	b9d8      	cbnz	r0, 8005fe0 <_vfiprintf_r+0x110>
 8005fa8:	06d1      	lsls	r1, r2, #27
 8005faa:	bf44      	itt	mi
 8005fac:	2320      	movmi	r3, #32
 8005fae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fb2:	0713      	lsls	r3, r2, #28
 8005fb4:	bf44      	itt	mi
 8005fb6:	232b      	movmi	r3, #43	@ 0x2b
 8005fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fbc:	f89a 3000 	ldrb.w	r3, [sl]
 8005fc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fc2:	d015      	beq.n	8005ff0 <_vfiprintf_r+0x120>
 8005fc4:	9a07      	ldr	r2, [sp, #28]
 8005fc6:	4654      	mov	r4, sl
 8005fc8:	2000      	movs	r0, #0
 8005fca:	f04f 0c0a 	mov.w	ip, #10
 8005fce:	4621      	mov	r1, r4
 8005fd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fd4:	3b30      	subs	r3, #48	@ 0x30
 8005fd6:	2b09      	cmp	r3, #9
 8005fd8:	d94b      	bls.n	8006072 <_vfiprintf_r+0x1a2>
 8005fda:	b1b0      	cbz	r0, 800600a <_vfiprintf_r+0x13a>
 8005fdc:	9207      	str	r2, [sp, #28]
 8005fde:	e014      	b.n	800600a <_vfiprintf_r+0x13a>
 8005fe0:	eba0 0308 	sub.w	r3, r0, r8
 8005fe4:	fa09 f303 	lsl.w	r3, r9, r3
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	9304      	str	r3, [sp, #16]
 8005fec:	46a2      	mov	sl, r4
 8005fee:	e7d2      	b.n	8005f96 <_vfiprintf_r+0xc6>
 8005ff0:	9b03      	ldr	r3, [sp, #12]
 8005ff2:	1d19      	adds	r1, r3, #4
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	9103      	str	r1, [sp, #12]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	bfbb      	ittet	lt
 8005ffc:	425b      	neglt	r3, r3
 8005ffe:	f042 0202 	orrlt.w	r2, r2, #2
 8006002:	9307      	strge	r3, [sp, #28]
 8006004:	9307      	strlt	r3, [sp, #28]
 8006006:	bfb8      	it	lt
 8006008:	9204      	strlt	r2, [sp, #16]
 800600a:	7823      	ldrb	r3, [r4, #0]
 800600c:	2b2e      	cmp	r3, #46	@ 0x2e
 800600e:	d10a      	bne.n	8006026 <_vfiprintf_r+0x156>
 8006010:	7863      	ldrb	r3, [r4, #1]
 8006012:	2b2a      	cmp	r3, #42	@ 0x2a
 8006014:	d132      	bne.n	800607c <_vfiprintf_r+0x1ac>
 8006016:	9b03      	ldr	r3, [sp, #12]
 8006018:	1d1a      	adds	r2, r3, #4
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	9203      	str	r2, [sp, #12]
 800601e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006022:	3402      	adds	r4, #2
 8006024:	9305      	str	r3, [sp, #20]
 8006026:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80060fc <_vfiprintf_r+0x22c>
 800602a:	7821      	ldrb	r1, [r4, #0]
 800602c:	2203      	movs	r2, #3
 800602e:	4650      	mov	r0, sl
 8006030:	f7fa f8f6 	bl	8000220 <memchr>
 8006034:	b138      	cbz	r0, 8006046 <_vfiprintf_r+0x176>
 8006036:	9b04      	ldr	r3, [sp, #16]
 8006038:	eba0 000a 	sub.w	r0, r0, sl
 800603c:	2240      	movs	r2, #64	@ 0x40
 800603e:	4082      	lsls	r2, r0
 8006040:	4313      	orrs	r3, r2
 8006042:	3401      	adds	r4, #1
 8006044:	9304      	str	r3, [sp, #16]
 8006046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800604a:	4829      	ldr	r0, [pc, #164]	@ (80060f0 <_vfiprintf_r+0x220>)
 800604c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006050:	2206      	movs	r2, #6
 8006052:	f7fa f8e5 	bl	8000220 <memchr>
 8006056:	2800      	cmp	r0, #0
 8006058:	d03f      	beq.n	80060da <_vfiprintf_r+0x20a>
 800605a:	4b26      	ldr	r3, [pc, #152]	@ (80060f4 <_vfiprintf_r+0x224>)
 800605c:	bb1b      	cbnz	r3, 80060a6 <_vfiprintf_r+0x1d6>
 800605e:	9b03      	ldr	r3, [sp, #12]
 8006060:	3307      	adds	r3, #7
 8006062:	f023 0307 	bic.w	r3, r3, #7
 8006066:	3308      	adds	r3, #8
 8006068:	9303      	str	r3, [sp, #12]
 800606a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800606c:	443b      	add	r3, r7
 800606e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006070:	e76a      	b.n	8005f48 <_vfiprintf_r+0x78>
 8006072:	fb0c 3202 	mla	r2, ip, r2, r3
 8006076:	460c      	mov	r4, r1
 8006078:	2001      	movs	r0, #1
 800607a:	e7a8      	b.n	8005fce <_vfiprintf_r+0xfe>
 800607c:	2300      	movs	r3, #0
 800607e:	3401      	adds	r4, #1
 8006080:	9305      	str	r3, [sp, #20]
 8006082:	4619      	mov	r1, r3
 8006084:	f04f 0c0a 	mov.w	ip, #10
 8006088:	4620      	mov	r0, r4
 800608a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800608e:	3a30      	subs	r2, #48	@ 0x30
 8006090:	2a09      	cmp	r2, #9
 8006092:	d903      	bls.n	800609c <_vfiprintf_r+0x1cc>
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0c6      	beq.n	8006026 <_vfiprintf_r+0x156>
 8006098:	9105      	str	r1, [sp, #20]
 800609a:	e7c4      	b.n	8006026 <_vfiprintf_r+0x156>
 800609c:	fb0c 2101 	mla	r1, ip, r1, r2
 80060a0:	4604      	mov	r4, r0
 80060a2:	2301      	movs	r3, #1
 80060a4:	e7f0      	b.n	8006088 <_vfiprintf_r+0x1b8>
 80060a6:	ab03      	add	r3, sp, #12
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	462a      	mov	r2, r5
 80060ac:	4b12      	ldr	r3, [pc, #72]	@ (80060f8 <_vfiprintf_r+0x228>)
 80060ae:	a904      	add	r1, sp, #16
 80060b0:	4630      	mov	r0, r6
 80060b2:	f3af 8000 	nop.w
 80060b6:	4607      	mov	r7, r0
 80060b8:	1c78      	adds	r0, r7, #1
 80060ba:	d1d6      	bne.n	800606a <_vfiprintf_r+0x19a>
 80060bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060be:	07d9      	lsls	r1, r3, #31
 80060c0:	d405      	bmi.n	80060ce <_vfiprintf_r+0x1fe>
 80060c2:	89ab      	ldrh	r3, [r5, #12]
 80060c4:	059a      	lsls	r2, r3, #22
 80060c6:	d402      	bmi.n	80060ce <_vfiprintf_r+0x1fe>
 80060c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060ca:	f7ff fddd 	bl	8005c88 <__retarget_lock_release_recursive>
 80060ce:	89ab      	ldrh	r3, [r5, #12]
 80060d0:	065b      	lsls	r3, r3, #25
 80060d2:	f53f af1f 	bmi.w	8005f14 <_vfiprintf_r+0x44>
 80060d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060d8:	e71e      	b.n	8005f18 <_vfiprintf_r+0x48>
 80060da:	ab03      	add	r3, sp, #12
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	462a      	mov	r2, r5
 80060e0:	4b05      	ldr	r3, [pc, #20]	@ (80060f8 <_vfiprintf_r+0x228>)
 80060e2:	a904      	add	r1, sp, #16
 80060e4:	4630      	mov	r0, r6
 80060e6:	f000 f879 	bl	80061dc <_printf_i>
 80060ea:	e7e4      	b.n	80060b6 <_vfiprintf_r+0x1e6>
 80060ec:	08006874 	.word	0x08006874
 80060f0:	0800687e 	.word	0x0800687e
 80060f4:	00000000 	.word	0x00000000
 80060f8:	08005eab 	.word	0x08005eab
 80060fc:	0800687a 	.word	0x0800687a

08006100 <_printf_common>:
 8006100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006104:	4616      	mov	r6, r2
 8006106:	4698      	mov	r8, r3
 8006108:	688a      	ldr	r2, [r1, #8]
 800610a:	690b      	ldr	r3, [r1, #16]
 800610c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006110:	4293      	cmp	r3, r2
 8006112:	bfb8      	it	lt
 8006114:	4613      	movlt	r3, r2
 8006116:	6033      	str	r3, [r6, #0]
 8006118:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800611c:	4607      	mov	r7, r0
 800611e:	460c      	mov	r4, r1
 8006120:	b10a      	cbz	r2, 8006126 <_printf_common+0x26>
 8006122:	3301      	adds	r3, #1
 8006124:	6033      	str	r3, [r6, #0]
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	0699      	lsls	r1, r3, #26
 800612a:	bf42      	ittt	mi
 800612c:	6833      	ldrmi	r3, [r6, #0]
 800612e:	3302      	addmi	r3, #2
 8006130:	6033      	strmi	r3, [r6, #0]
 8006132:	6825      	ldr	r5, [r4, #0]
 8006134:	f015 0506 	ands.w	r5, r5, #6
 8006138:	d106      	bne.n	8006148 <_printf_common+0x48>
 800613a:	f104 0a19 	add.w	sl, r4, #25
 800613e:	68e3      	ldr	r3, [r4, #12]
 8006140:	6832      	ldr	r2, [r6, #0]
 8006142:	1a9b      	subs	r3, r3, r2
 8006144:	42ab      	cmp	r3, r5
 8006146:	dc26      	bgt.n	8006196 <_printf_common+0x96>
 8006148:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800614c:	6822      	ldr	r2, [r4, #0]
 800614e:	3b00      	subs	r3, #0
 8006150:	bf18      	it	ne
 8006152:	2301      	movne	r3, #1
 8006154:	0692      	lsls	r2, r2, #26
 8006156:	d42b      	bmi.n	80061b0 <_printf_common+0xb0>
 8006158:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800615c:	4641      	mov	r1, r8
 800615e:	4638      	mov	r0, r7
 8006160:	47c8      	blx	r9
 8006162:	3001      	adds	r0, #1
 8006164:	d01e      	beq.n	80061a4 <_printf_common+0xa4>
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	6922      	ldr	r2, [r4, #16]
 800616a:	f003 0306 	and.w	r3, r3, #6
 800616e:	2b04      	cmp	r3, #4
 8006170:	bf02      	ittt	eq
 8006172:	68e5      	ldreq	r5, [r4, #12]
 8006174:	6833      	ldreq	r3, [r6, #0]
 8006176:	1aed      	subeq	r5, r5, r3
 8006178:	68a3      	ldr	r3, [r4, #8]
 800617a:	bf0c      	ite	eq
 800617c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006180:	2500      	movne	r5, #0
 8006182:	4293      	cmp	r3, r2
 8006184:	bfc4      	itt	gt
 8006186:	1a9b      	subgt	r3, r3, r2
 8006188:	18ed      	addgt	r5, r5, r3
 800618a:	2600      	movs	r6, #0
 800618c:	341a      	adds	r4, #26
 800618e:	42b5      	cmp	r5, r6
 8006190:	d11a      	bne.n	80061c8 <_printf_common+0xc8>
 8006192:	2000      	movs	r0, #0
 8006194:	e008      	b.n	80061a8 <_printf_common+0xa8>
 8006196:	2301      	movs	r3, #1
 8006198:	4652      	mov	r2, sl
 800619a:	4641      	mov	r1, r8
 800619c:	4638      	mov	r0, r7
 800619e:	47c8      	blx	r9
 80061a0:	3001      	adds	r0, #1
 80061a2:	d103      	bne.n	80061ac <_printf_common+0xac>
 80061a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80061a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ac:	3501      	adds	r5, #1
 80061ae:	e7c6      	b.n	800613e <_printf_common+0x3e>
 80061b0:	18e1      	adds	r1, r4, r3
 80061b2:	1c5a      	adds	r2, r3, #1
 80061b4:	2030      	movs	r0, #48	@ 0x30
 80061b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80061ba:	4422      	add	r2, r4
 80061bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80061c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80061c4:	3302      	adds	r3, #2
 80061c6:	e7c7      	b.n	8006158 <_printf_common+0x58>
 80061c8:	2301      	movs	r3, #1
 80061ca:	4622      	mov	r2, r4
 80061cc:	4641      	mov	r1, r8
 80061ce:	4638      	mov	r0, r7
 80061d0:	47c8      	blx	r9
 80061d2:	3001      	adds	r0, #1
 80061d4:	d0e6      	beq.n	80061a4 <_printf_common+0xa4>
 80061d6:	3601      	adds	r6, #1
 80061d8:	e7d9      	b.n	800618e <_printf_common+0x8e>
	...

080061dc <_printf_i>:
 80061dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061e0:	7e0f      	ldrb	r7, [r1, #24]
 80061e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061e4:	2f78      	cmp	r7, #120	@ 0x78
 80061e6:	4691      	mov	r9, r2
 80061e8:	4680      	mov	r8, r0
 80061ea:	460c      	mov	r4, r1
 80061ec:	469a      	mov	sl, r3
 80061ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80061f2:	d807      	bhi.n	8006204 <_printf_i+0x28>
 80061f4:	2f62      	cmp	r7, #98	@ 0x62
 80061f6:	d80a      	bhi.n	800620e <_printf_i+0x32>
 80061f8:	2f00      	cmp	r7, #0
 80061fa:	f000 80d2 	beq.w	80063a2 <_printf_i+0x1c6>
 80061fe:	2f58      	cmp	r7, #88	@ 0x58
 8006200:	f000 80b9 	beq.w	8006376 <_printf_i+0x19a>
 8006204:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006208:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800620c:	e03a      	b.n	8006284 <_printf_i+0xa8>
 800620e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006212:	2b15      	cmp	r3, #21
 8006214:	d8f6      	bhi.n	8006204 <_printf_i+0x28>
 8006216:	a101      	add	r1, pc, #4	@ (adr r1, 800621c <_printf_i+0x40>)
 8006218:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800621c:	08006275 	.word	0x08006275
 8006220:	08006289 	.word	0x08006289
 8006224:	08006205 	.word	0x08006205
 8006228:	08006205 	.word	0x08006205
 800622c:	08006205 	.word	0x08006205
 8006230:	08006205 	.word	0x08006205
 8006234:	08006289 	.word	0x08006289
 8006238:	08006205 	.word	0x08006205
 800623c:	08006205 	.word	0x08006205
 8006240:	08006205 	.word	0x08006205
 8006244:	08006205 	.word	0x08006205
 8006248:	08006389 	.word	0x08006389
 800624c:	080062b3 	.word	0x080062b3
 8006250:	08006343 	.word	0x08006343
 8006254:	08006205 	.word	0x08006205
 8006258:	08006205 	.word	0x08006205
 800625c:	080063ab 	.word	0x080063ab
 8006260:	08006205 	.word	0x08006205
 8006264:	080062b3 	.word	0x080062b3
 8006268:	08006205 	.word	0x08006205
 800626c:	08006205 	.word	0x08006205
 8006270:	0800634b 	.word	0x0800634b
 8006274:	6833      	ldr	r3, [r6, #0]
 8006276:	1d1a      	adds	r2, r3, #4
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6032      	str	r2, [r6, #0]
 800627c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006280:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006284:	2301      	movs	r3, #1
 8006286:	e09d      	b.n	80063c4 <_printf_i+0x1e8>
 8006288:	6833      	ldr	r3, [r6, #0]
 800628a:	6820      	ldr	r0, [r4, #0]
 800628c:	1d19      	adds	r1, r3, #4
 800628e:	6031      	str	r1, [r6, #0]
 8006290:	0606      	lsls	r6, r0, #24
 8006292:	d501      	bpl.n	8006298 <_printf_i+0xbc>
 8006294:	681d      	ldr	r5, [r3, #0]
 8006296:	e003      	b.n	80062a0 <_printf_i+0xc4>
 8006298:	0645      	lsls	r5, r0, #25
 800629a:	d5fb      	bpl.n	8006294 <_printf_i+0xb8>
 800629c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80062a0:	2d00      	cmp	r5, #0
 80062a2:	da03      	bge.n	80062ac <_printf_i+0xd0>
 80062a4:	232d      	movs	r3, #45	@ 0x2d
 80062a6:	426d      	negs	r5, r5
 80062a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062ac:	4859      	ldr	r0, [pc, #356]	@ (8006414 <_printf_i+0x238>)
 80062ae:	230a      	movs	r3, #10
 80062b0:	e011      	b.n	80062d6 <_printf_i+0xfa>
 80062b2:	6821      	ldr	r1, [r4, #0]
 80062b4:	6833      	ldr	r3, [r6, #0]
 80062b6:	0608      	lsls	r0, r1, #24
 80062b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80062bc:	d402      	bmi.n	80062c4 <_printf_i+0xe8>
 80062be:	0649      	lsls	r1, r1, #25
 80062c0:	bf48      	it	mi
 80062c2:	b2ad      	uxthmi	r5, r5
 80062c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80062c6:	4853      	ldr	r0, [pc, #332]	@ (8006414 <_printf_i+0x238>)
 80062c8:	6033      	str	r3, [r6, #0]
 80062ca:	bf14      	ite	ne
 80062cc:	230a      	movne	r3, #10
 80062ce:	2308      	moveq	r3, #8
 80062d0:	2100      	movs	r1, #0
 80062d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80062d6:	6866      	ldr	r6, [r4, #4]
 80062d8:	60a6      	str	r6, [r4, #8]
 80062da:	2e00      	cmp	r6, #0
 80062dc:	bfa2      	ittt	ge
 80062de:	6821      	ldrge	r1, [r4, #0]
 80062e0:	f021 0104 	bicge.w	r1, r1, #4
 80062e4:	6021      	strge	r1, [r4, #0]
 80062e6:	b90d      	cbnz	r5, 80062ec <_printf_i+0x110>
 80062e8:	2e00      	cmp	r6, #0
 80062ea:	d04b      	beq.n	8006384 <_printf_i+0x1a8>
 80062ec:	4616      	mov	r6, r2
 80062ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80062f2:	fb03 5711 	mls	r7, r3, r1, r5
 80062f6:	5dc7      	ldrb	r7, [r0, r7]
 80062f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062fc:	462f      	mov	r7, r5
 80062fe:	42bb      	cmp	r3, r7
 8006300:	460d      	mov	r5, r1
 8006302:	d9f4      	bls.n	80062ee <_printf_i+0x112>
 8006304:	2b08      	cmp	r3, #8
 8006306:	d10b      	bne.n	8006320 <_printf_i+0x144>
 8006308:	6823      	ldr	r3, [r4, #0]
 800630a:	07df      	lsls	r7, r3, #31
 800630c:	d508      	bpl.n	8006320 <_printf_i+0x144>
 800630e:	6923      	ldr	r3, [r4, #16]
 8006310:	6861      	ldr	r1, [r4, #4]
 8006312:	4299      	cmp	r1, r3
 8006314:	bfde      	ittt	le
 8006316:	2330      	movle	r3, #48	@ 0x30
 8006318:	f806 3c01 	strble.w	r3, [r6, #-1]
 800631c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006320:	1b92      	subs	r2, r2, r6
 8006322:	6122      	str	r2, [r4, #16]
 8006324:	f8cd a000 	str.w	sl, [sp]
 8006328:	464b      	mov	r3, r9
 800632a:	aa03      	add	r2, sp, #12
 800632c:	4621      	mov	r1, r4
 800632e:	4640      	mov	r0, r8
 8006330:	f7ff fee6 	bl	8006100 <_printf_common>
 8006334:	3001      	adds	r0, #1
 8006336:	d14a      	bne.n	80063ce <_printf_i+0x1f2>
 8006338:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800633c:	b004      	add	sp, #16
 800633e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006342:	6823      	ldr	r3, [r4, #0]
 8006344:	f043 0320 	orr.w	r3, r3, #32
 8006348:	6023      	str	r3, [r4, #0]
 800634a:	4833      	ldr	r0, [pc, #204]	@ (8006418 <_printf_i+0x23c>)
 800634c:	2778      	movs	r7, #120	@ 0x78
 800634e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	6831      	ldr	r1, [r6, #0]
 8006356:	061f      	lsls	r7, r3, #24
 8006358:	f851 5b04 	ldr.w	r5, [r1], #4
 800635c:	d402      	bmi.n	8006364 <_printf_i+0x188>
 800635e:	065f      	lsls	r7, r3, #25
 8006360:	bf48      	it	mi
 8006362:	b2ad      	uxthmi	r5, r5
 8006364:	6031      	str	r1, [r6, #0]
 8006366:	07d9      	lsls	r1, r3, #31
 8006368:	bf44      	itt	mi
 800636a:	f043 0320 	orrmi.w	r3, r3, #32
 800636e:	6023      	strmi	r3, [r4, #0]
 8006370:	b11d      	cbz	r5, 800637a <_printf_i+0x19e>
 8006372:	2310      	movs	r3, #16
 8006374:	e7ac      	b.n	80062d0 <_printf_i+0xf4>
 8006376:	4827      	ldr	r0, [pc, #156]	@ (8006414 <_printf_i+0x238>)
 8006378:	e7e9      	b.n	800634e <_printf_i+0x172>
 800637a:	6823      	ldr	r3, [r4, #0]
 800637c:	f023 0320 	bic.w	r3, r3, #32
 8006380:	6023      	str	r3, [r4, #0]
 8006382:	e7f6      	b.n	8006372 <_printf_i+0x196>
 8006384:	4616      	mov	r6, r2
 8006386:	e7bd      	b.n	8006304 <_printf_i+0x128>
 8006388:	6833      	ldr	r3, [r6, #0]
 800638a:	6825      	ldr	r5, [r4, #0]
 800638c:	6961      	ldr	r1, [r4, #20]
 800638e:	1d18      	adds	r0, r3, #4
 8006390:	6030      	str	r0, [r6, #0]
 8006392:	062e      	lsls	r6, r5, #24
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	d501      	bpl.n	800639c <_printf_i+0x1c0>
 8006398:	6019      	str	r1, [r3, #0]
 800639a:	e002      	b.n	80063a2 <_printf_i+0x1c6>
 800639c:	0668      	lsls	r0, r5, #25
 800639e:	d5fb      	bpl.n	8006398 <_printf_i+0x1bc>
 80063a0:	8019      	strh	r1, [r3, #0]
 80063a2:	2300      	movs	r3, #0
 80063a4:	6123      	str	r3, [r4, #16]
 80063a6:	4616      	mov	r6, r2
 80063a8:	e7bc      	b.n	8006324 <_printf_i+0x148>
 80063aa:	6833      	ldr	r3, [r6, #0]
 80063ac:	1d1a      	adds	r2, r3, #4
 80063ae:	6032      	str	r2, [r6, #0]
 80063b0:	681e      	ldr	r6, [r3, #0]
 80063b2:	6862      	ldr	r2, [r4, #4]
 80063b4:	2100      	movs	r1, #0
 80063b6:	4630      	mov	r0, r6
 80063b8:	f7f9 ff32 	bl	8000220 <memchr>
 80063bc:	b108      	cbz	r0, 80063c2 <_printf_i+0x1e6>
 80063be:	1b80      	subs	r0, r0, r6
 80063c0:	6060      	str	r0, [r4, #4]
 80063c2:	6863      	ldr	r3, [r4, #4]
 80063c4:	6123      	str	r3, [r4, #16]
 80063c6:	2300      	movs	r3, #0
 80063c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063cc:	e7aa      	b.n	8006324 <_printf_i+0x148>
 80063ce:	6923      	ldr	r3, [r4, #16]
 80063d0:	4632      	mov	r2, r6
 80063d2:	4649      	mov	r1, r9
 80063d4:	4640      	mov	r0, r8
 80063d6:	47d0      	blx	sl
 80063d8:	3001      	adds	r0, #1
 80063da:	d0ad      	beq.n	8006338 <_printf_i+0x15c>
 80063dc:	6823      	ldr	r3, [r4, #0]
 80063de:	079b      	lsls	r3, r3, #30
 80063e0:	d413      	bmi.n	800640a <_printf_i+0x22e>
 80063e2:	68e0      	ldr	r0, [r4, #12]
 80063e4:	9b03      	ldr	r3, [sp, #12]
 80063e6:	4298      	cmp	r0, r3
 80063e8:	bfb8      	it	lt
 80063ea:	4618      	movlt	r0, r3
 80063ec:	e7a6      	b.n	800633c <_printf_i+0x160>
 80063ee:	2301      	movs	r3, #1
 80063f0:	4632      	mov	r2, r6
 80063f2:	4649      	mov	r1, r9
 80063f4:	4640      	mov	r0, r8
 80063f6:	47d0      	blx	sl
 80063f8:	3001      	adds	r0, #1
 80063fa:	d09d      	beq.n	8006338 <_printf_i+0x15c>
 80063fc:	3501      	adds	r5, #1
 80063fe:	68e3      	ldr	r3, [r4, #12]
 8006400:	9903      	ldr	r1, [sp, #12]
 8006402:	1a5b      	subs	r3, r3, r1
 8006404:	42ab      	cmp	r3, r5
 8006406:	dcf2      	bgt.n	80063ee <_printf_i+0x212>
 8006408:	e7eb      	b.n	80063e2 <_printf_i+0x206>
 800640a:	2500      	movs	r5, #0
 800640c:	f104 0619 	add.w	r6, r4, #25
 8006410:	e7f5      	b.n	80063fe <_printf_i+0x222>
 8006412:	bf00      	nop
 8006414:	08006885 	.word	0x08006885
 8006418:	08006896 	.word	0x08006896

0800641c <__sflush_r>:
 800641c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006424:	0716      	lsls	r6, r2, #28
 8006426:	4605      	mov	r5, r0
 8006428:	460c      	mov	r4, r1
 800642a:	d454      	bmi.n	80064d6 <__sflush_r+0xba>
 800642c:	684b      	ldr	r3, [r1, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	dc02      	bgt.n	8006438 <__sflush_r+0x1c>
 8006432:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006434:	2b00      	cmp	r3, #0
 8006436:	dd48      	ble.n	80064ca <__sflush_r+0xae>
 8006438:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800643a:	2e00      	cmp	r6, #0
 800643c:	d045      	beq.n	80064ca <__sflush_r+0xae>
 800643e:	2300      	movs	r3, #0
 8006440:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006444:	682f      	ldr	r7, [r5, #0]
 8006446:	6a21      	ldr	r1, [r4, #32]
 8006448:	602b      	str	r3, [r5, #0]
 800644a:	d030      	beq.n	80064ae <__sflush_r+0x92>
 800644c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800644e:	89a3      	ldrh	r3, [r4, #12]
 8006450:	0759      	lsls	r1, r3, #29
 8006452:	d505      	bpl.n	8006460 <__sflush_r+0x44>
 8006454:	6863      	ldr	r3, [r4, #4]
 8006456:	1ad2      	subs	r2, r2, r3
 8006458:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800645a:	b10b      	cbz	r3, 8006460 <__sflush_r+0x44>
 800645c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800645e:	1ad2      	subs	r2, r2, r3
 8006460:	2300      	movs	r3, #0
 8006462:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006464:	6a21      	ldr	r1, [r4, #32]
 8006466:	4628      	mov	r0, r5
 8006468:	47b0      	blx	r6
 800646a:	1c43      	adds	r3, r0, #1
 800646c:	89a3      	ldrh	r3, [r4, #12]
 800646e:	d106      	bne.n	800647e <__sflush_r+0x62>
 8006470:	6829      	ldr	r1, [r5, #0]
 8006472:	291d      	cmp	r1, #29
 8006474:	d82b      	bhi.n	80064ce <__sflush_r+0xb2>
 8006476:	4a2a      	ldr	r2, [pc, #168]	@ (8006520 <__sflush_r+0x104>)
 8006478:	410a      	asrs	r2, r1
 800647a:	07d6      	lsls	r6, r2, #31
 800647c:	d427      	bmi.n	80064ce <__sflush_r+0xb2>
 800647e:	2200      	movs	r2, #0
 8006480:	6062      	str	r2, [r4, #4]
 8006482:	04d9      	lsls	r1, r3, #19
 8006484:	6922      	ldr	r2, [r4, #16]
 8006486:	6022      	str	r2, [r4, #0]
 8006488:	d504      	bpl.n	8006494 <__sflush_r+0x78>
 800648a:	1c42      	adds	r2, r0, #1
 800648c:	d101      	bne.n	8006492 <__sflush_r+0x76>
 800648e:	682b      	ldr	r3, [r5, #0]
 8006490:	b903      	cbnz	r3, 8006494 <__sflush_r+0x78>
 8006492:	6560      	str	r0, [r4, #84]	@ 0x54
 8006494:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006496:	602f      	str	r7, [r5, #0]
 8006498:	b1b9      	cbz	r1, 80064ca <__sflush_r+0xae>
 800649a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800649e:	4299      	cmp	r1, r3
 80064a0:	d002      	beq.n	80064a8 <__sflush_r+0x8c>
 80064a2:	4628      	mov	r0, r5
 80064a4:	f7ff fbf2 	bl	8005c8c <_free_r>
 80064a8:	2300      	movs	r3, #0
 80064aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80064ac:	e00d      	b.n	80064ca <__sflush_r+0xae>
 80064ae:	2301      	movs	r3, #1
 80064b0:	4628      	mov	r0, r5
 80064b2:	47b0      	blx	r6
 80064b4:	4602      	mov	r2, r0
 80064b6:	1c50      	adds	r0, r2, #1
 80064b8:	d1c9      	bne.n	800644e <__sflush_r+0x32>
 80064ba:	682b      	ldr	r3, [r5, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d0c6      	beq.n	800644e <__sflush_r+0x32>
 80064c0:	2b1d      	cmp	r3, #29
 80064c2:	d001      	beq.n	80064c8 <__sflush_r+0xac>
 80064c4:	2b16      	cmp	r3, #22
 80064c6:	d11e      	bne.n	8006506 <__sflush_r+0xea>
 80064c8:	602f      	str	r7, [r5, #0]
 80064ca:	2000      	movs	r0, #0
 80064cc:	e022      	b.n	8006514 <__sflush_r+0xf8>
 80064ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064d2:	b21b      	sxth	r3, r3
 80064d4:	e01b      	b.n	800650e <__sflush_r+0xf2>
 80064d6:	690f      	ldr	r7, [r1, #16]
 80064d8:	2f00      	cmp	r7, #0
 80064da:	d0f6      	beq.n	80064ca <__sflush_r+0xae>
 80064dc:	0793      	lsls	r3, r2, #30
 80064de:	680e      	ldr	r6, [r1, #0]
 80064e0:	bf08      	it	eq
 80064e2:	694b      	ldreq	r3, [r1, #20]
 80064e4:	600f      	str	r7, [r1, #0]
 80064e6:	bf18      	it	ne
 80064e8:	2300      	movne	r3, #0
 80064ea:	eba6 0807 	sub.w	r8, r6, r7
 80064ee:	608b      	str	r3, [r1, #8]
 80064f0:	f1b8 0f00 	cmp.w	r8, #0
 80064f4:	dde9      	ble.n	80064ca <__sflush_r+0xae>
 80064f6:	6a21      	ldr	r1, [r4, #32]
 80064f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80064fa:	4643      	mov	r3, r8
 80064fc:	463a      	mov	r2, r7
 80064fe:	4628      	mov	r0, r5
 8006500:	47b0      	blx	r6
 8006502:	2800      	cmp	r0, #0
 8006504:	dc08      	bgt.n	8006518 <__sflush_r+0xfc>
 8006506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800650a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800650e:	81a3      	strh	r3, [r4, #12]
 8006510:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006518:	4407      	add	r7, r0
 800651a:	eba8 0800 	sub.w	r8, r8, r0
 800651e:	e7e7      	b.n	80064f0 <__sflush_r+0xd4>
 8006520:	dfbffffe 	.word	0xdfbffffe

08006524 <_fflush_r>:
 8006524:	b538      	push	{r3, r4, r5, lr}
 8006526:	690b      	ldr	r3, [r1, #16]
 8006528:	4605      	mov	r5, r0
 800652a:	460c      	mov	r4, r1
 800652c:	b913      	cbnz	r3, 8006534 <_fflush_r+0x10>
 800652e:	2500      	movs	r5, #0
 8006530:	4628      	mov	r0, r5
 8006532:	bd38      	pop	{r3, r4, r5, pc}
 8006534:	b118      	cbz	r0, 800653e <_fflush_r+0x1a>
 8006536:	6a03      	ldr	r3, [r0, #32]
 8006538:	b90b      	cbnz	r3, 800653e <_fflush_r+0x1a>
 800653a:	f7ff f9ad 	bl	8005898 <__sinit>
 800653e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d0f3      	beq.n	800652e <_fflush_r+0xa>
 8006546:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006548:	07d0      	lsls	r0, r2, #31
 800654a:	d404      	bmi.n	8006556 <_fflush_r+0x32>
 800654c:	0599      	lsls	r1, r3, #22
 800654e:	d402      	bmi.n	8006556 <_fflush_r+0x32>
 8006550:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006552:	f7ff fb98 	bl	8005c86 <__retarget_lock_acquire_recursive>
 8006556:	4628      	mov	r0, r5
 8006558:	4621      	mov	r1, r4
 800655a:	f7ff ff5f 	bl	800641c <__sflush_r>
 800655e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006560:	07da      	lsls	r2, r3, #31
 8006562:	4605      	mov	r5, r0
 8006564:	d4e4      	bmi.n	8006530 <_fflush_r+0xc>
 8006566:	89a3      	ldrh	r3, [r4, #12]
 8006568:	059b      	lsls	r3, r3, #22
 800656a:	d4e1      	bmi.n	8006530 <_fflush_r+0xc>
 800656c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800656e:	f7ff fb8b 	bl	8005c88 <__retarget_lock_release_recursive>
 8006572:	e7dd      	b.n	8006530 <_fflush_r+0xc>

08006574 <__swhatbuf_r>:
 8006574:	b570      	push	{r4, r5, r6, lr}
 8006576:	460c      	mov	r4, r1
 8006578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800657c:	2900      	cmp	r1, #0
 800657e:	b096      	sub	sp, #88	@ 0x58
 8006580:	4615      	mov	r5, r2
 8006582:	461e      	mov	r6, r3
 8006584:	da0d      	bge.n	80065a2 <__swhatbuf_r+0x2e>
 8006586:	89a3      	ldrh	r3, [r4, #12]
 8006588:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800658c:	f04f 0100 	mov.w	r1, #0
 8006590:	bf14      	ite	ne
 8006592:	2340      	movne	r3, #64	@ 0x40
 8006594:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006598:	2000      	movs	r0, #0
 800659a:	6031      	str	r1, [r6, #0]
 800659c:	602b      	str	r3, [r5, #0]
 800659e:	b016      	add	sp, #88	@ 0x58
 80065a0:	bd70      	pop	{r4, r5, r6, pc}
 80065a2:	466a      	mov	r2, sp
 80065a4:	f000 f848 	bl	8006638 <_fstat_r>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	dbec      	blt.n	8006586 <__swhatbuf_r+0x12>
 80065ac:	9901      	ldr	r1, [sp, #4]
 80065ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80065b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80065b6:	4259      	negs	r1, r3
 80065b8:	4159      	adcs	r1, r3
 80065ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065be:	e7eb      	b.n	8006598 <__swhatbuf_r+0x24>

080065c0 <__smakebuf_r>:
 80065c0:	898b      	ldrh	r3, [r1, #12]
 80065c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065c4:	079d      	lsls	r5, r3, #30
 80065c6:	4606      	mov	r6, r0
 80065c8:	460c      	mov	r4, r1
 80065ca:	d507      	bpl.n	80065dc <__smakebuf_r+0x1c>
 80065cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80065d0:	6023      	str	r3, [r4, #0]
 80065d2:	6123      	str	r3, [r4, #16]
 80065d4:	2301      	movs	r3, #1
 80065d6:	6163      	str	r3, [r4, #20]
 80065d8:	b003      	add	sp, #12
 80065da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065dc:	ab01      	add	r3, sp, #4
 80065de:	466a      	mov	r2, sp
 80065e0:	f7ff ffc8 	bl	8006574 <__swhatbuf_r>
 80065e4:	9f00      	ldr	r7, [sp, #0]
 80065e6:	4605      	mov	r5, r0
 80065e8:	4639      	mov	r1, r7
 80065ea:	4630      	mov	r0, r6
 80065ec:	f7ff fbba 	bl	8005d64 <_malloc_r>
 80065f0:	b948      	cbnz	r0, 8006606 <__smakebuf_r+0x46>
 80065f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065f6:	059a      	lsls	r2, r3, #22
 80065f8:	d4ee      	bmi.n	80065d8 <__smakebuf_r+0x18>
 80065fa:	f023 0303 	bic.w	r3, r3, #3
 80065fe:	f043 0302 	orr.w	r3, r3, #2
 8006602:	81a3      	strh	r3, [r4, #12]
 8006604:	e7e2      	b.n	80065cc <__smakebuf_r+0xc>
 8006606:	89a3      	ldrh	r3, [r4, #12]
 8006608:	6020      	str	r0, [r4, #0]
 800660a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800660e:	81a3      	strh	r3, [r4, #12]
 8006610:	9b01      	ldr	r3, [sp, #4]
 8006612:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006616:	b15b      	cbz	r3, 8006630 <__smakebuf_r+0x70>
 8006618:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800661c:	4630      	mov	r0, r6
 800661e:	f000 f81d 	bl	800665c <_isatty_r>
 8006622:	b128      	cbz	r0, 8006630 <__smakebuf_r+0x70>
 8006624:	89a3      	ldrh	r3, [r4, #12]
 8006626:	f023 0303 	bic.w	r3, r3, #3
 800662a:	f043 0301 	orr.w	r3, r3, #1
 800662e:	81a3      	strh	r3, [r4, #12]
 8006630:	89a3      	ldrh	r3, [r4, #12]
 8006632:	431d      	orrs	r5, r3
 8006634:	81a5      	strh	r5, [r4, #12]
 8006636:	e7cf      	b.n	80065d8 <__smakebuf_r+0x18>

08006638 <_fstat_r>:
 8006638:	b538      	push	{r3, r4, r5, lr}
 800663a:	4d07      	ldr	r5, [pc, #28]	@ (8006658 <_fstat_r+0x20>)
 800663c:	2300      	movs	r3, #0
 800663e:	4604      	mov	r4, r0
 8006640:	4608      	mov	r0, r1
 8006642:	4611      	mov	r1, r2
 8006644:	602b      	str	r3, [r5, #0]
 8006646:	f7fa fcbd 	bl	8000fc4 <_fstat>
 800664a:	1c43      	adds	r3, r0, #1
 800664c:	d102      	bne.n	8006654 <_fstat_r+0x1c>
 800664e:	682b      	ldr	r3, [r5, #0]
 8006650:	b103      	cbz	r3, 8006654 <_fstat_r+0x1c>
 8006652:	6023      	str	r3, [r4, #0]
 8006654:	bd38      	pop	{r3, r4, r5, pc}
 8006656:	bf00      	nop
 8006658:	200003b8 	.word	0x200003b8

0800665c <_isatty_r>:
 800665c:	b538      	push	{r3, r4, r5, lr}
 800665e:	4d06      	ldr	r5, [pc, #24]	@ (8006678 <_isatty_r+0x1c>)
 8006660:	2300      	movs	r3, #0
 8006662:	4604      	mov	r4, r0
 8006664:	4608      	mov	r0, r1
 8006666:	602b      	str	r3, [r5, #0]
 8006668:	f7fa fcbc 	bl	8000fe4 <_isatty>
 800666c:	1c43      	adds	r3, r0, #1
 800666e:	d102      	bne.n	8006676 <_isatty_r+0x1a>
 8006670:	682b      	ldr	r3, [r5, #0]
 8006672:	b103      	cbz	r3, 8006676 <_isatty_r+0x1a>
 8006674:	6023      	str	r3, [r4, #0]
 8006676:	bd38      	pop	{r3, r4, r5, pc}
 8006678:	200003b8 	.word	0x200003b8

0800667c <_sbrk_r>:
 800667c:	b538      	push	{r3, r4, r5, lr}
 800667e:	4d06      	ldr	r5, [pc, #24]	@ (8006698 <_sbrk_r+0x1c>)
 8006680:	2300      	movs	r3, #0
 8006682:	4604      	mov	r4, r0
 8006684:	4608      	mov	r0, r1
 8006686:	602b      	str	r3, [r5, #0]
 8006688:	f7fa fcc4 	bl	8001014 <_sbrk>
 800668c:	1c43      	adds	r3, r0, #1
 800668e:	d102      	bne.n	8006696 <_sbrk_r+0x1a>
 8006690:	682b      	ldr	r3, [r5, #0]
 8006692:	b103      	cbz	r3, 8006696 <_sbrk_r+0x1a>
 8006694:	6023      	str	r3, [r4, #0]
 8006696:	bd38      	pop	{r3, r4, r5, pc}
 8006698:	200003b8 	.word	0x200003b8

0800669c <_init>:
 800669c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669e:	bf00      	nop
 80066a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066a2:	bc08      	pop	{r3}
 80066a4:	469e      	mov	lr, r3
 80066a6:	4770      	bx	lr

080066a8 <_fini>:
 80066a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066aa:	bf00      	nop
 80066ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ae:	bc08      	pop	{r3}
 80066b0:	469e      	mov	lr, r3
 80066b2:	4770      	bx	lr
