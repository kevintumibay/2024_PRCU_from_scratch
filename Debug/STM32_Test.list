
STM32_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a10  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  08007bf0  08007bf0  00008bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f1c  08007f1c  00009070  2**0
                  CONTENTS
  4 .ARM          00000008  08007f1c  08007f1c  00008f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f24  08007f24  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f24  08007f24  00008f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f28  08007f28  00008f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007f2c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  20000070  08007f9c  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08007f9c  000093d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156be  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a89  00000000  00000000  0001e75e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001678  00000000  00000000  000211e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001172  00000000  00000000  00022860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021484  00000000  00000000  000239d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e5d  00000000  00000000  00044e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc1c0  00000000  00000000  0005ccb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00138e73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a38  00000000  00000000  00138eb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0013f8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007bd8 	.word	0x08007bd8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08007bd8 	.word	0x08007bd8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b04:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b08:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d013      	beq.n	8000b3c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b14:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b18:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000b1c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d00b      	beq.n	8000b3c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b24:	e000      	b.n	8000b28 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b26:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b28:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d0f9      	beq.n	8000b26 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b32:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000b3c:	687b      	ldr	r3, [r7, #4]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
 {
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b086      	sub	sp, #24
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	60f8      	str	r0, [r7, #12]
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
	 int DataIdx;
	 for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	e009      	b.n	8000b70 <_write+0x26>
	 {
		 ITM_SendChar(*ptr++);
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	60ba      	str	r2, [r7, #8]
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff ffc9 	bl	8000afc <ITM_SendChar>
	 for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	697a      	ldr	r2, [r7, #20]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	dbf1      	blt.n	8000b5c <_write+0x12>
	 }
	 return len;
 8000b78:	687b      	ldr	r3, [r7, #4]
 }
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	0000      	movs	r0, r0
 8000b84:	0000      	movs	r0, r0
	...

08000b88 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	@ 0x28
 8000b8c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b8e:	f000 ffae 	bl	8001aee <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b92:	f000 fab1 	bl	80010f8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b96:	f000 fccb 	bl	8001530 <MX_GPIO_Init>
	MX_SPI2_Init();
 8000b9a:	f000 fc17 	bl	80013cc <MX_SPI2_Init>
	MX_ADC2_Init();
 8000b9e:	f000 fb6f 	bl	8001280 <MX_ADC2_Init>
	MX_ADC1_Init();
 8000ba2:	f000 faf5 	bl	8001190 <MX_ADC1_Init>
	MX_TIM2_Init();
 8000ba6:	f000 fc4f 	bl	8001448 <MX_TIM2_Init>
	MX_I2C2_Init();
 8000baa:	f000 fbcf 	bl	800134c <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bb4:	489e      	ldr	r0, [pc, #632]	@ (8000e30 <main+0x2a8>)
 8000bb6:	f002 fe39 	bl	800382c <HAL_GPIO_WritePin>
	printf("Requesting SPI Identifier from Pressure Sensor... \r\n");
 8000bba:	489e      	ldr	r0, [pc, #632]	@ (8000e34 <main+0x2ac>)
 8000bbc:	f006 f9a8 	bl	8006f10 <puts>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bc6:	489a      	ldr	r0, [pc, #616]	@ (8000e30 <main+0x2a8>)
 8000bc8:	f002 fe30 	bl	800382c <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) &request_identifier,
 8000bcc:	1dba      	adds	r2, r7, #6
 8000bce:	2364      	movs	r3, #100	@ 0x64
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	4998      	ldr	r1, [pc, #608]	@ (8000e38 <main+0x2b0>)
 8000bd6:	4899      	ldr	r0, [pc, #612]	@ (8000e3c <main+0x2b4>)
 8000bd8:	f004 fd73 	bl	80056c2 <HAL_SPI_TransmitReceive>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d002      	beq.n	8000be8 <main+0x60>
			(uint8_t*) &SPI_buffer, 1, 100) != HAL_OK) {
		printf("ERROR: SPI failed the HAL_OK check \r\n");
 8000be2:	4897      	ldr	r0, [pc, #604]	@ (8000e40 <main+0x2b8>)
 8000be4:	f006 f994 	bl	8006f10 <puts>
	}
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bee:	4890      	ldr	r0, [pc, #576]	@ (8000e30 <main+0x2a8>)
 8000bf0:	f002 fe1c 	bl	800382c <HAL_GPIO_WritePin>
	// Check if received data is notifying about any errors
	// Check for communication error
	if (SPI_buffer == com_error_mask) {
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d103      	bne.n	8000c04 <main+0x7c>
		printf("ERROR: Communication Error \r\n");
 8000bfc:	4891      	ldr	r0, [pc, #580]	@ (8000e44 <main+0x2bc>)
 8000bfe:	f006 f987 	bl	8006f10 <puts>
 8000c02:	e04b      	b.n	8000c9c <main+0x114>
	}
	// Check for FEC Error
	else if ((SPI_buffer & FEC_error_mask) != 0) {
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d003      	beq.n	8000c1a <main+0x92>
		printf("ERROR: FEC Error \r\n");
 8000c12:	488d      	ldr	r0, [pc, #564]	@ (8000e48 <main+0x2c0>)
 8000c14:	f006 f97c 	bl	8006f10 <puts>
 8000c18:	e040      	b.n	8000c9c <main+0x114>
	}
	// Check for Acquisition Chain Failure
	else if ((SPI_buffer & no_error_mask) == Diag1_mask) {
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000c20:	4013      	ands	r3, r2
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d103      	bne.n	8000c34 <main+0xac>
		printf("ERROR: Acquisition chain failure \r\n");
 8000c2c:	4887      	ldr	r0, [pc, #540]	@ (8000e4c <main+0x2c4>)
 8000c2e:	f006 f96f 	bl	8006f10 <puts>
 8000c32:	e033      	b.n	8000c9c <main+0x114>
	}
	// Check for Sensor Cell Failure
	else if ((SPI_buffer & Diag2_mask) != 0) {
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d003      	beq.n	8000c4a <main+0xc2>
		printf("ERROR: Sensor cell failure \r\n");
 8000c42:	4883      	ldr	r0, [pc, #524]	@ (8000e50 <main+0x2c8>)
 8000c44:	f006 f964 	bl	8006f10 <puts>
 8000c48:	e028      	b.n	8000c9c <main+0x114>
	}
	// Check if pressure is above measuring range maximum
	else if ((SPI_buffer & no_error_mask) == pressure_over_max_mask) {
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000c50:	4013      	ands	r3, r2
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d103      	bne.n	8000c64 <main+0xdc>
		printf("ERROR: Pressure above measuring range maximum \r\n");
 8000c5c:	487d      	ldr	r0, [pc, #500]	@ (8000e54 <main+0x2cc>)
 8000c5e:	f006 f957 	bl	8006f10 <puts>
 8000c62:	e01b      	b.n	8000c9c <main+0x114>
	}
	// Check if pressure is below measuring range minimum
	else if ((SPI_buffer & pressure_under_min_mask) != 0) {
 8000c64:	88fb      	ldrh	r3, [r7, #6]
 8000c66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d003      	beq.n	8000c7a <main+0xf2>
		printf("ERROR: Pressure below measuring range minimum \r\n");
 8000c72:	4879      	ldr	r0, [pc, #484]	@ (8000e58 <main+0x2d0>)
 8000c74:	f006 f94c 	bl	8006f10 <puts>
 8000c78:	e010      	b.n	8000c9c <main+0x114>
	}
	// Check if no errors were detected
	else if ((SPI_buffer & no_error_mask) == no_error_mask) {
 8000c7a:	88fb      	ldrh	r3, [r7, #6]
 8000c7c:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000c80:	4013      	ands	r3, r2
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d107      	bne.n	8000c9c <main+0x114>
		printf("No errors detected \r\n");
 8000c8c:	4873      	ldr	r0, [pc, #460]	@ (8000e5c <main+0x2d4>)
 8000c8e:	f006 f93f 	bl	8006f10 <puts>
		printf("Identifier: %u \r\n", SPI_buffer);
 8000c92:	88fb      	ldrh	r3, [r7, #6]
 8000c94:	4619      	mov	r1, r3
 8000c96:	4872      	ldr	r0, [pc, #456]	@ (8000e60 <main+0x2d8>)
 8000c98:	f006 f8d2 	bl	8006e40 <iprintf>
	}

	// Calibrate ADCs
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000c9c:	217f      	movs	r1, #127	@ 0x7f
 8000c9e:	4871      	ldr	r0, [pc, #452]	@ (8000e64 <main+0x2dc>)
 8000ca0:	f002 fa58 	bl	8003154 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000ca4:	217f      	movs	r1, #127	@ 0x7f
 8000ca6:	4870      	ldr	r0, [pc, #448]	@ (8000e68 <main+0x2e0>)
 8000ca8:	f002 fa54 	bl	8003154 <HAL_ADCEx_Calibration_Start>

	HAL_Delay(100);
 8000cac:	2064      	movs	r0, #100	@ 0x64
 8000cae:	f000 ff8f 	bl	8001bd0 <HAL_Delay>

	// Define CO2 sensor commands
	CO2_sensor_start_periodic_measurement[0] = 0x21;
 8000cb2:	4b6e      	ldr	r3, [pc, #440]	@ (8000e6c <main+0x2e4>)
 8000cb4:	2221      	movs	r2, #33	@ 0x21
 8000cb6:	701a      	strb	r2, [r3, #0]
	CO2_sensor_start_periodic_measurement[1] = 0xb1;
 8000cb8:	4b6c      	ldr	r3, [pc, #432]	@ (8000e6c <main+0x2e4>)
 8000cba:	22b1      	movs	r2, #177	@ 0xb1
 8000cbc:	705a      	strb	r2, [r3, #1]

	CO2_sensor_data_ready[0] = 0xe4;
 8000cbe:	4b6c      	ldr	r3, [pc, #432]	@ (8000e70 <main+0x2e8>)
 8000cc0:	22e4      	movs	r2, #228	@ 0xe4
 8000cc2:	701a      	strb	r2, [r3, #0]
	CO2_sensor_data_ready[1] = 0xb8;
 8000cc4:	4b6a      	ldr	r3, [pc, #424]	@ (8000e70 <main+0x2e8>)
 8000cc6:	22b8      	movs	r2, #184	@ 0xb8
 8000cc8:	705a      	strb	r2, [r3, #1]

	CO2_sensor_read[0] = 0xec;
 8000cca:	4b6a      	ldr	r3, [pc, #424]	@ (8000e74 <main+0x2ec>)
 8000ccc:	22ec      	movs	r2, #236	@ 0xec
 8000cce:	701a      	strb	r2, [r3, #0]
	CO2_sensor_read[1] = 0x05;
 8000cd0:	4b68      	ldr	r3, [pc, #416]	@ (8000e74 <main+0x2ec>)
 8000cd2:	2205      	movs	r2, #5
 8000cd4:	705a      	strb	r2, [r3, #1]

	// Check if CO2 sensor can talk over I2C
	if (HAL_I2C_IsDeviceReady(&hi2c2, CO2_sensor_ADDR, 5, 1) == HAL_OK) {
 8000cd6:	23c4      	movs	r3, #196	@ 0xc4
 8000cd8:	4619      	mov	r1, r3
 8000cda:	2301      	movs	r3, #1
 8000cdc:	2205      	movs	r2, #5
 8000cde:	4866      	ldr	r0, [pc, #408]	@ (8000e78 <main+0x2f0>)
 8000ce0:	f003 f880 	bl	8003de4 <HAL_I2C_IsDeviceReady>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d103      	bne.n	8000cf2 <main+0x16a>
		printf("CO2 sensor READY \r\n");
 8000cea:	4864      	ldr	r0, [pc, #400]	@ (8000e7c <main+0x2f4>)
 8000cec:	f006 f910 	bl	8006f10 <puts>
 8000cf0:	e002      	b.n	8000cf8 <main+0x170>
	} else {
		printf("CO2 sensor NOT READY \r\n");
 8000cf2:	4863      	ldr	r0, [pc, #396]	@ (8000e80 <main+0x2f8>)
 8000cf4:	f006 f90c 	bl	8006f10 <puts>
	}

	printf("Waiting 6 s to set up I2C... \r\n");
 8000cf8:	4862      	ldr	r0, [pc, #392]	@ (8000e84 <main+0x2fc>)
 8000cfa:	f006 f909 	bl	8006f10 <puts>
	// Command CO2 sensor to begin periodic measurements
	if (HAL_I2C_Master_Transmit(&hi2c2, CO2_sensor_ADDR, CO2_sensor_start_periodic_measurement, 1, 1) == HAL_OK) {
 8000cfe:	23c4      	movs	r3, #196	@ 0xc4
 8000d00:	4619      	mov	r1, r3
 8000d02:	2301      	movs	r3, #1
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	2301      	movs	r3, #1
 8000d08:	4a58      	ldr	r2, [pc, #352]	@ (8000e6c <main+0x2e4>)
 8000d0a:	485b      	ldr	r0, [pc, #364]	@ (8000e78 <main+0x2f0>)
 8000d0c:	f002 fe5c 	bl	80039c8 <HAL_I2C_Master_Transmit>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d103      	bne.n	8000d1e <main+0x196>
		printf("Periodic measurements BEGUN  \r\n");
 8000d16:	485c      	ldr	r0, [pc, #368]	@ (8000e88 <main+0x300>)
 8000d18:	f006 f8fa 	bl	8006f10 <puts>
 8000d1c:	e002      	b.n	8000d24 <main+0x19c>
	} else {
		printf("Periodic measurements NOT BEGUN \r\n");
 8000d1e:	485b      	ldr	r0, [pc, #364]	@ (8000e8c <main+0x304>)
 8000d20:	f006 f8f6 	bl	8006f10 <puts>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		// Toggle the LEDs
		HAL_GPIO_TogglePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin);
 8000d24:	2140      	movs	r1, #64	@ 0x40
 8000d26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d2a:	f002 fd97 	bl	800385c <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000d2e:	2064      	movs	r0, #100	@ 0x64
 8000d30:	f000 ff4e 	bl	8001bd0 <HAL_Delay>
		HAL_GPIO_TogglePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin);
 8000d34:	2140      	movs	r1, #64	@ 0x40
 8000d36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d3a:	f002 fd8f 	bl	800385c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, PRS_Ready_Pin);
 8000d3e:	2140      	movs	r1, #64	@ 0x40
 8000d40:	483b      	ldr	r0, [pc, #236]	@ (8000e30 <main+0x2a8>)
 8000d42:	f002 fd8b 	bl	800385c <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000d46:	2064      	movs	r0, #100	@ 0x64
 8000d48:	f000 ff42 	bl	8001bd0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, PRS_Ready_Pin);
 8000d4c:	2140      	movs	r1, #64	@ 0x40
 8000d4e:	4838      	ldr	r0, [pc, #224]	@ (8000e30 <main+0x2a8>)
 8000d50:	f002 fd84 	bl	800385c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, System_Ready_Pin);
 8000d54:	2180      	movs	r1, #128	@ 0x80
 8000d56:	4836      	ldr	r0, [pc, #216]	@ (8000e30 <main+0x2a8>)
 8000d58:	f002 fd80 	bl	800385c <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000d5c:	2064      	movs	r0, #100	@ 0x64
 8000d5e:	f000 ff37 	bl	8001bd0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, System_Ready_Pin);
 8000d62:	2180      	movs	r1, #128	@ 0x80
 8000d64:	4832      	ldr	r0, [pc, #200]	@ (8000e30 <main+0x2a8>)
 8000d66:	f002 fd79 	bl	800385c <HAL_GPIO_TogglePin>

		// Measure Pod Pressure
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d70:	482f      	ldr	r0, [pc, #188]	@ (8000e30 <main+0x2a8>)
 8000d72:	f002 fd5b 	bl	800382c <HAL_GPIO_WritePin>
		if (HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) &request_pressure,
 8000d76:	1dba      	adds	r2, r7, #6
 8000d78:	2364      	movs	r3, #100	@ 0x64
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	4944      	ldr	r1, [pc, #272]	@ (8000e90 <main+0x308>)
 8000d80:	482e      	ldr	r0, [pc, #184]	@ (8000e3c <main+0x2b4>)
 8000d82:	f004 fc9e 	bl	80056c2 <HAL_SPI_TransmitReceive>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d002      	beq.n	8000d92 <main+0x20a>
				(uint8_t*) &SPI_buffer, 1, 100) != HAL_OK) {
			printf("ERROR: SPI failed the HAL_OK check \r\n");
 8000d8c:	482c      	ldr	r0, [pc, #176]	@ (8000e40 <main+0x2b8>)
 8000d8e:	f006 f8bf 	bl	8006f10 <puts>
		}
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000d92:	2201      	movs	r2, #1
 8000d94:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d98:	4825      	ldr	r0, [pc, #148]	@ (8000e30 <main+0x2a8>)
 8000d9a:	f002 fd47 	bl	800382c <HAL_GPIO_WritePin>
		// Check if received data is notifying about any errors
		// Check for communication error
		if (SPI_buffer == com_error_mask) {
 8000d9e:	88fb      	ldrh	r3, [r7, #6]
 8000da0:	2201      	movs	r2, #1
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d103      	bne.n	8000dae <main+0x226>
			printf("ERROR: Communication Error \r\n");
 8000da6:	4827      	ldr	r0, [pc, #156]	@ (8000e44 <main+0x2bc>)
 8000da8:	f006 f8b2 	bl	8006f10 <puts>
 8000dac:	e0a6      	b.n	8000efc <main+0x374>
		}
		// Check for FEC Error
		else if ((SPI_buffer & FEC_error_mask) != 0) {
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000db4:	4013      	ands	r3, r2
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d003      	beq.n	8000dc4 <main+0x23c>
			printf("ERROR: FEC Error \r\n");
 8000dbc:	4822      	ldr	r0, [pc, #136]	@ (8000e48 <main+0x2c0>)
 8000dbe:	f006 f8a7 	bl	8006f10 <puts>
 8000dc2:	e09b      	b.n	8000efc <main+0x374>
		}
		// Check for Acquisition Chain Failure
		else if ((SPI_buffer & no_error_mask) == Diag1_mask) {
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000dca:	4013      	ands	r3, r2
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d108      	bne.n	8000de8 <main+0x260>
			printf("ERROR: Acquisition chain failure \r\n");
 8000dd6:	481d      	ldr	r0, [pc, #116]	@ (8000e4c <main+0x2c4>)
 8000dd8:	f006 f89a 	bl	8006f10 <puts>
			printf("Received bytes = %u", SPI_buffer);
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	4619      	mov	r1, r3
 8000de0:	482c      	ldr	r0, [pc, #176]	@ (8000e94 <main+0x30c>)
 8000de2:	f006 f82d 	bl	8006e40 <iprintf>
 8000de6:	e089      	b.n	8000efc <main+0x374>
		}
		// Check for Sensor Cell Failure
		else if ((SPI_buffer & Diag2_mask) != 0) {
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dee:	4013      	ands	r3, r2
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d003      	beq.n	8000dfe <main+0x276>
			printf("ERROR: Sensor cell failure \r\n");
 8000df6:	4816      	ldr	r0, [pc, #88]	@ (8000e50 <main+0x2c8>)
 8000df8:	f006 f88a 	bl	8006f10 <puts>
 8000dfc:	e07e      	b.n	8000efc <main+0x374>
		}
		// Check if pressure is above measuring range maximum
		else if ((SPI_buffer & no_error_mask) == pressure_over_max_mask) {
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000e04:	4013      	ands	r3, r2
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d103      	bne.n	8000e18 <main+0x290>
			printf("ERROR: Pressure above measuring range maximum \r\n");
 8000e10:	4810      	ldr	r0, [pc, #64]	@ (8000e54 <main+0x2cc>)
 8000e12:	f006 f87d 	bl	8006f10 <puts>
 8000e16:	e071      	b.n	8000efc <main+0x374>
		}
		// Check if pressure is below measuring range minimum
		else if ((SPI_buffer & pressure_under_min_mask) != 0) {
 8000e18:	88fb      	ldrh	r3, [r7, #6]
 8000e1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e1e:	4013      	ands	r3, r2
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d038      	beq.n	8000e98 <main+0x310>
			printf("ERROR: Pressure below measuring range minimum \r\n");
 8000e26:	480c      	ldr	r0, [pc, #48]	@ (8000e58 <main+0x2d0>)
 8000e28:	f006 f872 	bl	8006f10 <puts>
 8000e2c:	e066      	b.n	8000efc <main+0x374>
 8000e2e:	bf00      	nop
 8000e30:	48000400 	.word	0x48000400
 8000e34:	08007bf0 	.word	0x08007bf0
 8000e38:	08007ed4 	.word	0x08007ed4
 8000e3c:	200001b8 	.word	0x200001b8
 8000e40:	08007c24 	.word	0x08007c24
 8000e44:	08007c4c 	.word	0x08007c4c
 8000e48:	08007c6c 	.word	0x08007c6c
 8000e4c:	08007c80 	.word	0x08007c80
 8000e50:	08007ca4 	.word	0x08007ca4
 8000e54:	08007cc4 	.word	0x08007cc4
 8000e58:	08007cf4 	.word	0x08007cf4
 8000e5c:	08007d24 	.word	0x08007d24
 8000e60:	08007d3c 	.word	0x08007d3c
 8000e64:	2000008c 	.word	0x2000008c
 8000e68:	200000f8 	.word	0x200000f8
 8000e6c:	20000270 	.word	0x20000270
 8000e70:	20000274 	.word	0x20000274
 8000e74:	20000278 	.word	0x20000278
 8000e78:	20000164 	.word	0x20000164
 8000e7c:	08007d50 	.word	0x08007d50
 8000e80:	08007d64 	.word	0x08007d64
 8000e84:	08007d7c 	.word	0x08007d7c
 8000e88:	08007d9c 	.word	0x08007d9c
 8000e8c:	08007dbc 	.word	0x08007dbc
 8000e90:	08007ed2 	.word	0x08007ed2
 8000e94:	08007de0 	.word	0x08007de0
		}
		// Check if no errors were detected
		else if ((SPI_buffer & no_error_mask) == no_error_mask) {
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d128      	bne.n	8000efc <main+0x374>
			printf("No errors detected \r\n");
 8000eaa:	487f      	ldr	r0, [pc, #508]	@ (80010a8 <main+0x520>)
 8000eac:	f006 f830 	bl	8006f10 <puts>
			// Get the pressure data using a bit mask and right shift operator to get rid of parity bit
			pressure_LSB = (SPI_buffer & data_mask) >> 1;
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	085b      	lsrs	r3, r3, #1
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	4b7b      	ldr	r3, [pc, #492]	@ (80010ac <main+0x524>)
 8000ec0:	801a      	strh	r2, [r3, #0]
			// Convert pressure from LSB to kPa using transfer function from data sheet
			pressure_Bar = ((float) pressure_LSB - offs_p) / S_p;
 8000ec2:	4b7a      	ldr	r3, [pc, #488]	@ (80010ac <main+0x524>)
 8000ec4:	881b      	ldrh	r3, [r3, #0]
 8000ec6:	ee07 3a90 	vmov	s15, r3
 8000eca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ece:	4b78      	ldr	r3, [pc, #480]	@ (80010b0 <main+0x528>)
 8000ed0:	edd3 7a00 	vldr	s15, [r3]
 8000ed4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000ed8:	4b76      	ldr	r3, [pc, #472]	@ (80010b4 <main+0x52c>)
 8000eda:	ed93 7a00 	vldr	s14, [r3]
 8000ede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ee2:	4b75      	ldr	r3, [pc, #468]	@ (80010b8 <main+0x530>)
 8000ee4:	edc3 7a00 	vstr	s15, [r3]
			// Convert pressure from Bar to kPa
			// pressure_Bar = pressure_Bar/100;
			// Print pressure value
			printf("Measured pressure: %i kPa \r\n", (int) pressure_Bar);
 8000ee8:	4b73      	ldr	r3, [pc, #460]	@ (80010b8 <main+0x530>)
 8000eea:	edd3 7a00 	vldr	s15, [r3]
 8000eee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ef2:	ee17 1a90 	vmov	r1, s15
 8000ef6:	4871      	ldr	r0, [pc, #452]	@ (80010bc <main+0x534>)
 8000ef8:	f005 ffa2 	bl	8006e40 <iprintf>
		}

		// Start ADC1 Conversion
		HAL_ADC_Start(&hadc1);
 8000efc:	4870      	ldr	r0, [pc, #448]	@ (80010c0 <main+0x538>)
 8000efe:	f001 fa5f 	bl	80023c0 <HAL_ADC_Start>
		// Poll ADC1 Peripheral & TimeOut = 1mSec
		HAL_ADC_PollForConversion(&hadc1, 1);
 8000f02:	2101      	movs	r1, #1
 8000f04:	486e      	ldr	r0, [pc, #440]	@ (80010c0 <main+0x538>)
 8000f06:	f001 fb17 	bl	8002538 <HAL_ADC_PollForConversion>
		// Read The ADC Conversion Result & Print it
		low_pressure_raw = HAL_ADC_GetValue(&hadc1);
 8000f0a:	486d      	ldr	r0, [pc, #436]	@ (80010c0 <main+0x538>)
 8000f0c:	f001 fbec 	bl	80026e8 <HAL_ADC_GetValue>
 8000f10:	4603      	mov	r3, r0
 8000f12:	82fb      	strh	r3, [r7, #22]
		low_pressure_voltage = (int) low_pressure_raw * 3300 / (4095); // mV
 8000f14:	8afb      	ldrh	r3, [r7, #22]
 8000f16:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000f1a:	fb02 f303 	mul.w	r3, r2, r3
 8000f1e:	4a69      	ldr	r2, [pc, #420]	@ (80010c4 <main+0x53c>)
 8000f20:	fb82 1203 	smull	r1, r2, r2, r3
 8000f24:	441a      	add	r2, r3
 8000f26:	12d2      	asrs	r2, r2, #11
 8000f28:	17db      	asrs	r3, r3, #31
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	613b      	str	r3, [r7, #16]
		if (low_pressure_voltage <= 120 * 0.004 * 1000) {
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000f34:	dc03      	bgt.n	8000f3e <main+0x3b6>
			low_pressure = 0; // mBar
 8000f36:	f04f 0300 	mov.w	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
 8000f3c:	e027      	b.n	8000f8e <main+0x406>
		} else {
			low_pressure = ((float) low_pressure_voltage - 120 * 0.004 * 1000)
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	ee07 3a90 	vmov	s15, r3
 8000f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f48:	ee17 0a90 	vmov	r0, s15
 8000f4c:	f7ff fb1c 	bl	8000588 <__aeabi_f2d>
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	4b5c      	ldr	r3, [pc, #368]	@ (80010c8 <main+0x540>)
 8000f56:	f7ff f9b7 	bl	80002c8 <__aeabi_dsub>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4610      	mov	r0, r2
 8000f60:	4619      	mov	r1, r3
					* 10000 / (120 * (0.02 - 0.004) * 1000); // mBar
 8000f62:	a34f      	add	r3, pc, #316	@ (adr r3, 80010a0 <main+0x518>)
 8000f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f68:	f7ff fb66 	bl	8000638 <__aeabi_dmul>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4610      	mov	r0, r2
 8000f72:	4619      	mov	r1, r3
 8000f74:	f04f 0200 	mov.w	r2, #0
 8000f78:	4b54      	ldr	r3, [pc, #336]	@ (80010cc <main+0x544>)
 8000f7a:	f7ff fc87 	bl	800088c <__aeabi_ddiv>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
			low_pressure = ((float) low_pressure_voltage - 120 * 0.004 * 1000)
 8000f82:	4610      	mov	r0, r2
 8000f84:	4619      	mov	r1, r3
 8000f86:	f7ff fd69 	bl	8000a5c <__aeabi_d2f>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	61fb      	str	r3, [r7, #28]
		}
		printf("Low Pressure = %i mBar\r\n", (int) low_pressure);
 8000f8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f96:	ee17 1a90 	vmov	r1, s15
 8000f9a:	484d      	ldr	r0, [pc, #308]	@ (80010d0 <main+0x548>)
 8000f9c:	f005 ff50 	bl	8006e40 <iprintf>

		// Start ADC2 Conversion
		HAL_ADC_Start(&hadc2);
 8000fa0:	484c      	ldr	r0, [pc, #304]	@ (80010d4 <main+0x54c>)
 8000fa2:	f001 fa0d 	bl	80023c0 <HAL_ADC_Start>
		// Poll ADC2 Peripheral & TimeOut = 1mSec
		HAL_ADC_PollForConversion(&hadc2, 1);
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	484a      	ldr	r0, [pc, #296]	@ (80010d4 <main+0x54c>)
 8000faa:	f001 fac5 	bl	8002538 <HAL_ADC_PollForConversion>
		// Read The ADC Conversion Result & Print it
		high_pressure_raw = HAL_ADC_GetValue(&hadc2);
 8000fae:	4849      	ldr	r0, [pc, #292]	@ (80010d4 <main+0x54c>)
 8000fb0:	f001 fb9a 	bl	80026e8 <HAL_ADC_GetValue>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	81fb      	strh	r3, [r7, #14]
		high_pressure_voltage = (int) high_pressure_raw * 3300 / 4095; // mV
 8000fb8:	89fb      	ldrh	r3, [r7, #14]
 8000fba:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000fbe:	fb02 f303 	mul.w	r3, r2, r3
 8000fc2:	4a40      	ldr	r2, [pc, #256]	@ (80010c4 <main+0x53c>)
 8000fc4:	fb82 1203 	smull	r1, r2, r2, r3
 8000fc8:	441a      	add	r2, r3
 8000fca:	12d2      	asrs	r2, r2, #11
 8000fcc:	17db      	asrs	r3, r3, #31
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	60bb      	str	r3, [r7, #8]
		if (high_pressure_voltage <= 120 * 0.004 * 1000) {
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000fd8:	dc03      	bgt.n	8000fe2 <main+0x45a>
			high_pressure = 0; // mBar
 8000fda:	f04f 0300 	mov.w	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
 8000fe0:	e027      	b.n	8001032 <main+0x4aa>
		} else {
			high_pressure = ((float) high_pressure_voltage - 120 * 0.004 * 1000)
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	ee07 3a90 	vmov	s15, r3
 8000fe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fec:	ee17 0a90 	vmov	r0, s15
 8000ff0:	f7ff faca 	bl	8000588 <__aeabi_f2d>
 8000ff4:	f04f 0200 	mov.w	r2, #0
 8000ff8:	4b33      	ldr	r3, [pc, #204]	@ (80010c8 <main+0x540>)
 8000ffa:	f7ff f965 	bl	80002c8 <__aeabi_dsub>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	4610      	mov	r0, r2
 8001004:	4619      	mov	r1, r3
					* 250 / (120 * (0.02 - 0.004) * 1000); // Bar
 8001006:	f04f 0200 	mov.w	r2, #0
 800100a:	4b33      	ldr	r3, [pc, #204]	@ (80010d8 <main+0x550>)
 800100c:	f7ff fb14 	bl	8000638 <__aeabi_dmul>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	4610      	mov	r0, r2
 8001016:	4619      	mov	r1, r3
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	4b2b      	ldr	r3, [pc, #172]	@ (80010cc <main+0x544>)
 800101e:	f7ff fc35 	bl	800088c <__aeabi_ddiv>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
			high_pressure = ((float) high_pressure_voltage - 120 * 0.004 * 1000)
 8001026:	4610      	mov	r0, r2
 8001028:	4619      	mov	r1, r3
 800102a:	f7ff fd17 	bl	8000a5c <__aeabi_d2f>
 800102e:	4603      	mov	r3, r0
 8001030:	61bb      	str	r3, [r7, #24]
		}
		printf("High Pressure = %i Bar\r\n", (int) high_pressure);
 8001032:	edd7 7a06 	vldr	s15, [r7, #24]
 8001036:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800103a:	ee17 1a90 	vmov	r1, s15
 800103e:	4827      	ldr	r0, [pc, #156]	@ (80010dc <main+0x554>)
 8001040:	f005 fefe 	bl	8006e40 <iprintf>

		// Check if CO2 sensor has a measurement ready
		uint8_t CO2_sensor_data_ready_buffer[3];
		if (HAL_I2C_Master_Transmit(&hi2c2, CO2_sensor_ADDR, CO2_sensor_data_ready, 1, 1) == HAL_OK) {
 8001044:	23c4      	movs	r3, #196	@ 0xc4
 8001046:	4619      	mov	r1, r3
 8001048:	2301      	movs	r3, #1
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2301      	movs	r3, #1
 800104e:	4a24      	ldr	r2, [pc, #144]	@ (80010e0 <main+0x558>)
 8001050:	4824      	ldr	r0, [pc, #144]	@ (80010e4 <main+0x55c>)
 8001052:	f002 fcb9 	bl	80039c8 <HAL_I2C_Master_Transmit>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d11d      	bne.n	8001098 <main+0x510>
			if (HAL_I2C_Master_Receive(&hi2c2, CO2_sensor_ADDR | 0x01, CO2_sensor_data_ready_buffer, 3, 1) == HAL_OK) {
 800105c:	23c4      	movs	r3, #196	@ 0xc4
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	b2db      	uxtb	r3, r3
 8001064:	4619      	mov	r1, r3
 8001066:	463a      	mov	r2, r7
 8001068:	2301      	movs	r3, #1
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2303      	movs	r3, #3
 800106e:	481d      	ldr	r0, [pc, #116]	@ (80010e4 <main+0x55c>)
 8001070:	f002 fdc2 	bl	8003bf8 <HAL_I2C_Master_Receive>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10a      	bne.n	8001090 <main+0x508>
				printf("CO2 sensor has measurement ready \r\n");
 800107a:	481b      	ldr	r0, [pc, #108]	@ (80010e8 <main+0x560>)
 800107c:	f005 ff48 	bl	8006f10 <puts>
				printf("Response to data ready = %i - %i \r\n", (int)CO2_sensor_data_ready_buffer[0], (int)CO2_sensor_data_ready_buffer[1]);
 8001080:	783b      	ldrb	r3, [r7, #0]
 8001082:	4619      	mov	r1, r3
 8001084:	787b      	ldrb	r3, [r7, #1]
 8001086:	461a      	mov	r2, r3
 8001088:	4818      	ldr	r0, [pc, #96]	@ (80010ec <main+0x564>)
 800108a:	f005 fed9 	bl	8006e40 <iprintf>
 800108e:	e649      	b.n	8000d24 <main+0x19c>
					printf("Failed to transmit read command \r\n");
				}
				*/
			}
			else{
				printf("no receive \r\n");
 8001090:	4817      	ldr	r0, [pc, #92]	@ (80010f0 <main+0x568>)
 8001092:	f005 ff3d 	bl	8006f10 <puts>
 8001096:	e645      	b.n	8000d24 <main+0x19c>
			}
		}
		else {
			printf("CO2 sensor DOES NOT HAVE A MEASUREMENT READY\r\n");
 8001098:	4816      	ldr	r0, [pc, #88]	@ (80010f4 <main+0x56c>)
 800109a:	f005 ff39 	bl	8006f10 <puts>
	while (1) {
 800109e:	e641      	b.n	8000d24 <main+0x19c>
 80010a0:	00000000 	.word	0x00000000
 80010a4:	40c38800 	.word	0x40c38800
 80010a8:	08007d24 	.word	0x08007d24
 80010ac:	20000268 	.word	0x20000268
 80010b0:	20000000 	.word	0x20000000
 80010b4:	20000004 	.word	0x20000004
 80010b8:	2000026c 	.word	0x2000026c
 80010bc:	08007df4 	.word	0x08007df4
 80010c0:	2000008c 	.word	0x2000008c
 80010c4:	80080081 	.word	0x80080081
 80010c8:	407e0000 	.word	0x407e0000
 80010cc:	409e0000 	.word	0x409e0000
 80010d0:	08007e14 	.word	0x08007e14
 80010d4:	200000f8 	.word	0x200000f8
 80010d8:	406f4000 	.word	0x406f4000
 80010dc:	08007e30 	.word	0x08007e30
 80010e0:	20000274 	.word	0x20000274
 80010e4:	20000164 	.word	0x20000164
 80010e8:	08007e4c 	.word	0x08007e4c
 80010ec:	08007e70 	.word	0x08007e70
 80010f0:	08007e94 	.word	0x08007e94
 80010f4:	08007ea4 	.word	0x08007ea4

080010f8 <SystemClock_Config>:

	/**
	 * @brief System Clock Configuration
	 * @retval None
	 */
	void SystemClock_Config(void) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b094      	sub	sp, #80	@ 0x50
 80010fc:	af00      	add	r7, sp, #0
		RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010fe:	f107 0318 	add.w	r3, r7, #24
 8001102:	2238      	movs	r2, #56	@ 0x38
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f005 ffe2 	bl	80070d0 <memset>
		RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]

		/** Configure the main internal regulator output voltage
		 */
		HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800111a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800111e:	f003 fa8b 	bl	8004638 <HAL_PWREx_ControlVoltageScaling>

		/** Initializes the RCC Oscillators according to the specified parameters
		 * in the RCC_OscInitTypeDef structure.
		 */
		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001122:	2302      	movs	r3, #2
 8001124:	61bb      	str	r3, [r7, #24]
		RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001126:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800112a:	627b      	str	r3, [r7, #36]	@ 0x24
		RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800112c:	2340      	movs	r3, #64	@ 0x40
 800112e:	62bb      	str	r3, [r7, #40]	@ 0x28
		RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001130:	2302      	movs	r3, #2
 8001132:	637b      	str	r3, [r7, #52]	@ 0x34
		RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001134:	2302      	movs	r3, #2
 8001136:	63bb      	str	r3, [r7, #56]	@ 0x38
		RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001138:	2304      	movs	r3, #4
 800113a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		RCC_OscInitStruct.PLL.PLLN = 75;
 800113c:	234b      	movs	r3, #75	@ 0x4b
 800113e:	643b      	str	r3, [r7, #64]	@ 0x40
		RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001140:	2302      	movs	r3, #2
 8001142:	647b      	str	r3, [r7, #68]	@ 0x44
		RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001144:	2302      	movs	r3, #2
 8001146:	64bb      	str	r3, [r7, #72]	@ 0x48
		RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001148:	2302      	movs	r3, #2
 800114a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800114c:	f107 0318 	add.w	r3, r7, #24
 8001150:	4618      	mov	r0, r3
 8001152:	f003 fb25 	bl	80047a0 <HAL_RCC_OscConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0x68>
			Error_Handler();
 800115c:	f000 fa4c 	bl	80015f8 <Error_Handler>
		}

		/** Initializes the CPU, AHB and APB buses clocks
		 */
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001160:	230f      	movs	r3, #15
 8001162:	607b      	str	r3, [r7, #4]
				| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001164:	2303      	movs	r3, #3
 8001166:	60bb      	str	r3, [r7, #8]
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4)
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	2104      	movs	r1, #4
 8001178:	4618      	mov	r0, r3
 800117a:	f003 fe23 	bl	8004dc4 <HAL_RCC_ClockConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0x90>
				!= HAL_OK) {
			Error_Handler();
 8001184:	f000 fa38 	bl	80015f8 <Error_Handler>
		}
	}
 8001188:	bf00      	nop
 800118a:	3750      	adds	r7, #80	@ 0x50
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <MX_ADC1_Init>:
	/**
	 * @brief ADC1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_ADC1_Init(void) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b08c      	sub	sp, #48	@ 0x30
 8001194:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN ADC1_Init 0 */

		/* USER CODE END ADC1_Init 0 */

		ADC_MultiModeTypeDef multimode = { 0 };
 8001196:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
		ADC_ChannelConfTypeDef sConfig = { 0 };
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	2220      	movs	r2, #32
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f005 ff91 	bl	80070d0 <memset>

		/* USER CODE END ADC1_Init 1 */

		/** Common config
		 */
		hadc1.Instance = ADC1;
 80011ae:	4b32      	ldr	r3, [pc, #200]	@ (8001278 <MX_ADC1_Init+0xe8>)
 80011b0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80011b4:	601a      	str	r2, [r3, #0]
		hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011b6:	4b30      	ldr	r3, [pc, #192]	@ (8001278 <MX_ADC1_Init+0xe8>)
 80011b8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80011bc:	605a      	str	r2, [r3, #4]
		hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011be:	4b2e      	ldr	r3, [pc, #184]	@ (8001278 <MX_ADC1_Init+0xe8>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
		hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001278 <MX_ADC1_Init+0xe8>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
		hadc1.Init.GainCompensation = 0;
 80011ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001278 <MX_ADC1_Init+0xe8>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
		hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011d0:	4b29      	ldr	r3, [pc, #164]	@ (8001278 <MX_ADC1_Init+0xe8>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
		hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011d6:	4b28      	ldr	r3, [pc, #160]	@ (8001278 <MX_ADC1_Init+0xe8>)
 80011d8:	2204      	movs	r2, #4
 80011da:	619a      	str	r2, [r3, #24]
		hadc1.Init.LowPowerAutoWait = DISABLE;
 80011dc:	4b26      	ldr	r3, [pc, #152]	@ (8001278 <MX_ADC1_Init+0xe8>)
 80011de:	2200      	movs	r2, #0
 80011e0:	771a      	strb	r2, [r3, #28]
		hadc1.Init.ContinuousConvMode = DISABLE;
 80011e2:	4b25      	ldr	r3, [pc, #148]	@ (8001278 <MX_ADC1_Init+0xe8>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	775a      	strb	r2, [r3, #29]
		hadc1.Init.NbrOfConversion = 1;
 80011e8:	4b23      	ldr	r3, [pc, #140]	@ (8001278 <MX_ADC1_Init+0xe8>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	621a      	str	r2, [r3, #32]
		hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ee:	4b22      	ldr	r3, [pc, #136]	@ (8001278 <MX_ADC1_Init+0xe8>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f6:	4b20      	ldr	r3, [pc, #128]	@ (8001278 <MX_ADC1_Init+0xe8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	62da      	str	r2, [r3, #44]	@ 0x2c
		hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001278 <MX_ADC1_Init+0xe8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	631a      	str	r2, [r3, #48]	@ 0x30
		hadc1.Init.DMAContinuousRequests = DISABLE;
 8001202:	4b1d      	ldr	r3, [pc, #116]	@ (8001278 <MX_ADC1_Init+0xe8>)
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800120a:	4b1b      	ldr	r3, [pc, #108]	@ (8001278 <MX_ADC1_Init+0xe8>)
 800120c:	2200      	movs	r2, #0
 800120e:	63da      	str	r2, [r3, #60]	@ 0x3c
		hadc1.Init.OversamplingMode = DISABLE;
 8001210:	4b19      	ldr	r3, [pc, #100]	@ (8001278 <MX_ADC1_Init+0xe8>)
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001218:	4817      	ldr	r0, [pc, #92]	@ (8001278 <MX_ADC1_Init+0xe8>)
 800121a:	f000 ff4d 	bl	80020b8 <HAL_ADC_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_ADC1_Init+0x98>
			Error_Handler();
 8001224:	f000 f9e8 	bl	80015f8 <Error_Handler>
		}

		/** Configure the ADC multi-mode
		 */
		multimode.Mode = ADC_MODE_INDEPENDENT;
 8001228:	2300      	movs	r3, #0
 800122a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 800122c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001230:	4619      	mov	r1, r3
 8001232:	4811      	ldr	r0, [pc, #68]	@ (8001278 <MX_ADC1_Init+0xe8>)
 8001234:	f001 fff0 	bl	8003218 <HAL_ADCEx_MultiModeConfigChannel>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_ADC1_Init+0xb2>
			Error_Handler();
 800123e:	f000 f9db 	bl	80015f8 <Error_Handler>
		}

		/** Configure Regular Channel
		 */
		sConfig.Channel = ADC_CHANNEL_12;
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <MX_ADC1_Init+0xec>)
 8001244:	607b      	str	r3, [r7, #4]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 8001246:	2306      	movs	r3, #6
 8001248:	60bb      	str	r3, [r7, #8]
		sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800124a:	2304      	movs	r3, #4
 800124c:	60fb      	str	r3, [r7, #12]
		sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800124e:	237f      	movs	r3, #127	@ 0x7f
 8001250:	613b      	str	r3, [r7, #16]
		sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001252:	2304      	movs	r3, #4
 8001254:	617b      	str	r3, [r7, #20]
		sConfig.Offset = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	61bb      	str	r3, [r7, #24]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	4619      	mov	r1, r3
 800125e:	4806      	ldr	r0, [pc, #24]	@ (8001278 <MX_ADC1_Init+0xe8>)
 8001260:	f001 fa50 	bl	8002704 <HAL_ADC_ConfigChannel>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_ADC1_Init+0xde>
			Error_Handler();
 800126a:	f000 f9c5 	bl	80015f8 <Error_Handler>
		}
		/* USER CODE BEGIN ADC1_Init 2 */

		/* USER CODE END ADC1_Init 2 */

	}
 800126e:	bf00      	nop
 8001270:	3730      	adds	r7, #48	@ 0x30
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2000008c 	.word	0x2000008c
 800127c:	32601000 	.word	0x32601000

08001280 <MX_ADC2_Init>:
	/**
	 * @brief ADC2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_ADC2_Init(void) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN ADC2_Init 0 */

		/* USER CODE END ADC2_Init 0 */

		ADC_ChannelConfTypeDef sConfig = { 0 };
 8001286:	463b      	mov	r3, r7
 8001288:	2220      	movs	r2, #32
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f005 ff1f 	bl	80070d0 <memset>

		/* USER CODE END ADC2_Init 1 */

		/** Common config
		 */
		hadc2.Instance = ADC2;
 8001292:	4b2b      	ldr	r3, [pc, #172]	@ (8001340 <MX_ADC2_Init+0xc0>)
 8001294:	4a2b      	ldr	r2, [pc, #172]	@ (8001344 <MX_ADC2_Init+0xc4>)
 8001296:	601a      	str	r2, [r3, #0]
		hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001298:	4b29      	ldr	r3, [pc, #164]	@ (8001340 <MX_ADC2_Init+0xc0>)
 800129a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800129e:	605a      	str	r2, [r3, #4]
		hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80012a0:	4b27      	ldr	r3, [pc, #156]	@ (8001340 <MX_ADC2_Init+0xc0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
		hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012a6:	4b26      	ldr	r3, [pc, #152]	@ (8001340 <MX_ADC2_Init+0xc0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	60da      	str	r2, [r3, #12]
		hadc2.Init.GainCompensation = 0;
 80012ac:	4b24      	ldr	r3, [pc, #144]	@ (8001340 <MX_ADC2_Init+0xc0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	611a      	str	r2, [r3, #16]
		hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012b2:	4b23      	ldr	r3, [pc, #140]	@ (8001340 <MX_ADC2_Init+0xc0>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	615a      	str	r2, [r3, #20]
		hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012b8:	4b21      	ldr	r3, [pc, #132]	@ (8001340 <MX_ADC2_Init+0xc0>)
 80012ba:	2204      	movs	r2, #4
 80012bc:	619a      	str	r2, [r3, #24]
		hadc2.Init.LowPowerAutoWait = DISABLE;
 80012be:	4b20      	ldr	r3, [pc, #128]	@ (8001340 <MX_ADC2_Init+0xc0>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	771a      	strb	r2, [r3, #28]
		hadc2.Init.ContinuousConvMode = DISABLE;
 80012c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001340 <MX_ADC2_Init+0xc0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	775a      	strb	r2, [r3, #29]
		hadc2.Init.NbrOfConversion = 1;
 80012ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001340 <MX_ADC2_Init+0xc0>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	621a      	str	r2, [r3, #32]
		hadc2.Init.DiscontinuousConvMode = DISABLE;
 80012d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001340 <MX_ADC2_Init+0xc0>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012d8:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <MX_ADC2_Init+0xc0>)
 80012da:	2200      	movs	r2, #0
 80012dc:	62da      	str	r2, [r3, #44]	@ 0x2c
		hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012de:	4b18      	ldr	r3, [pc, #96]	@ (8001340 <MX_ADC2_Init+0xc0>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	631a      	str	r2, [r3, #48]	@ 0x30
		hadc2.Init.DMAContinuousRequests = DISABLE;
 80012e4:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <MX_ADC2_Init+0xc0>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012ec:	4b14      	ldr	r3, [pc, #80]	@ (8001340 <MX_ADC2_Init+0xc0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	63da      	str	r2, [r3, #60]	@ 0x3c
		hadc2.Init.OversamplingMode = DISABLE;
 80012f2:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <MX_ADC2_Init+0xc0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 80012fa:	4811      	ldr	r0, [pc, #68]	@ (8001340 <MX_ADC2_Init+0xc0>)
 80012fc:	f000 fedc 	bl	80020b8 <HAL_ADC_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_ADC2_Init+0x8a>
			Error_Handler();
 8001306:	f000 f977 	bl	80015f8 <Error_Handler>
		}

		/** Configure Regular Channel
		 */
		sConfig.Channel = ADC_CHANNEL_13;
 800130a:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <MX_ADC2_Init+0xc8>)
 800130c:	603b      	str	r3, [r7, #0]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 800130e:	2306      	movs	r3, #6
 8001310:	607b      	str	r3, [r7, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001312:	2304      	movs	r3, #4
 8001314:	60bb      	str	r3, [r7, #8]
		sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001316:	237f      	movs	r3, #127	@ 0x7f
 8001318:	60fb      	str	r3, [r7, #12]
		sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800131a:	2304      	movs	r3, #4
 800131c:	613b      	str	r3, [r7, #16]
		sConfig.Offset = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
		if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001322:	463b      	mov	r3, r7
 8001324:	4619      	mov	r1, r3
 8001326:	4806      	ldr	r0, [pc, #24]	@ (8001340 <MX_ADC2_Init+0xc0>)
 8001328:	f001 f9ec 	bl	8002704 <HAL_ADC_ConfigChannel>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_ADC2_Init+0xb6>
			Error_Handler();
 8001332:	f000 f961 	bl	80015f8 <Error_Handler>
		}
		/* USER CODE BEGIN ADC2_Init 2 */

		/* USER CODE END ADC2_Init 2 */

	}
 8001336:	bf00      	nop
 8001338:	3720      	adds	r7, #32
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200000f8 	.word	0x200000f8
 8001344:	50000100 	.word	0x50000100
 8001348:	36902000 	.word	0x36902000

0800134c <MX_I2C2_Init>:
	/**
	 * @brief I2C2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_I2C2_Init(void) {
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
		/* USER CODE END I2C2_Init 0 */

		/* USER CODE BEGIN I2C2_Init 1 */

		/* USER CODE END I2C2_Init 1 */
		hi2c2.Instance = I2C2;
 8001350:	4b1b      	ldr	r3, [pc, #108]	@ (80013c0 <MX_I2C2_Init+0x74>)
 8001352:	4a1c      	ldr	r2, [pc, #112]	@ (80013c4 <MX_I2C2_Init+0x78>)
 8001354:	601a      	str	r2, [r3, #0]
		hi2c2.Init.Timing = 0x20C0EDFF;
 8001356:	4b1a      	ldr	r3, [pc, #104]	@ (80013c0 <MX_I2C2_Init+0x74>)
 8001358:	4a1b      	ldr	r2, [pc, #108]	@ (80013c8 <MX_I2C2_Init+0x7c>)
 800135a:	605a      	str	r2, [r3, #4]
		hi2c2.Init.OwnAddress1 = 0;
 800135c:	4b18      	ldr	r3, [pc, #96]	@ (80013c0 <MX_I2C2_Init+0x74>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
		hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001362:	4b17      	ldr	r3, [pc, #92]	@ (80013c0 <MX_I2C2_Init+0x74>)
 8001364:	2201      	movs	r2, #1
 8001366:	60da      	str	r2, [r3, #12]
		hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001368:	4b15      	ldr	r3, [pc, #84]	@ (80013c0 <MX_I2C2_Init+0x74>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
		hi2c2.Init.OwnAddress2 = 0;
 800136e:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <MX_I2C2_Init+0x74>)
 8001370:	2200      	movs	r2, #0
 8001372:	615a      	str	r2, [r3, #20]
		hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001374:	4b12      	ldr	r3, [pc, #72]	@ (80013c0 <MX_I2C2_Init+0x74>)
 8001376:	2200      	movs	r2, #0
 8001378:	619a      	str	r2, [r3, #24]
		hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800137a:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <MX_I2C2_Init+0x74>)
 800137c:	2200      	movs	r2, #0
 800137e:	61da      	str	r2, [r3, #28]
		hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001380:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <MX_I2C2_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	621a      	str	r2, [r3, #32]
		if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001386:	480e      	ldr	r0, [pc, #56]	@ (80013c0 <MX_I2C2_Init+0x74>)
 8001388:	f002 fa82 	bl	8003890 <HAL_I2C_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_I2C2_Init+0x4a>
			Error_Handler();
 8001392:	f000 f931 	bl	80015f8 <Error_Handler>
		}

		/** Configure Analogue filter
		 */
		if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 8001396:	2100      	movs	r1, #0
 8001398:	4809      	ldr	r0, [pc, #36]	@ (80013c0 <MX_I2C2_Init+0x74>)
 800139a:	f003 f8b5 	bl	8004508 <HAL_I2CEx_ConfigAnalogFilter>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_I2C2_Init+0x5c>
				!= HAL_OK) {
			Error_Handler();
 80013a4:	f000 f928 	bl	80015f8 <Error_Handler>
		}

		/** Configure Digital filter
		 */
		if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 80013a8:	2100      	movs	r1, #0
 80013aa:	4805      	ldr	r0, [pc, #20]	@ (80013c0 <MX_I2C2_Init+0x74>)
 80013ac:	f003 f8f7 	bl	800459e <HAL_I2CEx_ConfigDigitalFilter>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_I2C2_Init+0x6e>
			Error_Handler();
 80013b6:	f000 f91f 	bl	80015f8 <Error_Handler>
		}
		/* USER CODE BEGIN I2C2_Init 2 */

		/* USER CODE END I2C2_Init 2 */

	}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000164 	.word	0x20000164
 80013c4:	40005800 	.word	0x40005800
 80013c8:	20c0edff 	.word	0x20c0edff

080013cc <MX_SPI2_Init>:
	/**
	 * @brief SPI2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_SPI2_Init(void) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN SPI2_Init 1 */

		/* USER CODE END SPI2_Init 1 */
		/* SPI2 parameter configuration*/
		hspi2.Instance = SPI2;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <MX_SPI2_Init+0x74>)
 80013d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001444 <MX_SPI2_Init+0x78>)
 80013d4:	601a      	str	r2, [r3, #0]
		hspi2.Init.Mode = SPI_MODE_MASTER;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <MX_SPI2_Init+0x74>)
 80013d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013dc:	605a      	str	r2, [r3, #4]
		hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013de:	4b18      	ldr	r3, [pc, #96]	@ (8001440 <MX_SPI2_Init+0x74>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
		hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80013e4:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <MX_SPI2_Init+0x74>)
 80013e6:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80013ea:	60da      	str	r2, [r3, #12]
		hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ec:	4b14      	ldr	r3, [pc, #80]	@ (8001440 <MX_SPI2_Init+0x74>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
		hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80013f2:	4b13      	ldr	r3, [pc, #76]	@ (8001440 <MX_SPI2_Init+0x74>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	615a      	str	r2, [r3, #20]
		hspi2.Init.NSS = SPI_NSS_SOFT;
 80013f8:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <MX_SPI2_Init+0x74>)
 80013fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013fe:	619a      	str	r2, [r3, #24]
		hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001400:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <MX_SPI2_Init+0x74>)
 8001402:	2220      	movs	r2, #32
 8001404:	61da      	str	r2, [r3, #28]
		hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001406:	4b0e      	ldr	r3, [pc, #56]	@ (8001440 <MX_SPI2_Init+0x74>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]
		hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800140c:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <MX_SPI2_Init+0x74>)
 800140e:	2200      	movs	r2, #0
 8001410:	625a      	str	r2, [r3, #36]	@ 0x24
		hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001412:	4b0b      	ldr	r3, [pc, #44]	@ (8001440 <MX_SPI2_Init+0x74>)
 8001414:	2200      	movs	r2, #0
 8001416:	629a      	str	r2, [r3, #40]	@ 0x28
		hspi2.Init.CRCPolynomial = 7;
 8001418:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <MX_SPI2_Init+0x74>)
 800141a:	2207      	movs	r2, #7
 800141c:	62da      	str	r2, [r3, #44]	@ 0x2c
		hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800141e:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <MX_SPI2_Init+0x74>)
 8001420:	2200      	movs	r2, #0
 8001422:	631a      	str	r2, [r3, #48]	@ 0x30
		hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001424:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <MX_SPI2_Init+0x74>)
 8001426:	2200      	movs	r2, #0
 8001428:	635a      	str	r2, [r3, #52]	@ 0x34
		if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800142a:	4805      	ldr	r0, [pc, #20]	@ (8001440 <MX_SPI2_Init+0x74>)
 800142c:	f004 f89e 	bl	800556c <HAL_SPI_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_SPI2_Init+0x6e>
			Error_Handler();
 8001436:	f000 f8df 	bl	80015f8 <Error_Handler>
		}
		/* USER CODE BEGIN SPI2_Init 2 */

		/* USER CODE END SPI2_Init 2 */

	}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200001b8 	.word	0x200001b8
 8001444:	40003800 	.word	0x40003800

08001448 <MX_TIM2_Init>:
	/**
	 * @brief TIM2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM2_Init(void) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b08e      	sub	sp, #56	@ 0x38
 800144c:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM2_Init 0 */

		/* USER CODE END TIM2_Init 0 */

		TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800144e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
		TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001468:	463b      	mov	r3, r7
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]
 8001476:	615a      	str	r2, [r3, #20]
 8001478:	619a      	str	r2, [r3, #24]

		/* USER CODE BEGIN TIM2_Init 1 */

		/* USER CODE END TIM2_Init 1 */
		htim2.Instance = TIM2;
 800147a:	4b2c      	ldr	r3, [pc, #176]	@ (800152c <MX_TIM2_Init+0xe4>)
 800147c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001480:	601a      	str	r2, [r3, #0]
		htim2.Init.Prescaler = 60000 - 1;
 8001482:	4b2a      	ldr	r3, [pc, #168]	@ (800152c <MX_TIM2_Init+0xe4>)
 8001484:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001488:	605a      	str	r2, [r3, #4]
		htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148a:	4b28      	ldr	r3, [pc, #160]	@ (800152c <MX_TIM2_Init+0xe4>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
		htim2.Init.Period = 499;
 8001490:	4b26      	ldr	r3, [pc, #152]	@ (800152c <MX_TIM2_Init+0xe4>)
 8001492:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001496:	60da      	str	r2, [r3, #12]
		htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001498:	4b24      	ldr	r3, [pc, #144]	@ (800152c <MX_TIM2_Init+0xe4>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
		htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149e:	4b23      	ldr	r3, [pc, #140]	@ (800152c <MX_TIM2_Init+0xe4>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80014a4:	4821      	ldr	r0, [pc, #132]	@ (800152c <MX_TIM2_Init+0xe4>)
 80014a6:	f004 fc93 	bl	8005dd0 <HAL_TIM_Base_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM2_Init+0x6c>
			Error_Handler();
 80014b0:	f000 f8a2 	bl	80015f8 <Error_Handler>
		}
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80014ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014be:	4619      	mov	r1, r3
 80014c0:	481a      	ldr	r0, [pc, #104]	@ (800152c <MX_TIM2_Init+0xe4>)
 80014c2:	f004 fe51 	bl	8006168 <HAL_TIM_ConfigClockSource>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM2_Init+0x88>
			Error_Handler();
 80014cc:	f000 f894 	bl	80015f8 <Error_Handler>
		}
		if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80014d0:	4816      	ldr	r0, [pc, #88]	@ (800152c <MX_TIM2_Init+0xe4>)
 80014d2:	f004 fcd4 	bl	8005e7e <HAL_TIM_PWM_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM2_Init+0x98>
			Error_Handler();
 80014dc:	f000 f88c 	bl	80015f8 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014e0:	2320      	movs	r3, #32
 80014e2:	61fb      	str	r3, [r7, #28]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80014e8:	f107 031c 	add.w	r3, r7, #28
 80014ec:	4619      	mov	r1, r3
 80014ee:	480f      	ldr	r0, [pc, #60]	@ (800152c <MX_TIM2_Init+0xe4>)
 80014f0:	f005 fb62 	bl	8006bb8 <HAL_TIMEx_MasterConfigSynchronization>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM2_Init+0xb6>
				!= HAL_OK) {
			Error_Handler();
 80014fa:	f000 f87d 	bl	80015f8 <Error_Handler>
		}
		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014fe:	2360      	movs	r3, #96	@ 0x60
 8001500:	603b      	str	r3, [r7, #0]
		sConfigOC.Pulse = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
		if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800150e:	463b      	mov	r3, r7
 8001510:	2200      	movs	r2, #0
 8001512:	4619      	mov	r1, r3
 8001514:	4805      	ldr	r0, [pc, #20]	@ (800152c <MX_TIM2_Init+0xe4>)
 8001516:	f004 fd13 	bl	8005f40 <HAL_TIM_PWM_ConfigChannel>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM2_Init+0xdc>
				!= HAL_OK) {
			Error_Handler();
 8001520:	f000 f86a 	bl	80015f8 <Error_Handler>
		}
		/* USER CODE BEGIN TIM2_Init 2 */

		/* USER CODE END TIM2_Init 2 */

	}
 8001524:	bf00      	nop
 8001526:	3738      	adds	r7, #56	@ 0x38
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	2000021c 	.word	0x2000021c

08001530 <MX_GPIO_Init>:
	/**
	 * @brief GPIO Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_GPIO_Init(void) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001536:	f107 030c 	add.w	r3, r7, #12
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	611a      	str	r2, [r3, #16]
		/* USER CODE BEGIN MX_GPIO_Init_1 */
		/* USER CODE END MX_GPIO_Init_1 */

		/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	4b2a      	ldr	r3, [pc, #168]	@ (80015f0 <MX_GPIO_Init+0xc0>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154a:	4a29      	ldr	r2, [pc, #164]	@ (80015f0 <MX_GPIO_Init+0xc0>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001552:	4b27      	ldr	r3, [pc, #156]	@ (80015f0 <MX_GPIO_Init+0xc0>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	4b24      	ldr	r3, [pc, #144]	@ (80015f0 <MX_GPIO_Init+0xc0>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001562:	4a23      	ldr	r2, [pc, #140]	@ (80015f0 <MX_GPIO_Init+0xc0>)
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156a:	4b21      	ldr	r3, [pc, #132]	@ (80015f0 <MX_GPIO_Init+0xc0>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin,
 8001576:	2201      	movs	r2, #1
 8001578:	2140      	movs	r1, #64	@ 0x40
 800157a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800157e:	f002 f955 	bl	800382c <HAL_GPIO_WritePin>
				GPIO_PIN_SET);

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin | PRS_Ready_Pin | System_Ready_Pin,
 8001582:	2201      	movs	r2, #1
 8001584:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 8001588:	481a      	ldr	r0, [pc, #104]	@ (80015f4 <MX_GPIO_Init+0xc4>)
 800158a:	f002 f94f 	bl	800382c <HAL_GPIO_WritePin>
				GPIO_PIN_SET);

		/*Configure GPIO pin : Valve_Enable_Pin */
		GPIO_InitStruct.Pin = Valve_Enable_Pin;
 800158e:	2340      	movs	r3, #64	@ 0x40
 8001590:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001592:	2301      	movs	r3, #1
 8001594:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001596:	2302      	movs	r3, #2
 8001598:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(Valve_Enable_GPIO_Port, &GPIO_InitStruct);
 800159e:	f107 030c 	add.w	r3, r7, #12
 80015a2:	4619      	mov	r1, r3
 80015a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015a8:	f001 ffbe 	bl	8003528 <HAL_GPIO_Init>

		/*Configure GPIO pin : SPI_CS_Pin */
		GPIO_InitStruct.Pin = SPI_CS_Pin;
 80015ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015b0:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 030c 	add.w	r3, r7, #12
 80015c2:	4619      	mov	r1, r3
 80015c4:	480b      	ldr	r0, [pc, #44]	@ (80015f4 <MX_GPIO_Init+0xc4>)
 80015c6:	f001 ffaf 	bl	8003528 <HAL_GPIO_Init>

		/*Configure GPIO pins : PRS_Ready_Pin System_Ready_Pin */
		GPIO_InitStruct.Pin = PRS_Ready_Pin | System_Ready_Pin;
 80015ca:	23c0      	movs	r3, #192	@ 0xc0
 80015cc:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015d2:	2302      	movs	r3, #2
 80015d4:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015da:	f107 030c 	add.w	r3, r7, #12
 80015de:	4619      	mov	r1, r3
 80015e0:	4804      	ldr	r0, [pc, #16]	@ (80015f4 <MX_GPIO_Init+0xc4>)
 80015e2:	f001 ffa1 	bl	8003528 <HAL_GPIO_Init>

		/* USER CODE BEGIN MX_GPIO_Init_2 */
		/* USER CODE END MX_GPIO_Init_2 */
	}
 80015e6:	bf00      	nop
 80015e8:	3720      	adds	r7, #32
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000
 80015f4:	48000400 	.word	0x48000400

080015f8 <Error_Handler>:

	/**
	 * @brief  This function is executed in case of error occurrence.
	 * @retval None
	 */
	void Error_Handler(void) {
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015fc:	b672      	cpsid	i
}
 80015fe:	bf00      	nop
		/* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1) {
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <Error_Handler+0x8>

08001604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160a:	4b0f      	ldr	r3, [pc, #60]	@ (8001648 <HAL_MspInit+0x44>)
 800160c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800160e:	4a0e      	ldr	r2, [pc, #56]	@ (8001648 <HAL_MspInit+0x44>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6613      	str	r3, [r2, #96]	@ 0x60
 8001616:	4b0c      	ldr	r3, [pc, #48]	@ (8001648 <HAL_MspInit+0x44>)
 8001618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001622:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <HAL_MspInit+0x44>)
 8001624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001626:	4a08      	ldr	r2, [pc, #32]	@ (8001648 <HAL_MspInit+0x44>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800162c:	6593      	str	r3, [r2, #88]	@ 0x58
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <HAL_MspInit+0x44>)
 8001630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800163a:	f003 f8a1 	bl	8004780 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40021000 	.word	0x40021000

0800164c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b09c      	sub	sp, #112	@ 0x70
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001664:	f107 0318 	add.w	r3, r7, #24
 8001668:	2244      	movs	r2, #68	@ 0x44
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f005 fd2f 	bl	80070d0 <memset>
  if(hadc->Instance==ADC1)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800167a:	d13d      	bne.n	80016f8 <HAL_ADC_MspInit+0xac>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800167c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001680:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001682:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001686:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001688:	f107 0318 	add.w	r3, r7, #24
 800168c:	4618      	mov	r0, r3
 800168e:	f003 fd7d 	bl	800518c <HAL_RCCEx_PeriphCLKConfig>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001698:	f7ff ffae 	bl	80015f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800169c:	4b3a      	ldr	r3, [pc, #232]	@ (8001788 <HAL_ADC_MspInit+0x13c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	3301      	adds	r3, #1
 80016a2:	4a39      	ldr	r2, [pc, #228]	@ (8001788 <HAL_ADC_MspInit+0x13c>)
 80016a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80016a6:	4b38      	ldr	r3, [pc, #224]	@ (8001788 <HAL_ADC_MspInit+0x13c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d10b      	bne.n	80016c6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80016ae:	4b37      	ldr	r3, [pc, #220]	@ (800178c <HAL_ADC_MspInit+0x140>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b2:	4a36      	ldr	r2, [pc, #216]	@ (800178c <HAL_ADC_MspInit+0x140>)
 80016b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ba:	4b34      	ldr	r3, [pc, #208]	@ (800178c <HAL_ADC_MspInit+0x140>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c6:	4b31      	ldr	r3, [pc, #196]	@ (800178c <HAL_ADC_MspInit+0x140>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ca:	4a30      	ldr	r2, [pc, #192]	@ (800178c <HAL_ADC_MspInit+0x140>)
 80016cc:	f043 0302 	orr.w	r3, r3, #2
 80016d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016d2:	4b2e      	ldr	r3, [pc, #184]	@ (800178c <HAL_ADC_MspInit+0x140>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Low_Pressure_ADC_Pin;
 80016de:	2302      	movs	r3, #2
 80016e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016e2:	2303      	movs	r3, #3
 80016e4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(Low_Pressure_ADC_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80016ee:	4619      	mov	r1, r3
 80016f0:	4827      	ldr	r0, [pc, #156]	@ (8001790 <HAL_ADC_MspInit+0x144>)
 80016f2:	f001 ff19 	bl	8003528 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80016f6:	e042      	b.n	800177e <HAL_ADC_MspInit+0x132>
  else if(hadc->Instance==ADC2)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a25      	ldr	r2, [pc, #148]	@ (8001794 <HAL_ADC_MspInit+0x148>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d13d      	bne.n	800177e <HAL_ADC_MspInit+0x132>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001702:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001706:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001708:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800170c:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800170e:	f107 0318 	add.w	r3, r7, #24
 8001712:	4618      	mov	r0, r3
 8001714:	f003 fd3a 	bl	800518c <HAL_RCCEx_PeriphCLKConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_ADC_MspInit+0xd6>
      Error_Handler();
 800171e:	f7ff ff6b 	bl	80015f8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001722:	4b19      	ldr	r3, [pc, #100]	@ (8001788 <HAL_ADC_MspInit+0x13c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	3301      	adds	r3, #1
 8001728:	4a17      	ldr	r2, [pc, #92]	@ (8001788 <HAL_ADC_MspInit+0x13c>)
 800172a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800172c:	4b16      	ldr	r3, [pc, #88]	@ (8001788 <HAL_ADC_MspInit+0x13c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d10b      	bne.n	800174c <HAL_ADC_MspInit+0x100>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001734:	4b15      	ldr	r3, [pc, #84]	@ (800178c <HAL_ADC_MspInit+0x140>)
 8001736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001738:	4a14      	ldr	r2, [pc, #80]	@ (800178c <HAL_ADC_MspInit+0x140>)
 800173a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800173e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001740:	4b12      	ldr	r3, [pc, #72]	@ (800178c <HAL_ADC_MspInit+0x140>)
 8001742:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001744:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174c:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <HAL_ADC_MspInit+0x140>)
 800174e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001750:	4a0e      	ldr	r2, [pc, #56]	@ (800178c <HAL_ADC_MspInit+0x140>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001758:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <HAL_ADC_MspInit+0x140>)
 800175a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = High_Pressure_ADC_Pin;
 8001764:	2320      	movs	r3, #32
 8001766:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001768:	2303      	movs	r3, #3
 800176a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(High_Pressure_ADC_GPIO_Port, &GPIO_InitStruct);
 8001770:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001774:	4619      	mov	r1, r3
 8001776:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800177a:	f001 fed5 	bl	8003528 <HAL_GPIO_Init>
}
 800177e:	bf00      	nop
 8001780:	3770      	adds	r7, #112	@ 0x70
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	2000027c 	.word	0x2000027c
 800178c:	40021000 	.word	0x40021000
 8001790:	48000400 	.word	0x48000400
 8001794:	50000100 	.word	0x50000100

08001798 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b09a      	sub	sp, #104	@ 0x68
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017b0:	f107 0310 	add.w	r3, r7, #16
 80017b4:	2244      	movs	r2, #68	@ 0x44
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f005 fc89 	bl	80070d0 <memset>
  if(hi2c->Instance==I2C2)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001840 <HAL_I2C_MspInit+0xa8>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d137      	bne.n	8001838 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80017c8:	2380      	movs	r3, #128	@ 0x80
 80017ca:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017d0:	f107 0310 	add.w	r3, r7, #16
 80017d4:	4618      	mov	r0, r3
 80017d6:	f003 fcd9 	bl	800518c <HAL_RCCEx_PeriphCLKConfig>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80017e0:	f7ff ff0a 	bl	80015f8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e4:	4b17      	ldr	r3, [pc, #92]	@ (8001844 <HAL_I2C_MspInit+0xac>)
 80017e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e8:	4a16      	ldr	r2, [pc, #88]	@ (8001844 <HAL_I2C_MspInit+0xac>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017f0:	4b14      	ldr	r3, [pc, #80]	@ (8001844 <HAL_I2C_MspInit+0xac>)
 80017f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017fc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001800:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001802:	2312      	movs	r3, #18
 8001804:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	2300      	movs	r3, #0
 800180c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800180e:	2304      	movs	r3, #4
 8001810:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001812:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001816:	4619      	mov	r1, r3
 8001818:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800181c:	f001 fe84 	bl	8003528 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001820:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <HAL_I2C_MspInit+0xac>)
 8001822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001824:	4a07      	ldr	r2, [pc, #28]	@ (8001844 <HAL_I2C_MspInit+0xac>)
 8001826:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800182a:	6593      	str	r3, [r2, #88]	@ 0x58
 800182c:	4b05      	ldr	r3, [pc, #20]	@ (8001844 <HAL_I2C_MspInit+0xac>)
 800182e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001830:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001838:	bf00      	nop
 800183a:	3768      	adds	r7, #104	@ 0x68
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40005800 	.word	0x40005800
 8001844:	40021000 	.word	0x40021000

08001848 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	@ 0x28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a17      	ldr	r2, [pc, #92]	@ (80018c4 <HAL_SPI_MspInit+0x7c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d128      	bne.n	80018bc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800186a:	4b17      	ldr	r3, [pc, #92]	@ (80018c8 <HAL_SPI_MspInit+0x80>)
 800186c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800186e:	4a16      	ldr	r2, [pc, #88]	@ (80018c8 <HAL_SPI_MspInit+0x80>)
 8001870:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001874:	6593      	str	r3, [r2, #88]	@ 0x58
 8001876:	4b14      	ldr	r3, [pc, #80]	@ (80018c8 <HAL_SPI_MspInit+0x80>)
 8001878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001882:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <HAL_SPI_MspInit+0x80>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001886:	4a10      	ldr	r2, [pc, #64]	@ (80018c8 <HAL_SPI_MspInit+0x80>)
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800188e:	4b0e      	ldr	r3, [pc, #56]	@ (80018c8 <HAL_SPI_MspInit+0x80>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800189a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800189e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a8:	2302      	movs	r3, #2
 80018aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018ac:	2305      	movs	r3, #5
 80018ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	4805      	ldr	r0, [pc, #20]	@ (80018cc <HAL_SPI_MspInit+0x84>)
 80018b8:	f001 fe36 	bl	8003528 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80018bc:	bf00      	nop
 80018be:	3728      	adds	r7, #40	@ 0x28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40003800 	.word	0x40003800
 80018c8:	40021000 	.word	0x40021000
 80018cc:	48000400 	.word	0x48000400

080018d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018e0:	d10b      	bne.n	80018fa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018e2:	4b09      	ldr	r3, [pc, #36]	@ (8001908 <HAL_TIM_Base_MspInit+0x38>)
 80018e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e6:	4a08      	ldr	r2, [pc, #32]	@ (8001908 <HAL_TIM_Base_MspInit+0x38>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80018ee:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <HAL_TIM_Base_MspInit+0x38>)
 80018f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018fa:	bf00      	nop
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40021000 	.word	0x40021000

0800190c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <NMI_Handler+0x4>

08001914 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <HardFault_Handler+0x4>

0800191c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <MemManage_Handler+0x4>

08001924 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <BusFault_Handler+0x4>

0800192c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <UsageFault_Handler+0x4>

08001934 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001962:	f000 f917 	bl	8001b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}

0800196a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af00      	add	r7, sp, #0
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	e00a      	b.n	8001992 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800197c:	f3af 8000 	nop.w
 8001980:	4601      	mov	r1, r0
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	1c5a      	adds	r2, r3, #1
 8001986:	60ba      	str	r2, [r7, #8]
 8001988:	b2ca      	uxtb	r2, r1
 800198a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	3301      	adds	r3, #1
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	429a      	cmp	r2, r3
 8001998:	dbf0      	blt.n	800197c <_read+0x12>
  }

  return len;
 800199a:	687b      	ldr	r3, [r7, #4]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019cc:	605a      	str	r2, [r3, #4]
  return 0;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <_isatty>:

int _isatty(int file)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019e4:	2301      	movs	r3, #1
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b085      	sub	sp, #20
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a14:	4a14      	ldr	r2, [pc, #80]	@ (8001a68 <_sbrk+0x5c>)
 8001a16:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <_sbrk+0x60>)
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a20:	4b13      	ldr	r3, [pc, #76]	@ (8001a70 <_sbrk+0x64>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d102      	bne.n	8001a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a28:	4b11      	ldr	r3, [pc, #68]	@ (8001a70 <_sbrk+0x64>)
 8001a2a:	4a12      	ldr	r2, [pc, #72]	@ (8001a74 <_sbrk+0x68>)
 8001a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a2e:	4b10      	ldr	r3, [pc, #64]	@ (8001a70 <_sbrk+0x64>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d207      	bcs.n	8001a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a3c:	f005 fb96 	bl	800716c <__errno>
 8001a40:	4603      	mov	r3, r0
 8001a42:	220c      	movs	r2, #12
 8001a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a4a:	e009      	b.n	8001a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a4c:	4b08      	ldr	r3, [pc, #32]	@ (8001a70 <_sbrk+0x64>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a52:	4b07      	ldr	r3, [pc, #28]	@ (8001a70 <_sbrk+0x64>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	4a05      	ldr	r2, [pc, #20]	@ (8001a70 <_sbrk+0x64>)
 8001a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20008000 	.word	0x20008000
 8001a6c:	00000400 	.word	0x00000400
 8001a70:	20000280 	.word	0x20000280
 8001a74:	200003d8 	.word	0x200003d8

08001a78 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a7c:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <SystemInit+0x20>)
 8001a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a82:	4a05      	ldr	r2, [pc, #20]	@ (8001a98 <SystemInit+0x20>)
 8001a84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a9c:	480d      	ldr	r0, [pc, #52]	@ (8001ad4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a9e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001aa0:	f7ff ffea 	bl	8001a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa4:	480c      	ldr	r0, [pc, #48]	@ (8001ad8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001aa6:	490d      	ldr	r1, [pc, #52]	@ (8001adc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae0 <LoopForever+0xe>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001aac:	e002      	b.n	8001ab4 <LoopCopyDataInit>

08001aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab2:	3304      	adds	r3, #4

08001ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab8:	d3f9      	bcc.n	8001aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001abc:	4c0a      	ldr	r4, [pc, #40]	@ (8001ae8 <LoopForever+0x16>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac0:	e001      	b.n	8001ac6 <LoopFillZerobss>

08001ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac4:	3204      	adds	r2, #4

08001ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac8:	d3fb      	bcc.n	8001ac2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001aca:	f005 fb55 	bl	8007178 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ace:	f7ff f85b 	bl	8000b88 <main>

08001ad2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ad2:	e7fe      	b.n	8001ad2 <LoopForever>
  ldr   r0, =_estack
 8001ad4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001adc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ae0:	08007f2c 	.word	0x08007f2c
  ldr r2, =_sbss
 8001ae4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ae8:	200003d4 	.word	0x200003d4

08001aec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001aec:	e7fe      	b.n	8001aec <ADC1_2_IRQHandler>

08001aee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af8:	2003      	movs	r0, #3
 8001afa:	f001 fce3 	bl	80034c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001afe:	200f      	movs	r0, #15
 8001b00:	f000 f80e 	bl	8001b20 <HAL_InitTick>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	71fb      	strb	r3, [r7, #7]
 8001b0e:	e001      	b.n	8001b14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b10:	f7ff fd78 	bl	8001604 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b14:	79fb      	ldrb	r3, [r7, #7]

}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b2c:	4b16      	ldr	r3, [pc, #88]	@ (8001b88 <HAL_InitTick+0x68>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d022      	beq.n	8001b7a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b34:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <HAL_InitTick+0x6c>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b13      	ldr	r3, [pc, #76]	@ (8001b88 <HAL_InitTick+0x68>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b40:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f001 fce0 	bl	800350e <HAL_SYSTICK_Config>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10f      	bne.n	8001b74 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b0f      	cmp	r3, #15
 8001b58:	d809      	bhi.n	8001b6e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b62:	f001 fcba 	bl	80034da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b66:	4a0a      	ldr	r2, [pc, #40]	@ (8001b90 <HAL_InitTick+0x70>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	e007      	b.n	8001b7e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	73fb      	strb	r3, [r7, #15]
 8001b72:	e004      	b.n	8001b7e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	e001      	b.n	8001b7e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000010 	.word	0x20000010
 8001b8c:	20000008 	.word	0x20000008
 8001b90:	2000000c 	.word	0x2000000c

08001b94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b98:	4b05      	ldr	r3, [pc, #20]	@ (8001bb0 <HAL_IncTick+0x1c>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4b05      	ldr	r3, [pc, #20]	@ (8001bb4 <HAL_IncTick+0x20>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4a03      	ldr	r2, [pc, #12]	@ (8001bb0 <HAL_IncTick+0x1c>)
 8001ba4:	6013      	str	r3, [r2, #0]
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	20000284 	.word	0x20000284
 8001bb4:	20000010 	.word	0x20000010

08001bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return uwTick;
 8001bbc:	4b03      	ldr	r3, [pc, #12]	@ (8001bcc <HAL_GetTick+0x14>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20000284 	.word	0x20000284

08001bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd8:	f7ff ffee 	bl	8001bb8 <HAL_GetTick>
 8001bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001be8:	d004      	beq.n	8001bf4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bea:	4b09      	ldr	r3, [pc, #36]	@ (8001c10 <HAL_Delay+0x40>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bf4:	bf00      	nop
 8001bf6:	f7ff ffdf 	bl	8001bb8 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d8f7      	bhi.n	8001bf6 <HAL_Delay+0x26>
  {
  }
}
 8001c06:	bf00      	nop
 8001c08:	bf00      	nop
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000010 	.word	0x20000010

08001c14 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	609a      	str	r2, [r3, #8]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b087      	sub	sp, #28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
 8001c88:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	3360      	adds	r3, #96	@ 0x60
 8001c8e:	461a      	mov	r2, r3
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <LL_ADC_SetOffset+0x44>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	4313      	orrs	r3, r2
 8001cac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001cb4:	bf00      	nop
 8001cb6:	371c      	adds	r7, #28
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	03fff000 	.word	0x03fff000

08001cc4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3360      	adds	r3, #96	@ 0x60
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b087      	sub	sp, #28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	3360      	adds	r3, #96	@ 0x60
 8001d00:	461a      	mov	r2, r3
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	431a      	orrs	r2, r3
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d1a:	bf00      	nop
 8001d1c:	371c      	adds	r7, #28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b087      	sub	sp, #28
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	3360      	adds	r3, #96	@ 0x60
 8001d36:	461a      	mov	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001d50:	bf00      	nop
 8001d52:	371c      	adds	r7, #28
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b087      	sub	sp, #28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	3360      	adds	r3, #96	@ 0x60
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	431a      	orrs	r2, r3
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001d86:	bf00      	nop
 8001d88:	371c      	adds	r7, #28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	615a      	str	r2, [r3, #20]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e000      	b.n	8001dd2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b087      	sub	sp, #28
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	3330      	adds	r3, #48	@ 0x30
 8001dee:	461a      	mov	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	0a1b      	lsrs	r3, r3, #8
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	4413      	add	r3, r2
 8001dfc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	f003 031f 	and.w	r3, r3, #31
 8001e08:	211f      	movs	r1, #31
 8001e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	401a      	ands	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	0e9b      	lsrs	r3, r3, #26
 8001e16:	f003 011f 	and.w	r1, r3, #31
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	f003 031f 	and.w	r3, r3, #31
 8001e20:	fa01 f303 	lsl.w	r3, r1, r3
 8001e24:	431a      	orrs	r2, r3
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e2a:	bf00      	nop
 8001e2c:	371c      	adds	r7, #28
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b087      	sub	sp, #28
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	3314      	adds	r3, #20
 8001e46:	461a      	mov	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	0e5b      	lsrs	r3, r3, #25
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	4413      	add	r3, r2
 8001e54:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	0d1b      	lsrs	r3, r3, #20
 8001e5e:	f003 031f 	and.w	r3, r3, #31
 8001e62:	2107      	movs	r1, #7
 8001e64:	fa01 f303 	lsl.w	r3, r1, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	0d1b      	lsrs	r3, r3, #20
 8001e70:	f003 031f 	and.w	r3, r3, #31
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e80:	bf00      	nop
 8001e82:	371c      	adds	r7, #28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f003 0318 	and.w	r3, r3, #24
 8001eae:	4908      	ldr	r1, [pc, #32]	@ (8001ed0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001eb0:	40d9      	lsrs	r1, r3
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	400b      	ands	r3, r1
 8001eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ec2:	bf00      	nop
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	0007ffff 	.word	0x0007ffff

08001ed4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 031f 	and.w	r3, r3, #31
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001f1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6093      	str	r3, [r2, #8]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f44:	d101      	bne.n	8001f4a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001f68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f6c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f94:	d101      	bne.n	8001f9a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fb8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fbc:	f043 0201 	orr.w	r2, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fe0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fe4:	f043 0202 	orr.w	r2, r3, #2
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <LL_ADC_IsEnabled+0x18>
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <LL_ADC_IsEnabled+0x1a>
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b02      	cmp	r3, #2
 8002030:	d101      	bne.n	8002036 <LL_ADC_IsDisableOngoing+0x18>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <LL_ADC_IsDisableOngoing+0x1a>
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002054:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002058:	f043 0204 	orr.w	r2, r3, #4
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b04      	cmp	r3, #4
 800207e:	d101      	bne.n	8002084 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d101      	bne.n	80020aa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b089      	sub	sp, #36	@ 0x24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020c0:	2300      	movs	r3, #0
 80020c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e167      	b.n	80023a2 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d109      	bne.n	80020f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff fab3 	bl	800164c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff19 	bl	8001f30 <LL_ADC_IsDeepPowerDownEnabled>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d004      	beq.n	800210e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff feff 	bl	8001f0c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff ff34 	bl	8001f80 <LL_ADC_IsInternalRegulatorEnabled>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d115      	bne.n	800214a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff ff18 	bl	8001f58 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002128:	4ba0      	ldr	r3, [pc, #640]	@ (80023ac <HAL_ADC_Init+0x2f4>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	099b      	lsrs	r3, r3, #6
 800212e:	4aa0      	ldr	r2, [pc, #640]	@ (80023b0 <HAL_ADC_Init+0x2f8>)
 8002130:	fba2 2303 	umull	r2, r3, r2, r3
 8002134:	099b      	lsrs	r3, r3, #6
 8002136:	3301      	adds	r3, #1
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800213c:	e002      	b.n	8002144 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	3b01      	subs	r3, #1
 8002142:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f9      	bne.n	800213e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ff16 	bl	8001f80 <LL_ADC_IsInternalRegulatorEnabled>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10d      	bne.n	8002176 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215e:	f043 0210 	orr.w	r2, r3, #16
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800216a:	f043 0201 	orr.w	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff ff76 	bl	800206c <LL_ADC_REG_IsConversionOngoing>
 8002180:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	2b00      	cmp	r3, #0
 800218c:	f040 8100 	bne.w	8002390 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	2b00      	cmp	r3, #0
 8002194:	f040 80fc 	bne.w	8002390 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80021a0:	f043 0202 	orr.w	r2, r3, #2
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff23 	bl	8001ff8 <LL_ADC_IsEnabled>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d111      	bne.n	80021dc <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021b8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80021bc:	f7ff ff1c 	bl	8001ff8 <LL_ADC_IsEnabled>
 80021c0:	4604      	mov	r4, r0
 80021c2:	487c      	ldr	r0, [pc, #496]	@ (80023b4 <HAL_ADC_Init+0x2fc>)
 80021c4:	f7ff ff18 	bl	8001ff8 <LL_ADC_IsEnabled>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4323      	orrs	r3, r4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d105      	bne.n	80021dc <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	4619      	mov	r1, r3
 80021d6:	4878      	ldr	r0, [pc, #480]	@ (80023b8 <HAL_ADC_Init+0x300>)
 80021d8:	f7ff fd1c 	bl	8001c14 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	7f5b      	ldrb	r3, [r3, #29]
 80021e0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021e6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80021ec:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80021f2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021fa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002206:	2b01      	cmp	r3, #1
 8002208:	d106      	bne.n	8002218 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220e:	3b01      	subs	r3, #1
 8002210:	045b      	lsls	r3, r3, #17
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800221c:	2b00      	cmp	r3, #0
 800221e:	d009      	beq.n	8002234 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002224:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	4b60      	ldr	r3, [pc, #384]	@ (80023bc <HAL_ADC_Init+0x304>)
 800223c:	4013      	ands	r3, r2
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6812      	ldr	r2, [r2, #0]
 8002242:	69b9      	ldr	r1, [r7, #24]
 8002244:	430b      	orrs	r3, r1
 8002246:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff ff15 	bl	8002092 <LL_ADC_INJ_IsConversionOngoing>
 8002268:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d16d      	bne.n	800234c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d16a      	bne.n	800234c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800227a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002282:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002292:	f023 0302 	bic.w	r3, r3, #2
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	69b9      	ldr	r1, [r7, #24]
 800229c:	430b      	orrs	r3, r1
 800229e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d017      	beq.n	80022d8 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691a      	ldr	r2, [r3, #16]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80022b6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80022c0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80022c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6911      	ldr	r1, [r2, #16]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	430b      	orrs	r3, r1
 80022d2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80022d6:	e013      	b.n	8002300 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80022e6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80022f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022fc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002306:	2b01      	cmp	r3, #1
 8002308:	d118      	bne.n	800233c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002314:	f023 0304 	bic.w	r3, r3, #4
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002320:	4311      	orrs	r1, r2
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002326:	4311      	orrs	r1, r2
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800232c:	430a      	orrs	r2, r1
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f042 0201 	orr.w	r2, r2, #1
 8002338:	611a      	str	r2, [r3, #16]
 800233a:	e007      	b.n	800234c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	691a      	ldr	r2, [r3, #16]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0201 	bic.w	r2, r2, #1
 800234a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d10c      	bne.n	800236e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235a:	f023 010f 	bic.w	r1, r3, #15
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	1e5a      	subs	r2, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	631a      	str	r2, [r3, #48]	@ 0x30
 800236c:	e007      	b.n	800237e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 020f 	bic.w	r2, r2, #15
 800237c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002382:	f023 0303 	bic.w	r3, r3, #3
 8002386:	f043 0201 	orr.w	r2, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800238e:	e007      	b.n	80023a0 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002394:	f043 0210 	orr.w	r2, r3, #16
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3724      	adds	r7, #36	@ 0x24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd90      	pop	{r4, r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000008 	.word	0x20000008
 80023b0:	053e2d63 	.word	0x053e2d63
 80023b4:	50000100 	.word	0x50000100
 80023b8:	50000300 	.word	0x50000300
 80023bc:	fff04007 	.word	0xfff04007

080023c0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023c8:	4859      	ldr	r0, [pc, #356]	@ (8002530 <HAL_ADC_Start+0x170>)
 80023ca:	f7ff fd83 	bl	8001ed4 <LL_ADC_GetMultimode>
 80023ce:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fe49 	bl	800206c <LL_ADC_REG_IsConversionOngoing>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f040 809f 	bne.w	8002520 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_ADC_Start+0x30>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e09a      	b.n	8002526 <HAL_ADC_Start+0x166>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fd73 	bl	8002ee4 <ADC_Enable>
 80023fe:	4603      	mov	r3, r0
 8002400:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002402:	7dfb      	ldrb	r3, [r7, #23]
 8002404:	2b00      	cmp	r3, #0
 8002406:	f040 8086 	bne.w	8002516 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800240e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002412:	f023 0301 	bic.w	r3, r3, #1
 8002416:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a44      	ldr	r2, [pc, #272]	@ (8002534 <HAL_ADC_Start+0x174>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d002      	beq.n	800242e <HAL_ADC_Start+0x6e>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	e001      	b.n	8002432 <HAL_ADC_Start+0x72>
 800242e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6812      	ldr	r2, [r2, #0]
 8002436:	4293      	cmp	r3, r2
 8002438:	d002      	beq.n	8002440 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d105      	bne.n	800244c <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002444:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002450:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002454:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002458:	d106      	bne.n	8002468 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800245e:	f023 0206 	bic.w	r2, r3, #6
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	661a      	str	r2, [r3, #96]	@ 0x60
 8002466:	e002      	b.n	800246e <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	221c      	movs	r2, #28
 8002474:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a2c      	ldr	r2, [pc, #176]	@ (8002534 <HAL_ADC_Start+0x174>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d002      	beq.n	800248e <HAL_ADC_Start+0xce>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	e001      	b.n	8002492 <HAL_ADC_Start+0xd2>
 800248e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6812      	ldr	r2, [r2, #0]
 8002496:	4293      	cmp	r3, r2
 8002498:	d008      	beq.n	80024ac <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	2b05      	cmp	r3, #5
 80024a4:	d002      	beq.n	80024ac <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	2b09      	cmp	r3, #9
 80024aa:	d114      	bne.n	80024d6 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d007      	beq.n	80024ca <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024be:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024c2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fdb8 	bl	8002044 <LL_ADC_REG_StartConversion>
 80024d4:	e026      	b.n	8002524 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024da:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a13      	ldr	r2, [pc, #76]	@ (8002534 <HAL_ADC_Start+0x174>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d002      	beq.n	80024f2 <HAL_ADC_Start+0x132>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	e001      	b.n	80024f6 <HAL_ADC_Start+0x136>
 80024f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80024f6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00f      	beq.n	8002524 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002508:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800250c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002514:	e006      	b.n	8002524 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800251e:	e001      	b.n	8002524 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002520:	2302      	movs	r3, #2
 8002522:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002524:	7dfb      	ldrb	r3, [r7, #23]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	50000300 	.word	0x50000300
 8002534:	50000100 	.word	0x50000100

08002538 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002542:	4867      	ldr	r0, [pc, #412]	@ (80026e0 <HAL_ADC_PollForConversion+0x1a8>)
 8002544:	f7ff fcc6 	bl	8001ed4 <LL_ADC_GetMultimode>
 8002548:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	2b08      	cmp	r3, #8
 8002550:	d102      	bne.n	8002558 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002552:	2308      	movs	r3, #8
 8002554:	61fb      	str	r3, [r7, #28]
 8002556:	e02a      	b.n	80025ae <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	2b05      	cmp	r3, #5
 8002562:	d002      	beq.n	800256a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	2b09      	cmp	r3, #9
 8002568:	d111      	bne.n	800258e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b00      	cmp	r3, #0
 8002576:	d007      	beq.n	8002588 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800257c:	f043 0220 	orr.w	r2, r3, #32
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0a6      	b.n	80026d6 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002588:	2304      	movs	r3, #4
 800258a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800258c:	e00f      	b.n	80025ae <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800258e:	4854      	ldr	r0, [pc, #336]	@ (80026e0 <HAL_ADC_PollForConversion+0x1a8>)
 8002590:	f7ff fcae 	bl	8001ef0 <LL_ADC_GetMultiDMATransfer>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d007      	beq.n	80025aa <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800259e:	f043 0220 	orr.w	r2, r3, #32
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e095      	b.n	80026d6 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80025aa:	2304      	movs	r3, #4
 80025ac:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80025ae:	f7ff fb03 	bl	8001bb8 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025b4:	e021      	b.n	80025fa <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025bc:	d01d      	beq.n	80025fa <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80025be:	f7ff fafb 	bl	8001bb8 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d302      	bcc.n	80025d4 <HAL_ADC_PollForConversion+0x9c>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d112      	bne.n	80025fa <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	4013      	ands	r3, r2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10b      	bne.n	80025fa <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e6:	f043 0204 	orr.w	r2, r3, #4
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e06d      	b.n	80026d6 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	4013      	ands	r3, r2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0d6      	beq.n	80025b6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800260c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fbcd 	bl	8001db8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d01c      	beq.n	800265e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	7f5b      	ldrb	r3, [r3, #29]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d118      	bne.n	800265e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b08      	cmp	r3, #8
 8002638:	d111      	bne.n	800265e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800263e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d105      	bne.n	800265e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002656:	f043 0201 	orr.w	r2, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a20      	ldr	r2, [pc, #128]	@ (80026e4 <HAL_ADC_PollForConversion+0x1ac>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d002      	beq.n	800266e <HAL_ADC_PollForConversion+0x136>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	e001      	b.n	8002672 <HAL_ADC_PollForConversion+0x13a>
 800266e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6812      	ldr	r2, [r2, #0]
 8002676:	4293      	cmp	r3, r2
 8002678:	d008      	beq.n	800268c <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2b05      	cmp	r3, #5
 8002684:	d002      	beq.n	800268c <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2b09      	cmp	r3, #9
 800268a:	d104      	bne.n	8002696 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	61bb      	str	r3, [r7, #24]
 8002694:	e00d      	b.n	80026b2 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a12      	ldr	r2, [pc, #72]	@ (80026e4 <HAL_ADC_PollForConversion+0x1ac>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d002      	beq.n	80026a6 <HAL_ADC_PollForConversion+0x16e>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	e001      	b.n	80026aa <HAL_ADC_PollForConversion+0x172>
 80026a6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80026aa:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d104      	bne.n	80026c2 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2208      	movs	r2, #8
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	e008      	b.n	80026d4 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d103      	bne.n	80026d4 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	220c      	movs	r2, #12
 80026d2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3720      	adds	r7, #32
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	50000300 	.word	0x50000300
 80026e4:	50000100 	.word	0x50000100

080026e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
	...

08002704 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b0b6      	sub	sp, #216	@ 0xd8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800271e:	2b01      	cmp	r3, #1
 8002720:	d101      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x22>
 8002722:	2302      	movs	r3, #2
 8002724:	e3c8      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x7b4>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff fc9a 	bl	800206c <LL_ADC_REG_IsConversionOngoing>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	f040 83ad 	bne.w	8002e9a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6818      	ldr	r0, [r3, #0]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	6859      	ldr	r1, [r3, #4]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	f7ff fb46 	bl	8001dde <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fc88 	bl	800206c <LL_ADC_REG_IsConversionOngoing>
 800275c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff fc94 	bl	8002092 <LL_ADC_INJ_IsConversionOngoing>
 800276a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800276e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002772:	2b00      	cmp	r3, #0
 8002774:	f040 81d9 	bne.w	8002b2a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002778:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800277c:	2b00      	cmp	r3, #0
 800277e:	f040 81d4 	bne.w	8002b2a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800278a:	d10f      	bne.n	80027ac <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6818      	ldr	r0, [r3, #0]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2200      	movs	r2, #0
 8002796:	4619      	mov	r1, r3
 8002798:	f7ff fb4d 	bl	8001e36 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff faf4 	bl	8001d92 <LL_ADC_SetSamplingTimeCommonConfig>
 80027aa:	e00e      	b.n	80027ca <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6818      	ldr	r0, [r3, #0]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	6819      	ldr	r1, [r3, #0]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	461a      	mov	r2, r3
 80027ba:	f7ff fb3c 	bl	8001e36 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2100      	movs	r1, #0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fae4 	bl	8001d92 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	08db      	lsrs	r3, r3, #3
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d022      	beq.n	8002832 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	6919      	ldr	r1, [r3, #16]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80027fc:	f7ff fa3e 	bl	8001c7c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6818      	ldr	r0, [r3, #0]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	6919      	ldr	r1, [r3, #16]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	461a      	mov	r2, r3
 800280e:	f7ff fa8a 	bl	8001d26 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6818      	ldr	r0, [r3, #0]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800281e:	2b01      	cmp	r3, #1
 8002820:	d102      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x124>
 8002822:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002826:	e000      	b.n	800282a <HAL_ADC_ConfigChannel+0x126>
 8002828:	2300      	movs	r3, #0
 800282a:	461a      	mov	r2, r3
 800282c:	f7ff fa96 	bl	8001d5c <LL_ADC_SetOffsetSaturation>
 8002830:	e17b      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2100      	movs	r1, #0
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fa43 	bl	8001cc4 <LL_ADC_GetOffsetChannel>
 800283e:	4603      	mov	r3, r0
 8002840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10a      	bne.n	800285e <HAL_ADC_ConfigChannel+0x15a>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2100      	movs	r1, #0
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff fa38 	bl	8001cc4 <LL_ADC_GetOffsetChannel>
 8002854:	4603      	mov	r3, r0
 8002856:	0e9b      	lsrs	r3, r3, #26
 8002858:	f003 021f 	and.w	r2, r3, #31
 800285c:	e01e      	b.n	800289c <HAL_ADC_ConfigChannel+0x198>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2100      	movs	r1, #0
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fa2d 	bl	8001cc4 <LL_ADC_GetOffsetChannel>
 800286a:	4603      	mov	r3, r0
 800286c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002874:	fa93 f3a3 	rbit	r3, r3
 8002878:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800287c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002880:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002884:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800288c:	2320      	movs	r3, #32
 800288e:	e004      	b.n	800289a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002890:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002894:	fab3 f383 	clz	r3, r3
 8002898:	b2db      	uxtb	r3, r3
 800289a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d105      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x1b0>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	0e9b      	lsrs	r3, r3, #26
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	e018      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x1e2>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80028c0:	fa93 f3a3 	rbit	r3, r3
 80028c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80028c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80028d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80028d8:	2320      	movs	r3, #32
 80028da:	e004      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80028dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80028e0:	fab3 f383 	clz	r3, r3
 80028e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d106      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2200      	movs	r2, #0
 80028f0:	2100      	movs	r1, #0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff f9fc 	bl	8001cf0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2101      	movs	r1, #1
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff f9e0 	bl	8001cc4 <LL_ADC_GetOffsetChannel>
 8002904:	4603      	mov	r3, r0
 8002906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10a      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x220>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2101      	movs	r1, #1
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff f9d5 	bl	8001cc4 <LL_ADC_GetOffsetChannel>
 800291a:	4603      	mov	r3, r0
 800291c:	0e9b      	lsrs	r3, r3, #26
 800291e:	f003 021f 	and.w	r2, r3, #31
 8002922:	e01e      	b.n	8002962 <HAL_ADC_ConfigChannel+0x25e>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2101      	movs	r1, #1
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff f9ca 	bl	8001cc4 <LL_ADC_GetOffsetChannel>
 8002930:	4603      	mov	r3, r0
 8002932:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002936:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002942:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002946:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800294a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002952:	2320      	movs	r3, #32
 8002954:	e004      	b.n	8002960 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002956:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800295a:	fab3 f383 	clz	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800296a:	2b00      	cmp	r3, #0
 800296c:	d105      	bne.n	800297a <HAL_ADC_ConfigChannel+0x276>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	0e9b      	lsrs	r3, r3, #26
 8002974:	f003 031f 	and.w	r3, r3, #31
 8002978:	e018      	b.n	80029ac <HAL_ADC_ConfigChannel+0x2a8>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800298e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002992:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002996:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800299e:	2320      	movs	r3, #32
 80029a0:	e004      	b.n	80029ac <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80029a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d106      	bne.n	80029be <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2200      	movs	r2, #0
 80029b6:	2101      	movs	r1, #1
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff f999 	bl	8001cf0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2102      	movs	r1, #2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff f97d 	bl	8001cc4 <LL_ADC_GetOffsetChannel>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10a      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x2e6>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2102      	movs	r1, #2
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff f972 	bl	8001cc4 <LL_ADC_GetOffsetChannel>
 80029e0:	4603      	mov	r3, r0
 80029e2:	0e9b      	lsrs	r3, r3, #26
 80029e4:	f003 021f 	and.w	r2, r3, #31
 80029e8:	e01e      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x324>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2102      	movs	r1, #2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff f967 	bl	8001cc4 <LL_ADC_GetOffsetChannel>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a00:	fa93 f3a3 	rbit	r3, r3
 8002a04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002a08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002a10:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002a18:	2320      	movs	r3, #32
 8002a1a:	e004      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002a1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a20:	fab3 f383 	clz	r3, r3
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d105      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x33c>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	0e9b      	lsrs	r3, r3, #26
 8002a3a:	f003 031f 	and.w	r3, r3, #31
 8002a3e:	e016      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x36a>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a4c:	fa93 f3a3 	rbit	r3, r3
 8002a50:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002a52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002a58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002a60:	2320      	movs	r3, #32
 8002a62:	e004      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002a64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a68:	fab3 f383 	clz	r3, r3
 8002a6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d106      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2200      	movs	r2, #0
 8002a78:	2102      	movs	r1, #2
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff f938 	bl	8001cf0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2103      	movs	r1, #3
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff f91c 	bl	8001cc4 <LL_ADC_GetOffsetChannel>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10a      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x3a8>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2103      	movs	r1, #3
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff f911 	bl	8001cc4 <LL_ADC_GetOffsetChannel>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	0e9b      	lsrs	r3, r3, #26
 8002aa6:	f003 021f 	and.w	r2, r3, #31
 8002aaa:	e017      	b.n	8002adc <HAL_ADC_ConfigChannel+0x3d8>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2103      	movs	r1, #3
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff f906 	bl	8001cc4 <LL_ADC_GetOffsetChannel>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002ac4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ac6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002ac8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002ace:	2320      	movs	r3, #32
 8002ad0:	e003      	b.n	8002ada <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002ad2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ad4:	fab3 f383 	clz	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d105      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x3f0>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	0e9b      	lsrs	r3, r3, #26
 8002aee:	f003 031f 	and.w	r3, r3, #31
 8002af2:	e011      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x414>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002afc:	fa93 f3a3 	rbit	r3, r3
 8002b00:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002b02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b04:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002b06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002b0c:	2320      	movs	r3, #32
 8002b0e:	e003      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002b10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d106      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2200      	movs	r2, #0
 8002b22:	2103      	movs	r1, #3
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff f8e3 	bl	8001cf0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff fa62 	bl	8001ff8 <LL_ADC_IsEnabled>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f040 8140 	bne.w	8002dbc <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	6819      	ldr	r1, [r3, #0]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	f7ff f99f 	bl	8001e8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	4a8f      	ldr	r2, [pc, #572]	@ (8002d90 <HAL_ADC_ConfigChannel+0x68c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	f040 8131 	bne.w	8002dbc <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10b      	bne.n	8002b82 <HAL_ADC_ConfigChannel+0x47e>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	0e9b      	lsrs	r3, r3, #26
 8002b70:	3301      	adds	r3, #1
 8002b72:	f003 031f 	and.w	r3, r3, #31
 8002b76:	2b09      	cmp	r3, #9
 8002b78:	bf94      	ite	ls
 8002b7a:	2301      	movls	r3, #1
 8002b7c:	2300      	movhi	r3, #0
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	e019      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x4b2>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b8a:	fa93 f3a3 	rbit	r3, r3
 8002b8e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002b90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b92:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002b94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002b9a:	2320      	movs	r3, #32
 8002b9c:	e003      	b.n	8002ba6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002b9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ba0:	fab3 f383 	clz	r3, r3
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	f003 031f 	and.w	r3, r3, #31
 8002bac:	2b09      	cmp	r3, #9
 8002bae:	bf94      	ite	ls
 8002bb0:	2301      	movls	r3, #1
 8002bb2:	2300      	movhi	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d079      	beq.n	8002cae <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d107      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x4d2>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	0e9b      	lsrs	r3, r3, #26
 8002bcc:	3301      	adds	r3, #1
 8002bce:	069b      	lsls	r3, r3, #26
 8002bd0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bd4:	e015      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x4fe>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002be4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002be6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002be8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002bee:	2320      	movs	r3, #32
 8002bf0:	e003      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf4:	fab3 f383 	clz	r3, r3
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	069b      	lsls	r3, r3, #26
 8002bfe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d109      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x51e>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	0e9b      	lsrs	r3, r3, #26
 8002c14:	3301      	adds	r3, #1
 8002c16:	f003 031f 	and.w	r3, r3, #31
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c20:	e017      	b.n	8002c52 <HAL_ADC_ConfigChannel+0x54e>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002c30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c32:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002c34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002c3a:	2320      	movs	r3, #32
 8002c3c:	e003      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002c3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c40:	fab3 f383 	clz	r3, r3
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	3301      	adds	r3, #1
 8002c48:	f003 031f 	and.w	r3, r3, #31
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c52:	ea42 0103 	orr.w	r1, r2, r3
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10a      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x574>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	0e9b      	lsrs	r3, r3, #26
 8002c68:	3301      	adds	r3, #1
 8002c6a:	f003 021f 	and.w	r2, r3, #31
 8002c6e:	4613      	mov	r3, r2
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	4413      	add	r3, r2
 8002c74:	051b      	lsls	r3, r3, #20
 8002c76:	e018      	b.n	8002caa <HAL_ADC_ConfigChannel+0x5a6>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c80:	fa93 f3a3 	rbit	r3, r3
 8002c84:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002c90:	2320      	movs	r3, #32
 8002c92:	e003      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c96:	fab3 f383 	clz	r3, r3
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	f003 021f 	and.w	r2, r3, #31
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	4413      	add	r3, r2
 8002ca8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002caa:	430b      	orrs	r3, r1
 8002cac:	e081      	b.n	8002db2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d107      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x5c6>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	0e9b      	lsrs	r3, r3, #26
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	069b      	lsls	r3, r3, #26
 8002cc4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cc8:	e015      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x5f2>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cda:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002ce2:	2320      	movs	r3, #32
 8002ce4:	e003      	b.n	8002cee <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce8:	fab3 f383 	clz	r3, r3
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	3301      	adds	r3, #1
 8002cf0:	069b      	lsls	r3, r3, #26
 8002cf2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d109      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x612>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	0e9b      	lsrs	r3, r3, #26
 8002d08:	3301      	adds	r3, #1
 8002d0a:	f003 031f 	and.w	r3, r3, #31
 8002d0e:	2101      	movs	r1, #1
 8002d10:	fa01 f303 	lsl.w	r3, r1, r3
 8002d14:	e017      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x642>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	fa93 f3a3 	rbit	r3, r3
 8002d22:	61fb      	str	r3, [r7, #28]
  return result;
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002d2e:	2320      	movs	r3, #32
 8002d30:	e003      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d34:	fab3 f383 	clz	r3, r3
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	f003 031f 	and.w	r3, r3, #31
 8002d40:	2101      	movs	r1, #1
 8002d42:	fa01 f303 	lsl.w	r3, r1, r3
 8002d46:	ea42 0103 	orr.w	r1, r2, r3
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10d      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x66e>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	0e9b      	lsrs	r3, r3, #26
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	f003 021f 	and.w	r2, r3, #31
 8002d62:	4613      	mov	r3, r2
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	4413      	add	r3, r2
 8002d68:	3b1e      	subs	r3, #30
 8002d6a:	051b      	lsls	r3, r3, #20
 8002d6c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d70:	e01e      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x6ac>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	fa93 f3a3 	rbit	r3, r3
 8002d7e:	613b      	str	r3, [r7, #16]
  return result;
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d104      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002d8a:	2320      	movs	r3, #32
 8002d8c:	e006      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x698>
 8002d8e:	bf00      	nop
 8002d90:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	fab3 f383 	clz	r3, r3
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	f003 021f 	and.w	r2, r3, #31
 8002da2:	4613      	mov	r3, r2
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	4413      	add	r3, r2
 8002da8:	3b1e      	subs	r3, #30
 8002daa:	051b      	lsls	r3, r3, #20
 8002dac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002db0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002db6:	4619      	mov	r1, r3
 8002db8:	f7ff f83d 	bl	8001e36 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	4b3f      	ldr	r3, [pc, #252]	@ (8002ec0 <HAL_ADC_ConfigChannel+0x7bc>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d071      	beq.n	8002eac <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dc8:	483e      	ldr	r0, [pc, #248]	@ (8002ec4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002dca:	f7fe ff49 	bl	8001c60 <LL_ADC_GetCommonPathInternalCh>
 8002dce:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a3c      	ldr	r2, [pc, #240]	@ (8002ec8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d004      	beq.n	8002de6 <HAL_ADC_ConfigChannel+0x6e2>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a3a      	ldr	r2, [pc, #232]	@ (8002ecc <HAL_ADC_ConfigChannel+0x7c8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d127      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002de6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d121      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dfa:	d157      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e00:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e04:	4619      	mov	r1, r3
 8002e06:	482f      	ldr	r0, [pc, #188]	@ (8002ec4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e08:	f7fe ff17 	bl	8001c3a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e0c:	4b30      	ldr	r3, [pc, #192]	@ (8002ed0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	099b      	lsrs	r3, r3, #6
 8002e12:	4a30      	ldr	r2, [pc, #192]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x7d0>)
 8002e14:	fba2 2303 	umull	r2, r3, r2, r3
 8002e18:	099b      	lsrs	r3, r3, #6
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e26:	e002      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1f9      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e34:	e03a      	b.n	8002eac <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a27      	ldr	r2, [pc, #156]	@ (8002ed8 <HAL_ADC_ConfigChannel+0x7d4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d113      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10d      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a22      	ldr	r2, [pc, #136]	@ (8002edc <HAL_ADC_ConfigChannel+0x7d8>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d02a      	beq.n	8002eac <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4818      	ldr	r0, [pc, #96]	@ (8002ec4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e62:	f7fe feea 	bl	8001c3a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e66:	e021      	b.n	8002eac <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ee0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d11c      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d116      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a16      	ldr	r2, [pc, #88]	@ (8002edc <HAL_ADC_ConfigChannel+0x7d8>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d011      	beq.n	8002eac <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e8c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e90:	4619      	mov	r1, r3
 8002e92:	480c      	ldr	r0, [pc, #48]	@ (8002ec4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e94:	f7fe fed1 	bl	8001c3a <LL_ADC_SetCommonPathInternalCh>
 8002e98:	e008      	b.n	8002eac <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e9e:	f043 0220 	orr.w	r2, r3, #32
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002eb4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	37d8      	adds	r7, #216	@ 0xd8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	80080000 	.word	0x80080000
 8002ec4:	50000300 	.word	0x50000300
 8002ec8:	c3210000 	.word	0xc3210000
 8002ecc:	90c00010 	.word	0x90c00010
 8002ed0:	20000008 	.word	0x20000008
 8002ed4:	053e2d63 	.word	0x053e2d63
 8002ed8:	c7520000 	.word	0xc7520000
 8002edc:	50000100 	.word	0x50000100
 8002ee0:	cb840000 	.word	0xcb840000

08002ee4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff f87f 	bl	8001ff8 <LL_ADC_IsEnabled>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d169      	bne.n	8002fd4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	4b36      	ldr	r3, [pc, #216]	@ (8002fe0 <ADC_Enable+0xfc>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00d      	beq.n	8002f2a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f12:	f043 0210 	orr.w	r2, r3, #16
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f1e:	f043 0201 	orr.w	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e055      	b.n	8002fd6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff f83a 	bl	8001fa8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f34:	482b      	ldr	r0, [pc, #172]	@ (8002fe4 <ADC_Enable+0x100>)
 8002f36:	f7fe fe93 	bl	8001c60 <LL_ADC_GetCommonPathInternalCh>
 8002f3a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d013      	beq.n	8002f6c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f44:	4b28      	ldr	r3, [pc, #160]	@ (8002fe8 <ADC_Enable+0x104>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	099b      	lsrs	r3, r3, #6
 8002f4a:	4a28      	ldr	r2, [pc, #160]	@ (8002fec <ADC_Enable+0x108>)
 8002f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f50:	099b      	lsrs	r3, r3, #6
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	4613      	mov	r3, r2
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	4413      	add	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f5e:	e002      	b.n	8002f66 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1f9      	bne.n	8002f60 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f6c:	f7fe fe24 	bl	8001bb8 <HAL_GetTick>
 8002f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f72:	e028      	b.n	8002fc6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff f83d 	bl	8001ff8 <LL_ADC_IsEnabled>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d104      	bne.n	8002f8e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff f80d 	bl	8001fa8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f8e:	f7fe fe13 	bl	8001bb8 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d914      	bls.n	8002fc6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d00d      	beq.n	8002fc6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fae:	f043 0210 	orr.w	r2, r3, #16
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fba:	f043 0201 	orr.w	r2, r3, #1
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e007      	b.n	8002fd6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d1cf      	bne.n	8002f74 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	8000003f 	.word	0x8000003f
 8002fe4:	50000300 	.word	0x50000300
 8002fe8:	20000008 	.word	0x20000008
 8002fec:	053e2d63 	.word	0x053e2d63

08002ff0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff f80e 	bl	800201e <LL_ADC_IsDisableOngoing>
 8003002:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f7fe fff5 	bl	8001ff8 <LL_ADC_IsEnabled>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d047      	beq.n	80030a4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d144      	bne.n	80030a4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 030d 	and.w	r3, r3, #13
 8003024:	2b01      	cmp	r3, #1
 8003026:	d10c      	bne.n	8003042 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f7fe ffcf 	bl	8001fd0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2203      	movs	r2, #3
 8003038:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800303a:	f7fe fdbd 	bl	8001bb8 <HAL_GetTick>
 800303e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003040:	e029      	b.n	8003096 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003046:	f043 0210 	orr.w	r2, r3, #16
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003052:	f043 0201 	orr.w	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e023      	b.n	80030a6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800305e:	f7fe fdab 	bl	8001bb8 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d914      	bls.n	8003096 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00d      	beq.n	8003096 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800307e:	f043 0210 	orr.w	r2, r3, #16
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800308a:	f043 0201 	orr.w	r2, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e007      	b.n	80030a6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1dc      	bne.n	800305e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <LL_ADC_IsEnabled>:
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <LL_ADC_IsEnabled+0x18>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <LL_ADC_IsEnabled+0x1a>
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <LL_ADC_StartCalibration>:
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80030e6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	609a      	str	r2, [r3, #8]
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <LL_ADC_IsCalibrationOnGoing>:
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003116:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800311a:	d101      	bne.n	8003120 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800311c:	2301      	movs	r3, #1
 800311e:	e000      	b.n	8003122 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <LL_ADC_REG_IsConversionOngoing>:
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b04      	cmp	r3, #4
 8003140:	d101      	bne.n	8003146 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800315e:	2300      	movs	r3, #0
 8003160:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_ADCEx_Calibration_Start+0x1c>
 800316c:	2302      	movs	r3, #2
 800316e:	e04d      	b.n	800320c <HAL_ADCEx_Calibration_Start+0xb8>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7ff ff39 	bl	8002ff0 <ADC_Disable>
 800317e:	4603      	mov	r3, r0
 8003180:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003182:	7bfb      	ldrb	r3, [r7, #15]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d136      	bne.n	80031f6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003190:	f023 0302 	bic.w	r3, r3, #2
 8003194:	f043 0202 	orr.w	r2, r3, #2
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6839      	ldr	r1, [r7, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff ff96 	bl	80030d4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80031a8:	e014      	b.n	80031d4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	3301      	adds	r3, #1
 80031ae:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4a18      	ldr	r2, [pc, #96]	@ (8003214 <HAL_ADCEx_Calibration_Start+0xc0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d90d      	bls.n	80031d4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031bc:	f023 0312 	bic.w	r3, r3, #18
 80031c0:	f043 0210 	orr.w	r2, r3, #16
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e01b      	b.n	800320c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff ff94 	bl	8003106 <LL_ADC_IsCalibrationOnGoing>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1e2      	bne.n	80031aa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e8:	f023 0303 	bic.w	r3, r3, #3
 80031ec:	f043 0201 	orr.w	r2, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80031f4:	e005      	b.n	8003202 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031fa:	f043 0210 	orr.w	r2, r3, #16
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800320a:	7bfb      	ldrb	r3, [r7, #15]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	0004de01 	.word	0x0004de01

08003218 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003218:	b590      	push	{r4, r7, lr}
 800321a:	b0a1      	sub	sp, #132	@ 0x84
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003232:	2302      	movs	r3, #2
 8003234:	e08b      	b.n	800334e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800323e:	2300      	movs	r3, #0
 8003240:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003242:	2300      	movs	r3, #0
 8003244:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800324e:	d102      	bne.n	8003256 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003250:	4b41      	ldr	r3, [pc, #260]	@ (8003358 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003252:	60bb      	str	r3, [r7, #8]
 8003254:	e001      	b.n	800325a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003256:	2300      	movs	r3, #0
 8003258:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10b      	bne.n	8003278 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003264:	f043 0220 	orr.w	r2, r3, #32
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e06a      	b.n	800334e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff ff57 	bl	800312e <LL_ADC_REG_IsConversionOngoing>
 8003280:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff ff51 	bl	800312e <LL_ADC_REG_IsConversionOngoing>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d14c      	bne.n	800332c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003292:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003294:	2b00      	cmp	r3, #0
 8003296:	d149      	bne.n	800332c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003298:	4b30      	ldr	r3, [pc, #192]	@ (800335c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800329a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d028      	beq.n	80032f6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80032a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	6859      	ldr	r1, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80032b6:	035b      	lsls	r3, r3, #13
 80032b8:	430b      	orrs	r3, r1
 80032ba:	431a      	orrs	r2, r3
 80032bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032be:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032c0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80032c4:	f7ff fef3 	bl	80030ae <LL_ADC_IsEnabled>
 80032c8:	4604      	mov	r4, r0
 80032ca:	4823      	ldr	r0, [pc, #140]	@ (8003358 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80032cc:	f7ff feef 	bl	80030ae <LL_ADC_IsEnabled>
 80032d0:	4603      	mov	r3, r0
 80032d2:	4323      	orrs	r3, r4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d133      	bne.n	8003340 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80032d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80032e0:	f023 030f 	bic.w	r3, r3, #15
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	6811      	ldr	r1, [r2, #0]
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	6892      	ldr	r2, [r2, #8]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	431a      	orrs	r2, r3
 80032f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032f2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032f4:	e024      	b.n	8003340 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80032f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003300:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003302:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003306:	f7ff fed2 	bl	80030ae <LL_ADC_IsEnabled>
 800330a:	4604      	mov	r4, r0
 800330c:	4812      	ldr	r0, [pc, #72]	@ (8003358 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800330e:	f7ff fece 	bl	80030ae <LL_ADC_IsEnabled>
 8003312:	4603      	mov	r3, r0
 8003314:	4323      	orrs	r3, r4
 8003316:	2b00      	cmp	r3, #0
 8003318:	d112      	bne.n	8003340 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800331a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003322:	f023 030f 	bic.w	r3, r3, #15
 8003326:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003328:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800332a:	e009      	b.n	8003340 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003330:	f043 0220 	orr.w	r2, r3, #32
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800333e:	e000      	b.n	8003342 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003340:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800334a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800334e:	4618      	mov	r0, r3
 8003350:	3784      	adds	r7, #132	@ 0x84
 8003352:	46bd      	mov	sp, r7
 8003354:	bd90      	pop	{r4, r7, pc}
 8003356:	bf00      	nop
 8003358:	50000100 	.word	0x50000100
 800335c:	50000300 	.word	0x50000300

08003360 <__NVIC_SetPriorityGrouping>:
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003370:	4b0c      	ldr	r3, [pc, #48]	@ (80033a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800337c:	4013      	ands	r3, r2
 800337e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003388:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800338c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003392:	4a04      	ldr	r2, [pc, #16]	@ (80033a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	60d3      	str	r3, [r2, #12]
}
 8003398:	bf00      	nop
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <__NVIC_GetPriorityGrouping>:
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033ac:	4b04      	ldr	r3, [pc, #16]	@ (80033c0 <__NVIC_GetPriorityGrouping+0x18>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	0a1b      	lsrs	r3, r3, #8
 80033b2:	f003 0307 	and.w	r3, r3, #7
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <__NVIC_SetPriority>:
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	6039      	str	r1, [r7, #0]
 80033ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	db0a      	blt.n	80033ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	490c      	ldr	r1, [pc, #48]	@ (8003410 <__NVIC_SetPriority+0x4c>)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	0112      	lsls	r2, r2, #4
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	440b      	add	r3, r1
 80033e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80033ec:	e00a      	b.n	8003404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	4908      	ldr	r1, [pc, #32]	@ (8003414 <__NVIC_SetPriority+0x50>)
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	3b04      	subs	r3, #4
 80033fc:	0112      	lsls	r2, r2, #4
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	440b      	add	r3, r1
 8003402:	761a      	strb	r2, [r3, #24]
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000e100 	.word	0xe000e100
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <NVIC_EncodePriority>:
{
 8003418:	b480      	push	{r7}
 800341a:	b089      	sub	sp, #36	@ 0x24
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f1c3 0307 	rsb	r3, r3, #7
 8003432:	2b04      	cmp	r3, #4
 8003434:	bf28      	it	cs
 8003436:	2304      	movcs	r3, #4
 8003438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	3304      	adds	r3, #4
 800343e:	2b06      	cmp	r3, #6
 8003440:	d902      	bls.n	8003448 <NVIC_EncodePriority+0x30>
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3b03      	subs	r3, #3
 8003446:	e000      	b.n	800344a <NVIC_EncodePriority+0x32>
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800344c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43da      	mvns	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	401a      	ands	r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003460:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	fa01 f303 	lsl.w	r3, r1, r3
 800346a:	43d9      	mvns	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003470:	4313      	orrs	r3, r2
}
 8003472:	4618      	mov	r0, r3
 8003474:	3724      	adds	r7, #36	@ 0x24
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <SysTick_Config>:
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3b01      	subs	r3, #1
 800348c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003490:	d301      	bcc.n	8003496 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003492:	2301      	movs	r3, #1
 8003494:	e00f      	b.n	80034b6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003496:	4a0a      	ldr	r2, [pc, #40]	@ (80034c0 <SysTick_Config+0x40>)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3b01      	subs	r3, #1
 800349c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800349e:	210f      	movs	r1, #15
 80034a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80034a4:	f7ff ff8e 	bl	80033c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034a8:	4b05      	ldr	r3, [pc, #20]	@ (80034c0 <SysTick_Config+0x40>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ae:	4b04      	ldr	r3, [pc, #16]	@ (80034c0 <SysTick_Config+0x40>)
 80034b0:	2207      	movs	r2, #7
 80034b2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	e000e010 	.word	0xe000e010

080034c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff ff47 	bl	8003360 <__NVIC_SetPriorityGrouping>
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b086      	sub	sp, #24
 80034de:	af00      	add	r7, sp, #0
 80034e0:	4603      	mov	r3, r0
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	607a      	str	r2, [r7, #4]
 80034e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034e8:	f7ff ff5e 	bl	80033a8 <__NVIC_GetPriorityGrouping>
 80034ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	6978      	ldr	r0, [r7, #20]
 80034f4:	f7ff ff90 	bl	8003418 <NVIC_EncodePriority>
 80034f8:	4602      	mov	r2, r0
 80034fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034fe:	4611      	mov	r1, r2
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff ff5f 	bl	80033c4 <__NVIC_SetPriority>
}
 8003506:	bf00      	nop
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b082      	sub	sp, #8
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff ffb2 	bl	8003480 <SysTick_Config>
 800351c:	4603      	mov	r3, r0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003536:	e15a      	b.n	80037ee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	2101      	movs	r1, #1
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	fa01 f303 	lsl.w	r3, r1, r3
 8003544:	4013      	ands	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 814c 	beq.w	80037e8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	2b01      	cmp	r3, #1
 800355a:	d005      	beq.n	8003568 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003564:	2b02      	cmp	r3, #2
 8003566:	d130      	bne.n	80035ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	2203      	movs	r2, #3
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4013      	ands	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	68da      	ldr	r2, [r3, #12]
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800359e:	2201      	movs	r2, #1
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43db      	mvns	r3, r3
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4013      	ands	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	091b      	lsrs	r3, r3, #4
 80035b4:	f003 0201 	and.w	r2, r3, #1
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d017      	beq.n	8003606 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	2203      	movs	r2, #3
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	43db      	mvns	r3, r3
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	4013      	ands	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d123      	bne.n	800365a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	08da      	lsrs	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3208      	adds	r2, #8
 800361a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800361e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	220f      	movs	r2, #15
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43db      	mvns	r3, r3
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4013      	ands	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	691a      	ldr	r2, [r3, #16]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	08da      	lsrs	r2, r3, #3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3208      	adds	r2, #8
 8003654:	6939      	ldr	r1, [r7, #16]
 8003656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	2203      	movs	r2, #3
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	43db      	mvns	r3, r3
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4013      	ands	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f003 0203 	and.w	r2, r3, #3
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 80a6 	beq.w	80037e8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800369c:	4b5b      	ldr	r3, [pc, #364]	@ (800380c <HAL_GPIO_Init+0x2e4>)
 800369e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a0:	4a5a      	ldr	r2, [pc, #360]	@ (800380c <HAL_GPIO_Init+0x2e4>)
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80036a8:	4b58      	ldr	r3, [pc, #352]	@ (800380c <HAL_GPIO_Init+0x2e4>)
 80036aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036b4:	4a56      	ldr	r2, [pc, #344]	@ (8003810 <HAL_GPIO_Init+0x2e8>)
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	089b      	lsrs	r3, r3, #2
 80036ba:	3302      	adds	r3, #2
 80036bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f003 0303 	and.w	r3, r3, #3
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	220f      	movs	r2, #15
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	43db      	mvns	r3, r3
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4013      	ands	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80036de:	d01f      	beq.n	8003720 <HAL_GPIO_Init+0x1f8>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a4c      	ldr	r2, [pc, #304]	@ (8003814 <HAL_GPIO_Init+0x2ec>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d019      	beq.n	800371c <HAL_GPIO_Init+0x1f4>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a4b      	ldr	r2, [pc, #300]	@ (8003818 <HAL_GPIO_Init+0x2f0>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d013      	beq.n	8003718 <HAL_GPIO_Init+0x1f0>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a4a      	ldr	r2, [pc, #296]	@ (800381c <HAL_GPIO_Init+0x2f4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d00d      	beq.n	8003714 <HAL_GPIO_Init+0x1ec>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a49      	ldr	r2, [pc, #292]	@ (8003820 <HAL_GPIO_Init+0x2f8>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d007      	beq.n	8003710 <HAL_GPIO_Init+0x1e8>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a48      	ldr	r2, [pc, #288]	@ (8003824 <HAL_GPIO_Init+0x2fc>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d101      	bne.n	800370c <HAL_GPIO_Init+0x1e4>
 8003708:	2305      	movs	r3, #5
 800370a:	e00a      	b.n	8003722 <HAL_GPIO_Init+0x1fa>
 800370c:	2306      	movs	r3, #6
 800370e:	e008      	b.n	8003722 <HAL_GPIO_Init+0x1fa>
 8003710:	2304      	movs	r3, #4
 8003712:	e006      	b.n	8003722 <HAL_GPIO_Init+0x1fa>
 8003714:	2303      	movs	r3, #3
 8003716:	e004      	b.n	8003722 <HAL_GPIO_Init+0x1fa>
 8003718:	2302      	movs	r3, #2
 800371a:	e002      	b.n	8003722 <HAL_GPIO_Init+0x1fa>
 800371c:	2301      	movs	r3, #1
 800371e:	e000      	b.n	8003722 <HAL_GPIO_Init+0x1fa>
 8003720:	2300      	movs	r3, #0
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	f002 0203 	and.w	r2, r2, #3
 8003728:	0092      	lsls	r2, r2, #2
 800372a:	4093      	lsls	r3, r2
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4313      	orrs	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003732:	4937      	ldr	r1, [pc, #220]	@ (8003810 <HAL_GPIO_Init+0x2e8>)
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	089b      	lsrs	r3, r3, #2
 8003738:	3302      	adds	r3, #2
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003740:	4b39      	ldr	r3, [pc, #228]	@ (8003828 <HAL_GPIO_Init+0x300>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	43db      	mvns	r3, r3
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4013      	ands	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4313      	orrs	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003764:	4a30      	ldr	r2, [pc, #192]	@ (8003828 <HAL_GPIO_Init+0x300>)
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800376a:	4b2f      	ldr	r3, [pc, #188]	@ (8003828 <HAL_GPIO_Init+0x300>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	43db      	mvns	r3, r3
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4013      	ands	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800378e:	4a26      	ldr	r2, [pc, #152]	@ (8003828 <HAL_GPIO_Init+0x300>)
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003794:	4b24      	ldr	r3, [pc, #144]	@ (8003828 <HAL_GPIO_Init+0x300>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	43db      	mvns	r3, r3
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	4013      	ands	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003828 <HAL_GPIO_Init+0x300>)
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80037be:	4b1a      	ldr	r3, [pc, #104]	@ (8003828 <HAL_GPIO_Init+0x300>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	43db      	mvns	r3, r3
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4013      	ands	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4313      	orrs	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037e2:	4a11      	ldr	r2, [pc, #68]	@ (8003828 <HAL_GPIO_Init+0x300>)
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	3301      	adds	r3, #1
 80037ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	fa22 f303 	lsr.w	r3, r2, r3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f47f ae9d 	bne.w	8003538 <HAL_GPIO_Init+0x10>
  }
}
 80037fe:	bf00      	nop
 8003800:	bf00      	nop
 8003802:	371c      	adds	r7, #28
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	40021000 	.word	0x40021000
 8003810:	40010000 	.word	0x40010000
 8003814:	48000400 	.word	0x48000400
 8003818:	48000800 	.word	0x48000800
 800381c:	48000c00 	.word	0x48000c00
 8003820:	48001000 	.word	0x48001000
 8003824:	48001400 	.word	0x48001400
 8003828:	40010400 	.word	0x40010400

0800382c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	807b      	strh	r3, [r7, #2]
 8003838:	4613      	mov	r3, r2
 800383a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800383c:	787b      	ldrb	r3, [r7, #1]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003842:	887a      	ldrh	r2, [r7, #2]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003848:	e002      	b.n	8003850 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800384a:	887a      	ldrh	r2, [r7, #2]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800386e:	887a      	ldrh	r2, [r7, #2]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4013      	ands	r3, r2
 8003874:	041a      	lsls	r2, r3, #16
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	43d9      	mvns	r1, r3
 800387a:	887b      	ldrh	r3, [r7, #2]
 800387c:	400b      	ands	r3, r1
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	619a      	str	r2, [r3, #24]
}
 8003884:	bf00      	nop
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e08d      	b.n	80039be <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fd ff6e 	bl	8001798 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2224      	movs	r2, #36	@ 0x24
 80038c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0201 	bic.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80038e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d107      	bne.n	800390a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003906:	609a      	str	r2, [r3, #8]
 8003908:	e006      	b.n	8003918 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003916:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	2b02      	cmp	r3, #2
 800391e:	d108      	bne.n	8003932 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800392e:	605a      	str	r2, [r3, #4]
 8003930:	e007      	b.n	8003942 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003940:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003950:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003954:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003964:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691a      	ldr	r2, [r3, #16]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69d9      	ldr	r1, [r3, #28]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a1a      	ldr	r2, [r3, #32]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0201 	orr.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2220      	movs	r2, #32
 80039aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af02      	add	r7, sp, #8
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	607a      	str	r2, [r7, #4]
 80039d2:	461a      	mov	r2, r3
 80039d4:	460b      	mov	r3, r1
 80039d6:	817b      	strh	r3, [r7, #10]
 80039d8:	4613      	mov	r3, r2
 80039da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	f040 80fd 	bne.w	8003be4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_I2C_Master_Transmit+0x30>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e0f6      	b.n	8003be6 <HAL_I2C_Master_Transmit+0x21e>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a00:	f7fe f8da 	bl	8001bb8 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	2319      	movs	r3, #25
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 faf6 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e0e1      	b.n	8003be6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2221      	movs	r2, #33	@ 0x21
 8003a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2210      	movs	r2, #16
 8003a2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	893a      	ldrh	r2, [r7, #8]
 8003a42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	2bff      	cmp	r3, #255	@ 0xff
 8003a52:	d906      	bls.n	8003a62 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	22ff      	movs	r2, #255	@ 0xff
 8003a58:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003a5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	e007      	b.n	8003a72 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003a6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a70:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d024      	beq.n	8003ac4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7e:	781a      	ldrb	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	8979      	ldrh	r1, [r7, #10]
 8003ab6:	4b4e      	ldr	r3, [pc, #312]	@ (8003bf0 <HAL_I2C_Master_Transmit+0x228>)
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 fcf1 	bl	80044a4 <I2C_TransferConfig>
 8003ac2:	e066      	b.n	8003b92 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	8979      	ldrh	r1, [r7, #10]
 8003acc:	4b48      	ldr	r3, [pc, #288]	@ (8003bf0 <HAL_I2C_Master_Transmit+0x228>)
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 fce6 	bl	80044a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003ad8:	e05b      	b.n	8003b92 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	6a39      	ldr	r1, [r7, #32]
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 fae9 	bl	80040b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e07b      	b.n	8003be6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af2:	781a      	ldrb	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d034      	beq.n	8003b92 <HAL_I2C_Master_Transmit+0x1ca>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d130      	bne.n	8003b92 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	2200      	movs	r2, #0
 8003b38:	2180      	movs	r1, #128	@ 0x80
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 fa62 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e04d      	b.n	8003be6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	2bff      	cmp	r3, #255	@ 0xff
 8003b52:	d90e      	bls.n	8003b72 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	22ff      	movs	r2, #255	@ 0xff
 8003b58:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	8979      	ldrh	r1, [r7, #10]
 8003b62:	2300      	movs	r3, #0
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 fc9a 	bl	80044a4 <I2C_TransferConfig>
 8003b70:	e00f      	b.n	8003b92 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	8979      	ldrh	r1, [r7, #10]
 8003b84:	2300      	movs	r3, #0
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 fc89 	bl	80044a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d19e      	bne.n	8003ada <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	6a39      	ldr	r1, [r7, #32]
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 facf 	bl	8004144 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e01a      	b.n	8003be6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6859      	ldr	r1, [r3, #4]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf4 <HAL_I2C_Master_Transmit+0x22c>)
 8003bc4:	400b      	ands	r3, r1
 8003bc6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	e000      	b.n	8003be6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003be4:	2302      	movs	r3, #2
  }
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	80002000 	.word	0x80002000
 8003bf4:	fe00e800 	.word	0xfe00e800

08003bf8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	607a      	str	r2, [r7, #4]
 8003c02:	461a      	mov	r2, r3
 8003c04:	460b      	mov	r3, r1
 8003c06:	817b      	strh	r3, [r7, #10]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b20      	cmp	r3, #32
 8003c16:	f040 80db 	bne.w	8003dd0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_I2C_Master_Receive+0x30>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e0d4      	b.n	8003dd2 <HAL_I2C_Master_Receive+0x1da>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c30:	f7fd ffc2 	bl	8001bb8 <HAL_GetTick>
 8003c34:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	2319      	movs	r3, #25
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 f9de 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e0bf      	b.n	8003dd2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2222      	movs	r2, #34	@ 0x22
 8003c56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2210      	movs	r2, #16
 8003c5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	893a      	ldrh	r2, [r7, #8]
 8003c72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	2bff      	cmp	r3, #255	@ 0xff
 8003c82:	d90e      	bls.n	8003ca2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	22ff      	movs	r2, #255	@ 0xff
 8003c88:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	8979      	ldrh	r1, [r7, #10]
 8003c92:	4b52      	ldr	r3, [pc, #328]	@ (8003ddc <HAL_I2C_Master_Receive+0x1e4>)
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 fc02 	bl	80044a4 <I2C_TransferConfig>
 8003ca0:	e06d      	b.n	8003d7e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	8979      	ldrh	r1, [r7, #10]
 8003cb4:	4b49      	ldr	r3, [pc, #292]	@ (8003ddc <HAL_I2C_Master_Receive+0x1e4>)
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 fbf1 	bl	80044a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003cc2:	e05c      	b.n	8003d7e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	6a39      	ldr	r1, [r7, #32]
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 fa7f 	bl	80041cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e07c      	b.n	8003dd2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce2:	b2d2      	uxtb	r2, r2
 8003ce4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d034      	beq.n	8003d7e <HAL_I2C_Master_Receive+0x186>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d130      	bne.n	8003d7e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	2200      	movs	r2, #0
 8003d24:	2180      	movs	r1, #128	@ 0x80
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 f96c 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e04d      	b.n	8003dd2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	2bff      	cmp	r3, #255	@ 0xff
 8003d3e:	d90e      	bls.n	8003d5e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	22ff      	movs	r2, #255	@ 0xff
 8003d44:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	8979      	ldrh	r1, [r7, #10]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 fba4 	bl	80044a4 <I2C_TransferConfig>
 8003d5c:	e00f      	b.n	8003d7e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	8979      	ldrh	r1, [r7, #10]
 8003d70:	2300      	movs	r3, #0
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 fb93 	bl	80044a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d19d      	bne.n	8003cc4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	6a39      	ldr	r1, [r7, #32]
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 f9d9 	bl	8004144 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e01a      	b.n	8003dd2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2220      	movs	r2, #32
 8003da2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6859      	ldr	r1, [r3, #4]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	4b0c      	ldr	r3, [pc, #48]	@ (8003de0 <HAL_I2C_Master_Receive+0x1e8>)
 8003db0:	400b      	ands	r3, r1
 8003db2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	e000      	b.n	8003dd2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003dd0:	2302      	movs	r3, #2
  }
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	80002400 	.word	0x80002400
 8003de0:	fe00e800 	.word	0xfe00e800

08003de4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08a      	sub	sp, #40	@ 0x28
 8003de8:	af02      	add	r7, sp, #8
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	607a      	str	r2, [r7, #4]
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	460b      	mov	r3, r1
 8003df2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003df4:	2300      	movs	r3, #0
 8003df6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	f040 80d6 	bne.w	8003fb2 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e14:	d101      	bne.n	8003e1a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003e16:	2302      	movs	r3, #2
 8003e18:	e0cc      	b.n	8003fb4 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d101      	bne.n	8003e28 <HAL_I2C_IsDeviceReady+0x44>
 8003e24:	2302      	movs	r3, #2
 8003e26:	e0c5      	b.n	8003fb4 <HAL_I2C_IsDeviceReady+0x1d0>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2224      	movs	r2, #36	@ 0x24
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d107      	bne.n	8003e56 <HAL_I2C_IsDeviceReady+0x72>
 8003e46:	897b      	ldrh	r3, [r7, #10]
 8003e48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e50:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e54:	e006      	b.n	8003e64 <HAL_I2C_IsDeviceReady+0x80>
 8003e56:	897b      	ldrh	r3, [r7, #10]
 8003e58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e60:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	6812      	ldr	r2, [r2, #0]
 8003e68:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003e6a:	f7fd fea5 	bl	8001bb8 <HAL_GetTick>
 8003e6e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b20      	cmp	r3, #32
 8003e7c:	bf0c      	ite	eq
 8003e7e:	2301      	moveq	r3, #1
 8003e80:	2300      	movne	r3, #0
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	f003 0310 	and.w	r3, r3, #16
 8003e90:	2b10      	cmp	r3, #16
 8003e92:	bf0c      	ite	eq
 8003e94:	2301      	moveq	r3, #1
 8003e96:	2300      	movne	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003e9c:	e034      	b.n	8003f08 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ea4:	d01a      	beq.n	8003edc <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ea6:	f7fd fe87 	bl	8001bb8 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d302      	bcc.n	8003ebc <HAL_I2C_IsDeviceReady+0xd8>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10f      	bne.n	8003edc <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec8:	f043 0220 	orr.w	r2, r3, #32
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e06b      	b.n	8003fb4 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	2b20      	cmp	r3, #32
 8003ee8:	bf0c      	ite	eq
 8003eea:	2301      	moveq	r3, #1
 8003eec:	2300      	movne	r3, #0
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	f003 0310 	and.w	r3, r3, #16
 8003efc:	2b10      	cmp	r3, #16
 8003efe:	bf0c      	ite	eq
 8003f00:	2301      	moveq	r3, #1
 8003f02:	2300      	movne	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003f08:	7ffb      	ldrb	r3, [r7, #31]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d102      	bne.n	8003f14 <HAL_I2C_IsDeviceReady+0x130>
 8003f0e:	7fbb      	ldrb	r3, [r7, #30]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0c4      	beq.n	8003e9e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	f003 0310 	and.w	r3, r3, #16
 8003f1e:	2b10      	cmp	r3, #16
 8003f20:	d01a      	beq.n	8003f58 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	2120      	movs	r1, #32
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 f869 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e03b      	b.n	8003fb4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2220      	movs	r2, #32
 8003f42:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	e02d      	b.n	8003fb4 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	2120      	movs	r1, #32
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 f84e 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e020      	b.n	8003fb4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2210      	movs	r2, #16
 8003f78:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	3301      	adds	r3, #1
 8003f86:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	f63f af56 	bhi.w	8003e3e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2220      	movs	r2, #32
 8003f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9e:	f043 0220 	orr.w	r2, r3, #32
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8003fb2:	2302      	movs	r3, #2
  }
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3720      	adds	r7, #32
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d103      	bne.n	8003fda <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d007      	beq.n	8003ff8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699a      	ldr	r2, [r3, #24]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0201 	orr.w	r2, r2, #1
 8003ff6:	619a      	str	r2, [r3, #24]
  }
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	4613      	mov	r3, r2
 8004012:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004014:	e03b      	b.n	800408e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	6839      	ldr	r1, [r7, #0]
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 f962 	bl	80042e4 <I2C_IsErrorOccurred>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e041      	b.n	80040ae <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004030:	d02d      	beq.n	800408e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004032:	f7fd fdc1 	bl	8001bb8 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d302      	bcc.n	8004048 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d122      	bne.n	800408e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699a      	ldr	r2, [r3, #24]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	4013      	ands	r3, r2
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	429a      	cmp	r2, r3
 8004056:	bf0c      	ite	eq
 8004058:	2301      	moveq	r3, #1
 800405a:	2300      	movne	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	461a      	mov	r2, r3
 8004060:	79fb      	ldrb	r3, [r7, #7]
 8004062:	429a      	cmp	r2, r3
 8004064:	d113      	bne.n	800408e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800406a:	f043 0220 	orr.w	r2, r3, #32
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e00f      	b.n	80040ae <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	699a      	ldr	r2, [r3, #24]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4013      	ands	r3, r2
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	429a      	cmp	r2, r3
 800409c:	bf0c      	ite	eq
 800409e:	2301      	moveq	r3, #1
 80040a0:	2300      	movne	r3, #0
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	461a      	mov	r2, r3
 80040a6:	79fb      	ldrb	r3, [r7, #7]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d0b4      	beq.n	8004016 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b084      	sub	sp, #16
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	60f8      	str	r0, [r7, #12]
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040c2:	e033      	b.n	800412c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	68b9      	ldr	r1, [r7, #8]
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 f90b 	bl	80042e4 <I2C_IsErrorOccurred>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e031      	b.n	800413c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80040de:	d025      	beq.n	800412c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e0:	f7fd fd6a 	bl	8001bb8 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d302      	bcc.n	80040f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d11a      	bne.n	800412c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b02      	cmp	r3, #2
 8004102:	d013      	beq.n	800412c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004108:	f043 0220 	orr.w	r2, r3, #32
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2220      	movs	r2, #32
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e007      	b.n	800413c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b02      	cmp	r3, #2
 8004138:	d1c4      	bne.n	80040c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004150:	e02f      	b.n	80041b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	68b9      	ldr	r1, [r7, #8]
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 f8c4 	bl	80042e4 <I2C_IsErrorOccurred>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e02d      	b.n	80041c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004166:	f7fd fd27 	bl	8001bb8 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	429a      	cmp	r2, r3
 8004174:	d302      	bcc.n	800417c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d11a      	bne.n	80041b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	f003 0320 	and.w	r3, r3, #32
 8004186:	2b20      	cmp	r3, #32
 8004188:	d013      	beq.n	80041b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418e:	f043 0220 	orr.w	r2, r3, #32
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2220      	movs	r2, #32
 800419a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e007      	b.n	80041c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	f003 0320 	and.w	r3, r3, #32
 80041bc:	2b20      	cmp	r3, #32
 80041be:	d1c8      	bne.n	8004152 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
	...

080041cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041d8:	2300      	movs	r3, #0
 80041da:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80041dc:	e071      	b.n	80042c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	68b9      	ldr	r1, [r7, #8]
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 f87e 	bl	80042e4 <I2C_IsErrorOccurred>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	f003 0320 	and.w	r3, r3, #32
 80041fc:	2b20      	cmp	r3, #32
 80041fe:	d13b      	bne.n	8004278 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8004200:	7dfb      	ldrb	r3, [r7, #23]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d138      	bne.n	8004278 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b04      	cmp	r3, #4
 8004212:	d105      	bne.n	8004220 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800421c:	2300      	movs	r3, #0
 800421e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	f003 0310 	and.w	r3, r3, #16
 800422a:	2b10      	cmp	r3, #16
 800422c:	d121      	bne.n	8004272 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2210      	movs	r2, #16
 8004234:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2204      	movs	r2, #4
 800423a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2220      	movs	r2, #32
 8004242:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6859      	ldr	r1, [r3, #4]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	4b24      	ldr	r3, [pc, #144]	@ (80042e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8004250:	400b      	ands	r3, r1
 8004252:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	75fb      	strb	r3, [r7, #23]
 8004270:	e002      	b.n	8004278 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004278:	f7fd fc9e 	bl	8001bb8 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	429a      	cmp	r2, r3
 8004286:	d302      	bcc.n	800428e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d119      	bne.n	80042c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800428e:	7dfb      	ldrb	r3, [r7, #23]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d116      	bne.n	80042c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	f003 0304 	and.w	r3, r3, #4
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d00f      	beq.n	80042c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a6:	f043 0220 	orr.w	r2, r3, #32
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d002      	beq.n	80042d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80042d0:	7dfb      	ldrb	r3, [r7, #23]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d083      	beq.n	80041de <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80042d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	fe00e800 	.word	0xfe00e800

080042e4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08a      	sub	sp, #40	@ 0x28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	f003 0310 	and.w	r3, r3, #16
 800430c:	2b00      	cmp	r3, #0
 800430e:	d068      	beq.n	80043e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2210      	movs	r2, #16
 8004316:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004318:	e049      	b.n	80043ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004320:	d045      	beq.n	80043ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004322:	f7fd fc49 	bl	8001bb8 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	429a      	cmp	r2, r3
 8004330:	d302      	bcc.n	8004338 <I2C_IsErrorOccurred+0x54>
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d13a      	bne.n	80043ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004342:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800434a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004356:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800435a:	d121      	bne.n	80043a0 <I2C_IsErrorOccurred+0xbc>
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004362:	d01d      	beq.n	80043a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004364:	7cfb      	ldrb	r3, [r7, #19]
 8004366:	2b20      	cmp	r3, #32
 8004368:	d01a      	beq.n	80043a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004378:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800437a:	f7fd fc1d 	bl	8001bb8 <HAL_GetTick>
 800437e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004380:	e00e      	b.n	80043a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004382:	f7fd fc19 	bl	8001bb8 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b19      	cmp	r3, #25
 800438e:	d907      	bls.n	80043a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	f043 0320 	orr.w	r3, r3, #32
 8004396:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800439e:	e006      	b.n	80043ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	f003 0320 	and.w	r3, r3, #32
 80043aa:	2b20      	cmp	r3, #32
 80043ac:	d1e9      	bne.n	8004382 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	2b20      	cmp	r3, #32
 80043ba:	d003      	beq.n	80043c4 <I2C_IsErrorOccurred+0xe0>
 80043bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0aa      	beq.n	800431a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80043c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d103      	bne.n	80043d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2220      	movs	r2, #32
 80043d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	f043 0304 	orr.w	r3, r3, #4
 80043da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00b      	beq.n	800440c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004404:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00b      	beq.n	800442e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	f043 0308 	orr.w	r3, r3, #8
 800441c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004426:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00b      	beq.n	8004450 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	f043 0302 	orr.w	r3, r3, #2
 800443e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004448:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004450:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004454:	2b00      	cmp	r3, #0
 8004456:	d01c      	beq.n	8004492 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f7ff fdaf 	bl	8003fbc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6859      	ldr	r1, [r3, #4]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	4b0d      	ldr	r3, [pc, #52]	@ (80044a0 <I2C_IsErrorOccurred+0x1bc>)
 800446a:	400b      	ands	r3, r1
 800446c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	431a      	orrs	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004492:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004496:	4618      	mov	r0, r3
 8004498:	3728      	adds	r7, #40	@ 0x28
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	fe00e800 	.word	0xfe00e800

080044a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	607b      	str	r3, [r7, #4]
 80044ae:	460b      	mov	r3, r1
 80044b0:	817b      	strh	r3, [r7, #10]
 80044b2:	4613      	mov	r3, r2
 80044b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044b6:	897b      	ldrh	r3, [r7, #10]
 80044b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80044bc:	7a7b      	ldrb	r3, [r7, #9]
 80044be:	041b      	lsls	r3, r3, #16
 80044c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80044d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	0d5b      	lsrs	r3, r3, #21
 80044de:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80044e2:	4b08      	ldr	r3, [pc, #32]	@ (8004504 <I2C_TransferConfig+0x60>)
 80044e4:	430b      	orrs	r3, r1
 80044e6:	43db      	mvns	r3, r3
 80044e8:	ea02 0103 	and.w	r1, r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80044f6:	bf00      	nop
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	03ff63ff 	.word	0x03ff63ff

08004508 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b20      	cmp	r3, #32
 800451c:	d138      	bne.n	8004590 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004524:	2b01      	cmp	r3, #1
 8004526:	d101      	bne.n	800452c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004528:	2302      	movs	r3, #2
 800452a:	e032      	b.n	8004592 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2224      	movs	r2, #36	@ 0x24
 8004538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0201 	bic.w	r2, r2, #1
 800454a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800455a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6819      	ldr	r1, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0201 	orr.w	r2, r2, #1
 800457a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800458c:	2300      	movs	r3, #0
 800458e:	e000      	b.n	8004592 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004590:	2302      	movs	r3, #2
  }
}
 8004592:	4618      	mov	r0, r3
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800459e:	b480      	push	{r7}
 80045a0:	b085      	sub	sp, #20
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	d139      	bne.n	8004628 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d101      	bne.n	80045c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045be:	2302      	movs	r3, #2
 80045c0:	e033      	b.n	800462a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2224      	movs	r2, #36	@ 0x24
 80045ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0201 	bic.w	r2, r2, #1
 80045e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80045f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	021b      	lsls	r3, r3, #8
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0201 	orr.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2220      	movs	r2, #32
 8004618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004624:	2300      	movs	r3, #0
 8004626:	e000      	b.n	800462a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004628:	2302      	movs	r3, #2
  }
}
 800462a:	4618      	mov	r0, r3
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
	...

08004638 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d141      	bne.n	80046ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004646:	4b4b      	ldr	r3, [pc, #300]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800464e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004652:	d131      	bne.n	80046b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004654:	4b47      	ldr	r3, [pc, #284]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004656:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800465a:	4a46      	ldr	r2, [pc, #280]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800465c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004660:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004664:	4b43      	ldr	r3, [pc, #268]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800466c:	4a41      	ldr	r2, [pc, #260]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800466e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004672:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004674:	4b40      	ldr	r3, [pc, #256]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2232      	movs	r2, #50	@ 0x32
 800467a:	fb02 f303 	mul.w	r3, r2, r3
 800467e:	4a3f      	ldr	r2, [pc, #252]	@ (800477c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004680:	fba2 2303 	umull	r2, r3, r2, r3
 8004684:	0c9b      	lsrs	r3, r3, #18
 8004686:	3301      	adds	r3, #1
 8004688:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800468a:	e002      	b.n	8004692 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	3b01      	subs	r3, #1
 8004690:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004692:	4b38      	ldr	r3, [pc, #224]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800469a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800469e:	d102      	bne.n	80046a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1f2      	bne.n	800468c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046a6:	4b33      	ldr	r3, [pc, #204]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046b2:	d158      	bne.n	8004766 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e057      	b.n	8004768 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046b8:	4b2e      	ldr	r3, [pc, #184]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046be:	4a2d      	ldr	r2, [pc, #180]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80046c8:	e04d      	b.n	8004766 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046d0:	d141      	bne.n	8004756 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046d2:	4b28      	ldr	r3, [pc, #160]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80046da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046de:	d131      	bne.n	8004744 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046e0:	4b24      	ldr	r3, [pc, #144]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046e6:	4a23      	ldr	r2, [pc, #140]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046f0:	4b20      	ldr	r3, [pc, #128]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80046f8:	4a1e      	ldr	r2, [pc, #120]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004700:	4b1d      	ldr	r3, [pc, #116]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2232      	movs	r2, #50	@ 0x32
 8004706:	fb02 f303 	mul.w	r3, r2, r3
 800470a:	4a1c      	ldr	r2, [pc, #112]	@ (800477c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800470c:	fba2 2303 	umull	r2, r3, r2, r3
 8004710:	0c9b      	lsrs	r3, r3, #18
 8004712:	3301      	adds	r3, #1
 8004714:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004716:	e002      	b.n	800471e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	3b01      	subs	r3, #1
 800471c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800471e:	4b15      	ldr	r3, [pc, #84]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004726:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800472a:	d102      	bne.n	8004732 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f2      	bne.n	8004718 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004732:	4b10      	ldr	r3, [pc, #64]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800473a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800473e:	d112      	bne.n	8004766 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e011      	b.n	8004768 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004744:	4b0b      	ldr	r3, [pc, #44]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004746:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800474a:	4a0a      	ldr	r2, [pc, #40]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800474c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004750:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004754:	e007      	b.n	8004766 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004756:	4b07      	ldr	r3, [pc, #28]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800475e:	4a05      	ldr	r2, [pc, #20]	@ (8004774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004760:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004764:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	40007000 	.word	0x40007000
 8004778:	20000008 	.word	0x20000008
 800477c:	431bde83 	.word	0x431bde83

08004780 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004784:	4b05      	ldr	r3, [pc, #20]	@ (800479c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	4a04      	ldr	r2, [pc, #16]	@ (800479c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800478a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800478e:	6093      	str	r3, [r2, #8]
}
 8004790:	bf00      	nop
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	40007000 	.word	0x40007000

080047a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e2fe      	b.n	8004db0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d075      	beq.n	80048aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047be:	4b97      	ldr	r3, [pc, #604]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 030c 	and.w	r3, r3, #12
 80047c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047c8:	4b94      	ldr	r3, [pc, #592]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f003 0303 	and.w	r3, r3, #3
 80047d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	2b0c      	cmp	r3, #12
 80047d6:	d102      	bne.n	80047de <HAL_RCC_OscConfig+0x3e>
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	2b03      	cmp	r3, #3
 80047dc:	d002      	beq.n	80047e4 <HAL_RCC_OscConfig+0x44>
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d10b      	bne.n	80047fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e4:	4b8d      	ldr	r3, [pc, #564]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d05b      	beq.n	80048a8 <HAL_RCC_OscConfig+0x108>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d157      	bne.n	80048a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e2d9      	b.n	8004db0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004804:	d106      	bne.n	8004814 <HAL_RCC_OscConfig+0x74>
 8004806:	4b85      	ldr	r3, [pc, #532]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a84      	ldr	r2, [pc, #528]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 800480c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	e01d      	b.n	8004850 <HAL_RCC_OscConfig+0xb0>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800481c:	d10c      	bne.n	8004838 <HAL_RCC_OscConfig+0x98>
 800481e:	4b7f      	ldr	r3, [pc, #508]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a7e      	ldr	r2, [pc, #504]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 8004824:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	4b7c      	ldr	r3, [pc, #496]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a7b      	ldr	r2, [pc, #492]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 8004830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004834:	6013      	str	r3, [r2, #0]
 8004836:	e00b      	b.n	8004850 <HAL_RCC_OscConfig+0xb0>
 8004838:	4b78      	ldr	r3, [pc, #480]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a77      	ldr	r2, [pc, #476]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 800483e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004842:	6013      	str	r3, [r2, #0]
 8004844:	4b75      	ldr	r3, [pc, #468]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a74      	ldr	r2, [pc, #464]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 800484a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800484e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d013      	beq.n	8004880 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004858:	f7fd f9ae 	bl	8001bb8 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004860:	f7fd f9aa 	bl	8001bb8 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b64      	cmp	r3, #100	@ 0x64
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e29e      	b.n	8004db0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004872:	4b6a      	ldr	r3, [pc, #424]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0f0      	beq.n	8004860 <HAL_RCC_OscConfig+0xc0>
 800487e:	e014      	b.n	80048aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004880:	f7fd f99a 	bl	8001bb8 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004888:	f7fd f996 	bl	8001bb8 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b64      	cmp	r3, #100	@ 0x64
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e28a      	b.n	8004db0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800489a:	4b60      	ldr	r3, [pc, #384]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1f0      	bne.n	8004888 <HAL_RCC_OscConfig+0xe8>
 80048a6:	e000      	b.n	80048aa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d075      	beq.n	80049a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048b6:	4b59      	ldr	r3, [pc, #356]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 030c 	and.w	r3, r3, #12
 80048be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048c0:	4b56      	ldr	r3, [pc, #344]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	2b0c      	cmp	r3, #12
 80048ce:	d102      	bne.n	80048d6 <HAL_RCC_OscConfig+0x136>
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d002      	beq.n	80048dc <HAL_RCC_OscConfig+0x13c>
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	2b04      	cmp	r3, #4
 80048da:	d11f      	bne.n	800491c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048dc:	4b4f      	ldr	r3, [pc, #316]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <HAL_RCC_OscConfig+0x154>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e25d      	b.n	8004db0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048f4:	4b49      	ldr	r3, [pc, #292]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	061b      	lsls	r3, r3, #24
 8004902:	4946      	ldr	r1, [pc, #280]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 8004904:	4313      	orrs	r3, r2
 8004906:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004908:	4b45      	ldr	r3, [pc, #276]	@ (8004a20 <HAL_RCC_OscConfig+0x280>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f7fd f907 	bl	8001b20 <HAL_InitTick>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d043      	beq.n	80049a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e249      	b.n	8004db0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d023      	beq.n	800496c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004924:	4b3d      	ldr	r3, [pc, #244]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a3c      	ldr	r2, [pc, #240]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 800492a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800492e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004930:	f7fd f942 	bl	8001bb8 <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004938:	f7fd f93e 	bl	8001bb8 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e232      	b.n	8004db0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800494a:	4b34      	ldr	r3, [pc, #208]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0f0      	beq.n	8004938 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004956:	4b31      	ldr	r3, [pc, #196]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	061b      	lsls	r3, r3, #24
 8004964:	492d      	ldr	r1, [pc, #180]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 8004966:	4313      	orrs	r3, r2
 8004968:	604b      	str	r3, [r1, #4]
 800496a:	e01a      	b.n	80049a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800496c:	4b2b      	ldr	r3, [pc, #172]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a2a      	ldr	r2, [pc, #168]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 8004972:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004978:	f7fd f91e 	bl	8001bb8 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004980:	f7fd f91a 	bl	8001bb8 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e20e      	b.n	8004db0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004992:	4b22      	ldr	r3, [pc, #136]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f0      	bne.n	8004980 <HAL_RCC_OscConfig+0x1e0>
 800499e:	e000      	b.n	80049a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d041      	beq.n	8004a32 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d01c      	beq.n	80049f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049b6:	4b19      	ldr	r3, [pc, #100]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 80049b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049bc:	4a17      	ldr	r2, [pc, #92]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 80049be:	f043 0301 	orr.w	r3, r3, #1
 80049c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c6:	f7fd f8f7 	bl	8001bb8 <HAL_GetTick>
 80049ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049cc:	e008      	b.n	80049e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ce:	f7fd f8f3 	bl	8001bb8 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e1e7      	b.n	8004db0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049e0:	4b0e      	ldr	r3, [pc, #56]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 80049e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0ef      	beq.n	80049ce <HAL_RCC_OscConfig+0x22e>
 80049ee:	e020      	b.n	8004a32 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049f0:	4b0a      	ldr	r3, [pc, #40]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 80049f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049f6:	4a09      	ldr	r2, [pc, #36]	@ (8004a1c <HAL_RCC_OscConfig+0x27c>)
 80049f8:	f023 0301 	bic.w	r3, r3, #1
 80049fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a00:	f7fd f8da 	bl	8001bb8 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a06:	e00d      	b.n	8004a24 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a08:	f7fd f8d6 	bl	8001bb8 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d906      	bls.n	8004a24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e1ca      	b.n	8004db0 <HAL_RCC_OscConfig+0x610>
 8004a1a:	bf00      	nop
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a24:	4b8c      	ldr	r3, [pc, #560]	@ (8004c58 <HAL_RCC_OscConfig+0x4b8>)
 8004a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1ea      	bne.n	8004a08 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 80a6 	beq.w	8004b8c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a40:	2300      	movs	r3, #0
 8004a42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a44:	4b84      	ldr	r3, [pc, #528]	@ (8004c58 <HAL_RCC_OscConfig+0x4b8>)
 8004a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <HAL_RCC_OscConfig+0x2b4>
 8004a50:	2301      	movs	r3, #1
 8004a52:	e000      	b.n	8004a56 <HAL_RCC_OscConfig+0x2b6>
 8004a54:	2300      	movs	r3, #0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00d      	beq.n	8004a76 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a5a:	4b7f      	ldr	r3, [pc, #508]	@ (8004c58 <HAL_RCC_OscConfig+0x4b8>)
 8004a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a5e:	4a7e      	ldr	r2, [pc, #504]	@ (8004c58 <HAL_RCC_OscConfig+0x4b8>)
 8004a60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a64:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a66:	4b7c      	ldr	r3, [pc, #496]	@ (8004c58 <HAL_RCC_OscConfig+0x4b8>)
 8004a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a72:	2301      	movs	r3, #1
 8004a74:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a76:	4b79      	ldr	r3, [pc, #484]	@ (8004c5c <HAL_RCC_OscConfig+0x4bc>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d118      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a82:	4b76      	ldr	r3, [pc, #472]	@ (8004c5c <HAL_RCC_OscConfig+0x4bc>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a75      	ldr	r2, [pc, #468]	@ (8004c5c <HAL_RCC_OscConfig+0x4bc>)
 8004a88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a8e:	f7fd f893 	bl	8001bb8 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a96:	f7fd f88f 	bl	8001bb8 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e183      	b.n	8004db0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aa8:	4b6c      	ldr	r3, [pc, #432]	@ (8004c5c <HAL_RCC_OscConfig+0x4bc>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0f0      	beq.n	8004a96 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d108      	bne.n	8004ace <HAL_RCC_OscConfig+0x32e>
 8004abc:	4b66      	ldr	r3, [pc, #408]	@ (8004c58 <HAL_RCC_OscConfig+0x4b8>)
 8004abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ac2:	4a65      	ldr	r2, [pc, #404]	@ (8004c58 <HAL_RCC_OscConfig+0x4b8>)
 8004ac4:	f043 0301 	orr.w	r3, r3, #1
 8004ac8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004acc:	e024      	b.n	8004b18 <HAL_RCC_OscConfig+0x378>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	2b05      	cmp	r3, #5
 8004ad4:	d110      	bne.n	8004af8 <HAL_RCC_OscConfig+0x358>
 8004ad6:	4b60      	ldr	r3, [pc, #384]	@ (8004c58 <HAL_RCC_OscConfig+0x4b8>)
 8004ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004adc:	4a5e      	ldr	r2, [pc, #376]	@ (8004c58 <HAL_RCC_OscConfig+0x4b8>)
 8004ade:	f043 0304 	orr.w	r3, r3, #4
 8004ae2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ae6:	4b5c      	ldr	r3, [pc, #368]	@ (8004c58 <HAL_RCC_OscConfig+0x4b8>)
 8004ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aec:	4a5a      	ldr	r2, [pc, #360]	@ (8004c58 <HAL_RCC_OscConfig+0x4b8>)
 8004aee:	f043 0301 	orr.w	r3, r3, #1
 8004af2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004af6:	e00f      	b.n	8004b18 <HAL_RCC_OscConfig+0x378>
 8004af8:	4b57      	ldr	r3, [pc, #348]	@ (8004c58 <HAL_RCC_OscConfig+0x4b8>)
 8004afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004afe:	4a56      	ldr	r2, [pc, #344]	@ (8004c58 <HAL_RCC_OscConfig+0x4b8>)
 8004b00:	f023 0301 	bic.w	r3, r3, #1
 8004b04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b08:	4b53      	ldr	r3, [pc, #332]	@ (8004c58 <HAL_RCC_OscConfig+0x4b8>)
 8004b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b0e:	4a52      	ldr	r2, [pc, #328]	@ (8004c58 <HAL_RCC_OscConfig+0x4b8>)
 8004b10:	f023 0304 	bic.w	r3, r3, #4
 8004b14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d016      	beq.n	8004b4e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b20:	f7fd f84a 	bl	8001bb8 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b26:	e00a      	b.n	8004b3e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b28:	f7fd f846 	bl	8001bb8 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e138      	b.n	8004db0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b3e:	4b46      	ldr	r3, [pc, #280]	@ (8004c58 <HAL_RCC_OscConfig+0x4b8>)
 8004b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0ed      	beq.n	8004b28 <HAL_RCC_OscConfig+0x388>
 8004b4c:	e015      	b.n	8004b7a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4e:	f7fd f833 	bl	8001bb8 <HAL_GetTick>
 8004b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b54:	e00a      	b.n	8004b6c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b56:	f7fd f82f 	bl	8001bb8 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e121      	b.n	8004db0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b6c:	4b3a      	ldr	r3, [pc, #232]	@ (8004c58 <HAL_RCC_OscConfig+0x4b8>)
 8004b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1ed      	bne.n	8004b56 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b7a:	7ffb      	ldrb	r3, [r7, #31]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d105      	bne.n	8004b8c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b80:	4b35      	ldr	r3, [pc, #212]	@ (8004c58 <HAL_RCC_OscConfig+0x4b8>)
 8004b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b84:	4a34      	ldr	r2, [pc, #208]	@ (8004c58 <HAL_RCC_OscConfig+0x4b8>)
 8004b86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b8a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0320 	and.w	r3, r3, #32
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d03c      	beq.n	8004c12 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d01c      	beq.n	8004bda <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ba0:	4b2d      	ldr	r3, [pc, #180]	@ (8004c58 <HAL_RCC_OscConfig+0x4b8>)
 8004ba2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ba6:	4a2c      	ldr	r2, [pc, #176]	@ (8004c58 <HAL_RCC_OscConfig+0x4b8>)
 8004ba8:	f043 0301 	orr.w	r3, r3, #1
 8004bac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb0:	f7fd f802 	bl	8001bb8 <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bb8:	f7fc fffe 	bl	8001bb8 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e0f2      	b.n	8004db0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bca:	4b23      	ldr	r3, [pc, #140]	@ (8004c58 <HAL_RCC_OscConfig+0x4b8>)
 8004bcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0ef      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x418>
 8004bd8:	e01b      	b.n	8004c12 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bda:	4b1f      	ldr	r3, [pc, #124]	@ (8004c58 <HAL_RCC_OscConfig+0x4b8>)
 8004bdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004be0:	4a1d      	ldr	r2, [pc, #116]	@ (8004c58 <HAL_RCC_OscConfig+0x4b8>)
 8004be2:	f023 0301 	bic.w	r3, r3, #1
 8004be6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bea:	f7fc ffe5 	bl	8001bb8 <HAL_GetTick>
 8004bee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bf0:	e008      	b.n	8004c04 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bf2:	f7fc ffe1 	bl	8001bb8 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e0d5      	b.n	8004db0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c04:	4b14      	ldr	r3, [pc, #80]	@ (8004c58 <HAL_RCC_OscConfig+0x4b8>)
 8004c06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1ef      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 80c9 	beq.w	8004dae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8004c58 <HAL_RCC_OscConfig+0x4b8>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f003 030c 	and.w	r3, r3, #12
 8004c24:	2b0c      	cmp	r3, #12
 8004c26:	f000 8083 	beq.w	8004d30 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d15e      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c32:	4b09      	ldr	r3, [pc, #36]	@ (8004c58 <HAL_RCC_OscConfig+0x4b8>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a08      	ldr	r2, [pc, #32]	@ (8004c58 <HAL_RCC_OscConfig+0x4b8>)
 8004c38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3e:	f7fc ffbb 	bl	8001bb8 <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c44:	e00c      	b.n	8004c60 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c46:	f7fc ffb7 	bl	8001bb8 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d905      	bls.n	8004c60 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e0ab      	b.n	8004db0 <HAL_RCC_OscConfig+0x610>
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c60:	4b55      	ldr	r3, [pc, #340]	@ (8004db8 <HAL_RCC_OscConfig+0x618>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1ec      	bne.n	8004c46 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c6c:	4b52      	ldr	r3, [pc, #328]	@ (8004db8 <HAL_RCC_OscConfig+0x618>)
 8004c6e:	68da      	ldr	r2, [r3, #12]
 8004c70:	4b52      	ldr	r3, [pc, #328]	@ (8004dbc <HAL_RCC_OscConfig+0x61c>)
 8004c72:	4013      	ands	r3, r2
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6a11      	ldr	r1, [r2, #32]
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c7c:	3a01      	subs	r2, #1
 8004c7e:	0112      	lsls	r2, r2, #4
 8004c80:	4311      	orrs	r1, r2
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004c86:	0212      	lsls	r2, r2, #8
 8004c88:	4311      	orrs	r1, r2
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004c8e:	0852      	lsrs	r2, r2, #1
 8004c90:	3a01      	subs	r2, #1
 8004c92:	0552      	lsls	r2, r2, #21
 8004c94:	4311      	orrs	r1, r2
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004c9a:	0852      	lsrs	r2, r2, #1
 8004c9c:	3a01      	subs	r2, #1
 8004c9e:	0652      	lsls	r2, r2, #25
 8004ca0:	4311      	orrs	r1, r2
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004ca6:	06d2      	lsls	r2, r2, #27
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	4943      	ldr	r1, [pc, #268]	@ (8004db8 <HAL_RCC_OscConfig+0x618>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cb0:	4b41      	ldr	r3, [pc, #260]	@ (8004db8 <HAL_RCC_OscConfig+0x618>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a40      	ldr	r2, [pc, #256]	@ (8004db8 <HAL_RCC_OscConfig+0x618>)
 8004cb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cbc:	4b3e      	ldr	r3, [pc, #248]	@ (8004db8 <HAL_RCC_OscConfig+0x618>)
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	4a3d      	ldr	r2, [pc, #244]	@ (8004db8 <HAL_RCC_OscConfig+0x618>)
 8004cc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cc6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc8:	f7fc ff76 	bl	8001bb8 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd0:	f7fc ff72 	bl	8001bb8 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e066      	b.n	8004db0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ce2:	4b35      	ldr	r3, [pc, #212]	@ (8004db8 <HAL_RCC_OscConfig+0x618>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0f0      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x530>
 8004cee:	e05e      	b.n	8004dae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cf0:	4b31      	ldr	r3, [pc, #196]	@ (8004db8 <HAL_RCC_OscConfig+0x618>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a30      	ldr	r2, [pc, #192]	@ (8004db8 <HAL_RCC_OscConfig+0x618>)
 8004cf6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfc:	f7fc ff5c 	bl	8001bb8 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d04:	f7fc ff58 	bl	8001bb8 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e04c      	b.n	8004db0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d16:	4b28      	ldr	r3, [pc, #160]	@ (8004db8 <HAL_RCC_OscConfig+0x618>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1f0      	bne.n	8004d04 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004d22:	4b25      	ldr	r3, [pc, #148]	@ (8004db8 <HAL_RCC_OscConfig+0x618>)
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	4924      	ldr	r1, [pc, #144]	@ (8004db8 <HAL_RCC_OscConfig+0x618>)
 8004d28:	4b25      	ldr	r3, [pc, #148]	@ (8004dc0 <HAL_RCC_OscConfig+0x620>)
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	60cb      	str	r3, [r1, #12]
 8004d2e:	e03e      	b.n	8004dae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e039      	b.n	8004db0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8004db8 <HAL_RCC_OscConfig+0x618>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f003 0203 	and.w	r2, r3, #3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d12c      	bne.n	8004daa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d123      	bne.n	8004daa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d11b      	bne.n	8004daa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d113      	bne.n	8004daa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d8c:	085b      	lsrs	r3, r3, #1
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d109      	bne.n	8004daa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004da0:	085b      	lsrs	r3, r3, #1
 8004da2:	3b01      	subs	r3, #1
 8004da4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d001      	beq.n	8004dae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e000      	b.n	8004db0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3720      	adds	r7, #32
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	019f800c 	.word	0x019f800c
 8004dc0:	feeefffc 	.word	0xfeeefffc

08004dc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e11e      	b.n	800501a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ddc:	4b91      	ldr	r3, [pc, #580]	@ (8005024 <HAL_RCC_ClockConfig+0x260>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 030f 	and.w	r3, r3, #15
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d910      	bls.n	8004e0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dea:	4b8e      	ldr	r3, [pc, #568]	@ (8005024 <HAL_RCC_ClockConfig+0x260>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f023 020f 	bic.w	r2, r3, #15
 8004df2:	498c      	ldr	r1, [pc, #560]	@ (8005024 <HAL_RCC_ClockConfig+0x260>)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dfa:	4b8a      	ldr	r3, [pc, #552]	@ (8005024 <HAL_RCC_ClockConfig+0x260>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 030f 	and.w	r3, r3, #15
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d001      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e106      	b.n	800501a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d073      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2b03      	cmp	r3, #3
 8004e1e:	d129      	bne.n	8004e74 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e20:	4b81      	ldr	r3, [pc, #516]	@ (8005028 <HAL_RCC_ClockConfig+0x264>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e0f4      	b.n	800501a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004e30:	f000 f966 	bl	8005100 <RCC_GetSysClockFreqFromPLLSource>
 8004e34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	4a7c      	ldr	r2, [pc, #496]	@ (800502c <HAL_RCC_ClockConfig+0x268>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d93f      	bls.n	8004ebe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e3e:	4b7a      	ldr	r3, [pc, #488]	@ (8005028 <HAL_RCC_ClockConfig+0x264>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d009      	beq.n	8004e5e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d033      	beq.n	8004ebe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d12f      	bne.n	8004ebe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e5e:	4b72      	ldr	r3, [pc, #456]	@ (8005028 <HAL_RCC_ClockConfig+0x264>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e66:	4a70      	ldr	r2, [pc, #448]	@ (8005028 <HAL_RCC_ClockConfig+0x264>)
 8004e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e6e:	2380      	movs	r3, #128	@ 0x80
 8004e70:	617b      	str	r3, [r7, #20]
 8004e72:	e024      	b.n	8004ebe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d107      	bne.n	8004e8c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e7c:	4b6a      	ldr	r3, [pc, #424]	@ (8005028 <HAL_RCC_ClockConfig+0x264>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d109      	bne.n	8004e9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e0c6      	b.n	800501a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e8c:	4b66      	ldr	r3, [pc, #408]	@ (8005028 <HAL_RCC_ClockConfig+0x264>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e0be      	b.n	800501a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004e9c:	f000 f8ce 	bl	800503c <HAL_RCC_GetSysClockFreq>
 8004ea0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	4a61      	ldr	r2, [pc, #388]	@ (800502c <HAL_RCC_ClockConfig+0x268>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d909      	bls.n	8004ebe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004eaa:	4b5f      	ldr	r3, [pc, #380]	@ (8005028 <HAL_RCC_ClockConfig+0x264>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004eb2:	4a5d      	ldr	r2, [pc, #372]	@ (8005028 <HAL_RCC_ClockConfig+0x264>)
 8004eb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eb8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004eba:	2380      	movs	r3, #128	@ 0x80
 8004ebc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ebe:	4b5a      	ldr	r3, [pc, #360]	@ (8005028 <HAL_RCC_ClockConfig+0x264>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f023 0203 	bic.w	r2, r3, #3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	4957      	ldr	r1, [pc, #348]	@ (8005028 <HAL_RCC_ClockConfig+0x264>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ed0:	f7fc fe72 	bl	8001bb8 <HAL_GetTick>
 8004ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ed6:	e00a      	b.n	8004eee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ed8:	f7fc fe6e 	bl	8001bb8 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e095      	b.n	800501a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eee:	4b4e      	ldr	r3, [pc, #312]	@ (8005028 <HAL_RCC_ClockConfig+0x264>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 020c 	and.w	r2, r3, #12
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d1eb      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d023      	beq.n	8004f54 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d005      	beq.n	8004f24 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f18:	4b43      	ldr	r3, [pc, #268]	@ (8005028 <HAL_RCC_ClockConfig+0x264>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	4a42      	ldr	r2, [pc, #264]	@ (8005028 <HAL_RCC_ClockConfig+0x264>)
 8004f1e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f22:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0308 	and.w	r3, r3, #8
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d007      	beq.n	8004f40 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004f30:	4b3d      	ldr	r3, [pc, #244]	@ (8005028 <HAL_RCC_ClockConfig+0x264>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004f38:	4a3b      	ldr	r2, [pc, #236]	@ (8005028 <HAL_RCC_ClockConfig+0x264>)
 8004f3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f40:	4b39      	ldr	r3, [pc, #228]	@ (8005028 <HAL_RCC_ClockConfig+0x264>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	4936      	ldr	r1, [pc, #216]	@ (8005028 <HAL_RCC_ClockConfig+0x264>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	608b      	str	r3, [r1, #8]
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	2b80      	cmp	r3, #128	@ 0x80
 8004f58:	d105      	bne.n	8004f66 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f5a:	4b33      	ldr	r3, [pc, #204]	@ (8005028 <HAL_RCC_ClockConfig+0x264>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	4a32      	ldr	r2, [pc, #200]	@ (8005028 <HAL_RCC_ClockConfig+0x264>)
 8004f60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f64:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f66:	4b2f      	ldr	r3, [pc, #188]	@ (8005024 <HAL_RCC_ClockConfig+0x260>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d21d      	bcs.n	8004fb0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f74:	4b2b      	ldr	r3, [pc, #172]	@ (8005024 <HAL_RCC_ClockConfig+0x260>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f023 020f 	bic.w	r2, r3, #15
 8004f7c:	4929      	ldr	r1, [pc, #164]	@ (8005024 <HAL_RCC_ClockConfig+0x260>)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f84:	f7fc fe18 	bl	8001bb8 <HAL_GetTick>
 8004f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f8a:	e00a      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f8c:	f7fc fe14 	bl	8001bb8 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e03b      	b.n	800501a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fa2:	4b20      	ldr	r3, [pc, #128]	@ (8005024 <HAL_RCC_ClockConfig+0x260>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 030f 	and.w	r3, r3, #15
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d1ed      	bne.n	8004f8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d008      	beq.n	8004fce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8005028 <HAL_RCC_ClockConfig+0x264>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	4917      	ldr	r1, [pc, #92]	@ (8005028 <HAL_RCC_ClockConfig+0x264>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d009      	beq.n	8004fee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fda:	4b13      	ldr	r3, [pc, #76]	@ (8005028 <HAL_RCC_ClockConfig+0x264>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	490f      	ldr	r1, [pc, #60]	@ (8005028 <HAL_RCC_ClockConfig+0x264>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fee:	f000 f825 	bl	800503c <HAL_RCC_GetSysClockFreq>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8005028 <HAL_RCC_ClockConfig+0x264>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	091b      	lsrs	r3, r3, #4
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	490c      	ldr	r1, [pc, #48]	@ (8005030 <HAL_RCC_ClockConfig+0x26c>)
 8005000:	5ccb      	ldrb	r3, [r1, r3]
 8005002:	f003 031f 	and.w	r3, r3, #31
 8005006:	fa22 f303 	lsr.w	r3, r2, r3
 800500a:	4a0a      	ldr	r2, [pc, #40]	@ (8005034 <HAL_RCC_ClockConfig+0x270>)
 800500c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800500e:	4b0a      	ldr	r3, [pc, #40]	@ (8005038 <HAL_RCC_ClockConfig+0x274>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4618      	mov	r0, r3
 8005014:	f7fc fd84 	bl	8001b20 <HAL_InitTick>
 8005018:	4603      	mov	r3, r0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	40022000 	.word	0x40022000
 8005028:	40021000 	.word	0x40021000
 800502c:	04c4b400 	.word	0x04c4b400
 8005030:	08007ed8 	.word	0x08007ed8
 8005034:	20000008 	.word	0x20000008
 8005038:	2000000c 	.word	0x2000000c

0800503c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005042:	4b2c      	ldr	r3, [pc, #176]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 030c 	and.w	r3, r3, #12
 800504a:	2b04      	cmp	r3, #4
 800504c:	d102      	bne.n	8005054 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800504e:	4b2a      	ldr	r3, [pc, #168]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005050:	613b      	str	r3, [r7, #16]
 8005052:	e047      	b.n	80050e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005054:	4b27      	ldr	r3, [pc, #156]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f003 030c 	and.w	r3, r3, #12
 800505c:	2b08      	cmp	r3, #8
 800505e:	d102      	bne.n	8005066 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005060:	4b26      	ldr	r3, [pc, #152]	@ (80050fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005062:	613b      	str	r3, [r7, #16]
 8005064:	e03e      	b.n	80050e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005066:	4b23      	ldr	r3, [pc, #140]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f003 030c 	and.w	r3, r3, #12
 800506e:	2b0c      	cmp	r3, #12
 8005070:	d136      	bne.n	80050e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005072:	4b20      	ldr	r3, [pc, #128]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	f003 0303 	and.w	r3, r3, #3
 800507a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800507c:	4b1d      	ldr	r3, [pc, #116]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	091b      	lsrs	r3, r3, #4
 8005082:	f003 030f 	and.w	r3, r3, #15
 8005086:	3301      	adds	r3, #1
 8005088:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2b03      	cmp	r3, #3
 800508e:	d10c      	bne.n	80050aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005090:	4a1a      	ldr	r2, [pc, #104]	@ (80050fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	fbb2 f3f3 	udiv	r3, r2, r3
 8005098:	4a16      	ldr	r2, [pc, #88]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800509a:	68d2      	ldr	r2, [r2, #12]
 800509c:	0a12      	lsrs	r2, r2, #8
 800509e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80050a2:	fb02 f303 	mul.w	r3, r2, r3
 80050a6:	617b      	str	r3, [r7, #20]
      break;
 80050a8:	e00c      	b.n	80050c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050aa:	4a13      	ldr	r2, [pc, #76]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b2:	4a10      	ldr	r2, [pc, #64]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050b4:	68d2      	ldr	r2, [r2, #12]
 80050b6:	0a12      	lsrs	r2, r2, #8
 80050b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80050bc:	fb02 f303 	mul.w	r3, r2, r3
 80050c0:	617b      	str	r3, [r7, #20]
      break;
 80050c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050c4:	4b0b      	ldr	r3, [pc, #44]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	0e5b      	lsrs	r3, r3, #25
 80050ca:	f003 0303 	and.w	r3, r3, #3
 80050ce:	3301      	adds	r3, #1
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050dc:	613b      	str	r3, [r7, #16]
 80050de:	e001      	b.n	80050e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80050e4:	693b      	ldr	r3, [r7, #16]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	371c      	adds	r7, #28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	40021000 	.word	0x40021000
 80050f8:	00f42400 	.word	0x00f42400
 80050fc:	007a1200 	.word	0x007a1200

08005100 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005106:	4b1e      	ldr	r3, [pc, #120]	@ (8005180 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005110:	4b1b      	ldr	r3, [pc, #108]	@ (8005180 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	091b      	lsrs	r3, r3, #4
 8005116:	f003 030f 	and.w	r3, r3, #15
 800511a:	3301      	adds	r3, #1
 800511c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	2b03      	cmp	r3, #3
 8005122:	d10c      	bne.n	800513e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005124:	4a17      	ldr	r2, [pc, #92]	@ (8005184 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	fbb2 f3f3 	udiv	r3, r2, r3
 800512c:	4a14      	ldr	r2, [pc, #80]	@ (8005180 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800512e:	68d2      	ldr	r2, [r2, #12]
 8005130:	0a12      	lsrs	r2, r2, #8
 8005132:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005136:	fb02 f303 	mul.w	r3, r2, r3
 800513a:	617b      	str	r3, [r7, #20]
    break;
 800513c:	e00c      	b.n	8005158 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800513e:	4a12      	ldr	r2, [pc, #72]	@ (8005188 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	fbb2 f3f3 	udiv	r3, r2, r3
 8005146:	4a0e      	ldr	r2, [pc, #56]	@ (8005180 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005148:	68d2      	ldr	r2, [r2, #12]
 800514a:	0a12      	lsrs	r2, r2, #8
 800514c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005150:	fb02 f303 	mul.w	r3, r2, r3
 8005154:	617b      	str	r3, [r7, #20]
    break;
 8005156:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005158:	4b09      	ldr	r3, [pc, #36]	@ (8005180 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	0e5b      	lsrs	r3, r3, #25
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	3301      	adds	r3, #1
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005170:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005172:	687b      	ldr	r3, [r7, #4]
}
 8005174:	4618      	mov	r0, r3
 8005176:	371c      	adds	r7, #28
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	40021000 	.word	0x40021000
 8005184:	007a1200 	.word	0x007a1200
 8005188:	00f42400 	.word	0x00f42400

0800518c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005194:	2300      	movs	r3, #0
 8005196:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005198:	2300      	movs	r3, #0
 800519a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 8098 	beq.w	80052da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051aa:	2300      	movs	r3, #0
 80051ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ae:	4b43      	ldr	r3, [pc, #268]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10d      	bne.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ba:	4b40      	ldr	r3, [pc, #256]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051be:	4a3f      	ldr	r2, [pc, #252]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80051c6:	4b3d      	ldr	r3, [pc, #244]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051ce:	60bb      	str	r3, [r7, #8]
 80051d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051d2:	2301      	movs	r3, #1
 80051d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051d6:	4b3a      	ldr	r3, [pc, #232]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a39      	ldr	r2, [pc, #228]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80051dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051e2:	f7fc fce9 	bl	8001bb8 <HAL_GetTick>
 80051e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051e8:	e009      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ea:	f7fc fce5 	bl	8001bb8 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d902      	bls.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	74fb      	strb	r3, [r7, #19]
        break;
 80051fc:	e005      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051fe:	4b30      	ldr	r3, [pc, #192]	@ (80052c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005206:	2b00      	cmp	r3, #0
 8005208:	d0ef      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800520a:	7cfb      	ldrb	r3, [r7, #19]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d159      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005210:	4b2a      	ldr	r3, [pc, #168]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005216:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800521a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d01e      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	429a      	cmp	r2, r3
 800522a:	d019      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800522c:	4b23      	ldr	r3, [pc, #140]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800522e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005232:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005236:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005238:	4b20      	ldr	r3, [pc, #128]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800523a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800523e:	4a1f      	ldr	r2, [pc, #124]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005244:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005248:	4b1c      	ldr	r3, [pc, #112]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800524a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800524e:	4a1b      	ldr	r2, [pc, #108]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005250:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005254:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005258:	4a18      	ldr	r2, [pc, #96]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d016      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526a:	f7fc fca5 	bl	8001bb8 <HAL_GetTick>
 800526e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005270:	e00b      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005272:	f7fc fca1 	bl	8001bb8 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005280:	4293      	cmp	r3, r2
 8005282:	d902      	bls.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	74fb      	strb	r3, [r7, #19]
            break;
 8005288:	e006      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800528a:	4b0c      	ldr	r3, [pc, #48]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800528c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0ec      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005298:	7cfb      	ldrb	r3, [r7, #19]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10b      	bne.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800529e:	4b07      	ldr	r3, [pc, #28]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ac:	4903      	ldr	r1, [pc, #12]	@ (80052bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80052b4:	e008      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052b6:	7cfb      	ldrb	r3, [r7, #19]
 80052b8:	74bb      	strb	r3, [r7, #18]
 80052ba:	e005      	b.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80052bc:	40021000 	.word	0x40021000
 80052c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c4:	7cfb      	ldrb	r3, [r7, #19]
 80052c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052c8:	7c7b      	ldrb	r3, [r7, #17]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d105      	bne.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052ce:	4ba6      	ldr	r3, [pc, #664]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d2:	4aa5      	ldr	r2, [pc, #660]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052e6:	4ba0      	ldr	r3, [pc, #640]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ec:	f023 0203 	bic.w	r2, r3, #3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	499c      	ldr	r1, [pc, #624]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00a      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005308:	4b97      	ldr	r3, [pc, #604]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800530a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800530e:	f023 020c 	bic.w	r2, r3, #12
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	4994      	ldr	r1, [pc, #592]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005318:	4313      	orrs	r3, r2
 800531a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0304 	and.w	r3, r3, #4
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800532a:	4b8f      	ldr	r3, [pc, #572]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800532c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005330:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	498b      	ldr	r1, [pc, #556]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800533a:	4313      	orrs	r3, r2
 800533c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0308 	and.w	r3, r3, #8
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800534c:	4b86      	ldr	r3, [pc, #536]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800534e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005352:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	4983      	ldr	r1, [pc, #524]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800535c:	4313      	orrs	r3, r2
 800535e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0320 	and.w	r3, r3, #32
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00a      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800536e:	4b7e      	ldr	r3, [pc, #504]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005374:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	497a      	ldr	r1, [pc, #488]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800537e:	4313      	orrs	r3, r2
 8005380:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00a      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005390:	4b75      	ldr	r3, [pc, #468]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005396:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	4972      	ldr	r1, [pc, #456]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053b2:	4b6d      	ldr	r3, [pc, #436]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	4969      	ldr	r1, [pc, #420]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053d4:	4b64      	ldr	r3, [pc, #400]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053da:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	4961      	ldr	r1, [pc, #388]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053f6:	4b5c      	ldr	r3, [pc, #368]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005404:	4958      	ldr	r1, [pc, #352]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005414:	2b00      	cmp	r3, #0
 8005416:	d015      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005418:	4b53      	ldr	r3, [pc, #332]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800541a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800541e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005426:	4950      	ldr	r1, [pc, #320]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005428:	4313      	orrs	r3, r2
 800542a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005432:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005436:	d105      	bne.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005438:	4b4b      	ldr	r3, [pc, #300]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	4a4a      	ldr	r2, [pc, #296]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800543e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005442:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800544c:	2b00      	cmp	r3, #0
 800544e:	d015      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005450:	4b45      	ldr	r3, [pc, #276]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005456:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545e:	4942      	ldr	r1, [pc, #264]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005460:	4313      	orrs	r3, r2
 8005462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800546e:	d105      	bne.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005470:	4b3d      	ldr	r3, [pc, #244]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	4a3c      	ldr	r2, [pc, #240]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005476:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800547a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d015      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005488:	4b37      	ldr	r3, [pc, #220]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800548a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800548e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005496:	4934      	ldr	r1, [pc, #208]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005498:	4313      	orrs	r3, r2
 800549a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054a6:	d105      	bne.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054a8:	4b2f      	ldr	r3, [pc, #188]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	4a2e      	ldr	r2, [pc, #184]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054b2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d015      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054c0:	4b29      	ldr	r3, [pc, #164]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ce:	4926      	ldr	r1, [pc, #152]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054de:	d105      	bne.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054e0:	4b21      	ldr	r3, [pc, #132]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	4a20      	ldr	r2, [pc, #128]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d015      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005506:	4918      	ldr	r1, [pc, #96]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005508:	4313      	orrs	r3, r2
 800550a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005512:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005516:	d105      	bne.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005518:	4b13      	ldr	r3, [pc, #76]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	4a12      	ldr	r2, [pc, #72]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800551e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005522:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d015      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005530:	4b0d      	ldr	r3, [pc, #52]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005536:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800553e:	490a      	ldr	r1, [pc, #40]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005540:	4313      	orrs	r3, r2
 8005542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800554a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800554e:	d105      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005550:	4b05      	ldr	r3, [pc, #20]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	4a04      	ldr	r2, [pc, #16]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005556:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800555a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800555c:	7cbb      	ldrb	r3, [r7, #18]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	40021000 	.word	0x40021000

0800556c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e09d      	b.n	80056ba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005582:	2b00      	cmp	r3, #0
 8005584:	d108      	bne.n	8005598 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800558e:	d009      	beq.n	80055a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	61da      	str	r2, [r3, #28]
 8005596:	e005      	b.n	80055a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d106      	bne.n	80055c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7fc f942 	bl	8001848 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80055e4:	d902      	bls.n	80055ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60fb      	str	r3, [r7, #12]
 80055ea:	e002      	b.n	80055f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80055ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80055f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80055fa:	d007      	beq.n	800560c <HAL_SPI_Init+0xa0>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005604:	d002      	beq.n	800560c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800561c:	431a      	orrs	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	431a      	orrs	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	431a      	orrs	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005644:	431a      	orrs	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800564e:	ea42 0103 	orr.w	r1, r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005656:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	0c1b      	lsrs	r3, r3, #16
 8005668:	f003 0204 	and.w	r2, r3, #4
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005670:	f003 0310 	and.w	r3, r3, #16
 8005674:	431a      	orrs	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800567a:	f003 0308 	and.w	r3, r3, #8
 800567e:	431a      	orrs	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005688:	ea42 0103 	orr.w	r1, r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	69da      	ldr	r2, [r3, #28]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b08a      	sub	sp, #40	@ 0x28
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	60f8      	str	r0, [r7, #12]
 80056ca:	60b9      	str	r1, [r7, #8]
 80056cc:	607a      	str	r2, [r7, #4]
 80056ce:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80056d0:	2301      	movs	r3, #1
 80056d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80056d4:	2300      	movs	r3, #0
 80056d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d101      	bne.n	80056e8 <HAL_SPI_TransmitReceive+0x26>
 80056e4:	2302      	movs	r3, #2
 80056e6:	e20a      	b.n	8005afe <HAL_SPI_TransmitReceive+0x43c>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056f0:	f7fc fa62 	bl	8001bb8 <HAL_GetTick>
 80056f4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80056fc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005704:	887b      	ldrh	r3, [r7, #2]
 8005706:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005708:	887b      	ldrh	r3, [r7, #2]
 800570a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800570c:	7efb      	ldrb	r3, [r7, #27]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d00e      	beq.n	8005730 <HAL_SPI_TransmitReceive+0x6e>
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005718:	d106      	bne.n	8005728 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d102      	bne.n	8005728 <HAL_SPI_TransmitReceive+0x66>
 8005722:	7efb      	ldrb	r3, [r7, #27]
 8005724:	2b04      	cmp	r3, #4
 8005726:	d003      	beq.n	8005730 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005728:	2302      	movs	r3, #2
 800572a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800572e:	e1e0      	b.n	8005af2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d005      	beq.n	8005742 <HAL_SPI_TransmitReceive+0x80>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d002      	beq.n	8005742 <HAL_SPI_TransmitReceive+0x80>
 800573c:	887b      	ldrh	r3, [r7, #2]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d103      	bne.n	800574a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005748:	e1d3      	b.n	8005af2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b04      	cmp	r3, #4
 8005754:	d003      	beq.n	800575e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2205      	movs	r2, #5
 800575a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	887a      	ldrh	r2, [r7, #2]
 800576e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	887a      	ldrh	r2, [r7, #2]
 8005776:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	887a      	ldrh	r2, [r7, #2]
 8005784:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	887a      	ldrh	r2, [r7, #2]
 800578a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80057a0:	d802      	bhi.n	80057a8 <HAL_SPI_TransmitReceive+0xe6>
 80057a2:	8a3b      	ldrh	r3, [r7, #16]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d908      	bls.n	80057ba <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80057b6:	605a      	str	r2, [r3, #4]
 80057b8:	e007      	b.n	80057ca <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80057c8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057d4:	2b40      	cmp	r3, #64	@ 0x40
 80057d6:	d007      	beq.n	80057e8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80057f0:	f240 8081 	bls.w	80058f6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <HAL_SPI_TransmitReceive+0x140>
 80057fc:	8a7b      	ldrh	r3, [r7, #18]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d16d      	bne.n	80058de <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005806:	881a      	ldrh	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005812:	1c9a      	adds	r2, r3, #2
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800581c:	b29b      	uxth	r3, r3
 800581e:	3b01      	subs	r3, #1
 8005820:	b29a      	uxth	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005826:	e05a      	b.n	80058de <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b02      	cmp	r3, #2
 8005834:	d11b      	bne.n	800586e <HAL_SPI_TransmitReceive+0x1ac>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800583a:	b29b      	uxth	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d016      	beq.n	800586e <HAL_SPI_TransmitReceive+0x1ac>
 8005840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005842:	2b01      	cmp	r3, #1
 8005844:	d113      	bne.n	800586e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800584a:	881a      	ldrh	r2, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005856:	1c9a      	adds	r2, r3, #2
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005860:	b29b      	uxth	r3, r3
 8005862:	3b01      	subs	r3, #1
 8005864:	b29a      	uxth	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800586a:	2300      	movs	r3, #0
 800586c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b01      	cmp	r3, #1
 800587a:	d11c      	bne.n	80058b6 <HAL_SPI_TransmitReceive+0x1f4>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005882:	b29b      	uxth	r3, r3
 8005884:	2b00      	cmp	r3, #0
 8005886:	d016      	beq.n	80058b6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68da      	ldr	r2, [r3, #12]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005892:	b292      	uxth	r2, r2
 8005894:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589a:	1c9a      	adds	r2, r3, #2
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	3b01      	subs	r3, #1
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058b2:	2301      	movs	r3, #1
 80058b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80058b6:	f7fc f97f 	bl	8001bb8 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d80b      	bhi.n	80058de <HAL_SPI_TransmitReceive+0x21c>
 80058c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058cc:	d007      	beq.n	80058de <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80058dc:	e109      	b.n	8005af2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d19f      	bne.n	8005828 <HAL_SPI_TransmitReceive+0x166>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d199      	bne.n	8005828 <HAL_SPI_TransmitReceive+0x166>
 80058f4:	e0e3      	b.n	8005abe <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <HAL_SPI_TransmitReceive+0x244>
 80058fe:	8a7b      	ldrh	r3, [r7, #18]
 8005900:	2b01      	cmp	r3, #1
 8005902:	f040 80cf 	bne.w	8005aa4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800590a:	b29b      	uxth	r3, r3
 800590c:	2b01      	cmp	r3, #1
 800590e:	d912      	bls.n	8005936 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005914:	881a      	ldrh	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005920:	1c9a      	adds	r2, r3, #2
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800592a:	b29b      	uxth	r3, r3
 800592c:	3b02      	subs	r3, #2
 800592e:	b29a      	uxth	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005934:	e0b6      	b.n	8005aa4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	330c      	adds	r3, #12
 8005940:	7812      	ldrb	r2, [r2, #0]
 8005942:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005948:	1c5a      	adds	r2, r3, #1
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005952:	b29b      	uxth	r3, r3
 8005954:	3b01      	subs	r3, #1
 8005956:	b29a      	uxth	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800595c:	e0a2      	b.n	8005aa4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b02      	cmp	r3, #2
 800596a:	d134      	bne.n	80059d6 <HAL_SPI_TransmitReceive+0x314>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005970:	b29b      	uxth	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d02f      	beq.n	80059d6 <HAL_SPI_TransmitReceive+0x314>
 8005976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005978:	2b01      	cmp	r3, #1
 800597a:	d12c      	bne.n	80059d6 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005980:	b29b      	uxth	r3, r3
 8005982:	2b01      	cmp	r3, #1
 8005984:	d912      	bls.n	80059ac <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800598a:	881a      	ldrh	r2, [r3, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005996:	1c9a      	adds	r2, r3, #2
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	3b02      	subs	r3, #2
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80059aa:	e012      	b.n	80059d2 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	330c      	adds	r3, #12
 80059b6:	7812      	ldrb	r2, [r2, #0]
 80059b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059be:	1c5a      	adds	r2, r3, #1
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	3b01      	subs	r3, #1
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059d2:	2300      	movs	r3, #0
 80059d4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d148      	bne.n	8005a76 <HAL_SPI_TransmitReceive+0x3b4>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d042      	beq.n	8005a76 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d923      	bls.n	8005a44 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a06:	b292      	uxth	r2, r2
 8005a08:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0e:	1c9a      	adds	r2, r3, #2
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	3b02      	subs	r3, #2
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d81f      	bhi.n	8005a72 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a40:	605a      	str	r2, [r3, #4]
 8005a42:	e016      	b.n	8005a72 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f103 020c 	add.w	r2, r3, #12
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a50:	7812      	ldrb	r2, [r2, #0]
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5a:	1c5a      	adds	r2, r3, #1
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a72:	2301      	movs	r3, #1
 8005a74:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a76:	f7fc f89f 	bl	8001bb8 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d803      	bhi.n	8005a8e <HAL_SPI_TransmitReceive+0x3cc>
 8005a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a8c:	d102      	bne.n	8005a94 <HAL_SPI_TransmitReceive+0x3d2>
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d107      	bne.n	8005aa4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005aa2:	e026      	b.n	8005af2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f47f af57 	bne.w	800595e <HAL_SPI_TransmitReceive+0x29c>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f47f af50 	bne.w	800595e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005abe:	69fa      	ldr	r2, [r7, #28]
 8005ac0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f000 f93e 	bl	8005d44 <SPI_EndRxTxTransaction>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d005      	beq.n	8005ada <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ae8:	e003      	b.n	8005af2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005afa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3728      	adds	r7, #40	@ 0x28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
	...

08005b08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b088      	sub	sp, #32
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	603b      	str	r3, [r7, #0]
 8005b14:	4613      	mov	r3, r2
 8005b16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b18:	f7fc f84e 	bl	8001bb8 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b20:	1a9b      	subs	r3, r3, r2
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	4413      	add	r3, r2
 8005b26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b28:	f7fc f846 	bl	8001bb8 <HAL_GetTick>
 8005b2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b2e:	4b39      	ldr	r3, [pc, #228]	@ (8005c14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	015b      	lsls	r3, r3, #5
 8005b34:	0d1b      	lsrs	r3, r3, #20
 8005b36:	69fa      	ldr	r2, [r7, #28]
 8005b38:	fb02 f303 	mul.w	r3, r2, r3
 8005b3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b3e:	e054      	b.n	8005bea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b46:	d050      	beq.n	8005bea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b48:	f7fc f836 	bl	8001bb8 <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	69fa      	ldr	r2, [r7, #28]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d902      	bls.n	8005b5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d13d      	bne.n	8005bda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005b6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b76:	d111      	bne.n	8005b9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b80:	d004      	beq.n	8005b8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b8a:	d107      	bne.n	8005b9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ba4:	d10f      	bne.n	8005bc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005bb4:	601a      	str	r2, [r3, #0]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005bc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e017      	b.n	8005c0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	3b01      	subs	r3, #1
 8005be8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	bf0c      	ite	eq
 8005bfa:	2301      	moveq	r3, #1
 8005bfc:	2300      	movne	r3, #0
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	461a      	mov	r2, r3
 8005c02:	79fb      	ldrb	r3, [r7, #7]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d19b      	bne.n	8005b40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3720      	adds	r7, #32
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	20000008 	.word	0x20000008

08005c18 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08a      	sub	sp, #40	@ 0x28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
 8005c24:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005c26:	2300      	movs	r3, #0
 8005c28:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005c2a:	f7fb ffc5 	bl	8001bb8 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c32:	1a9b      	subs	r3, r3, r2
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	4413      	add	r3, r2
 8005c38:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005c3a:	f7fb ffbd 	bl	8001bb8 <HAL_GetTick>
 8005c3e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	330c      	adds	r3, #12
 8005c46:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005c48:	4b3d      	ldr	r3, [pc, #244]	@ (8005d40 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	00da      	lsls	r2, r3, #3
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	0d1b      	lsrs	r3, r3, #20
 8005c58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c5a:	fb02 f303 	mul.w	r3, r2, r3
 8005c5e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005c60:	e060      	b.n	8005d24 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005c68:	d107      	bne.n	8005c7a <SPI_WaitFifoStateUntilTimeout+0x62>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d104      	bne.n	8005c7a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c80:	d050      	beq.n	8005d24 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c82:	f7fb ff99 	bl	8001bb8 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	6a3b      	ldr	r3, [r7, #32]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d902      	bls.n	8005c98 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d13d      	bne.n	8005d14 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ca6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cb0:	d111      	bne.n	8005cd6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cba:	d004      	beq.n	8005cc6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cc4:	d107      	bne.n	8005cd6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cd4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cde:	d10f      	bne.n	8005d00 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005cee:	601a      	str	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005cfe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e010      	b.n	8005d36 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689a      	ldr	r2, [r3, #8]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d196      	bne.n	8005c62 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3728      	adds	r7, #40	@ 0x28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000008 	.word	0x20000008

08005d44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af02      	add	r7, sp, #8
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f7ff ff5b 	bl	8005c18 <SPI_WaitFifoStateUntilTimeout>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d007      	beq.n	8005d78 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d6c:	f043 0220 	orr.w	r2, r3, #32
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e027      	b.n	8005dc8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	2180      	movs	r1, #128	@ 0x80
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f7ff fec0 	bl	8005b08 <SPI_WaitFlagStateUntilTimeout>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d007      	beq.n	8005d9e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d92:	f043 0220 	orr.w	r2, r3, #32
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e014      	b.n	8005dc8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f7ff ff34 	bl	8005c18 <SPI_WaitFifoStateUntilTimeout>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d007      	beq.n	8005dc6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dba:	f043 0220 	orr.w	r2, r3, #32
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e000      	b.n	8005dc8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e049      	b.n	8005e76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d106      	bne.n	8005dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7fb fd6a 	bl	80018d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3304      	adds	r3, #4
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	4610      	mov	r0, r2
 8005e10:	f000 faa4 	bl	800635c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b082      	sub	sp, #8
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e049      	b.n	8005f24 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d106      	bne.n	8005eaa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f841 	bl	8005f2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2202      	movs	r2, #2
 8005eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	4619      	mov	r1, r3
 8005ebc:	4610      	mov	r0, r2
 8005ebe:	f000 fa4d 	bl	800635c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3708      	adds	r7, #8
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d101      	bne.n	8005f5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	e0ff      	b.n	800615e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2b14      	cmp	r3, #20
 8005f6a:	f200 80f0 	bhi.w	800614e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f74:	08005fc9 	.word	0x08005fc9
 8005f78:	0800614f 	.word	0x0800614f
 8005f7c:	0800614f 	.word	0x0800614f
 8005f80:	0800614f 	.word	0x0800614f
 8005f84:	08006009 	.word	0x08006009
 8005f88:	0800614f 	.word	0x0800614f
 8005f8c:	0800614f 	.word	0x0800614f
 8005f90:	0800614f 	.word	0x0800614f
 8005f94:	0800604b 	.word	0x0800604b
 8005f98:	0800614f 	.word	0x0800614f
 8005f9c:	0800614f 	.word	0x0800614f
 8005fa0:	0800614f 	.word	0x0800614f
 8005fa4:	0800608b 	.word	0x0800608b
 8005fa8:	0800614f 	.word	0x0800614f
 8005fac:	0800614f 	.word	0x0800614f
 8005fb0:	0800614f 	.word	0x0800614f
 8005fb4:	080060cd 	.word	0x080060cd
 8005fb8:	0800614f 	.word	0x0800614f
 8005fbc:	0800614f 	.word	0x0800614f
 8005fc0:	0800614f 	.word	0x0800614f
 8005fc4:	0800610d 	.word	0x0800610d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68b9      	ldr	r1, [r7, #8]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 fa60 	bl	8006494 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	699a      	ldr	r2, [r3, #24]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f042 0208 	orr.w	r2, r2, #8
 8005fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	699a      	ldr	r2, [r3, #24]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 0204 	bic.w	r2, r2, #4
 8005ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6999      	ldr	r1, [r3, #24]
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	691a      	ldr	r2, [r3, #16]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	619a      	str	r2, [r3, #24]
      break;
 8006006:	e0a5      	b.n	8006154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68b9      	ldr	r1, [r7, #8]
 800600e:	4618      	mov	r0, r3
 8006010:	f000 fad0 	bl	80065b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	699a      	ldr	r2, [r3, #24]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	699a      	ldr	r2, [r3, #24]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6999      	ldr	r1, [r3, #24]
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	021a      	lsls	r2, r3, #8
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	619a      	str	r2, [r3, #24]
      break;
 8006048:	e084      	b.n	8006154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68b9      	ldr	r1, [r7, #8]
 8006050:	4618      	mov	r0, r3
 8006052:	f000 fb39 	bl	80066c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	69da      	ldr	r2, [r3, #28]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f042 0208 	orr.w	r2, r2, #8
 8006064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	69da      	ldr	r2, [r3, #28]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 0204 	bic.w	r2, r2, #4
 8006074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	69d9      	ldr	r1, [r3, #28]
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	691a      	ldr	r2, [r3, #16]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	61da      	str	r2, [r3, #28]
      break;
 8006088:	e064      	b.n	8006154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68b9      	ldr	r1, [r7, #8]
 8006090:	4618      	mov	r0, r3
 8006092:	f000 fba1 	bl	80067d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	69da      	ldr	r2, [r3, #28]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	69da      	ldr	r2, [r3, #28]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	69d9      	ldr	r1, [r3, #28]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	021a      	lsls	r2, r3, #8
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	61da      	str	r2, [r3, #28]
      break;
 80060ca:	e043      	b.n	8006154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68b9      	ldr	r1, [r7, #8]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 fc0a 	bl	80068ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f042 0208 	orr.w	r2, r2, #8
 80060e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 0204 	bic.w	r2, r2, #4
 80060f6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	691a      	ldr	r2, [r3, #16]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	430a      	orrs	r2, r1
 8006108:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800610a:	e023      	b.n	8006154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68b9      	ldr	r1, [r7, #8]
 8006112:	4618      	mov	r0, r3
 8006114:	f000 fc4e 	bl	80069b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006126:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006136:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	021a      	lsls	r2, r3, #8
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800614c:	e002      	b.n	8006154 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	75fb      	strb	r3, [r7, #23]
      break;
 8006152:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800615c:	7dfb      	ldrb	r3, [r7, #23]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3718      	adds	r7, #24
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop

08006168 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006172:	2300      	movs	r3, #0
 8006174:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800617c:	2b01      	cmp	r3, #1
 800617e:	d101      	bne.n	8006184 <HAL_TIM_ConfigClockSource+0x1c>
 8006180:	2302      	movs	r3, #2
 8006182:	e0de      	b.n	8006342 <HAL_TIM_ConfigClockSource+0x1da>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2202      	movs	r2, #2
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80061a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80061a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a63      	ldr	r2, [pc, #396]	@ (800634c <HAL_TIM_ConfigClockSource+0x1e4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	f000 80a9 	beq.w	8006316 <HAL_TIM_ConfigClockSource+0x1ae>
 80061c4:	4a61      	ldr	r2, [pc, #388]	@ (800634c <HAL_TIM_ConfigClockSource+0x1e4>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	f200 80ae 	bhi.w	8006328 <HAL_TIM_ConfigClockSource+0x1c0>
 80061cc:	4a60      	ldr	r2, [pc, #384]	@ (8006350 <HAL_TIM_ConfigClockSource+0x1e8>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	f000 80a1 	beq.w	8006316 <HAL_TIM_ConfigClockSource+0x1ae>
 80061d4:	4a5e      	ldr	r2, [pc, #376]	@ (8006350 <HAL_TIM_ConfigClockSource+0x1e8>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	f200 80a6 	bhi.w	8006328 <HAL_TIM_ConfigClockSource+0x1c0>
 80061dc:	4a5d      	ldr	r2, [pc, #372]	@ (8006354 <HAL_TIM_ConfigClockSource+0x1ec>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	f000 8099 	beq.w	8006316 <HAL_TIM_ConfigClockSource+0x1ae>
 80061e4:	4a5b      	ldr	r2, [pc, #364]	@ (8006354 <HAL_TIM_ConfigClockSource+0x1ec>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	f200 809e 	bhi.w	8006328 <HAL_TIM_ConfigClockSource+0x1c0>
 80061ec:	4a5a      	ldr	r2, [pc, #360]	@ (8006358 <HAL_TIM_ConfigClockSource+0x1f0>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	f000 8091 	beq.w	8006316 <HAL_TIM_ConfigClockSource+0x1ae>
 80061f4:	4a58      	ldr	r2, [pc, #352]	@ (8006358 <HAL_TIM_ConfigClockSource+0x1f0>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	f200 8096 	bhi.w	8006328 <HAL_TIM_ConfigClockSource+0x1c0>
 80061fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006200:	f000 8089 	beq.w	8006316 <HAL_TIM_ConfigClockSource+0x1ae>
 8006204:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006208:	f200 808e 	bhi.w	8006328 <HAL_TIM_ConfigClockSource+0x1c0>
 800620c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006210:	d03e      	beq.n	8006290 <HAL_TIM_ConfigClockSource+0x128>
 8006212:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006216:	f200 8087 	bhi.w	8006328 <HAL_TIM_ConfigClockSource+0x1c0>
 800621a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800621e:	f000 8086 	beq.w	800632e <HAL_TIM_ConfigClockSource+0x1c6>
 8006222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006226:	d87f      	bhi.n	8006328 <HAL_TIM_ConfigClockSource+0x1c0>
 8006228:	2b70      	cmp	r3, #112	@ 0x70
 800622a:	d01a      	beq.n	8006262 <HAL_TIM_ConfigClockSource+0xfa>
 800622c:	2b70      	cmp	r3, #112	@ 0x70
 800622e:	d87b      	bhi.n	8006328 <HAL_TIM_ConfigClockSource+0x1c0>
 8006230:	2b60      	cmp	r3, #96	@ 0x60
 8006232:	d050      	beq.n	80062d6 <HAL_TIM_ConfigClockSource+0x16e>
 8006234:	2b60      	cmp	r3, #96	@ 0x60
 8006236:	d877      	bhi.n	8006328 <HAL_TIM_ConfigClockSource+0x1c0>
 8006238:	2b50      	cmp	r3, #80	@ 0x50
 800623a:	d03c      	beq.n	80062b6 <HAL_TIM_ConfigClockSource+0x14e>
 800623c:	2b50      	cmp	r3, #80	@ 0x50
 800623e:	d873      	bhi.n	8006328 <HAL_TIM_ConfigClockSource+0x1c0>
 8006240:	2b40      	cmp	r3, #64	@ 0x40
 8006242:	d058      	beq.n	80062f6 <HAL_TIM_ConfigClockSource+0x18e>
 8006244:	2b40      	cmp	r3, #64	@ 0x40
 8006246:	d86f      	bhi.n	8006328 <HAL_TIM_ConfigClockSource+0x1c0>
 8006248:	2b30      	cmp	r3, #48	@ 0x30
 800624a:	d064      	beq.n	8006316 <HAL_TIM_ConfigClockSource+0x1ae>
 800624c:	2b30      	cmp	r3, #48	@ 0x30
 800624e:	d86b      	bhi.n	8006328 <HAL_TIM_ConfigClockSource+0x1c0>
 8006250:	2b20      	cmp	r3, #32
 8006252:	d060      	beq.n	8006316 <HAL_TIM_ConfigClockSource+0x1ae>
 8006254:	2b20      	cmp	r3, #32
 8006256:	d867      	bhi.n	8006328 <HAL_TIM_ConfigClockSource+0x1c0>
 8006258:	2b00      	cmp	r3, #0
 800625a:	d05c      	beq.n	8006316 <HAL_TIM_ConfigClockSource+0x1ae>
 800625c:	2b10      	cmp	r3, #16
 800625e:	d05a      	beq.n	8006316 <HAL_TIM_ConfigClockSource+0x1ae>
 8006260:	e062      	b.n	8006328 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006272:	f000 fc81 	bl	8006b78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006284:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	609a      	str	r2, [r3, #8]
      break;
 800628e:	e04f      	b.n	8006330 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062a0:	f000 fc6a 	bl	8006b78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689a      	ldr	r2, [r3, #8]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062b2:	609a      	str	r2, [r3, #8]
      break;
 80062b4:	e03c      	b.n	8006330 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062c2:	461a      	mov	r2, r3
 80062c4:	f000 fbdc 	bl	8006a80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2150      	movs	r1, #80	@ 0x50
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 fc35 	bl	8006b3e <TIM_ITRx_SetConfig>
      break;
 80062d4:	e02c      	b.n	8006330 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062e2:	461a      	mov	r2, r3
 80062e4:	f000 fbfb 	bl	8006ade <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2160      	movs	r1, #96	@ 0x60
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 fc25 	bl	8006b3e <TIM_ITRx_SetConfig>
      break;
 80062f4:	e01c      	b.n	8006330 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006302:	461a      	mov	r2, r3
 8006304:	f000 fbbc 	bl	8006a80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2140      	movs	r1, #64	@ 0x40
 800630e:	4618      	mov	r0, r3
 8006310:	f000 fc15 	bl	8006b3e <TIM_ITRx_SetConfig>
      break;
 8006314:	e00c      	b.n	8006330 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4619      	mov	r1, r3
 8006320:	4610      	mov	r0, r2
 8006322:	f000 fc0c 	bl	8006b3e <TIM_ITRx_SetConfig>
      break;
 8006326:	e003      	b.n	8006330 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	73fb      	strb	r3, [r7, #15]
      break;
 800632c:	e000      	b.n	8006330 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800632e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006340:	7bfb      	ldrb	r3, [r7, #15]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	00100070 	.word	0x00100070
 8006350:	00100040 	.word	0x00100040
 8006354:	00100030 	.word	0x00100030
 8006358:	00100020 	.word	0x00100020

0800635c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a42      	ldr	r2, [pc, #264]	@ (8006478 <TIM_Base_SetConfig+0x11c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d00f      	beq.n	8006394 <TIM_Base_SetConfig+0x38>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800637a:	d00b      	beq.n	8006394 <TIM_Base_SetConfig+0x38>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a3f      	ldr	r2, [pc, #252]	@ (800647c <TIM_Base_SetConfig+0x120>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d007      	beq.n	8006394 <TIM_Base_SetConfig+0x38>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a3e      	ldr	r2, [pc, #248]	@ (8006480 <TIM_Base_SetConfig+0x124>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d003      	beq.n	8006394 <TIM_Base_SetConfig+0x38>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a3d      	ldr	r2, [pc, #244]	@ (8006484 <TIM_Base_SetConfig+0x128>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d108      	bne.n	80063a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800639a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a33      	ldr	r2, [pc, #204]	@ (8006478 <TIM_Base_SetConfig+0x11c>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d01b      	beq.n	80063e6 <TIM_Base_SetConfig+0x8a>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063b4:	d017      	beq.n	80063e6 <TIM_Base_SetConfig+0x8a>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a30      	ldr	r2, [pc, #192]	@ (800647c <TIM_Base_SetConfig+0x120>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d013      	beq.n	80063e6 <TIM_Base_SetConfig+0x8a>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a2f      	ldr	r2, [pc, #188]	@ (8006480 <TIM_Base_SetConfig+0x124>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d00f      	beq.n	80063e6 <TIM_Base_SetConfig+0x8a>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a2e      	ldr	r2, [pc, #184]	@ (8006484 <TIM_Base_SetConfig+0x128>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d00b      	beq.n	80063e6 <TIM_Base_SetConfig+0x8a>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a2d      	ldr	r2, [pc, #180]	@ (8006488 <TIM_Base_SetConfig+0x12c>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d007      	beq.n	80063e6 <TIM_Base_SetConfig+0x8a>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a2c      	ldr	r2, [pc, #176]	@ (800648c <TIM_Base_SetConfig+0x130>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d003      	beq.n	80063e6 <TIM_Base_SetConfig+0x8a>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a2b      	ldr	r2, [pc, #172]	@ (8006490 <TIM_Base_SetConfig+0x134>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d108      	bne.n	80063f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	4313      	orrs	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	689a      	ldr	r2, [r3, #8]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a16      	ldr	r2, [pc, #88]	@ (8006478 <TIM_Base_SetConfig+0x11c>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d00f      	beq.n	8006444 <TIM_Base_SetConfig+0xe8>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a17      	ldr	r2, [pc, #92]	@ (8006484 <TIM_Base_SetConfig+0x128>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d00b      	beq.n	8006444 <TIM_Base_SetConfig+0xe8>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a16      	ldr	r2, [pc, #88]	@ (8006488 <TIM_Base_SetConfig+0x12c>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d007      	beq.n	8006444 <TIM_Base_SetConfig+0xe8>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a15      	ldr	r2, [pc, #84]	@ (800648c <TIM_Base_SetConfig+0x130>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d003      	beq.n	8006444 <TIM_Base_SetConfig+0xe8>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a14      	ldr	r2, [pc, #80]	@ (8006490 <TIM_Base_SetConfig+0x134>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d103      	bne.n	800644c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	691a      	ldr	r2, [r3, #16]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b01      	cmp	r3, #1
 800645c:	d105      	bne.n	800646a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	f023 0201 	bic.w	r2, r3, #1
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	611a      	str	r2, [r3, #16]
  }
}
 800646a:	bf00      	nop
 800646c:	3714      	adds	r7, #20
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	40012c00 	.word	0x40012c00
 800647c:	40000400 	.word	0x40000400
 8006480:	40000800 	.word	0x40000800
 8006484:	40013400 	.word	0x40013400
 8006488:	40014000 	.word	0x40014000
 800648c:	40014400 	.word	0x40014400
 8006490:	40014800 	.word	0x40014800

08006494 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	f023 0201 	bic.w	r2, r3, #1
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0303 	bic.w	r3, r3, #3
 80064ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f023 0302 	bic.w	r3, r3, #2
 80064e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a2c      	ldr	r2, [pc, #176]	@ (80065a0 <TIM_OC1_SetConfig+0x10c>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d00f      	beq.n	8006514 <TIM_OC1_SetConfig+0x80>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a2b      	ldr	r2, [pc, #172]	@ (80065a4 <TIM_OC1_SetConfig+0x110>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d00b      	beq.n	8006514 <TIM_OC1_SetConfig+0x80>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a2a      	ldr	r2, [pc, #168]	@ (80065a8 <TIM_OC1_SetConfig+0x114>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d007      	beq.n	8006514 <TIM_OC1_SetConfig+0x80>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a29      	ldr	r2, [pc, #164]	@ (80065ac <TIM_OC1_SetConfig+0x118>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d003      	beq.n	8006514 <TIM_OC1_SetConfig+0x80>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a28      	ldr	r2, [pc, #160]	@ (80065b0 <TIM_OC1_SetConfig+0x11c>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d10c      	bne.n	800652e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f023 0308 	bic.w	r3, r3, #8
 800651a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	4313      	orrs	r3, r2
 8006524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f023 0304 	bic.w	r3, r3, #4
 800652c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a1b      	ldr	r2, [pc, #108]	@ (80065a0 <TIM_OC1_SetConfig+0x10c>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d00f      	beq.n	8006556 <TIM_OC1_SetConfig+0xc2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a1a      	ldr	r2, [pc, #104]	@ (80065a4 <TIM_OC1_SetConfig+0x110>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d00b      	beq.n	8006556 <TIM_OC1_SetConfig+0xc2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a19      	ldr	r2, [pc, #100]	@ (80065a8 <TIM_OC1_SetConfig+0x114>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d007      	beq.n	8006556 <TIM_OC1_SetConfig+0xc2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a18      	ldr	r2, [pc, #96]	@ (80065ac <TIM_OC1_SetConfig+0x118>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d003      	beq.n	8006556 <TIM_OC1_SetConfig+0xc2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a17      	ldr	r2, [pc, #92]	@ (80065b0 <TIM_OC1_SetConfig+0x11c>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d111      	bne.n	800657a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800655c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	4313      	orrs	r3, r2
 800656e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	4313      	orrs	r3, r2
 8006578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	621a      	str	r2, [r3, #32]
}
 8006594:	bf00      	nop
 8006596:	371c      	adds	r7, #28
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr
 80065a0:	40012c00 	.word	0x40012c00
 80065a4:	40013400 	.word	0x40013400
 80065a8:	40014000 	.word	0x40014000
 80065ac:	40014400 	.word	0x40014400
 80065b0:	40014800 	.word	0x40014800

080065b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b087      	sub	sp, #28
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a1b      	ldr	r3, [r3, #32]
 80065c8:	f023 0210 	bic.w	r2, r3, #16
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	021b      	lsls	r3, r3, #8
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f023 0320 	bic.w	r3, r3, #32
 8006602:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	011b      	lsls	r3, r3, #4
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	4313      	orrs	r3, r2
 800660e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a28      	ldr	r2, [pc, #160]	@ (80066b4 <TIM_OC2_SetConfig+0x100>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d003      	beq.n	8006620 <TIM_OC2_SetConfig+0x6c>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a27      	ldr	r2, [pc, #156]	@ (80066b8 <TIM_OC2_SetConfig+0x104>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d10d      	bne.n	800663c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	011b      	lsls	r3, r3, #4
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	4313      	orrs	r3, r2
 8006632:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800663a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a1d      	ldr	r2, [pc, #116]	@ (80066b4 <TIM_OC2_SetConfig+0x100>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d00f      	beq.n	8006664 <TIM_OC2_SetConfig+0xb0>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a1c      	ldr	r2, [pc, #112]	@ (80066b8 <TIM_OC2_SetConfig+0x104>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d00b      	beq.n	8006664 <TIM_OC2_SetConfig+0xb0>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a1b      	ldr	r2, [pc, #108]	@ (80066bc <TIM_OC2_SetConfig+0x108>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d007      	beq.n	8006664 <TIM_OC2_SetConfig+0xb0>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a1a      	ldr	r2, [pc, #104]	@ (80066c0 <TIM_OC2_SetConfig+0x10c>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d003      	beq.n	8006664 <TIM_OC2_SetConfig+0xb0>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a19      	ldr	r2, [pc, #100]	@ (80066c4 <TIM_OC2_SetConfig+0x110>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d113      	bne.n	800668c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800666a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006672:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	4313      	orrs	r3, r2
 800667e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	4313      	orrs	r3, r2
 800668a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	621a      	str	r2, [r3, #32]
}
 80066a6:	bf00      	nop
 80066a8:	371c      	adds	r7, #28
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	40012c00 	.word	0x40012c00
 80066b8:	40013400 	.word	0x40013400
 80066bc:	40014000 	.word	0x40014000
 80066c0:	40014400 	.word	0x40014400
 80066c4:	40014800 	.word	0x40014800

080066c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b087      	sub	sp, #28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f023 0303 	bic.w	r3, r3, #3
 8006702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	4313      	orrs	r3, r2
 800670c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	021b      	lsls	r3, r3, #8
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	4313      	orrs	r3, r2
 8006720:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a27      	ldr	r2, [pc, #156]	@ (80067c4 <TIM_OC3_SetConfig+0xfc>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d003      	beq.n	8006732 <TIM_OC3_SetConfig+0x6a>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a26      	ldr	r2, [pc, #152]	@ (80067c8 <TIM_OC3_SetConfig+0x100>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d10d      	bne.n	800674e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006738:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	021b      	lsls	r3, r3, #8
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	4313      	orrs	r3, r2
 8006744:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800674c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a1c      	ldr	r2, [pc, #112]	@ (80067c4 <TIM_OC3_SetConfig+0xfc>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d00f      	beq.n	8006776 <TIM_OC3_SetConfig+0xae>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a1b      	ldr	r2, [pc, #108]	@ (80067c8 <TIM_OC3_SetConfig+0x100>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d00b      	beq.n	8006776 <TIM_OC3_SetConfig+0xae>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a1a      	ldr	r2, [pc, #104]	@ (80067cc <TIM_OC3_SetConfig+0x104>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d007      	beq.n	8006776 <TIM_OC3_SetConfig+0xae>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a19      	ldr	r2, [pc, #100]	@ (80067d0 <TIM_OC3_SetConfig+0x108>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d003      	beq.n	8006776 <TIM_OC3_SetConfig+0xae>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a18      	ldr	r2, [pc, #96]	@ (80067d4 <TIM_OC3_SetConfig+0x10c>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d113      	bne.n	800679e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800677c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	011b      	lsls	r3, r3, #4
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	4313      	orrs	r3, r2
 8006790:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	011b      	lsls	r3, r3, #4
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	4313      	orrs	r3, r2
 800679c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	685a      	ldr	r2, [r3, #4]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	621a      	str	r2, [r3, #32]
}
 80067b8:	bf00      	nop
 80067ba:	371c      	adds	r7, #28
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr
 80067c4:	40012c00 	.word	0x40012c00
 80067c8:	40013400 	.word	0x40013400
 80067cc:	40014000 	.word	0x40014000
 80067d0:	40014400 	.word	0x40014400
 80067d4:	40014800 	.word	0x40014800

080067d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067d8:	b480      	push	{r7}
 80067da:	b087      	sub	sp, #28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006806:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800680a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006812:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	021b      	lsls	r3, r3, #8
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	4313      	orrs	r3, r2
 800681e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006826:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	031b      	lsls	r3, r3, #12
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	4313      	orrs	r3, r2
 8006832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a28      	ldr	r2, [pc, #160]	@ (80068d8 <TIM_OC4_SetConfig+0x100>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d003      	beq.n	8006844 <TIM_OC4_SetConfig+0x6c>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a27      	ldr	r2, [pc, #156]	@ (80068dc <TIM_OC4_SetConfig+0x104>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d10d      	bne.n	8006860 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800684a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	031b      	lsls	r3, r3, #12
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	4313      	orrs	r3, r2
 8006856:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800685e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a1d      	ldr	r2, [pc, #116]	@ (80068d8 <TIM_OC4_SetConfig+0x100>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d00f      	beq.n	8006888 <TIM_OC4_SetConfig+0xb0>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a1c      	ldr	r2, [pc, #112]	@ (80068dc <TIM_OC4_SetConfig+0x104>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d00b      	beq.n	8006888 <TIM_OC4_SetConfig+0xb0>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a1b      	ldr	r2, [pc, #108]	@ (80068e0 <TIM_OC4_SetConfig+0x108>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d007      	beq.n	8006888 <TIM_OC4_SetConfig+0xb0>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a1a      	ldr	r2, [pc, #104]	@ (80068e4 <TIM_OC4_SetConfig+0x10c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d003      	beq.n	8006888 <TIM_OC4_SetConfig+0xb0>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a19      	ldr	r2, [pc, #100]	@ (80068e8 <TIM_OC4_SetConfig+0x110>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d113      	bne.n	80068b0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800688e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006896:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	019b      	lsls	r3, r3, #6
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	019b      	lsls	r3, r3, #6
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	621a      	str	r2, [r3, #32]
}
 80068ca:	bf00      	nop
 80068cc:	371c      	adds	r7, #28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	40012c00 	.word	0x40012c00
 80068dc:	40013400 	.word	0x40013400
 80068e0:	40014000 	.word	0x40014000
 80068e4:	40014400 	.word	0x40014400
 80068e8:	40014800 	.word	0x40014800

080068ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800691a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800691e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	4313      	orrs	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006930:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	041b      	lsls	r3, r3, #16
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	4313      	orrs	r3, r2
 800693c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a17      	ldr	r2, [pc, #92]	@ (80069a0 <TIM_OC5_SetConfig+0xb4>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d00f      	beq.n	8006966 <TIM_OC5_SetConfig+0x7a>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a16      	ldr	r2, [pc, #88]	@ (80069a4 <TIM_OC5_SetConfig+0xb8>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d00b      	beq.n	8006966 <TIM_OC5_SetConfig+0x7a>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a15      	ldr	r2, [pc, #84]	@ (80069a8 <TIM_OC5_SetConfig+0xbc>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d007      	beq.n	8006966 <TIM_OC5_SetConfig+0x7a>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a14      	ldr	r2, [pc, #80]	@ (80069ac <TIM_OC5_SetConfig+0xc0>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d003      	beq.n	8006966 <TIM_OC5_SetConfig+0x7a>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a13      	ldr	r2, [pc, #76]	@ (80069b0 <TIM_OC5_SetConfig+0xc4>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d109      	bne.n	800697a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800696c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	021b      	lsls	r3, r3, #8
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	4313      	orrs	r3, r2
 8006978:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685a      	ldr	r2, [r3, #4]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	621a      	str	r2, [r3, #32]
}
 8006994:	bf00      	nop
 8006996:	371c      	adds	r7, #28
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	40012c00 	.word	0x40012c00
 80069a4:	40013400 	.word	0x40013400
 80069a8:	40014000 	.word	0x40014000
 80069ac:	40014400 	.word	0x40014400
 80069b0:	40014800 	.word	0x40014800

080069b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b087      	sub	sp, #28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a1b      	ldr	r3, [r3, #32]
 80069c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	021b      	lsls	r3, r3, #8
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	051b      	lsls	r3, r3, #20
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a18      	ldr	r2, [pc, #96]	@ (8006a6c <TIM_OC6_SetConfig+0xb8>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d00f      	beq.n	8006a30 <TIM_OC6_SetConfig+0x7c>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a17      	ldr	r2, [pc, #92]	@ (8006a70 <TIM_OC6_SetConfig+0xbc>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d00b      	beq.n	8006a30 <TIM_OC6_SetConfig+0x7c>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a16      	ldr	r2, [pc, #88]	@ (8006a74 <TIM_OC6_SetConfig+0xc0>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d007      	beq.n	8006a30 <TIM_OC6_SetConfig+0x7c>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a15      	ldr	r2, [pc, #84]	@ (8006a78 <TIM_OC6_SetConfig+0xc4>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d003      	beq.n	8006a30 <TIM_OC6_SetConfig+0x7c>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a14      	ldr	r2, [pc, #80]	@ (8006a7c <TIM_OC6_SetConfig+0xc8>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d109      	bne.n	8006a44 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	029b      	lsls	r3, r3, #10
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	621a      	str	r2, [r3, #32]
}
 8006a5e:	bf00      	nop
 8006a60:	371c      	adds	r7, #28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	40012c00 	.word	0x40012c00
 8006a70:	40013400 	.word	0x40013400
 8006a74:	40014000 	.word	0x40014000
 8006a78:	40014400 	.word	0x40014400
 8006a7c:	40014800 	.word	0x40014800

08006a80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	f023 0201 	bic.w	r2, r3, #1
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006aaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	011b      	lsls	r3, r3, #4
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	f023 030a 	bic.w	r3, r3, #10
 8006abc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	621a      	str	r2, [r3, #32]
}
 8006ad2:	bf00      	nop
 8006ad4:	371c      	adds	r7, #28
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b087      	sub	sp, #28
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	60f8      	str	r0, [r7, #12]
 8006ae6:	60b9      	str	r1, [r7, #8]
 8006ae8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	f023 0210 	bic.w	r2, r3, #16
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	031b      	lsls	r3, r3, #12
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	011b      	lsls	r3, r3, #4
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	621a      	str	r2, [r3, #32]
}
 8006b32:	bf00      	nop
 8006b34:	371c      	adds	r7, #28
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b085      	sub	sp, #20
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006b54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b5a:	683a      	ldr	r2, [r7, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	f043 0307 	orr.w	r3, r3, #7
 8006b64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	609a      	str	r2, [r3, #8]
}
 8006b6c:	bf00      	nop
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b087      	sub	sp, #28
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
 8006b84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	021a      	lsls	r2, r3, #8
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	609a      	str	r2, [r3, #8]
}
 8006bac:	bf00      	nop
 8006bae:	371c      	adds	r7, #28
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d101      	bne.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bcc:	2302      	movs	r3, #2
 8006bce:	e065      	b.n	8006c9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2202      	movs	r2, #2
 8006bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a2c      	ldr	r2, [pc, #176]	@ (8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d004      	beq.n	8006c04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a2b      	ldr	r2, [pc, #172]	@ (8006cac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d108      	bne.n	8006c16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006c0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006c1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a1b      	ldr	r2, [pc, #108]	@ (8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d018      	beq.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c46:	d013      	beq.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a18      	ldr	r2, [pc, #96]	@ (8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d00e      	beq.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a17      	ldr	r2, [pc, #92]	@ (8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d009      	beq.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a12      	ldr	r2, [pc, #72]	@ (8006cac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d004      	beq.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a13      	ldr	r2, [pc, #76]	@ (8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d10c      	bne.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr
 8006ca8:	40012c00 	.word	0x40012c00
 8006cac:	40013400 	.word	0x40013400
 8006cb0:	40000400 	.word	0x40000400
 8006cb4:	40000800 	.word	0x40000800
 8006cb8:	40014000 	.word	0x40014000

08006cbc <std>:
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	b510      	push	{r4, lr}
 8006cc0:	4604      	mov	r4, r0
 8006cc2:	e9c0 3300 	strd	r3, r3, [r0]
 8006cc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cca:	6083      	str	r3, [r0, #8]
 8006ccc:	8181      	strh	r1, [r0, #12]
 8006cce:	6643      	str	r3, [r0, #100]	@ 0x64
 8006cd0:	81c2      	strh	r2, [r0, #14]
 8006cd2:	6183      	str	r3, [r0, #24]
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	2208      	movs	r2, #8
 8006cd8:	305c      	adds	r0, #92	@ 0x5c
 8006cda:	f000 f9f9 	bl	80070d0 <memset>
 8006cde:	4b0d      	ldr	r3, [pc, #52]	@ (8006d14 <std+0x58>)
 8006ce0:	6263      	str	r3, [r4, #36]	@ 0x24
 8006ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8006d18 <std+0x5c>)
 8006ce4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8006d1c <std+0x60>)
 8006ce8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006cea:	4b0d      	ldr	r3, [pc, #52]	@ (8006d20 <std+0x64>)
 8006cec:	6323      	str	r3, [r4, #48]	@ 0x30
 8006cee:	4b0d      	ldr	r3, [pc, #52]	@ (8006d24 <std+0x68>)
 8006cf0:	6224      	str	r4, [r4, #32]
 8006cf2:	429c      	cmp	r4, r3
 8006cf4:	d006      	beq.n	8006d04 <std+0x48>
 8006cf6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006cfa:	4294      	cmp	r4, r2
 8006cfc:	d002      	beq.n	8006d04 <std+0x48>
 8006cfe:	33d0      	adds	r3, #208	@ 0xd0
 8006d00:	429c      	cmp	r4, r3
 8006d02:	d105      	bne.n	8006d10 <std+0x54>
 8006d04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d0c:	f000 ba58 	b.w	80071c0 <__retarget_lock_init_recursive>
 8006d10:	bd10      	pop	{r4, pc}
 8006d12:	bf00      	nop
 8006d14:	08006f21 	.word	0x08006f21
 8006d18:	08006f43 	.word	0x08006f43
 8006d1c:	08006f7b 	.word	0x08006f7b
 8006d20:	08006f9f 	.word	0x08006f9f
 8006d24:	20000288 	.word	0x20000288

08006d28 <stdio_exit_handler>:
 8006d28:	4a02      	ldr	r2, [pc, #8]	@ (8006d34 <stdio_exit_handler+0xc>)
 8006d2a:	4903      	ldr	r1, [pc, #12]	@ (8006d38 <stdio_exit_handler+0x10>)
 8006d2c:	4803      	ldr	r0, [pc, #12]	@ (8006d3c <stdio_exit_handler+0x14>)
 8006d2e:	f000 b869 	b.w	8006e04 <_fwalk_sglue>
 8006d32:	bf00      	nop
 8006d34:	20000014 	.word	0x20000014
 8006d38:	08007a61 	.word	0x08007a61
 8006d3c:	20000024 	.word	0x20000024

08006d40 <cleanup_stdio>:
 8006d40:	6841      	ldr	r1, [r0, #4]
 8006d42:	4b0c      	ldr	r3, [pc, #48]	@ (8006d74 <cleanup_stdio+0x34>)
 8006d44:	4299      	cmp	r1, r3
 8006d46:	b510      	push	{r4, lr}
 8006d48:	4604      	mov	r4, r0
 8006d4a:	d001      	beq.n	8006d50 <cleanup_stdio+0x10>
 8006d4c:	f000 fe88 	bl	8007a60 <_fflush_r>
 8006d50:	68a1      	ldr	r1, [r4, #8]
 8006d52:	4b09      	ldr	r3, [pc, #36]	@ (8006d78 <cleanup_stdio+0x38>)
 8006d54:	4299      	cmp	r1, r3
 8006d56:	d002      	beq.n	8006d5e <cleanup_stdio+0x1e>
 8006d58:	4620      	mov	r0, r4
 8006d5a:	f000 fe81 	bl	8007a60 <_fflush_r>
 8006d5e:	68e1      	ldr	r1, [r4, #12]
 8006d60:	4b06      	ldr	r3, [pc, #24]	@ (8006d7c <cleanup_stdio+0x3c>)
 8006d62:	4299      	cmp	r1, r3
 8006d64:	d004      	beq.n	8006d70 <cleanup_stdio+0x30>
 8006d66:	4620      	mov	r0, r4
 8006d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d6c:	f000 be78 	b.w	8007a60 <_fflush_r>
 8006d70:	bd10      	pop	{r4, pc}
 8006d72:	bf00      	nop
 8006d74:	20000288 	.word	0x20000288
 8006d78:	200002f0 	.word	0x200002f0
 8006d7c:	20000358 	.word	0x20000358

08006d80 <global_stdio_init.part.0>:
 8006d80:	b510      	push	{r4, lr}
 8006d82:	4b0b      	ldr	r3, [pc, #44]	@ (8006db0 <global_stdio_init.part.0+0x30>)
 8006d84:	4c0b      	ldr	r4, [pc, #44]	@ (8006db4 <global_stdio_init.part.0+0x34>)
 8006d86:	4a0c      	ldr	r2, [pc, #48]	@ (8006db8 <global_stdio_init.part.0+0x38>)
 8006d88:	601a      	str	r2, [r3, #0]
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	2104      	movs	r1, #4
 8006d90:	f7ff ff94 	bl	8006cbc <std>
 8006d94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d98:	2201      	movs	r2, #1
 8006d9a:	2109      	movs	r1, #9
 8006d9c:	f7ff ff8e 	bl	8006cbc <std>
 8006da0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006da4:	2202      	movs	r2, #2
 8006da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006daa:	2112      	movs	r1, #18
 8006dac:	f7ff bf86 	b.w	8006cbc <std>
 8006db0:	200003c0 	.word	0x200003c0
 8006db4:	20000288 	.word	0x20000288
 8006db8:	08006d29 	.word	0x08006d29

08006dbc <__sfp_lock_acquire>:
 8006dbc:	4801      	ldr	r0, [pc, #4]	@ (8006dc4 <__sfp_lock_acquire+0x8>)
 8006dbe:	f000 ba00 	b.w	80071c2 <__retarget_lock_acquire_recursive>
 8006dc2:	bf00      	nop
 8006dc4:	200003c9 	.word	0x200003c9

08006dc8 <__sfp_lock_release>:
 8006dc8:	4801      	ldr	r0, [pc, #4]	@ (8006dd0 <__sfp_lock_release+0x8>)
 8006dca:	f000 b9fb 	b.w	80071c4 <__retarget_lock_release_recursive>
 8006dce:	bf00      	nop
 8006dd0:	200003c9 	.word	0x200003c9

08006dd4 <__sinit>:
 8006dd4:	b510      	push	{r4, lr}
 8006dd6:	4604      	mov	r4, r0
 8006dd8:	f7ff fff0 	bl	8006dbc <__sfp_lock_acquire>
 8006ddc:	6a23      	ldr	r3, [r4, #32]
 8006dde:	b11b      	cbz	r3, 8006de8 <__sinit+0x14>
 8006de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006de4:	f7ff bff0 	b.w	8006dc8 <__sfp_lock_release>
 8006de8:	4b04      	ldr	r3, [pc, #16]	@ (8006dfc <__sinit+0x28>)
 8006dea:	6223      	str	r3, [r4, #32]
 8006dec:	4b04      	ldr	r3, [pc, #16]	@ (8006e00 <__sinit+0x2c>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1f5      	bne.n	8006de0 <__sinit+0xc>
 8006df4:	f7ff ffc4 	bl	8006d80 <global_stdio_init.part.0>
 8006df8:	e7f2      	b.n	8006de0 <__sinit+0xc>
 8006dfa:	bf00      	nop
 8006dfc:	08006d41 	.word	0x08006d41
 8006e00:	200003c0 	.word	0x200003c0

08006e04 <_fwalk_sglue>:
 8006e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e08:	4607      	mov	r7, r0
 8006e0a:	4688      	mov	r8, r1
 8006e0c:	4614      	mov	r4, r2
 8006e0e:	2600      	movs	r6, #0
 8006e10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e14:	f1b9 0901 	subs.w	r9, r9, #1
 8006e18:	d505      	bpl.n	8006e26 <_fwalk_sglue+0x22>
 8006e1a:	6824      	ldr	r4, [r4, #0]
 8006e1c:	2c00      	cmp	r4, #0
 8006e1e:	d1f7      	bne.n	8006e10 <_fwalk_sglue+0xc>
 8006e20:	4630      	mov	r0, r6
 8006e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e26:	89ab      	ldrh	r3, [r5, #12]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d907      	bls.n	8006e3c <_fwalk_sglue+0x38>
 8006e2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e30:	3301      	adds	r3, #1
 8006e32:	d003      	beq.n	8006e3c <_fwalk_sglue+0x38>
 8006e34:	4629      	mov	r1, r5
 8006e36:	4638      	mov	r0, r7
 8006e38:	47c0      	blx	r8
 8006e3a:	4306      	orrs	r6, r0
 8006e3c:	3568      	adds	r5, #104	@ 0x68
 8006e3e:	e7e9      	b.n	8006e14 <_fwalk_sglue+0x10>

08006e40 <iprintf>:
 8006e40:	b40f      	push	{r0, r1, r2, r3}
 8006e42:	b507      	push	{r0, r1, r2, lr}
 8006e44:	4906      	ldr	r1, [pc, #24]	@ (8006e60 <iprintf+0x20>)
 8006e46:	ab04      	add	r3, sp, #16
 8006e48:	6808      	ldr	r0, [r1, #0]
 8006e4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e4e:	6881      	ldr	r1, [r0, #8]
 8006e50:	9301      	str	r3, [sp, #4]
 8006e52:	f000 fadb 	bl	800740c <_vfiprintf_r>
 8006e56:	b003      	add	sp, #12
 8006e58:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e5c:	b004      	add	sp, #16
 8006e5e:	4770      	bx	lr
 8006e60:	20000020 	.word	0x20000020

08006e64 <_puts_r>:
 8006e64:	6a03      	ldr	r3, [r0, #32]
 8006e66:	b570      	push	{r4, r5, r6, lr}
 8006e68:	6884      	ldr	r4, [r0, #8]
 8006e6a:	4605      	mov	r5, r0
 8006e6c:	460e      	mov	r6, r1
 8006e6e:	b90b      	cbnz	r3, 8006e74 <_puts_r+0x10>
 8006e70:	f7ff ffb0 	bl	8006dd4 <__sinit>
 8006e74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e76:	07db      	lsls	r3, r3, #31
 8006e78:	d405      	bmi.n	8006e86 <_puts_r+0x22>
 8006e7a:	89a3      	ldrh	r3, [r4, #12]
 8006e7c:	0598      	lsls	r0, r3, #22
 8006e7e:	d402      	bmi.n	8006e86 <_puts_r+0x22>
 8006e80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e82:	f000 f99e 	bl	80071c2 <__retarget_lock_acquire_recursive>
 8006e86:	89a3      	ldrh	r3, [r4, #12]
 8006e88:	0719      	lsls	r1, r3, #28
 8006e8a:	d502      	bpl.n	8006e92 <_puts_r+0x2e>
 8006e8c:	6923      	ldr	r3, [r4, #16]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d135      	bne.n	8006efe <_puts_r+0x9a>
 8006e92:	4621      	mov	r1, r4
 8006e94:	4628      	mov	r0, r5
 8006e96:	f000 f8c5 	bl	8007024 <__swsetup_r>
 8006e9a:	b380      	cbz	r0, 8006efe <_puts_r+0x9a>
 8006e9c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006ea0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ea2:	07da      	lsls	r2, r3, #31
 8006ea4:	d405      	bmi.n	8006eb2 <_puts_r+0x4e>
 8006ea6:	89a3      	ldrh	r3, [r4, #12]
 8006ea8:	059b      	lsls	r3, r3, #22
 8006eaa:	d402      	bmi.n	8006eb2 <_puts_r+0x4e>
 8006eac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006eae:	f000 f989 	bl	80071c4 <__retarget_lock_release_recursive>
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	bd70      	pop	{r4, r5, r6, pc}
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	da04      	bge.n	8006ec4 <_puts_r+0x60>
 8006eba:	69a2      	ldr	r2, [r4, #24]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	dc17      	bgt.n	8006ef0 <_puts_r+0x8c>
 8006ec0:	290a      	cmp	r1, #10
 8006ec2:	d015      	beq.n	8006ef0 <_puts_r+0x8c>
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	6022      	str	r2, [r4, #0]
 8006eca:	7019      	strb	r1, [r3, #0]
 8006ecc:	68a3      	ldr	r3, [r4, #8]
 8006ece:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	60a3      	str	r3, [r4, #8]
 8006ed6:	2900      	cmp	r1, #0
 8006ed8:	d1ed      	bne.n	8006eb6 <_puts_r+0x52>
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	da11      	bge.n	8006f02 <_puts_r+0x9e>
 8006ede:	4622      	mov	r2, r4
 8006ee0:	210a      	movs	r1, #10
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	f000 f85f 	bl	8006fa6 <__swbuf_r>
 8006ee8:	3001      	adds	r0, #1
 8006eea:	d0d7      	beq.n	8006e9c <_puts_r+0x38>
 8006eec:	250a      	movs	r5, #10
 8006eee:	e7d7      	b.n	8006ea0 <_puts_r+0x3c>
 8006ef0:	4622      	mov	r2, r4
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	f000 f857 	bl	8006fa6 <__swbuf_r>
 8006ef8:	3001      	adds	r0, #1
 8006efa:	d1e7      	bne.n	8006ecc <_puts_r+0x68>
 8006efc:	e7ce      	b.n	8006e9c <_puts_r+0x38>
 8006efe:	3e01      	subs	r6, #1
 8006f00:	e7e4      	b.n	8006ecc <_puts_r+0x68>
 8006f02:	6823      	ldr	r3, [r4, #0]
 8006f04:	1c5a      	adds	r2, r3, #1
 8006f06:	6022      	str	r2, [r4, #0]
 8006f08:	220a      	movs	r2, #10
 8006f0a:	701a      	strb	r2, [r3, #0]
 8006f0c:	e7ee      	b.n	8006eec <_puts_r+0x88>
	...

08006f10 <puts>:
 8006f10:	4b02      	ldr	r3, [pc, #8]	@ (8006f1c <puts+0xc>)
 8006f12:	4601      	mov	r1, r0
 8006f14:	6818      	ldr	r0, [r3, #0]
 8006f16:	f7ff bfa5 	b.w	8006e64 <_puts_r>
 8006f1a:	bf00      	nop
 8006f1c:	20000020 	.word	0x20000020

08006f20 <__sread>:
 8006f20:	b510      	push	{r4, lr}
 8006f22:	460c      	mov	r4, r1
 8006f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f28:	f000 f8fc 	bl	8007124 <_read_r>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	bfab      	itete	ge
 8006f30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f32:	89a3      	ldrhlt	r3, [r4, #12]
 8006f34:	181b      	addge	r3, r3, r0
 8006f36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f3a:	bfac      	ite	ge
 8006f3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f3e:	81a3      	strhlt	r3, [r4, #12]
 8006f40:	bd10      	pop	{r4, pc}

08006f42 <__swrite>:
 8006f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f46:	461f      	mov	r7, r3
 8006f48:	898b      	ldrh	r3, [r1, #12]
 8006f4a:	05db      	lsls	r3, r3, #23
 8006f4c:	4605      	mov	r5, r0
 8006f4e:	460c      	mov	r4, r1
 8006f50:	4616      	mov	r6, r2
 8006f52:	d505      	bpl.n	8006f60 <__swrite+0x1e>
 8006f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f58:	2302      	movs	r3, #2
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f000 f8d0 	bl	8007100 <_lseek_r>
 8006f60:	89a3      	ldrh	r3, [r4, #12]
 8006f62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f6a:	81a3      	strh	r3, [r4, #12]
 8006f6c:	4632      	mov	r2, r6
 8006f6e:	463b      	mov	r3, r7
 8006f70:	4628      	mov	r0, r5
 8006f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f76:	f000 b8e7 	b.w	8007148 <_write_r>

08006f7a <__sseek>:
 8006f7a:	b510      	push	{r4, lr}
 8006f7c:	460c      	mov	r4, r1
 8006f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f82:	f000 f8bd 	bl	8007100 <_lseek_r>
 8006f86:	1c43      	adds	r3, r0, #1
 8006f88:	89a3      	ldrh	r3, [r4, #12]
 8006f8a:	bf15      	itete	ne
 8006f8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f96:	81a3      	strheq	r3, [r4, #12]
 8006f98:	bf18      	it	ne
 8006f9a:	81a3      	strhne	r3, [r4, #12]
 8006f9c:	bd10      	pop	{r4, pc}

08006f9e <__sclose>:
 8006f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fa2:	f000 b89d 	b.w	80070e0 <_close_r>

08006fa6 <__swbuf_r>:
 8006fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa8:	460e      	mov	r6, r1
 8006faa:	4614      	mov	r4, r2
 8006fac:	4605      	mov	r5, r0
 8006fae:	b118      	cbz	r0, 8006fb8 <__swbuf_r+0x12>
 8006fb0:	6a03      	ldr	r3, [r0, #32]
 8006fb2:	b90b      	cbnz	r3, 8006fb8 <__swbuf_r+0x12>
 8006fb4:	f7ff ff0e 	bl	8006dd4 <__sinit>
 8006fb8:	69a3      	ldr	r3, [r4, #24]
 8006fba:	60a3      	str	r3, [r4, #8]
 8006fbc:	89a3      	ldrh	r3, [r4, #12]
 8006fbe:	071a      	lsls	r2, r3, #28
 8006fc0:	d501      	bpl.n	8006fc6 <__swbuf_r+0x20>
 8006fc2:	6923      	ldr	r3, [r4, #16]
 8006fc4:	b943      	cbnz	r3, 8006fd8 <__swbuf_r+0x32>
 8006fc6:	4621      	mov	r1, r4
 8006fc8:	4628      	mov	r0, r5
 8006fca:	f000 f82b 	bl	8007024 <__swsetup_r>
 8006fce:	b118      	cbz	r0, 8006fd8 <__swbuf_r+0x32>
 8006fd0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006fd4:	4638      	mov	r0, r7
 8006fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fd8:	6823      	ldr	r3, [r4, #0]
 8006fda:	6922      	ldr	r2, [r4, #16]
 8006fdc:	1a98      	subs	r0, r3, r2
 8006fde:	6963      	ldr	r3, [r4, #20]
 8006fe0:	b2f6      	uxtb	r6, r6
 8006fe2:	4283      	cmp	r3, r0
 8006fe4:	4637      	mov	r7, r6
 8006fe6:	dc05      	bgt.n	8006ff4 <__swbuf_r+0x4e>
 8006fe8:	4621      	mov	r1, r4
 8006fea:	4628      	mov	r0, r5
 8006fec:	f000 fd38 	bl	8007a60 <_fflush_r>
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	d1ed      	bne.n	8006fd0 <__swbuf_r+0x2a>
 8006ff4:	68a3      	ldr	r3, [r4, #8]
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	60a3      	str	r3, [r4, #8]
 8006ffa:	6823      	ldr	r3, [r4, #0]
 8006ffc:	1c5a      	adds	r2, r3, #1
 8006ffe:	6022      	str	r2, [r4, #0]
 8007000:	701e      	strb	r6, [r3, #0]
 8007002:	6962      	ldr	r2, [r4, #20]
 8007004:	1c43      	adds	r3, r0, #1
 8007006:	429a      	cmp	r2, r3
 8007008:	d004      	beq.n	8007014 <__swbuf_r+0x6e>
 800700a:	89a3      	ldrh	r3, [r4, #12]
 800700c:	07db      	lsls	r3, r3, #31
 800700e:	d5e1      	bpl.n	8006fd4 <__swbuf_r+0x2e>
 8007010:	2e0a      	cmp	r6, #10
 8007012:	d1df      	bne.n	8006fd4 <__swbuf_r+0x2e>
 8007014:	4621      	mov	r1, r4
 8007016:	4628      	mov	r0, r5
 8007018:	f000 fd22 	bl	8007a60 <_fflush_r>
 800701c:	2800      	cmp	r0, #0
 800701e:	d0d9      	beq.n	8006fd4 <__swbuf_r+0x2e>
 8007020:	e7d6      	b.n	8006fd0 <__swbuf_r+0x2a>
	...

08007024 <__swsetup_r>:
 8007024:	b538      	push	{r3, r4, r5, lr}
 8007026:	4b29      	ldr	r3, [pc, #164]	@ (80070cc <__swsetup_r+0xa8>)
 8007028:	4605      	mov	r5, r0
 800702a:	6818      	ldr	r0, [r3, #0]
 800702c:	460c      	mov	r4, r1
 800702e:	b118      	cbz	r0, 8007038 <__swsetup_r+0x14>
 8007030:	6a03      	ldr	r3, [r0, #32]
 8007032:	b90b      	cbnz	r3, 8007038 <__swsetup_r+0x14>
 8007034:	f7ff fece 	bl	8006dd4 <__sinit>
 8007038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800703c:	0719      	lsls	r1, r3, #28
 800703e:	d422      	bmi.n	8007086 <__swsetup_r+0x62>
 8007040:	06da      	lsls	r2, r3, #27
 8007042:	d407      	bmi.n	8007054 <__swsetup_r+0x30>
 8007044:	2209      	movs	r2, #9
 8007046:	602a      	str	r2, [r5, #0]
 8007048:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800704c:	81a3      	strh	r3, [r4, #12]
 800704e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007052:	e033      	b.n	80070bc <__swsetup_r+0x98>
 8007054:	0758      	lsls	r0, r3, #29
 8007056:	d512      	bpl.n	800707e <__swsetup_r+0x5a>
 8007058:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800705a:	b141      	cbz	r1, 800706e <__swsetup_r+0x4a>
 800705c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007060:	4299      	cmp	r1, r3
 8007062:	d002      	beq.n	800706a <__swsetup_r+0x46>
 8007064:	4628      	mov	r0, r5
 8007066:	f000 f8af 	bl	80071c8 <_free_r>
 800706a:	2300      	movs	r3, #0
 800706c:	6363      	str	r3, [r4, #52]	@ 0x34
 800706e:	89a3      	ldrh	r3, [r4, #12]
 8007070:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007074:	81a3      	strh	r3, [r4, #12]
 8007076:	2300      	movs	r3, #0
 8007078:	6063      	str	r3, [r4, #4]
 800707a:	6923      	ldr	r3, [r4, #16]
 800707c:	6023      	str	r3, [r4, #0]
 800707e:	89a3      	ldrh	r3, [r4, #12]
 8007080:	f043 0308 	orr.w	r3, r3, #8
 8007084:	81a3      	strh	r3, [r4, #12]
 8007086:	6923      	ldr	r3, [r4, #16]
 8007088:	b94b      	cbnz	r3, 800709e <__swsetup_r+0x7a>
 800708a:	89a3      	ldrh	r3, [r4, #12]
 800708c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007090:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007094:	d003      	beq.n	800709e <__swsetup_r+0x7a>
 8007096:	4621      	mov	r1, r4
 8007098:	4628      	mov	r0, r5
 800709a:	f000 fd2f 	bl	8007afc <__smakebuf_r>
 800709e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070a2:	f013 0201 	ands.w	r2, r3, #1
 80070a6:	d00a      	beq.n	80070be <__swsetup_r+0x9a>
 80070a8:	2200      	movs	r2, #0
 80070aa:	60a2      	str	r2, [r4, #8]
 80070ac:	6962      	ldr	r2, [r4, #20]
 80070ae:	4252      	negs	r2, r2
 80070b0:	61a2      	str	r2, [r4, #24]
 80070b2:	6922      	ldr	r2, [r4, #16]
 80070b4:	b942      	cbnz	r2, 80070c8 <__swsetup_r+0xa4>
 80070b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80070ba:	d1c5      	bne.n	8007048 <__swsetup_r+0x24>
 80070bc:	bd38      	pop	{r3, r4, r5, pc}
 80070be:	0799      	lsls	r1, r3, #30
 80070c0:	bf58      	it	pl
 80070c2:	6962      	ldrpl	r2, [r4, #20]
 80070c4:	60a2      	str	r2, [r4, #8]
 80070c6:	e7f4      	b.n	80070b2 <__swsetup_r+0x8e>
 80070c8:	2000      	movs	r0, #0
 80070ca:	e7f7      	b.n	80070bc <__swsetup_r+0x98>
 80070cc:	20000020 	.word	0x20000020

080070d0 <memset>:
 80070d0:	4402      	add	r2, r0
 80070d2:	4603      	mov	r3, r0
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d100      	bne.n	80070da <memset+0xa>
 80070d8:	4770      	bx	lr
 80070da:	f803 1b01 	strb.w	r1, [r3], #1
 80070de:	e7f9      	b.n	80070d4 <memset+0x4>

080070e0 <_close_r>:
 80070e0:	b538      	push	{r3, r4, r5, lr}
 80070e2:	4d06      	ldr	r5, [pc, #24]	@ (80070fc <_close_r+0x1c>)
 80070e4:	2300      	movs	r3, #0
 80070e6:	4604      	mov	r4, r0
 80070e8:	4608      	mov	r0, r1
 80070ea:	602b      	str	r3, [r5, #0]
 80070ec:	f7fa fc5a 	bl	80019a4 <_close>
 80070f0:	1c43      	adds	r3, r0, #1
 80070f2:	d102      	bne.n	80070fa <_close_r+0x1a>
 80070f4:	682b      	ldr	r3, [r5, #0]
 80070f6:	b103      	cbz	r3, 80070fa <_close_r+0x1a>
 80070f8:	6023      	str	r3, [r4, #0]
 80070fa:	bd38      	pop	{r3, r4, r5, pc}
 80070fc:	200003c4 	.word	0x200003c4

08007100 <_lseek_r>:
 8007100:	b538      	push	{r3, r4, r5, lr}
 8007102:	4d07      	ldr	r5, [pc, #28]	@ (8007120 <_lseek_r+0x20>)
 8007104:	4604      	mov	r4, r0
 8007106:	4608      	mov	r0, r1
 8007108:	4611      	mov	r1, r2
 800710a:	2200      	movs	r2, #0
 800710c:	602a      	str	r2, [r5, #0]
 800710e:	461a      	mov	r2, r3
 8007110:	f7fa fc6f 	bl	80019f2 <_lseek>
 8007114:	1c43      	adds	r3, r0, #1
 8007116:	d102      	bne.n	800711e <_lseek_r+0x1e>
 8007118:	682b      	ldr	r3, [r5, #0]
 800711a:	b103      	cbz	r3, 800711e <_lseek_r+0x1e>
 800711c:	6023      	str	r3, [r4, #0]
 800711e:	bd38      	pop	{r3, r4, r5, pc}
 8007120:	200003c4 	.word	0x200003c4

08007124 <_read_r>:
 8007124:	b538      	push	{r3, r4, r5, lr}
 8007126:	4d07      	ldr	r5, [pc, #28]	@ (8007144 <_read_r+0x20>)
 8007128:	4604      	mov	r4, r0
 800712a:	4608      	mov	r0, r1
 800712c:	4611      	mov	r1, r2
 800712e:	2200      	movs	r2, #0
 8007130:	602a      	str	r2, [r5, #0]
 8007132:	461a      	mov	r2, r3
 8007134:	f7fa fc19 	bl	800196a <_read>
 8007138:	1c43      	adds	r3, r0, #1
 800713a:	d102      	bne.n	8007142 <_read_r+0x1e>
 800713c:	682b      	ldr	r3, [r5, #0]
 800713e:	b103      	cbz	r3, 8007142 <_read_r+0x1e>
 8007140:	6023      	str	r3, [r4, #0]
 8007142:	bd38      	pop	{r3, r4, r5, pc}
 8007144:	200003c4 	.word	0x200003c4

08007148 <_write_r>:
 8007148:	b538      	push	{r3, r4, r5, lr}
 800714a:	4d07      	ldr	r5, [pc, #28]	@ (8007168 <_write_r+0x20>)
 800714c:	4604      	mov	r4, r0
 800714e:	4608      	mov	r0, r1
 8007150:	4611      	mov	r1, r2
 8007152:	2200      	movs	r2, #0
 8007154:	602a      	str	r2, [r5, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	f7f9 fcf7 	bl	8000b4a <_write>
 800715c:	1c43      	adds	r3, r0, #1
 800715e:	d102      	bne.n	8007166 <_write_r+0x1e>
 8007160:	682b      	ldr	r3, [r5, #0]
 8007162:	b103      	cbz	r3, 8007166 <_write_r+0x1e>
 8007164:	6023      	str	r3, [r4, #0]
 8007166:	bd38      	pop	{r3, r4, r5, pc}
 8007168:	200003c4 	.word	0x200003c4

0800716c <__errno>:
 800716c:	4b01      	ldr	r3, [pc, #4]	@ (8007174 <__errno+0x8>)
 800716e:	6818      	ldr	r0, [r3, #0]
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	20000020 	.word	0x20000020

08007178 <__libc_init_array>:
 8007178:	b570      	push	{r4, r5, r6, lr}
 800717a:	4d0d      	ldr	r5, [pc, #52]	@ (80071b0 <__libc_init_array+0x38>)
 800717c:	4c0d      	ldr	r4, [pc, #52]	@ (80071b4 <__libc_init_array+0x3c>)
 800717e:	1b64      	subs	r4, r4, r5
 8007180:	10a4      	asrs	r4, r4, #2
 8007182:	2600      	movs	r6, #0
 8007184:	42a6      	cmp	r6, r4
 8007186:	d109      	bne.n	800719c <__libc_init_array+0x24>
 8007188:	4d0b      	ldr	r5, [pc, #44]	@ (80071b8 <__libc_init_array+0x40>)
 800718a:	4c0c      	ldr	r4, [pc, #48]	@ (80071bc <__libc_init_array+0x44>)
 800718c:	f000 fd24 	bl	8007bd8 <_init>
 8007190:	1b64      	subs	r4, r4, r5
 8007192:	10a4      	asrs	r4, r4, #2
 8007194:	2600      	movs	r6, #0
 8007196:	42a6      	cmp	r6, r4
 8007198:	d105      	bne.n	80071a6 <__libc_init_array+0x2e>
 800719a:	bd70      	pop	{r4, r5, r6, pc}
 800719c:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a0:	4798      	blx	r3
 80071a2:	3601      	adds	r6, #1
 80071a4:	e7ee      	b.n	8007184 <__libc_init_array+0xc>
 80071a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80071aa:	4798      	blx	r3
 80071ac:	3601      	adds	r6, #1
 80071ae:	e7f2      	b.n	8007196 <__libc_init_array+0x1e>
 80071b0:	08007f24 	.word	0x08007f24
 80071b4:	08007f24 	.word	0x08007f24
 80071b8:	08007f24 	.word	0x08007f24
 80071bc:	08007f28 	.word	0x08007f28

080071c0 <__retarget_lock_init_recursive>:
 80071c0:	4770      	bx	lr

080071c2 <__retarget_lock_acquire_recursive>:
 80071c2:	4770      	bx	lr

080071c4 <__retarget_lock_release_recursive>:
 80071c4:	4770      	bx	lr
	...

080071c8 <_free_r>:
 80071c8:	b538      	push	{r3, r4, r5, lr}
 80071ca:	4605      	mov	r5, r0
 80071cc:	2900      	cmp	r1, #0
 80071ce:	d041      	beq.n	8007254 <_free_r+0x8c>
 80071d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071d4:	1f0c      	subs	r4, r1, #4
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	bfb8      	it	lt
 80071da:	18e4      	addlt	r4, r4, r3
 80071dc:	f000 f8e0 	bl	80073a0 <__malloc_lock>
 80071e0:	4a1d      	ldr	r2, [pc, #116]	@ (8007258 <_free_r+0x90>)
 80071e2:	6813      	ldr	r3, [r2, #0]
 80071e4:	b933      	cbnz	r3, 80071f4 <_free_r+0x2c>
 80071e6:	6063      	str	r3, [r4, #4]
 80071e8:	6014      	str	r4, [r2, #0]
 80071ea:	4628      	mov	r0, r5
 80071ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071f0:	f000 b8dc 	b.w	80073ac <__malloc_unlock>
 80071f4:	42a3      	cmp	r3, r4
 80071f6:	d908      	bls.n	800720a <_free_r+0x42>
 80071f8:	6820      	ldr	r0, [r4, #0]
 80071fa:	1821      	adds	r1, r4, r0
 80071fc:	428b      	cmp	r3, r1
 80071fe:	bf01      	itttt	eq
 8007200:	6819      	ldreq	r1, [r3, #0]
 8007202:	685b      	ldreq	r3, [r3, #4]
 8007204:	1809      	addeq	r1, r1, r0
 8007206:	6021      	streq	r1, [r4, #0]
 8007208:	e7ed      	b.n	80071e6 <_free_r+0x1e>
 800720a:	461a      	mov	r2, r3
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	b10b      	cbz	r3, 8007214 <_free_r+0x4c>
 8007210:	42a3      	cmp	r3, r4
 8007212:	d9fa      	bls.n	800720a <_free_r+0x42>
 8007214:	6811      	ldr	r1, [r2, #0]
 8007216:	1850      	adds	r0, r2, r1
 8007218:	42a0      	cmp	r0, r4
 800721a:	d10b      	bne.n	8007234 <_free_r+0x6c>
 800721c:	6820      	ldr	r0, [r4, #0]
 800721e:	4401      	add	r1, r0
 8007220:	1850      	adds	r0, r2, r1
 8007222:	4283      	cmp	r3, r0
 8007224:	6011      	str	r1, [r2, #0]
 8007226:	d1e0      	bne.n	80071ea <_free_r+0x22>
 8007228:	6818      	ldr	r0, [r3, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	6053      	str	r3, [r2, #4]
 800722e:	4408      	add	r0, r1
 8007230:	6010      	str	r0, [r2, #0]
 8007232:	e7da      	b.n	80071ea <_free_r+0x22>
 8007234:	d902      	bls.n	800723c <_free_r+0x74>
 8007236:	230c      	movs	r3, #12
 8007238:	602b      	str	r3, [r5, #0]
 800723a:	e7d6      	b.n	80071ea <_free_r+0x22>
 800723c:	6820      	ldr	r0, [r4, #0]
 800723e:	1821      	adds	r1, r4, r0
 8007240:	428b      	cmp	r3, r1
 8007242:	bf04      	itt	eq
 8007244:	6819      	ldreq	r1, [r3, #0]
 8007246:	685b      	ldreq	r3, [r3, #4]
 8007248:	6063      	str	r3, [r4, #4]
 800724a:	bf04      	itt	eq
 800724c:	1809      	addeq	r1, r1, r0
 800724e:	6021      	streq	r1, [r4, #0]
 8007250:	6054      	str	r4, [r2, #4]
 8007252:	e7ca      	b.n	80071ea <_free_r+0x22>
 8007254:	bd38      	pop	{r3, r4, r5, pc}
 8007256:	bf00      	nop
 8007258:	200003d0 	.word	0x200003d0

0800725c <sbrk_aligned>:
 800725c:	b570      	push	{r4, r5, r6, lr}
 800725e:	4e0f      	ldr	r6, [pc, #60]	@ (800729c <sbrk_aligned+0x40>)
 8007260:	460c      	mov	r4, r1
 8007262:	6831      	ldr	r1, [r6, #0]
 8007264:	4605      	mov	r5, r0
 8007266:	b911      	cbnz	r1, 800726e <sbrk_aligned+0x12>
 8007268:	f000 fca6 	bl	8007bb8 <_sbrk_r>
 800726c:	6030      	str	r0, [r6, #0]
 800726e:	4621      	mov	r1, r4
 8007270:	4628      	mov	r0, r5
 8007272:	f000 fca1 	bl	8007bb8 <_sbrk_r>
 8007276:	1c43      	adds	r3, r0, #1
 8007278:	d103      	bne.n	8007282 <sbrk_aligned+0x26>
 800727a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800727e:	4620      	mov	r0, r4
 8007280:	bd70      	pop	{r4, r5, r6, pc}
 8007282:	1cc4      	adds	r4, r0, #3
 8007284:	f024 0403 	bic.w	r4, r4, #3
 8007288:	42a0      	cmp	r0, r4
 800728a:	d0f8      	beq.n	800727e <sbrk_aligned+0x22>
 800728c:	1a21      	subs	r1, r4, r0
 800728e:	4628      	mov	r0, r5
 8007290:	f000 fc92 	bl	8007bb8 <_sbrk_r>
 8007294:	3001      	adds	r0, #1
 8007296:	d1f2      	bne.n	800727e <sbrk_aligned+0x22>
 8007298:	e7ef      	b.n	800727a <sbrk_aligned+0x1e>
 800729a:	bf00      	nop
 800729c:	200003cc 	.word	0x200003cc

080072a0 <_malloc_r>:
 80072a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072a4:	1ccd      	adds	r5, r1, #3
 80072a6:	f025 0503 	bic.w	r5, r5, #3
 80072aa:	3508      	adds	r5, #8
 80072ac:	2d0c      	cmp	r5, #12
 80072ae:	bf38      	it	cc
 80072b0:	250c      	movcc	r5, #12
 80072b2:	2d00      	cmp	r5, #0
 80072b4:	4606      	mov	r6, r0
 80072b6:	db01      	blt.n	80072bc <_malloc_r+0x1c>
 80072b8:	42a9      	cmp	r1, r5
 80072ba:	d904      	bls.n	80072c6 <_malloc_r+0x26>
 80072bc:	230c      	movs	r3, #12
 80072be:	6033      	str	r3, [r6, #0]
 80072c0:	2000      	movs	r0, #0
 80072c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800739c <_malloc_r+0xfc>
 80072ca:	f000 f869 	bl	80073a0 <__malloc_lock>
 80072ce:	f8d8 3000 	ldr.w	r3, [r8]
 80072d2:	461c      	mov	r4, r3
 80072d4:	bb44      	cbnz	r4, 8007328 <_malloc_r+0x88>
 80072d6:	4629      	mov	r1, r5
 80072d8:	4630      	mov	r0, r6
 80072da:	f7ff ffbf 	bl	800725c <sbrk_aligned>
 80072de:	1c43      	adds	r3, r0, #1
 80072e0:	4604      	mov	r4, r0
 80072e2:	d158      	bne.n	8007396 <_malloc_r+0xf6>
 80072e4:	f8d8 4000 	ldr.w	r4, [r8]
 80072e8:	4627      	mov	r7, r4
 80072ea:	2f00      	cmp	r7, #0
 80072ec:	d143      	bne.n	8007376 <_malloc_r+0xd6>
 80072ee:	2c00      	cmp	r4, #0
 80072f0:	d04b      	beq.n	800738a <_malloc_r+0xea>
 80072f2:	6823      	ldr	r3, [r4, #0]
 80072f4:	4639      	mov	r1, r7
 80072f6:	4630      	mov	r0, r6
 80072f8:	eb04 0903 	add.w	r9, r4, r3
 80072fc:	f000 fc5c 	bl	8007bb8 <_sbrk_r>
 8007300:	4581      	cmp	r9, r0
 8007302:	d142      	bne.n	800738a <_malloc_r+0xea>
 8007304:	6821      	ldr	r1, [r4, #0]
 8007306:	1a6d      	subs	r5, r5, r1
 8007308:	4629      	mov	r1, r5
 800730a:	4630      	mov	r0, r6
 800730c:	f7ff ffa6 	bl	800725c <sbrk_aligned>
 8007310:	3001      	adds	r0, #1
 8007312:	d03a      	beq.n	800738a <_malloc_r+0xea>
 8007314:	6823      	ldr	r3, [r4, #0]
 8007316:	442b      	add	r3, r5
 8007318:	6023      	str	r3, [r4, #0]
 800731a:	f8d8 3000 	ldr.w	r3, [r8]
 800731e:	685a      	ldr	r2, [r3, #4]
 8007320:	bb62      	cbnz	r2, 800737c <_malloc_r+0xdc>
 8007322:	f8c8 7000 	str.w	r7, [r8]
 8007326:	e00f      	b.n	8007348 <_malloc_r+0xa8>
 8007328:	6822      	ldr	r2, [r4, #0]
 800732a:	1b52      	subs	r2, r2, r5
 800732c:	d420      	bmi.n	8007370 <_malloc_r+0xd0>
 800732e:	2a0b      	cmp	r2, #11
 8007330:	d917      	bls.n	8007362 <_malloc_r+0xc2>
 8007332:	1961      	adds	r1, r4, r5
 8007334:	42a3      	cmp	r3, r4
 8007336:	6025      	str	r5, [r4, #0]
 8007338:	bf18      	it	ne
 800733a:	6059      	strne	r1, [r3, #4]
 800733c:	6863      	ldr	r3, [r4, #4]
 800733e:	bf08      	it	eq
 8007340:	f8c8 1000 	streq.w	r1, [r8]
 8007344:	5162      	str	r2, [r4, r5]
 8007346:	604b      	str	r3, [r1, #4]
 8007348:	4630      	mov	r0, r6
 800734a:	f000 f82f 	bl	80073ac <__malloc_unlock>
 800734e:	f104 000b 	add.w	r0, r4, #11
 8007352:	1d23      	adds	r3, r4, #4
 8007354:	f020 0007 	bic.w	r0, r0, #7
 8007358:	1ac2      	subs	r2, r0, r3
 800735a:	bf1c      	itt	ne
 800735c:	1a1b      	subne	r3, r3, r0
 800735e:	50a3      	strne	r3, [r4, r2]
 8007360:	e7af      	b.n	80072c2 <_malloc_r+0x22>
 8007362:	6862      	ldr	r2, [r4, #4]
 8007364:	42a3      	cmp	r3, r4
 8007366:	bf0c      	ite	eq
 8007368:	f8c8 2000 	streq.w	r2, [r8]
 800736c:	605a      	strne	r2, [r3, #4]
 800736e:	e7eb      	b.n	8007348 <_malloc_r+0xa8>
 8007370:	4623      	mov	r3, r4
 8007372:	6864      	ldr	r4, [r4, #4]
 8007374:	e7ae      	b.n	80072d4 <_malloc_r+0x34>
 8007376:	463c      	mov	r4, r7
 8007378:	687f      	ldr	r7, [r7, #4]
 800737a:	e7b6      	b.n	80072ea <_malloc_r+0x4a>
 800737c:	461a      	mov	r2, r3
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	42a3      	cmp	r3, r4
 8007382:	d1fb      	bne.n	800737c <_malloc_r+0xdc>
 8007384:	2300      	movs	r3, #0
 8007386:	6053      	str	r3, [r2, #4]
 8007388:	e7de      	b.n	8007348 <_malloc_r+0xa8>
 800738a:	230c      	movs	r3, #12
 800738c:	6033      	str	r3, [r6, #0]
 800738e:	4630      	mov	r0, r6
 8007390:	f000 f80c 	bl	80073ac <__malloc_unlock>
 8007394:	e794      	b.n	80072c0 <_malloc_r+0x20>
 8007396:	6005      	str	r5, [r0, #0]
 8007398:	e7d6      	b.n	8007348 <_malloc_r+0xa8>
 800739a:	bf00      	nop
 800739c:	200003d0 	.word	0x200003d0

080073a0 <__malloc_lock>:
 80073a0:	4801      	ldr	r0, [pc, #4]	@ (80073a8 <__malloc_lock+0x8>)
 80073a2:	f7ff bf0e 	b.w	80071c2 <__retarget_lock_acquire_recursive>
 80073a6:	bf00      	nop
 80073a8:	200003c8 	.word	0x200003c8

080073ac <__malloc_unlock>:
 80073ac:	4801      	ldr	r0, [pc, #4]	@ (80073b4 <__malloc_unlock+0x8>)
 80073ae:	f7ff bf09 	b.w	80071c4 <__retarget_lock_release_recursive>
 80073b2:	bf00      	nop
 80073b4:	200003c8 	.word	0x200003c8

080073b8 <__sfputc_r>:
 80073b8:	6893      	ldr	r3, [r2, #8]
 80073ba:	3b01      	subs	r3, #1
 80073bc:	2b00      	cmp	r3, #0
 80073be:	b410      	push	{r4}
 80073c0:	6093      	str	r3, [r2, #8]
 80073c2:	da08      	bge.n	80073d6 <__sfputc_r+0x1e>
 80073c4:	6994      	ldr	r4, [r2, #24]
 80073c6:	42a3      	cmp	r3, r4
 80073c8:	db01      	blt.n	80073ce <__sfputc_r+0x16>
 80073ca:	290a      	cmp	r1, #10
 80073cc:	d103      	bne.n	80073d6 <__sfputc_r+0x1e>
 80073ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073d2:	f7ff bde8 	b.w	8006fa6 <__swbuf_r>
 80073d6:	6813      	ldr	r3, [r2, #0]
 80073d8:	1c58      	adds	r0, r3, #1
 80073da:	6010      	str	r0, [r2, #0]
 80073dc:	7019      	strb	r1, [r3, #0]
 80073de:	4608      	mov	r0, r1
 80073e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <__sfputs_r>:
 80073e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e8:	4606      	mov	r6, r0
 80073ea:	460f      	mov	r7, r1
 80073ec:	4614      	mov	r4, r2
 80073ee:	18d5      	adds	r5, r2, r3
 80073f0:	42ac      	cmp	r4, r5
 80073f2:	d101      	bne.n	80073f8 <__sfputs_r+0x12>
 80073f4:	2000      	movs	r0, #0
 80073f6:	e007      	b.n	8007408 <__sfputs_r+0x22>
 80073f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073fc:	463a      	mov	r2, r7
 80073fe:	4630      	mov	r0, r6
 8007400:	f7ff ffda 	bl	80073b8 <__sfputc_r>
 8007404:	1c43      	adds	r3, r0, #1
 8007406:	d1f3      	bne.n	80073f0 <__sfputs_r+0xa>
 8007408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800740c <_vfiprintf_r>:
 800740c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007410:	460d      	mov	r5, r1
 8007412:	b09d      	sub	sp, #116	@ 0x74
 8007414:	4614      	mov	r4, r2
 8007416:	4698      	mov	r8, r3
 8007418:	4606      	mov	r6, r0
 800741a:	b118      	cbz	r0, 8007424 <_vfiprintf_r+0x18>
 800741c:	6a03      	ldr	r3, [r0, #32]
 800741e:	b90b      	cbnz	r3, 8007424 <_vfiprintf_r+0x18>
 8007420:	f7ff fcd8 	bl	8006dd4 <__sinit>
 8007424:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007426:	07d9      	lsls	r1, r3, #31
 8007428:	d405      	bmi.n	8007436 <_vfiprintf_r+0x2a>
 800742a:	89ab      	ldrh	r3, [r5, #12]
 800742c:	059a      	lsls	r2, r3, #22
 800742e:	d402      	bmi.n	8007436 <_vfiprintf_r+0x2a>
 8007430:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007432:	f7ff fec6 	bl	80071c2 <__retarget_lock_acquire_recursive>
 8007436:	89ab      	ldrh	r3, [r5, #12]
 8007438:	071b      	lsls	r3, r3, #28
 800743a:	d501      	bpl.n	8007440 <_vfiprintf_r+0x34>
 800743c:	692b      	ldr	r3, [r5, #16]
 800743e:	b99b      	cbnz	r3, 8007468 <_vfiprintf_r+0x5c>
 8007440:	4629      	mov	r1, r5
 8007442:	4630      	mov	r0, r6
 8007444:	f7ff fdee 	bl	8007024 <__swsetup_r>
 8007448:	b170      	cbz	r0, 8007468 <_vfiprintf_r+0x5c>
 800744a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800744c:	07dc      	lsls	r4, r3, #31
 800744e:	d504      	bpl.n	800745a <_vfiprintf_r+0x4e>
 8007450:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007454:	b01d      	add	sp, #116	@ 0x74
 8007456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800745a:	89ab      	ldrh	r3, [r5, #12]
 800745c:	0598      	lsls	r0, r3, #22
 800745e:	d4f7      	bmi.n	8007450 <_vfiprintf_r+0x44>
 8007460:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007462:	f7ff feaf 	bl	80071c4 <__retarget_lock_release_recursive>
 8007466:	e7f3      	b.n	8007450 <_vfiprintf_r+0x44>
 8007468:	2300      	movs	r3, #0
 800746a:	9309      	str	r3, [sp, #36]	@ 0x24
 800746c:	2320      	movs	r3, #32
 800746e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007472:	f8cd 800c 	str.w	r8, [sp, #12]
 8007476:	2330      	movs	r3, #48	@ 0x30
 8007478:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007628 <_vfiprintf_r+0x21c>
 800747c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007480:	f04f 0901 	mov.w	r9, #1
 8007484:	4623      	mov	r3, r4
 8007486:	469a      	mov	sl, r3
 8007488:	f813 2b01 	ldrb.w	r2, [r3], #1
 800748c:	b10a      	cbz	r2, 8007492 <_vfiprintf_r+0x86>
 800748e:	2a25      	cmp	r2, #37	@ 0x25
 8007490:	d1f9      	bne.n	8007486 <_vfiprintf_r+0x7a>
 8007492:	ebba 0b04 	subs.w	fp, sl, r4
 8007496:	d00b      	beq.n	80074b0 <_vfiprintf_r+0xa4>
 8007498:	465b      	mov	r3, fp
 800749a:	4622      	mov	r2, r4
 800749c:	4629      	mov	r1, r5
 800749e:	4630      	mov	r0, r6
 80074a0:	f7ff ffa1 	bl	80073e6 <__sfputs_r>
 80074a4:	3001      	adds	r0, #1
 80074a6:	f000 80a7 	beq.w	80075f8 <_vfiprintf_r+0x1ec>
 80074aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074ac:	445a      	add	r2, fp
 80074ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80074b0:	f89a 3000 	ldrb.w	r3, [sl]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f000 809f 	beq.w	80075f8 <_vfiprintf_r+0x1ec>
 80074ba:	2300      	movs	r3, #0
 80074bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80074c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074c4:	f10a 0a01 	add.w	sl, sl, #1
 80074c8:	9304      	str	r3, [sp, #16]
 80074ca:	9307      	str	r3, [sp, #28]
 80074cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80074d2:	4654      	mov	r4, sl
 80074d4:	2205      	movs	r2, #5
 80074d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074da:	4853      	ldr	r0, [pc, #332]	@ (8007628 <_vfiprintf_r+0x21c>)
 80074dc:	f7f8 fea0 	bl	8000220 <memchr>
 80074e0:	9a04      	ldr	r2, [sp, #16]
 80074e2:	b9d8      	cbnz	r0, 800751c <_vfiprintf_r+0x110>
 80074e4:	06d1      	lsls	r1, r2, #27
 80074e6:	bf44      	itt	mi
 80074e8:	2320      	movmi	r3, #32
 80074ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074ee:	0713      	lsls	r3, r2, #28
 80074f0:	bf44      	itt	mi
 80074f2:	232b      	movmi	r3, #43	@ 0x2b
 80074f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074f8:	f89a 3000 	ldrb.w	r3, [sl]
 80074fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80074fe:	d015      	beq.n	800752c <_vfiprintf_r+0x120>
 8007500:	9a07      	ldr	r2, [sp, #28]
 8007502:	4654      	mov	r4, sl
 8007504:	2000      	movs	r0, #0
 8007506:	f04f 0c0a 	mov.w	ip, #10
 800750a:	4621      	mov	r1, r4
 800750c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007510:	3b30      	subs	r3, #48	@ 0x30
 8007512:	2b09      	cmp	r3, #9
 8007514:	d94b      	bls.n	80075ae <_vfiprintf_r+0x1a2>
 8007516:	b1b0      	cbz	r0, 8007546 <_vfiprintf_r+0x13a>
 8007518:	9207      	str	r2, [sp, #28]
 800751a:	e014      	b.n	8007546 <_vfiprintf_r+0x13a>
 800751c:	eba0 0308 	sub.w	r3, r0, r8
 8007520:	fa09 f303 	lsl.w	r3, r9, r3
 8007524:	4313      	orrs	r3, r2
 8007526:	9304      	str	r3, [sp, #16]
 8007528:	46a2      	mov	sl, r4
 800752a:	e7d2      	b.n	80074d2 <_vfiprintf_r+0xc6>
 800752c:	9b03      	ldr	r3, [sp, #12]
 800752e:	1d19      	adds	r1, r3, #4
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	9103      	str	r1, [sp, #12]
 8007534:	2b00      	cmp	r3, #0
 8007536:	bfbb      	ittet	lt
 8007538:	425b      	neglt	r3, r3
 800753a:	f042 0202 	orrlt.w	r2, r2, #2
 800753e:	9307      	strge	r3, [sp, #28]
 8007540:	9307      	strlt	r3, [sp, #28]
 8007542:	bfb8      	it	lt
 8007544:	9204      	strlt	r2, [sp, #16]
 8007546:	7823      	ldrb	r3, [r4, #0]
 8007548:	2b2e      	cmp	r3, #46	@ 0x2e
 800754a:	d10a      	bne.n	8007562 <_vfiprintf_r+0x156>
 800754c:	7863      	ldrb	r3, [r4, #1]
 800754e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007550:	d132      	bne.n	80075b8 <_vfiprintf_r+0x1ac>
 8007552:	9b03      	ldr	r3, [sp, #12]
 8007554:	1d1a      	adds	r2, r3, #4
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	9203      	str	r2, [sp, #12]
 800755a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800755e:	3402      	adds	r4, #2
 8007560:	9305      	str	r3, [sp, #20]
 8007562:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007638 <_vfiprintf_r+0x22c>
 8007566:	7821      	ldrb	r1, [r4, #0]
 8007568:	2203      	movs	r2, #3
 800756a:	4650      	mov	r0, sl
 800756c:	f7f8 fe58 	bl	8000220 <memchr>
 8007570:	b138      	cbz	r0, 8007582 <_vfiprintf_r+0x176>
 8007572:	9b04      	ldr	r3, [sp, #16]
 8007574:	eba0 000a 	sub.w	r0, r0, sl
 8007578:	2240      	movs	r2, #64	@ 0x40
 800757a:	4082      	lsls	r2, r0
 800757c:	4313      	orrs	r3, r2
 800757e:	3401      	adds	r4, #1
 8007580:	9304      	str	r3, [sp, #16]
 8007582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007586:	4829      	ldr	r0, [pc, #164]	@ (800762c <_vfiprintf_r+0x220>)
 8007588:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800758c:	2206      	movs	r2, #6
 800758e:	f7f8 fe47 	bl	8000220 <memchr>
 8007592:	2800      	cmp	r0, #0
 8007594:	d03f      	beq.n	8007616 <_vfiprintf_r+0x20a>
 8007596:	4b26      	ldr	r3, [pc, #152]	@ (8007630 <_vfiprintf_r+0x224>)
 8007598:	bb1b      	cbnz	r3, 80075e2 <_vfiprintf_r+0x1d6>
 800759a:	9b03      	ldr	r3, [sp, #12]
 800759c:	3307      	adds	r3, #7
 800759e:	f023 0307 	bic.w	r3, r3, #7
 80075a2:	3308      	adds	r3, #8
 80075a4:	9303      	str	r3, [sp, #12]
 80075a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075a8:	443b      	add	r3, r7
 80075aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80075ac:	e76a      	b.n	8007484 <_vfiprintf_r+0x78>
 80075ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80075b2:	460c      	mov	r4, r1
 80075b4:	2001      	movs	r0, #1
 80075b6:	e7a8      	b.n	800750a <_vfiprintf_r+0xfe>
 80075b8:	2300      	movs	r3, #0
 80075ba:	3401      	adds	r4, #1
 80075bc:	9305      	str	r3, [sp, #20]
 80075be:	4619      	mov	r1, r3
 80075c0:	f04f 0c0a 	mov.w	ip, #10
 80075c4:	4620      	mov	r0, r4
 80075c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075ca:	3a30      	subs	r2, #48	@ 0x30
 80075cc:	2a09      	cmp	r2, #9
 80075ce:	d903      	bls.n	80075d8 <_vfiprintf_r+0x1cc>
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d0c6      	beq.n	8007562 <_vfiprintf_r+0x156>
 80075d4:	9105      	str	r1, [sp, #20]
 80075d6:	e7c4      	b.n	8007562 <_vfiprintf_r+0x156>
 80075d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80075dc:	4604      	mov	r4, r0
 80075de:	2301      	movs	r3, #1
 80075e0:	e7f0      	b.n	80075c4 <_vfiprintf_r+0x1b8>
 80075e2:	ab03      	add	r3, sp, #12
 80075e4:	9300      	str	r3, [sp, #0]
 80075e6:	462a      	mov	r2, r5
 80075e8:	4b12      	ldr	r3, [pc, #72]	@ (8007634 <_vfiprintf_r+0x228>)
 80075ea:	a904      	add	r1, sp, #16
 80075ec:	4630      	mov	r0, r6
 80075ee:	f3af 8000 	nop.w
 80075f2:	4607      	mov	r7, r0
 80075f4:	1c78      	adds	r0, r7, #1
 80075f6:	d1d6      	bne.n	80075a6 <_vfiprintf_r+0x19a>
 80075f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075fa:	07d9      	lsls	r1, r3, #31
 80075fc:	d405      	bmi.n	800760a <_vfiprintf_r+0x1fe>
 80075fe:	89ab      	ldrh	r3, [r5, #12]
 8007600:	059a      	lsls	r2, r3, #22
 8007602:	d402      	bmi.n	800760a <_vfiprintf_r+0x1fe>
 8007604:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007606:	f7ff fddd 	bl	80071c4 <__retarget_lock_release_recursive>
 800760a:	89ab      	ldrh	r3, [r5, #12]
 800760c:	065b      	lsls	r3, r3, #25
 800760e:	f53f af1f 	bmi.w	8007450 <_vfiprintf_r+0x44>
 8007612:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007614:	e71e      	b.n	8007454 <_vfiprintf_r+0x48>
 8007616:	ab03      	add	r3, sp, #12
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	462a      	mov	r2, r5
 800761c:	4b05      	ldr	r3, [pc, #20]	@ (8007634 <_vfiprintf_r+0x228>)
 800761e:	a904      	add	r1, sp, #16
 8007620:	4630      	mov	r0, r6
 8007622:	f000 f879 	bl	8007718 <_printf_i>
 8007626:	e7e4      	b.n	80075f2 <_vfiprintf_r+0x1e6>
 8007628:	08007ee8 	.word	0x08007ee8
 800762c:	08007ef2 	.word	0x08007ef2
 8007630:	00000000 	.word	0x00000000
 8007634:	080073e7 	.word	0x080073e7
 8007638:	08007eee 	.word	0x08007eee

0800763c <_printf_common>:
 800763c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007640:	4616      	mov	r6, r2
 8007642:	4698      	mov	r8, r3
 8007644:	688a      	ldr	r2, [r1, #8]
 8007646:	690b      	ldr	r3, [r1, #16]
 8007648:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800764c:	4293      	cmp	r3, r2
 800764e:	bfb8      	it	lt
 8007650:	4613      	movlt	r3, r2
 8007652:	6033      	str	r3, [r6, #0]
 8007654:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007658:	4607      	mov	r7, r0
 800765a:	460c      	mov	r4, r1
 800765c:	b10a      	cbz	r2, 8007662 <_printf_common+0x26>
 800765e:	3301      	adds	r3, #1
 8007660:	6033      	str	r3, [r6, #0]
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	0699      	lsls	r1, r3, #26
 8007666:	bf42      	ittt	mi
 8007668:	6833      	ldrmi	r3, [r6, #0]
 800766a:	3302      	addmi	r3, #2
 800766c:	6033      	strmi	r3, [r6, #0]
 800766e:	6825      	ldr	r5, [r4, #0]
 8007670:	f015 0506 	ands.w	r5, r5, #6
 8007674:	d106      	bne.n	8007684 <_printf_common+0x48>
 8007676:	f104 0a19 	add.w	sl, r4, #25
 800767a:	68e3      	ldr	r3, [r4, #12]
 800767c:	6832      	ldr	r2, [r6, #0]
 800767e:	1a9b      	subs	r3, r3, r2
 8007680:	42ab      	cmp	r3, r5
 8007682:	dc26      	bgt.n	80076d2 <_printf_common+0x96>
 8007684:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007688:	6822      	ldr	r2, [r4, #0]
 800768a:	3b00      	subs	r3, #0
 800768c:	bf18      	it	ne
 800768e:	2301      	movne	r3, #1
 8007690:	0692      	lsls	r2, r2, #26
 8007692:	d42b      	bmi.n	80076ec <_printf_common+0xb0>
 8007694:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007698:	4641      	mov	r1, r8
 800769a:	4638      	mov	r0, r7
 800769c:	47c8      	blx	r9
 800769e:	3001      	adds	r0, #1
 80076a0:	d01e      	beq.n	80076e0 <_printf_common+0xa4>
 80076a2:	6823      	ldr	r3, [r4, #0]
 80076a4:	6922      	ldr	r2, [r4, #16]
 80076a6:	f003 0306 	and.w	r3, r3, #6
 80076aa:	2b04      	cmp	r3, #4
 80076ac:	bf02      	ittt	eq
 80076ae:	68e5      	ldreq	r5, [r4, #12]
 80076b0:	6833      	ldreq	r3, [r6, #0]
 80076b2:	1aed      	subeq	r5, r5, r3
 80076b4:	68a3      	ldr	r3, [r4, #8]
 80076b6:	bf0c      	ite	eq
 80076b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076bc:	2500      	movne	r5, #0
 80076be:	4293      	cmp	r3, r2
 80076c0:	bfc4      	itt	gt
 80076c2:	1a9b      	subgt	r3, r3, r2
 80076c4:	18ed      	addgt	r5, r5, r3
 80076c6:	2600      	movs	r6, #0
 80076c8:	341a      	adds	r4, #26
 80076ca:	42b5      	cmp	r5, r6
 80076cc:	d11a      	bne.n	8007704 <_printf_common+0xc8>
 80076ce:	2000      	movs	r0, #0
 80076d0:	e008      	b.n	80076e4 <_printf_common+0xa8>
 80076d2:	2301      	movs	r3, #1
 80076d4:	4652      	mov	r2, sl
 80076d6:	4641      	mov	r1, r8
 80076d8:	4638      	mov	r0, r7
 80076da:	47c8      	blx	r9
 80076dc:	3001      	adds	r0, #1
 80076de:	d103      	bne.n	80076e8 <_printf_common+0xac>
 80076e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076e8:	3501      	adds	r5, #1
 80076ea:	e7c6      	b.n	800767a <_printf_common+0x3e>
 80076ec:	18e1      	adds	r1, r4, r3
 80076ee:	1c5a      	adds	r2, r3, #1
 80076f0:	2030      	movs	r0, #48	@ 0x30
 80076f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80076f6:	4422      	add	r2, r4
 80076f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80076fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007700:	3302      	adds	r3, #2
 8007702:	e7c7      	b.n	8007694 <_printf_common+0x58>
 8007704:	2301      	movs	r3, #1
 8007706:	4622      	mov	r2, r4
 8007708:	4641      	mov	r1, r8
 800770a:	4638      	mov	r0, r7
 800770c:	47c8      	blx	r9
 800770e:	3001      	adds	r0, #1
 8007710:	d0e6      	beq.n	80076e0 <_printf_common+0xa4>
 8007712:	3601      	adds	r6, #1
 8007714:	e7d9      	b.n	80076ca <_printf_common+0x8e>
	...

08007718 <_printf_i>:
 8007718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800771c:	7e0f      	ldrb	r7, [r1, #24]
 800771e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007720:	2f78      	cmp	r7, #120	@ 0x78
 8007722:	4691      	mov	r9, r2
 8007724:	4680      	mov	r8, r0
 8007726:	460c      	mov	r4, r1
 8007728:	469a      	mov	sl, r3
 800772a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800772e:	d807      	bhi.n	8007740 <_printf_i+0x28>
 8007730:	2f62      	cmp	r7, #98	@ 0x62
 8007732:	d80a      	bhi.n	800774a <_printf_i+0x32>
 8007734:	2f00      	cmp	r7, #0
 8007736:	f000 80d2 	beq.w	80078de <_printf_i+0x1c6>
 800773a:	2f58      	cmp	r7, #88	@ 0x58
 800773c:	f000 80b9 	beq.w	80078b2 <_printf_i+0x19a>
 8007740:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007744:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007748:	e03a      	b.n	80077c0 <_printf_i+0xa8>
 800774a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800774e:	2b15      	cmp	r3, #21
 8007750:	d8f6      	bhi.n	8007740 <_printf_i+0x28>
 8007752:	a101      	add	r1, pc, #4	@ (adr r1, 8007758 <_printf_i+0x40>)
 8007754:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007758:	080077b1 	.word	0x080077b1
 800775c:	080077c5 	.word	0x080077c5
 8007760:	08007741 	.word	0x08007741
 8007764:	08007741 	.word	0x08007741
 8007768:	08007741 	.word	0x08007741
 800776c:	08007741 	.word	0x08007741
 8007770:	080077c5 	.word	0x080077c5
 8007774:	08007741 	.word	0x08007741
 8007778:	08007741 	.word	0x08007741
 800777c:	08007741 	.word	0x08007741
 8007780:	08007741 	.word	0x08007741
 8007784:	080078c5 	.word	0x080078c5
 8007788:	080077ef 	.word	0x080077ef
 800778c:	0800787f 	.word	0x0800787f
 8007790:	08007741 	.word	0x08007741
 8007794:	08007741 	.word	0x08007741
 8007798:	080078e7 	.word	0x080078e7
 800779c:	08007741 	.word	0x08007741
 80077a0:	080077ef 	.word	0x080077ef
 80077a4:	08007741 	.word	0x08007741
 80077a8:	08007741 	.word	0x08007741
 80077ac:	08007887 	.word	0x08007887
 80077b0:	6833      	ldr	r3, [r6, #0]
 80077b2:	1d1a      	adds	r2, r3, #4
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	6032      	str	r2, [r6, #0]
 80077b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80077c0:	2301      	movs	r3, #1
 80077c2:	e09d      	b.n	8007900 <_printf_i+0x1e8>
 80077c4:	6833      	ldr	r3, [r6, #0]
 80077c6:	6820      	ldr	r0, [r4, #0]
 80077c8:	1d19      	adds	r1, r3, #4
 80077ca:	6031      	str	r1, [r6, #0]
 80077cc:	0606      	lsls	r6, r0, #24
 80077ce:	d501      	bpl.n	80077d4 <_printf_i+0xbc>
 80077d0:	681d      	ldr	r5, [r3, #0]
 80077d2:	e003      	b.n	80077dc <_printf_i+0xc4>
 80077d4:	0645      	lsls	r5, r0, #25
 80077d6:	d5fb      	bpl.n	80077d0 <_printf_i+0xb8>
 80077d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80077dc:	2d00      	cmp	r5, #0
 80077de:	da03      	bge.n	80077e8 <_printf_i+0xd0>
 80077e0:	232d      	movs	r3, #45	@ 0x2d
 80077e2:	426d      	negs	r5, r5
 80077e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077e8:	4859      	ldr	r0, [pc, #356]	@ (8007950 <_printf_i+0x238>)
 80077ea:	230a      	movs	r3, #10
 80077ec:	e011      	b.n	8007812 <_printf_i+0xfa>
 80077ee:	6821      	ldr	r1, [r4, #0]
 80077f0:	6833      	ldr	r3, [r6, #0]
 80077f2:	0608      	lsls	r0, r1, #24
 80077f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80077f8:	d402      	bmi.n	8007800 <_printf_i+0xe8>
 80077fa:	0649      	lsls	r1, r1, #25
 80077fc:	bf48      	it	mi
 80077fe:	b2ad      	uxthmi	r5, r5
 8007800:	2f6f      	cmp	r7, #111	@ 0x6f
 8007802:	4853      	ldr	r0, [pc, #332]	@ (8007950 <_printf_i+0x238>)
 8007804:	6033      	str	r3, [r6, #0]
 8007806:	bf14      	ite	ne
 8007808:	230a      	movne	r3, #10
 800780a:	2308      	moveq	r3, #8
 800780c:	2100      	movs	r1, #0
 800780e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007812:	6866      	ldr	r6, [r4, #4]
 8007814:	60a6      	str	r6, [r4, #8]
 8007816:	2e00      	cmp	r6, #0
 8007818:	bfa2      	ittt	ge
 800781a:	6821      	ldrge	r1, [r4, #0]
 800781c:	f021 0104 	bicge.w	r1, r1, #4
 8007820:	6021      	strge	r1, [r4, #0]
 8007822:	b90d      	cbnz	r5, 8007828 <_printf_i+0x110>
 8007824:	2e00      	cmp	r6, #0
 8007826:	d04b      	beq.n	80078c0 <_printf_i+0x1a8>
 8007828:	4616      	mov	r6, r2
 800782a:	fbb5 f1f3 	udiv	r1, r5, r3
 800782e:	fb03 5711 	mls	r7, r3, r1, r5
 8007832:	5dc7      	ldrb	r7, [r0, r7]
 8007834:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007838:	462f      	mov	r7, r5
 800783a:	42bb      	cmp	r3, r7
 800783c:	460d      	mov	r5, r1
 800783e:	d9f4      	bls.n	800782a <_printf_i+0x112>
 8007840:	2b08      	cmp	r3, #8
 8007842:	d10b      	bne.n	800785c <_printf_i+0x144>
 8007844:	6823      	ldr	r3, [r4, #0]
 8007846:	07df      	lsls	r7, r3, #31
 8007848:	d508      	bpl.n	800785c <_printf_i+0x144>
 800784a:	6923      	ldr	r3, [r4, #16]
 800784c:	6861      	ldr	r1, [r4, #4]
 800784e:	4299      	cmp	r1, r3
 8007850:	bfde      	ittt	le
 8007852:	2330      	movle	r3, #48	@ 0x30
 8007854:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007858:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800785c:	1b92      	subs	r2, r2, r6
 800785e:	6122      	str	r2, [r4, #16]
 8007860:	f8cd a000 	str.w	sl, [sp]
 8007864:	464b      	mov	r3, r9
 8007866:	aa03      	add	r2, sp, #12
 8007868:	4621      	mov	r1, r4
 800786a:	4640      	mov	r0, r8
 800786c:	f7ff fee6 	bl	800763c <_printf_common>
 8007870:	3001      	adds	r0, #1
 8007872:	d14a      	bne.n	800790a <_printf_i+0x1f2>
 8007874:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007878:	b004      	add	sp, #16
 800787a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800787e:	6823      	ldr	r3, [r4, #0]
 8007880:	f043 0320 	orr.w	r3, r3, #32
 8007884:	6023      	str	r3, [r4, #0]
 8007886:	4833      	ldr	r0, [pc, #204]	@ (8007954 <_printf_i+0x23c>)
 8007888:	2778      	movs	r7, #120	@ 0x78
 800788a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	6831      	ldr	r1, [r6, #0]
 8007892:	061f      	lsls	r7, r3, #24
 8007894:	f851 5b04 	ldr.w	r5, [r1], #4
 8007898:	d402      	bmi.n	80078a0 <_printf_i+0x188>
 800789a:	065f      	lsls	r7, r3, #25
 800789c:	bf48      	it	mi
 800789e:	b2ad      	uxthmi	r5, r5
 80078a0:	6031      	str	r1, [r6, #0]
 80078a2:	07d9      	lsls	r1, r3, #31
 80078a4:	bf44      	itt	mi
 80078a6:	f043 0320 	orrmi.w	r3, r3, #32
 80078aa:	6023      	strmi	r3, [r4, #0]
 80078ac:	b11d      	cbz	r5, 80078b6 <_printf_i+0x19e>
 80078ae:	2310      	movs	r3, #16
 80078b0:	e7ac      	b.n	800780c <_printf_i+0xf4>
 80078b2:	4827      	ldr	r0, [pc, #156]	@ (8007950 <_printf_i+0x238>)
 80078b4:	e7e9      	b.n	800788a <_printf_i+0x172>
 80078b6:	6823      	ldr	r3, [r4, #0]
 80078b8:	f023 0320 	bic.w	r3, r3, #32
 80078bc:	6023      	str	r3, [r4, #0]
 80078be:	e7f6      	b.n	80078ae <_printf_i+0x196>
 80078c0:	4616      	mov	r6, r2
 80078c2:	e7bd      	b.n	8007840 <_printf_i+0x128>
 80078c4:	6833      	ldr	r3, [r6, #0]
 80078c6:	6825      	ldr	r5, [r4, #0]
 80078c8:	6961      	ldr	r1, [r4, #20]
 80078ca:	1d18      	adds	r0, r3, #4
 80078cc:	6030      	str	r0, [r6, #0]
 80078ce:	062e      	lsls	r6, r5, #24
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	d501      	bpl.n	80078d8 <_printf_i+0x1c0>
 80078d4:	6019      	str	r1, [r3, #0]
 80078d6:	e002      	b.n	80078de <_printf_i+0x1c6>
 80078d8:	0668      	lsls	r0, r5, #25
 80078da:	d5fb      	bpl.n	80078d4 <_printf_i+0x1bc>
 80078dc:	8019      	strh	r1, [r3, #0]
 80078de:	2300      	movs	r3, #0
 80078e0:	6123      	str	r3, [r4, #16]
 80078e2:	4616      	mov	r6, r2
 80078e4:	e7bc      	b.n	8007860 <_printf_i+0x148>
 80078e6:	6833      	ldr	r3, [r6, #0]
 80078e8:	1d1a      	adds	r2, r3, #4
 80078ea:	6032      	str	r2, [r6, #0]
 80078ec:	681e      	ldr	r6, [r3, #0]
 80078ee:	6862      	ldr	r2, [r4, #4]
 80078f0:	2100      	movs	r1, #0
 80078f2:	4630      	mov	r0, r6
 80078f4:	f7f8 fc94 	bl	8000220 <memchr>
 80078f8:	b108      	cbz	r0, 80078fe <_printf_i+0x1e6>
 80078fa:	1b80      	subs	r0, r0, r6
 80078fc:	6060      	str	r0, [r4, #4]
 80078fe:	6863      	ldr	r3, [r4, #4]
 8007900:	6123      	str	r3, [r4, #16]
 8007902:	2300      	movs	r3, #0
 8007904:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007908:	e7aa      	b.n	8007860 <_printf_i+0x148>
 800790a:	6923      	ldr	r3, [r4, #16]
 800790c:	4632      	mov	r2, r6
 800790e:	4649      	mov	r1, r9
 8007910:	4640      	mov	r0, r8
 8007912:	47d0      	blx	sl
 8007914:	3001      	adds	r0, #1
 8007916:	d0ad      	beq.n	8007874 <_printf_i+0x15c>
 8007918:	6823      	ldr	r3, [r4, #0]
 800791a:	079b      	lsls	r3, r3, #30
 800791c:	d413      	bmi.n	8007946 <_printf_i+0x22e>
 800791e:	68e0      	ldr	r0, [r4, #12]
 8007920:	9b03      	ldr	r3, [sp, #12]
 8007922:	4298      	cmp	r0, r3
 8007924:	bfb8      	it	lt
 8007926:	4618      	movlt	r0, r3
 8007928:	e7a6      	b.n	8007878 <_printf_i+0x160>
 800792a:	2301      	movs	r3, #1
 800792c:	4632      	mov	r2, r6
 800792e:	4649      	mov	r1, r9
 8007930:	4640      	mov	r0, r8
 8007932:	47d0      	blx	sl
 8007934:	3001      	adds	r0, #1
 8007936:	d09d      	beq.n	8007874 <_printf_i+0x15c>
 8007938:	3501      	adds	r5, #1
 800793a:	68e3      	ldr	r3, [r4, #12]
 800793c:	9903      	ldr	r1, [sp, #12]
 800793e:	1a5b      	subs	r3, r3, r1
 8007940:	42ab      	cmp	r3, r5
 8007942:	dcf2      	bgt.n	800792a <_printf_i+0x212>
 8007944:	e7eb      	b.n	800791e <_printf_i+0x206>
 8007946:	2500      	movs	r5, #0
 8007948:	f104 0619 	add.w	r6, r4, #25
 800794c:	e7f5      	b.n	800793a <_printf_i+0x222>
 800794e:	bf00      	nop
 8007950:	08007ef9 	.word	0x08007ef9
 8007954:	08007f0a 	.word	0x08007f0a

08007958 <__sflush_r>:
 8007958:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800795c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007960:	0716      	lsls	r6, r2, #28
 8007962:	4605      	mov	r5, r0
 8007964:	460c      	mov	r4, r1
 8007966:	d454      	bmi.n	8007a12 <__sflush_r+0xba>
 8007968:	684b      	ldr	r3, [r1, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	dc02      	bgt.n	8007974 <__sflush_r+0x1c>
 800796e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007970:	2b00      	cmp	r3, #0
 8007972:	dd48      	ble.n	8007a06 <__sflush_r+0xae>
 8007974:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007976:	2e00      	cmp	r6, #0
 8007978:	d045      	beq.n	8007a06 <__sflush_r+0xae>
 800797a:	2300      	movs	r3, #0
 800797c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007980:	682f      	ldr	r7, [r5, #0]
 8007982:	6a21      	ldr	r1, [r4, #32]
 8007984:	602b      	str	r3, [r5, #0]
 8007986:	d030      	beq.n	80079ea <__sflush_r+0x92>
 8007988:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800798a:	89a3      	ldrh	r3, [r4, #12]
 800798c:	0759      	lsls	r1, r3, #29
 800798e:	d505      	bpl.n	800799c <__sflush_r+0x44>
 8007990:	6863      	ldr	r3, [r4, #4]
 8007992:	1ad2      	subs	r2, r2, r3
 8007994:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007996:	b10b      	cbz	r3, 800799c <__sflush_r+0x44>
 8007998:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800799a:	1ad2      	subs	r2, r2, r3
 800799c:	2300      	movs	r3, #0
 800799e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80079a0:	6a21      	ldr	r1, [r4, #32]
 80079a2:	4628      	mov	r0, r5
 80079a4:	47b0      	blx	r6
 80079a6:	1c43      	adds	r3, r0, #1
 80079a8:	89a3      	ldrh	r3, [r4, #12]
 80079aa:	d106      	bne.n	80079ba <__sflush_r+0x62>
 80079ac:	6829      	ldr	r1, [r5, #0]
 80079ae:	291d      	cmp	r1, #29
 80079b0:	d82b      	bhi.n	8007a0a <__sflush_r+0xb2>
 80079b2:	4a2a      	ldr	r2, [pc, #168]	@ (8007a5c <__sflush_r+0x104>)
 80079b4:	410a      	asrs	r2, r1
 80079b6:	07d6      	lsls	r6, r2, #31
 80079b8:	d427      	bmi.n	8007a0a <__sflush_r+0xb2>
 80079ba:	2200      	movs	r2, #0
 80079bc:	6062      	str	r2, [r4, #4]
 80079be:	04d9      	lsls	r1, r3, #19
 80079c0:	6922      	ldr	r2, [r4, #16]
 80079c2:	6022      	str	r2, [r4, #0]
 80079c4:	d504      	bpl.n	80079d0 <__sflush_r+0x78>
 80079c6:	1c42      	adds	r2, r0, #1
 80079c8:	d101      	bne.n	80079ce <__sflush_r+0x76>
 80079ca:	682b      	ldr	r3, [r5, #0]
 80079cc:	b903      	cbnz	r3, 80079d0 <__sflush_r+0x78>
 80079ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80079d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079d2:	602f      	str	r7, [r5, #0]
 80079d4:	b1b9      	cbz	r1, 8007a06 <__sflush_r+0xae>
 80079d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079da:	4299      	cmp	r1, r3
 80079dc:	d002      	beq.n	80079e4 <__sflush_r+0x8c>
 80079de:	4628      	mov	r0, r5
 80079e0:	f7ff fbf2 	bl	80071c8 <_free_r>
 80079e4:	2300      	movs	r3, #0
 80079e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80079e8:	e00d      	b.n	8007a06 <__sflush_r+0xae>
 80079ea:	2301      	movs	r3, #1
 80079ec:	4628      	mov	r0, r5
 80079ee:	47b0      	blx	r6
 80079f0:	4602      	mov	r2, r0
 80079f2:	1c50      	adds	r0, r2, #1
 80079f4:	d1c9      	bne.n	800798a <__sflush_r+0x32>
 80079f6:	682b      	ldr	r3, [r5, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d0c6      	beq.n	800798a <__sflush_r+0x32>
 80079fc:	2b1d      	cmp	r3, #29
 80079fe:	d001      	beq.n	8007a04 <__sflush_r+0xac>
 8007a00:	2b16      	cmp	r3, #22
 8007a02:	d11e      	bne.n	8007a42 <__sflush_r+0xea>
 8007a04:	602f      	str	r7, [r5, #0]
 8007a06:	2000      	movs	r0, #0
 8007a08:	e022      	b.n	8007a50 <__sflush_r+0xf8>
 8007a0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a0e:	b21b      	sxth	r3, r3
 8007a10:	e01b      	b.n	8007a4a <__sflush_r+0xf2>
 8007a12:	690f      	ldr	r7, [r1, #16]
 8007a14:	2f00      	cmp	r7, #0
 8007a16:	d0f6      	beq.n	8007a06 <__sflush_r+0xae>
 8007a18:	0793      	lsls	r3, r2, #30
 8007a1a:	680e      	ldr	r6, [r1, #0]
 8007a1c:	bf08      	it	eq
 8007a1e:	694b      	ldreq	r3, [r1, #20]
 8007a20:	600f      	str	r7, [r1, #0]
 8007a22:	bf18      	it	ne
 8007a24:	2300      	movne	r3, #0
 8007a26:	eba6 0807 	sub.w	r8, r6, r7
 8007a2a:	608b      	str	r3, [r1, #8]
 8007a2c:	f1b8 0f00 	cmp.w	r8, #0
 8007a30:	dde9      	ble.n	8007a06 <__sflush_r+0xae>
 8007a32:	6a21      	ldr	r1, [r4, #32]
 8007a34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007a36:	4643      	mov	r3, r8
 8007a38:	463a      	mov	r2, r7
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	47b0      	blx	r6
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	dc08      	bgt.n	8007a54 <__sflush_r+0xfc>
 8007a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a4a:	81a3      	strh	r3, [r4, #12]
 8007a4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a54:	4407      	add	r7, r0
 8007a56:	eba8 0800 	sub.w	r8, r8, r0
 8007a5a:	e7e7      	b.n	8007a2c <__sflush_r+0xd4>
 8007a5c:	dfbffffe 	.word	0xdfbffffe

08007a60 <_fflush_r>:
 8007a60:	b538      	push	{r3, r4, r5, lr}
 8007a62:	690b      	ldr	r3, [r1, #16]
 8007a64:	4605      	mov	r5, r0
 8007a66:	460c      	mov	r4, r1
 8007a68:	b913      	cbnz	r3, 8007a70 <_fflush_r+0x10>
 8007a6a:	2500      	movs	r5, #0
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	bd38      	pop	{r3, r4, r5, pc}
 8007a70:	b118      	cbz	r0, 8007a7a <_fflush_r+0x1a>
 8007a72:	6a03      	ldr	r3, [r0, #32]
 8007a74:	b90b      	cbnz	r3, 8007a7a <_fflush_r+0x1a>
 8007a76:	f7ff f9ad 	bl	8006dd4 <__sinit>
 8007a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d0f3      	beq.n	8007a6a <_fflush_r+0xa>
 8007a82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a84:	07d0      	lsls	r0, r2, #31
 8007a86:	d404      	bmi.n	8007a92 <_fflush_r+0x32>
 8007a88:	0599      	lsls	r1, r3, #22
 8007a8a:	d402      	bmi.n	8007a92 <_fflush_r+0x32>
 8007a8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a8e:	f7ff fb98 	bl	80071c2 <__retarget_lock_acquire_recursive>
 8007a92:	4628      	mov	r0, r5
 8007a94:	4621      	mov	r1, r4
 8007a96:	f7ff ff5f 	bl	8007958 <__sflush_r>
 8007a9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a9c:	07da      	lsls	r2, r3, #31
 8007a9e:	4605      	mov	r5, r0
 8007aa0:	d4e4      	bmi.n	8007a6c <_fflush_r+0xc>
 8007aa2:	89a3      	ldrh	r3, [r4, #12]
 8007aa4:	059b      	lsls	r3, r3, #22
 8007aa6:	d4e1      	bmi.n	8007a6c <_fflush_r+0xc>
 8007aa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007aaa:	f7ff fb8b 	bl	80071c4 <__retarget_lock_release_recursive>
 8007aae:	e7dd      	b.n	8007a6c <_fflush_r+0xc>

08007ab0 <__swhatbuf_r>:
 8007ab0:	b570      	push	{r4, r5, r6, lr}
 8007ab2:	460c      	mov	r4, r1
 8007ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ab8:	2900      	cmp	r1, #0
 8007aba:	b096      	sub	sp, #88	@ 0x58
 8007abc:	4615      	mov	r5, r2
 8007abe:	461e      	mov	r6, r3
 8007ac0:	da0d      	bge.n	8007ade <__swhatbuf_r+0x2e>
 8007ac2:	89a3      	ldrh	r3, [r4, #12]
 8007ac4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007ac8:	f04f 0100 	mov.w	r1, #0
 8007acc:	bf14      	ite	ne
 8007ace:	2340      	movne	r3, #64	@ 0x40
 8007ad0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007ad4:	2000      	movs	r0, #0
 8007ad6:	6031      	str	r1, [r6, #0]
 8007ad8:	602b      	str	r3, [r5, #0]
 8007ada:	b016      	add	sp, #88	@ 0x58
 8007adc:	bd70      	pop	{r4, r5, r6, pc}
 8007ade:	466a      	mov	r2, sp
 8007ae0:	f000 f848 	bl	8007b74 <_fstat_r>
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	dbec      	blt.n	8007ac2 <__swhatbuf_r+0x12>
 8007ae8:	9901      	ldr	r1, [sp, #4]
 8007aea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007aee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007af2:	4259      	negs	r1, r3
 8007af4:	4159      	adcs	r1, r3
 8007af6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007afa:	e7eb      	b.n	8007ad4 <__swhatbuf_r+0x24>

08007afc <__smakebuf_r>:
 8007afc:	898b      	ldrh	r3, [r1, #12]
 8007afe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b00:	079d      	lsls	r5, r3, #30
 8007b02:	4606      	mov	r6, r0
 8007b04:	460c      	mov	r4, r1
 8007b06:	d507      	bpl.n	8007b18 <__smakebuf_r+0x1c>
 8007b08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007b0c:	6023      	str	r3, [r4, #0]
 8007b0e:	6123      	str	r3, [r4, #16]
 8007b10:	2301      	movs	r3, #1
 8007b12:	6163      	str	r3, [r4, #20]
 8007b14:	b003      	add	sp, #12
 8007b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b18:	ab01      	add	r3, sp, #4
 8007b1a:	466a      	mov	r2, sp
 8007b1c:	f7ff ffc8 	bl	8007ab0 <__swhatbuf_r>
 8007b20:	9f00      	ldr	r7, [sp, #0]
 8007b22:	4605      	mov	r5, r0
 8007b24:	4639      	mov	r1, r7
 8007b26:	4630      	mov	r0, r6
 8007b28:	f7ff fbba 	bl	80072a0 <_malloc_r>
 8007b2c:	b948      	cbnz	r0, 8007b42 <__smakebuf_r+0x46>
 8007b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b32:	059a      	lsls	r2, r3, #22
 8007b34:	d4ee      	bmi.n	8007b14 <__smakebuf_r+0x18>
 8007b36:	f023 0303 	bic.w	r3, r3, #3
 8007b3a:	f043 0302 	orr.w	r3, r3, #2
 8007b3e:	81a3      	strh	r3, [r4, #12]
 8007b40:	e7e2      	b.n	8007b08 <__smakebuf_r+0xc>
 8007b42:	89a3      	ldrh	r3, [r4, #12]
 8007b44:	6020      	str	r0, [r4, #0]
 8007b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b4a:	81a3      	strh	r3, [r4, #12]
 8007b4c:	9b01      	ldr	r3, [sp, #4]
 8007b4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007b52:	b15b      	cbz	r3, 8007b6c <__smakebuf_r+0x70>
 8007b54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b58:	4630      	mov	r0, r6
 8007b5a:	f000 f81d 	bl	8007b98 <_isatty_r>
 8007b5e:	b128      	cbz	r0, 8007b6c <__smakebuf_r+0x70>
 8007b60:	89a3      	ldrh	r3, [r4, #12]
 8007b62:	f023 0303 	bic.w	r3, r3, #3
 8007b66:	f043 0301 	orr.w	r3, r3, #1
 8007b6a:	81a3      	strh	r3, [r4, #12]
 8007b6c:	89a3      	ldrh	r3, [r4, #12]
 8007b6e:	431d      	orrs	r5, r3
 8007b70:	81a5      	strh	r5, [r4, #12]
 8007b72:	e7cf      	b.n	8007b14 <__smakebuf_r+0x18>

08007b74 <_fstat_r>:
 8007b74:	b538      	push	{r3, r4, r5, lr}
 8007b76:	4d07      	ldr	r5, [pc, #28]	@ (8007b94 <_fstat_r+0x20>)
 8007b78:	2300      	movs	r3, #0
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	4608      	mov	r0, r1
 8007b7e:	4611      	mov	r1, r2
 8007b80:	602b      	str	r3, [r5, #0]
 8007b82:	f7f9 ff1b 	bl	80019bc <_fstat>
 8007b86:	1c43      	adds	r3, r0, #1
 8007b88:	d102      	bne.n	8007b90 <_fstat_r+0x1c>
 8007b8a:	682b      	ldr	r3, [r5, #0]
 8007b8c:	b103      	cbz	r3, 8007b90 <_fstat_r+0x1c>
 8007b8e:	6023      	str	r3, [r4, #0]
 8007b90:	bd38      	pop	{r3, r4, r5, pc}
 8007b92:	bf00      	nop
 8007b94:	200003c4 	.word	0x200003c4

08007b98 <_isatty_r>:
 8007b98:	b538      	push	{r3, r4, r5, lr}
 8007b9a:	4d06      	ldr	r5, [pc, #24]	@ (8007bb4 <_isatty_r+0x1c>)
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	4608      	mov	r0, r1
 8007ba2:	602b      	str	r3, [r5, #0]
 8007ba4:	f7f9 ff1a 	bl	80019dc <_isatty>
 8007ba8:	1c43      	adds	r3, r0, #1
 8007baa:	d102      	bne.n	8007bb2 <_isatty_r+0x1a>
 8007bac:	682b      	ldr	r3, [r5, #0]
 8007bae:	b103      	cbz	r3, 8007bb2 <_isatty_r+0x1a>
 8007bb0:	6023      	str	r3, [r4, #0]
 8007bb2:	bd38      	pop	{r3, r4, r5, pc}
 8007bb4:	200003c4 	.word	0x200003c4

08007bb8 <_sbrk_r>:
 8007bb8:	b538      	push	{r3, r4, r5, lr}
 8007bba:	4d06      	ldr	r5, [pc, #24]	@ (8007bd4 <_sbrk_r+0x1c>)
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	4608      	mov	r0, r1
 8007bc2:	602b      	str	r3, [r5, #0]
 8007bc4:	f7f9 ff22 	bl	8001a0c <_sbrk>
 8007bc8:	1c43      	adds	r3, r0, #1
 8007bca:	d102      	bne.n	8007bd2 <_sbrk_r+0x1a>
 8007bcc:	682b      	ldr	r3, [r5, #0]
 8007bce:	b103      	cbz	r3, 8007bd2 <_sbrk_r+0x1a>
 8007bd0:	6023      	str	r3, [r4, #0]
 8007bd2:	bd38      	pop	{r3, r4, r5, pc}
 8007bd4:	200003c4 	.word	0x200003c4

08007bd8 <_init>:
 8007bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bda:	bf00      	nop
 8007bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bde:	bc08      	pop	{r3}
 8007be0:	469e      	mov	lr, r3
 8007be2:	4770      	bx	lr

08007be4 <_fini>:
 8007be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be6:	bf00      	nop
 8007be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bea:	bc08      	pop	{r3}
 8007bec:	469e      	mov	lr, r3
 8007bee:	4770      	bx	lr
