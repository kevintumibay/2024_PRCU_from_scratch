
STM32_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a4c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  08007c2c  08007c2c  00008c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f6c  08007f6c  00009070  2**0
                  CONTENTS
  4 .ARM          00000008  08007f6c  08007f6c  00008f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f74  08007f74  00009070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f74  08007f74  00008f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f78  08007f78  00008f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08007f7c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  20000070  08007fec  00009070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08007fec  000093d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015697  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a64  00000000  00000000  0001e737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  000211a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000116c  00000000  00000000  00022810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021484  00000000  00000000  0002397c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e2a  00000000  00000000  00044e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc1d0  00000000  00000000  0005cc2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00138dfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a14  00000000  00000000  00138e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0013f854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007c14 	.word	0x08007c14

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08007c14 	.word	0x08007c14

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b04:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b08:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d013      	beq.n	8000b3c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b14:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b18:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000b1c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d00b      	beq.n	8000b3c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b24:	e000      	b.n	8000b28 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b26:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b28:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d0f9      	beq.n	8000b26 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b32:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000b3c:	687b      	ldr	r3, [r7, #4]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	0000      	movs	r0, r0
 8000b4c:	0000      	movs	r0, r0
	...

08000b50 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08e      	sub	sp, #56	@ 0x38
 8000b54:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b56:	f000 ffe8 	bl	8001b2a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b5a:	f000 facf 	bl	80010fc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b5e:	f000 fce9 	bl	8001534 <MX_GPIO_Init>
	MX_SPI2_Init();
 8000b62:	f000 fc35 	bl	80013d0 <MX_SPI2_Init>
	MX_ADC2_Init();
 8000b66:	f000 fb8d 	bl	8001284 <MX_ADC2_Init>
	MX_ADC1_Init();
 8000b6a:	f000 fb13 	bl	8001194 <MX_ADC1_Init>
	MX_TIM2_Init();
 8000b6e:	f000 fc6d 	bl	800144c <MX_TIM2_Init>
	MX_I2C2_Init();
 8000b72:	f000 fbed 	bl	8001350 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b7c:	48a0      	ldr	r0, [pc, #640]	@ (8000e00 <main+0x2b0>)
 8000b7e:	f002 fe73 	bl	8003868 <HAL_GPIO_WritePin>
	printf("Requesting SPI Identifier from Pressure Sensor... \r\n");
 8000b82:	48a0      	ldr	r0, [pc, #640]	@ (8000e04 <main+0x2b4>)
 8000b84:	f006 f9e2 	bl	8006f4c <puts>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b8e:	489c      	ldr	r0, [pc, #624]	@ (8000e00 <main+0x2b0>)
 8000b90:	f002 fe6a 	bl	8003868 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) &request_identifier,
 8000b94:	f107 0216 	add.w	r2, r7, #22
 8000b98:	2364      	movs	r3, #100	@ 0x64
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	499a      	ldr	r1, [pc, #616]	@ (8000e08 <main+0x2b8>)
 8000ba0:	489a      	ldr	r0, [pc, #616]	@ (8000e0c <main+0x2bc>)
 8000ba2:	f004 fdac 	bl	80056fe <HAL_SPI_TransmitReceive>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d002      	beq.n	8000bb2 <main+0x62>
			(uint8_t*) &SPI_buffer, 1, 100) != HAL_OK) {
		printf("ERROR: SPI failed the HAL_OK check \r\n");
 8000bac:	4898      	ldr	r0, [pc, #608]	@ (8000e10 <main+0x2c0>)
 8000bae:	f006 f9cd 	bl	8006f4c <puts>
	}
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bb8:	4891      	ldr	r0, [pc, #580]	@ (8000e00 <main+0x2b0>)
 8000bba:	f002 fe55 	bl	8003868 <HAL_GPIO_WritePin>
	// Check if received data is notifying about any errors
	// Check for communication error
	if (SPI_buffer == com_error_mask) {
 8000bbe:	8afb      	ldrh	r3, [r7, #22]
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d103      	bne.n	8000bce <main+0x7e>
		printf("ERROR: Communication Error \r\n");
 8000bc6:	4893      	ldr	r0, [pc, #588]	@ (8000e14 <main+0x2c4>)
 8000bc8:	f006 f9c0 	bl	8006f4c <puts>
 8000bcc:	e04b      	b.n	8000c66 <main+0x116>
	}
	// Check for FEC Error
	else if ((SPI_buffer & FEC_error_mask) != 0) {
 8000bce:	8afb      	ldrh	r3, [r7, #22]
 8000bd0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d003      	beq.n	8000be4 <main+0x94>
		printf("ERROR: FEC Error \r\n");
 8000bdc:	488e      	ldr	r0, [pc, #568]	@ (8000e18 <main+0x2c8>)
 8000bde:	f006 f9b5 	bl	8006f4c <puts>
 8000be2:	e040      	b.n	8000c66 <main+0x116>
	}
	// Check for Acquisition Chain Failure
	else if ((SPI_buffer & no_error_mask) == Diag1_mask) {
 8000be4:	8afb      	ldrh	r3, [r7, #22]
 8000be6:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000bea:	4013      	ands	r3, r2
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d103      	bne.n	8000bfe <main+0xae>
		printf("ERROR: Acquisition chain failure \r\n");
 8000bf6:	4889      	ldr	r0, [pc, #548]	@ (8000e1c <main+0x2cc>)
 8000bf8:	f006 f9a8 	bl	8006f4c <puts>
 8000bfc:	e033      	b.n	8000c66 <main+0x116>
	}
	// Check for Sensor Cell Failure
	else if ((SPI_buffer & Diag2_mask) != 0) {
 8000bfe:	8afb      	ldrh	r3, [r7, #22]
 8000c00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c04:	4013      	ands	r3, r2
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d003      	beq.n	8000c14 <main+0xc4>
		printf("ERROR: Sensor cell failure \r\n");
 8000c0c:	4884      	ldr	r0, [pc, #528]	@ (8000e20 <main+0x2d0>)
 8000c0e:	f006 f99d 	bl	8006f4c <puts>
 8000c12:	e028      	b.n	8000c66 <main+0x116>
	}
	// Check if pressure is above measuring range maximum
	else if ((SPI_buffer & no_error_mask) == pressure_over_max_mask) {
 8000c14:	8afb      	ldrh	r3, [r7, #22]
 8000c16:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d103      	bne.n	8000c2e <main+0xde>
		printf("ERROR: Pressure above measuring range maximum \r\n");
 8000c26:	487f      	ldr	r0, [pc, #508]	@ (8000e24 <main+0x2d4>)
 8000c28:	f006 f990 	bl	8006f4c <puts>
 8000c2c:	e01b      	b.n	8000c66 <main+0x116>
	}
	// Check if pressure is below measuring range minimum
	else if ((SPI_buffer & pressure_under_min_mask) != 0) {
 8000c2e:	8afb      	ldrh	r3, [r7, #22]
 8000c30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c34:	4013      	ands	r3, r2
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d003      	beq.n	8000c44 <main+0xf4>
		printf("ERROR: Pressure below measuring range minimum \r\n");
 8000c3c:	487a      	ldr	r0, [pc, #488]	@ (8000e28 <main+0x2d8>)
 8000c3e:	f006 f985 	bl	8006f4c <puts>
 8000c42:	e010      	b.n	8000c66 <main+0x116>
	}
	// Check if no errors were detected
	else if ((SPI_buffer & no_error_mask) == no_error_mask) {
 8000c44:	8afb      	ldrh	r3, [r7, #22]
 8000c46:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d107      	bne.n	8000c66 <main+0x116>
		printf("No errors detected \r\n");
 8000c56:	4875      	ldr	r0, [pc, #468]	@ (8000e2c <main+0x2dc>)
 8000c58:	f006 f978 	bl	8006f4c <puts>
		printf("Identifier: %u \r\n", SPI_buffer);
 8000c5c:	8afb      	ldrh	r3, [r7, #22]
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4873      	ldr	r0, [pc, #460]	@ (8000e30 <main+0x2e0>)
 8000c62:	f006 f90b 	bl	8006e7c <iprintf>
	}

	// Calibrate ADCs
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000c66:	217f      	movs	r1, #127	@ 0x7f
 8000c68:	4872      	ldr	r0, [pc, #456]	@ (8000e34 <main+0x2e4>)
 8000c6a:	f002 fa91 	bl	8003190 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000c6e:	217f      	movs	r1, #127	@ 0x7f
 8000c70:	4871      	ldr	r0, [pc, #452]	@ (8000e38 <main+0x2e8>)
 8000c72:	f002 fa8d 	bl	8003190 <HAL_ADCEx_Calibration_Start>

	HAL_Delay(2000);
 8000c76:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c7a:	f000 ffc7 	bl	8001c0c <HAL_Delay>

	// Define CO2 sensor commands
	CO2_sensor_start_periodic_measurement[0] = 0x21;
 8000c7e:	4b6f      	ldr	r3, [pc, #444]	@ (8000e3c <main+0x2ec>)
 8000c80:	2221      	movs	r2, #33	@ 0x21
 8000c82:	701a      	strb	r2, [r3, #0]
	CO2_sensor_start_periodic_measurement[1] = 0xb1;
 8000c84:	4b6d      	ldr	r3, [pc, #436]	@ (8000e3c <main+0x2ec>)
 8000c86:	22b1      	movs	r2, #177	@ 0xb1
 8000c88:	705a      	strb	r2, [r3, #1]

	CO2_sensor_data_ready[0] = 0xe4;
 8000c8a:	4b6d      	ldr	r3, [pc, #436]	@ (8000e40 <main+0x2f0>)
 8000c8c:	22e4      	movs	r2, #228	@ 0xe4
 8000c8e:	701a      	strb	r2, [r3, #0]
	CO2_sensor_data_ready[1] = 0xb8;
 8000c90:	4b6b      	ldr	r3, [pc, #428]	@ (8000e40 <main+0x2f0>)
 8000c92:	22b8      	movs	r2, #184	@ 0xb8
 8000c94:	705a      	strb	r2, [r3, #1]

	CO2_sensor_read[0] = 0xec;
 8000c96:	4b6b      	ldr	r3, [pc, #428]	@ (8000e44 <main+0x2f4>)
 8000c98:	22ec      	movs	r2, #236	@ 0xec
 8000c9a:	701a      	strb	r2, [r3, #0]
	CO2_sensor_read[1] = 0x05;
 8000c9c:	4b69      	ldr	r3, [pc, #420]	@ (8000e44 <main+0x2f4>)
 8000c9e:	2205      	movs	r2, #5
 8000ca0:	705a      	strb	r2, [r3, #1]

	// Check if CO2 sensor can talk over I2C
	if (HAL_I2C_IsDeviceReady(&hi2c2, CO2_sensor_ADDR, 5, 50) == HAL_OK) {
 8000ca2:	23c4      	movs	r3, #196	@ 0xc4
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	2332      	movs	r3, #50	@ 0x32
 8000ca8:	2205      	movs	r2, #5
 8000caa:	4867      	ldr	r0, [pc, #412]	@ (8000e48 <main+0x2f8>)
 8000cac:	f003 f8b8 	bl	8003e20 <HAL_I2C_IsDeviceReady>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d103      	bne.n	8000cbe <main+0x16e>
		printf("CO2 sensor READY \r\n");
 8000cb6:	4865      	ldr	r0, [pc, #404]	@ (8000e4c <main+0x2fc>)
 8000cb8:	f006 f948 	bl	8006f4c <puts>
 8000cbc:	e002      	b.n	8000cc4 <main+0x174>
	} else {
		printf("CO2 sensor NOT READY \r\n");
 8000cbe:	4864      	ldr	r0, [pc, #400]	@ (8000e50 <main+0x300>)
 8000cc0:	f006 f944 	bl	8006f4c <puts>
	}

	printf("Waiting 6 s to set up I2C... \r\n");
 8000cc4:	4863      	ldr	r0, [pc, #396]	@ (8000e54 <main+0x304>)
 8000cc6:	f006 f941 	bl	8006f4c <puts>
	// Command CO2 sensor to begin periodic measurements
	if (HAL_I2C_Master_Transmit(&hi2c2, CO2_sensor_ADDR, CO2_sensor_start_periodic_measurement, 2, 6000) == HAL_OK) {
 8000cca:	23c4      	movs	r3, #196	@ 0xc4
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f241 7370 	movw	r3, #6000	@ 0x1770
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	4a59      	ldr	r2, [pc, #356]	@ (8000e3c <main+0x2ec>)
 8000cd8:	485b      	ldr	r0, [pc, #364]	@ (8000e48 <main+0x2f8>)
 8000cda:	f002 fe93 	bl	8003a04 <HAL_I2C_Master_Transmit>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d103      	bne.n	8000cec <main+0x19c>
		printf("Periodic measurements BEGUN  \r\n");
 8000ce4:	485c      	ldr	r0, [pc, #368]	@ (8000e58 <main+0x308>)
 8000ce6:	f006 f931 	bl	8006f4c <puts>
 8000cea:	e002      	b.n	8000cf2 <main+0x1a2>
	} else {
		printf("Periodic measurements NOT BEGUN \r\n");
 8000cec:	485b      	ldr	r0, [pc, #364]	@ (8000e5c <main+0x30c>)
 8000cee:	f006 f92d 	bl	8006f4c <puts>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		// Toggle the LEDs
		HAL_GPIO_TogglePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin);
 8000cf2:	2140      	movs	r1, #64	@ 0x40
 8000cf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf8:	f002 fdce 	bl	8003898 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000cfc:	2064      	movs	r0, #100	@ 0x64
 8000cfe:	f000 ff85 	bl	8001c0c <HAL_Delay>
		HAL_GPIO_TogglePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin);
 8000d02:	2140      	movs	r1, #64	@ 0x40
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d08:	f002 fdc6 	bl	8003898 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, PRS_Ready_Pin);
 8000d0c:	2140      	movs	r1, #64	@ 0x40
 8000d0e:	483c      	ldr	r0, [pc, #240]	@ (8000e00 <main+0x2b0>)
 8000d10:	f002 fdc2 	bl	8003898 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000d14:	2064      	movs	r0, #100	@ 0x64
 8000d16:	f000 ff79 	bl	8001c0c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, PRS_Ready_Pin);
 8000d1a:	2140      	movs	r1, #64	@ 0x40
 8000d1c:	4838      	ldr	r0, [pc, #224]	@ (8000e00 <main+0x2b0>)
 8000d1e:	f002 fdbb 	bl	8003898 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, System_Ready_Pin);
 8000d22:	2180      	movs	r1, #128	@ 0x80
 8000d24:	4836      	ldr	r0, [pc, #216]	@ (8000e00 <main+0x2b0>)
 8000d26:	f002 fdb7 	bl	8003898 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000d2a:	2064      	movs	r0, #100	@ 0x64
 8000d2c:	f000 ff6e 	bl	8001c0c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, System_Ready_Pin);
 8000d30:	2180      	movs	r1, #128	@ 0x80
 8000d32:	4833      	ldr	r0, [pc, #204]	@ (8000e00 <main+0x2b0>)
 8000d34:	f002 fdb0 	bl	8003898 <HAL_GPIO_TogglePin>

		// Measure Pod Pressure
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d3e:	4830      	ldr	r0, [pc, #192]	@ (8000e00 <main+0x2b0>)
 8000d40:	f002 fd92 	bl	8003868 <HAL_GPIO_WritePin>
		if (HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) &request_pressure,
 8000d44:	f107 0216 	add.w	r2, r7, #22
 8000d48:	2364      	movs	r3, #100	@ 0x64
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	4944      	ldr	r1, [pc, #272]	@ (8000e60 <main+0x310>)
 8000d50:	482e      	ldr	r0, [pc, #184]	@ (8000e0c <main+0x2bc>)
 8000d52:	f004 fcd4 	bl	80056fe <HAL_SPI_TransmitReceive>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d002      	beq.n	8000d62 <main+0x212>
				(uint8_t*) &SPI_buffer, 1, 100) != HAL_OK) {
			printf("ERROR: SPI failed the HAL_OK check \r\n");
 8000d5c:	482c      	ldr	r0, [pc, #176]	@ (8000e10 <main+0x2c0>)
 8000d5e:	f006 f8f5 	bl	8006f4c <puts>
		}
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000d62:	2201      	movs	r2, #1
 8000d64:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d68:	4825      	ldr	r0, [pc, #148]	@ (8000e00 <main+0x2b0>)
 8000d6a:	f002 fd7d 	bl	8003868 <HAL_GPIO_WritePin>
		// Check if received data is notifying about any errors
		// Check for communication error
		if (SPI_buffer == com_error_mask) {
 8000d6e:	8afb      	ldrh	r3, [r7, #22]
 8000d70:	2201      	movs	r2, #1
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d103      	bne.n	8000d7e <main+0x22e>
			printf("ERROR: Communication Error \r\n");
 8000d76:	4827      	ldr	r0, [pc, #156]	@ (8000e14 <main+0x2c4>)
 8000d78:	f006 f8e8 	bl	8006f4c <puts>
 8000d7c:	e0a6      	b.n	8000ecc <main+0x37c>
		}
		// Check for FEC Error
		else if ((SPI_buffer & FEC_error_mask) != 0) {
 8000d7e:	8afb      	ldrh	r3, [r7, #22]
 8000d80:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d84:	4013      	ands	r3, r2
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d003      	beq.n	8000d94 <main+0x244>
			printf("ERROR: FEC Error \r\n");
 8000d8c:	4822      	ldr	r0, [pc, #136]	@ (8000e18 <main+0x2c8>)
 8000d8e:	f006 f8dd 	bl	8006f4c <puts>
 8000d92:	e09b      	b.n	8000ecc <main+0x37c>
		}
		// Check for Acquisition Chain Failure
		else if ((SPI_buffer & no_error_mask) == Diag1_mask) {
 8000d94:	8afb      	ldrh	r3, [r7, #22]
 8000d96:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d108      	bne.n	8000db8 <main+0x268>
			printf("ERROR: Acquisition chain failure \r\n");
 8000da6:	481d      	ldr	r0, [pc, #116]	@ (8000e1c <main+0x2cc>)
 8000da8:	f006 f8d0 	bl	8006f4c <puts>
			printf("Received bytes = %u", SPI_buffer);
 8000dac:	8afb      	ldrh	r3, [r7, #22]
 8000dae:	4619      	mov	r1, r3
 8000db0:	482c      	ldr	r0, [pc, #176]	@ (8000e64 <main+0x314>)
 8000db2:	f006 f863 	bl	8006e7c <iprintf>
 8000db6:	e089      	b.n	8000ecc <main+0x37c>
		}
		// Check for Sensor Cell Failure
		else if ((SPI_buffer & Diag2_mask) != 0) {
 8000db8:	8afb      	ldrh	r3, [r7, #22]
 8000dba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d003      	beq.n	8000dce <main+0x27e>
			printf("ERROR: Sensor cell failure \r\n");
 8000dc6:	4816      	ldr	r0, [pc, #88]	@ (8000e20 <main+0x2d0>)
 8000dc8:	f006 f8c0 	bl	8006f4c <puts>
 8000dcc:	e07e      	b.n	8000ecc <main+0x37c>
		}
		// Check if pressure is above measuring range maximum
		else if ((SPI_buffer & no_error_mask) == pressure_over_max_mask) {
 8000dce:	8afb      	ldrh	r3, [r7, #22]
 8000dd0:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d103      	bne.n	8000de8 <main+0x298>
			printf("ERROR: Pressure above measuring range maximum \r\n");
 8000de0:	4810      	ldr	r0, [pc, #64]	@ (8000e24 <main+0x2d4>)
 8000de2:	f006 f8b3 	bl	8006f4c <puts>
 8000de6:	e071      	b.n	8000ecc <main+0x37c>
		}
		// Check if pressure is below measuring range minimum
		else if ((SPI_buffer & pressure_under_min_mask) != 0) {
 8000de8:	8afb      	ldrh	r3, [r7, #22]
 8000dea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000dee:	4013      	ands	r3, r2
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d038      	beq.n	8000e68 <main+0x318>
			printf("ERROR: Pressure below measuring range minimum \r\n");
 8000df6:	480c      	ldr	r0, [pc, #48]	@ (8000e28 <main+0x2d8>)
 8000df8:	f006 f8a8 	bl	8006f4c <puts>
 8000dfc:	e066      	b.n	8000ecc <main+0x37c>
 8000dfe:	bf00      	nop
 8000e00:	48000400 	.word	0x48000400
 8000e04:	08007c2c 	.word	0x08007c2c
 8000e08:	08007f24 	.word	0x08007f24
 8000e0c:	200001b8 	.word	0x200001b8
 8000e10:	08007c60 	.word	0x08007c60
 8000e14:	08007c88 	.word	0x08007c88
 8000e18:	08007ca8 	.word	0x08007ca8
 8000e1c:	08007cbc 	.word	0x08007cbc
 8000e20:	08007ce0 	.word	0x08007ce0
 8000e24:	08007d00 	.word	0x08007d00
 8000e28:	08007d30 	.word	0x08007d30
 8000e2c:	08007d60 	.word	0x08007d60
 8000e30:	08007d78 	.word	0x08007d78
 8000e34:	2000008c 	.word	0x2000008c
 8000e38:	200000f8 	.word	0x200000f8
 8000e3c:	20000270 	.word	0x20000270
 8000e40:	20000274 	.word	0x20000274
 8000e44:	20000278 	.word	0x20000278
 8000e48:	20000164 	.word	0x20000164
 8000e4c:	08007d8c 	.word	0x08007d8c
 8000e50:	08007da0 	.word	0x08007da0
 8000e54:	08007db8 	.word	0x08007db8
 8000e58:	08007dd8 	.word	0x08007dd8
 8000e5c:	08007df8 	.word	0x08007df8
 8000e60:	08007f22 	.word	0x08007f22
 8000e64:	08007e1c 	.word	0x08007e1c
		}
		// Check if no errors were detected
		else if ((SPI_buffer & no_error_mask) == no_error_mask) {
 8000e68:	8afb      	ldrh	r3, [r7, #22]
 8000e6a:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000e6e:	4013      	ands	r3, r2
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d128      	bne.n	8000ecc <main+0x37c>
			printf("No errors detected \r\n");
 8000e7a:	488b      	ldr	r0, [pc, #556]	@ (80010a8 <main+0x558>)
 8000e7c:	f006 f866 	bl	8006f4c <puts>
			// Get the pressure data using a bit mask and right shift operator to get rid of parity bit
			pressure_LSB = (SPI_buffer & data_mask) >> 1;
 8000e80:	8afb      	ldrh	r3, [r7, #22]
 8000e82:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8000e86:	4013      	ands	r3, r2
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	085b      	lsrs	r3, r3, #1
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	4b87      	ldr	r3, [pc, #540]	@ (80010ac <main+0x55c>)
 8000e90:	801a      	strh	r2, [r3, #0]
			// Convert pressure from LSB to kPa using transfer function from data sheet
			pressure_Bar = ((float) pressure_LSB - offs_p) / S_p;
 8000e92:	4b86      	ldr	r3, [pc, #536]	@ (80010ac <main+0x55c>)
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	ee07 3a90 	vmov	s15, r3
 8000e9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e9e:	4b84      	ldr	r3, [pc, #528]	@ (80010b0 <main+0x560>)
 8000ea0:	edd3 7a00 	vldr	s15, [r3]
 8000ea4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000ea8:	4b82      	ldr	r3, [pc, #520]	@ (80010b4 <main+0x564>)
 8000eaa:	ed93 7a00 	vldr	s14, [r3]
 8000eae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eb2:	4b81      	ldr	r3, [pc, #516]	@ (80010b8 <main+0x568>)
 8000eb4:	edc3 7a00 	vstr	s15, [r3]
			// Convert pressure from Bar to kPa
			// pressure_Bar = pressure_Bar/100;
			// Print pressure value
			printf("Measured pressure: %i kPa \r\n", (int) pressure_Bar);
 8000eb8:	4b7f      	ldr	r3, [pc, #508]	@ (80010b8 <main+0x568>)
 8000eba:	edd3 7a00 	vldr	s15, [r3]
 8000ebe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ec2:	ee17 1a90 	vmov	r1, s15
 8000ec6:	487d      	ldr	r0, [pc, #500]	@ (80010bc <main+0x56c>)
 8000ec8:	f005 ffd8 	bl	8006e7c <iprintf>
		}

		// Start ADC1 Conversion
		HAL_ADC_Start(&hadc1);
 8000ecc:	487c      	ldr	r0, [pc, #496]	@ (80010c0 <main+0x570>)
 8000ece:	f001 fa95 	bl	80023fc <HAL_ADC_Start>
		// Poll ADC1 Peripheral & TimeOut = 1mSec
		HAL_ADC_PollForConversion(&hadc1, 1);
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	487a      	ldr	r0, [pc, #488]	@ (80010c0 <main+0x570>)
 8000ed6:	f001 fb4d 	bl	8002574 <HAL_ADC_PollForConversion>
		// Read The ADC Conversion Result & Print it
		low_pressure_raw = HAL_ADC_GetValue(&hadc1);
 8000eda:	4879      	ldr	r0, [pc, #484]	@ (80010c0 <main+0x570>)
 8000edc:	f001 fc22 	bl	8002724 <HAL_ADC_GetValue>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	84fb      	strh	r3, [r7, #38]	@ 0x26
		low_pressure_voltage = (int) low_pressure_raw * 3300 / (4095); // mV
 8000ee4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000ee6:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000eea:	fb02 f303 	mul.w	r3, r2, r3
 8000eee:	4a75      	ldr	r2, [pc, #468]	@ (80010c4 <main+0x574>)
 8000ef0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ef4:	441a      	add	r2, r3
 8000ef6:	12d2      	asrs	r2, r2, #11
 8000ef8:	17db      	asrs	r3, r3, #31
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	623b      	str	r3, [r7, #32]
		if (low_pressure_voltage <= 120 * 0.004 * 1000) {
 8000efe:	6a3b      	ldr	r3, [r7, #32]
 8000f00:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000f04:	dc03      	bgt.n	8000f0e <main+0x3be>
			low_pressure = 0; // mBar
 8000f06:	f04f 0300 	mov.w	r3, #0
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f0c:	e027      	b.n	8000f5e <main+0x40e>
		} else {
			low_pressure = ((float) low_pressure_voltage - 120 * 0.004 * 1000)
 8000f0e:	6a3b      	ldr	r3, [r7, #32]
 8000f10:	ee07 3a90 	vmov	s15, r3
 8000f14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f18:	ee17 0a90 	vmov	r0, s15
 8000f1c:	f7ff fb34 	bl	8000588 <__aeabi_f2d>
 8000f20:	f04f 0200 	mov.w	r2, #0
 8000f24:	4b68      	ldr	r3, [pc, #416]	@ (80010c8 <main+0x578>)
 8000f26:	f7ff f9cf 	bl	80002c8 <__aeabi_dsub>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	4610      	mov	r0, r2
 8000f30:	4619      	mov	r1, r3
					* 10000 / (120 * (0.02 - 0.004) * 1000); // mBar
 8000f32:	a35b      	add	r3, pc, #364	@ (adr r3, 80010a0 <main+0x550>)
 8000f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f38:	f7ff fb7e 	bl	8000638 <__aeabi_dmul>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	460b      	mov	r3, r1
 8000f40:	4610      	mov	r0, r2
 8000f42:	4619      	mov	r1, r3
 8000f44:	f04f 0200 	mov.w	r2, #0
 8000f48:	4b60      	ldr	r3, [pc, #384]	@ (80010cc <main+0x57c>)
 8000f4a:	f7ff fc9f 	bl	800088c <__aeabi_ddiv>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
			low_pressure = ((float) low_pressure_voltage - 120 * 0.004 * 1000)
 8000f52:	4610      	mov	r0, r2
 8000f54:	4619      	mov	r1, r3
 8000f56:	f7ff fd81 	bl	8000a5c <__aeabi_d2f>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
		printf("Low Pressure = %i mBar\r\n", (int) low_pressure);
 8000f5e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000f62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f66:	ee17 1a90 	vmov	r1, s15
 8000f6a:	4859      	ldr	r0, [pc, #356]	@ (80010d0 <main+0x580>)
 8000f6c:	f005 ff86 	bl	8006e7c <iprintf>

		// Start ADC2 Conversion
		HAL_ADC_Start(&hadc2);
 8000f70:	4858      	ldr	r0, [pc, #352]	@ (80010d4 <main+0x584>)
 8000f72:	f001 fa43 	bl	80023fc <HAL_ADC_Start>
		// Poll ADC2 Peripheral & TimeOut = 1mSec
		HAL_ADC_PollForConversion(&hadc2, 1);
 8000f76:	2101      	movs	r1, #1
 8000f78:	4856      	ldr	r0, [pc, #344]	@ (80010d4 <main+0x584>)
 8000f7a:	f001 fafb 	bl	8002574 <HAL_ADC_PollForConversion>
		// Read The ADC Conversion Result & Print it
		high_pressure_raw = HAL_ADC_GetValue(&hadc2);
 8000f7e:	4855      	ldr	r0, [pc, #340]	@ (80010d4 <main+0x584>)
 8000f80:	f001 fbd0 	bl	8002724 <HAL_ADC_GetValue>
 8000f84:	4603      	mov	r3, r0
 8000f86:	83fb      	strh	r3, [r7, #30]
		high_pressure_voltage = (int) high_pressure_raw * 3300 / 4095; // mV
 8000f88:	8bfb      	ldrh	r3, [r7, #30]
 8000f8a:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000f8e:	fb02 f303 	mul.w	r3, r2, r3
 8000f92:	4a4c      	ldr	r2, [pc, #304]	@ (80010c4 <main+0x574>)
 8000f94:	fb82 1203 	smull	r1, r2, r2, r3
 8000f98:	441a      	add	r2, r3
 8000f9a:	12d2      	asrs	r2, r2, #11
 8000f9c:	17db      	asrs	r3, r3, #31
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	61bb      	str	r3, [r7, #24]
		if (high_pressure_voltage <= 120 * 0.004 * 1000) {
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000fa8:	dc03      	bgt.n	8000fb2 <main+0x462>
			high_pressure = 0; // mBar
 8000faa:	f04f 0300 	mov.w	r3, #0
 8000fae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fb0:	e027      	b.n	8001002 <main+0x4b2>
		} else {
			high_pressure = ((float) high_pressure_voltage - 120 * 0.004 * 1000)
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	ee07 3a90 	vmov	s15, r3
 8000fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fbc:	ee17 0a90 	vmov	r0, s15
 8000fc0:	f7ff fae2 	bl	8000588 <__aeabi_f2d>
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	4b3f      	ldr	r3, [pc, #252]	@ (80010c8 <main+0x578>)
 8000fca:	f7ff f97d 	bl	80002c8 <__aeabi_dsub>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	4619      	mov	r1, r3
					* 250 / (120 * (0.02 - 0.004) * 1000); // Bar
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	4b3f      	ldr	r3, [pc, #252]	@ (80010d8 <main+0x588>)
 8000fdc:	f7ff fb2c 	bl	8000638 <__aeabi_dmul>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f04f 0200 	mov.w	r2, #0
 8000fec:	4b37      	ldr	r3, [pc, #220]	@ (80010cc <main+0x57c>)
 8000fee:	f7ff fc4d 	bl	800088c <__aeabi_ddiv>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
			high_pressure = ((float) high_pressure_voltage - 120 * 0.004 * 1000)
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f7ff fd2f 	bl	8000a5c <__aeabi_d2f>
 8000ffe:	4603      	mov	r3, r0
 8001000:	62bb      	str	r3, [r7, #40]	@ 0x28
		}
		printf("High Pressure = %i Bar\r\n", (int) high_pressure);
 8001002:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001006:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800100a:	ee17 1a90 	vmov	r1, s15
 800100e:	4833      	ldr	r0, [pc, #204]	@ (80010dc <main+0x58c>)
 8001010:	f005 ff34 	bl	8006e7c <iprintf>

		// Check if CO2 sensor has a measurement ready
		uint8_t CO2_sensor_data_ready_buffer[3];
		if (HAL_I2C_Master_Transmit(&hi2c2, CO2_sensor_ADDR, CO2_sensor_data_ready, 2, 1) == HAL_OK) {
 8001014:	23c4      	movs	r3, #196	@ 0xc4
 8001016:	4619      	mov	r1, r3
 8001018:	2301      	movs	r3, #1
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2302      	movs	r3, #2
 800101e:	4a30      	ldr	r2, [pc, #192]	@ (80010e0 <main+0x590>)
 8001020:	4830      	ldr	r0, [pc, #192]	@ (80010e4 <main+0x594>)
 8001022:	f002 fcef 	bl	8003a04 <HAL_I2C_Master_Transmit>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d135      	bne.n	8001098 <main+0x548>
			if (HAL_I2C_Master_Receive(&hi2c2, CO2_sensor_ADDR, CO2_sensor_data_ready_buffer, 3, 1) == HAL_OK) {
 800102c:	23c4      	movs	r3, #196	@ 0xc4
 800102e:	4619      	mov	r1, r3
 8001030:	f107 0210 	add.w	r2, r7, #16
 8001034:	2301      	movs	r3, #1
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2303      	movs	r3, #3
 800103a:	482a      	ldr	r0, [pc, #168]	@ (80010e4 <main+0x594>)
 800103c:	f002 fdfa 	bl	8003c34 <HAL_I2C_Master_Receive>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	f47f ae55 	bne.w	8000cf2 <main+0x1a2>
				printf("CO2 sensor has measurement ready \r\n");
 8001048:	4827      	ldr	r0, [pc, #156]	@ (80010e8 <main+0x598>)
 800104a:	f005 ff7f 	bl	8006f4c <puts>
				printf("Response to data ready = %i - %i \r\n", (int)CO2_sensor_data_ready_buffer[0], (int)CO2_sensor_data_ready_buffer[1]);
 800104e:	7c3b      	ldrb	r3, [r7, #16]
 8001050:	4619      	mov	r1, r3
 8001052:	7c7b      	ldrb	r3, [r7, #17]
 8001054:	461a      	mov	r2, r3
 8001056:	4825      	ldr	r0, [pc, #148]	@ (80010ec <main+0x59c>)
 8001058:	f005 ff10 	bl	8006e7c <iprintf>

				// Create buffer to store CO2 measurement
				uint8_t CO2_measurement[12];
				// Write command to read CO2 measurement
				if (HAL_I2C_Master_Transmit(&hi2c2, CO2_sensor_ADDR, CO2_sensor_read, 2, 1) == HAL_OK) {
 800105c:	23c4      	movs	r3, #196	@ 0xc4
 800105e:	4619      	mov	r1, r3
 8001060:	2301      	movs	r3, #1
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2302      	movs	r3, #2
 8001066:	4a22      	ldr	r2, [pc, #136]	@ (80010f0 <main+0x5a0>)
 8001068:	481e      	ldr	r0, [pc, #120]	@ (80010e4 <main+0x594>)
 800106a:	f002 fccb 	bl	8003a04 <HAL_I2C_Master_Transmit>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	f47f ae3e 	bne.w	8000cf2 <main+0x1a2>
					//Read CO2 measurement
					if(HAL_I2C_Master_Receive(&hi2c2, CO2_sensor_ADDR, CO2_measurement, 9, 1) == HAL_OK) {
 8001076:	23c4      	movs	r3, #196	@ 0xc4
 8001078:	4619      	mov	r1, r3
 800107a:	1d3a      	adds	r2, r7, #4
 800107c:	2301      	movs	r3, #1
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2309      	movs	r3, #9
 8001082:	4818      	ldr	r0, [pc, #96]	@ (80010e4 <main+0x594>)
 8001084:	f002 fdd6 	bl	8003c34 <HAL_I2C_Master_Receive>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	f43f ae31 	beq.w	8000cf2 <main+0x1a2>
						//printf("CO2 SENSOR DATA = i% - i% \r\n", CO2_measurement[0], CO2_measurement[1]);
					}
					else {
						printf("Failed to receive read command \r\n");
 8001090:	4818      	ldr	r0, [pc, #96]	@ (80010f4 <main+0x5a4>)
 8001092:	f005 ff5b 	bl	8006f4c <puts>
 8001096:	e62c      	b.n	8000cf2 <main+0x1a2>
					printf("Failed to transmit read command \r\n");
				}*/
			}
		}
		else {
			printf("CO2 sensor DOES NOT HAVE A MEASUREMENT READY\r\n");
 8001098:	4817      	ldr	r0, [pc, #92]	@ (80010f8 <main+0x5a8>)
 800109a:	f005 ff57 	bl	8006f4c <puts>
	while (1) {
 800109e:	e628      	b.n	8000cf2 <main+0x1a2>
 80010a0:	00000000 	.word	0x00000000
 80010a4:	40c38800 	.word	0x40c38800
 80010a8:	08007d60 	.word	0x08007d60
 80010ac:	20000268 	.word	0x20000268
 80010b0:	20000000 	.word	0x20000000
 80010b4:	20000004 	.word	0x20000004
 80010b8:	2000026c 	.word	0x2000026c
 80010bc:	08007e30 	.word	0x08007e30
 80010c0:	2000008c 	.word	0x2000008c
 80010c4:	80080081 	.word	0x80080081
 80010c8:	407e0000 	.word	0x407e0000
 80010cc:	409e0000 	.word	0x409e0000
 80010d0:	08007e50 	.word	0x08007e50
 80010d4:	200000f8 	.word	0x200000f8
 80010d8:	406f4000 	.word	0x406f4000
 80010dc:	08007e6c 	.word	0x08007e6c
 80010e0:	20000274 	.word	0x20000274
 80010e4:	20000164 	.word	0x20000164
 80010e8:	08007e88 	.word	0x08007e88
 80010ec:	08007eac 	.word	0x08007eac
 80010f0:	20000278 	.word	0x20000278
 80010f4:	08007ed0 	.word	0x08007ed0
 80010f8:	08007ef4 	.word	0x08007ef4

080010fc <SystemClock_Config>:

	/**
	 * @brief System Clock Configuration
	 * @retval None
	 */
	void SystemClock_Config(void) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b094      	sub	sp, #80	@ 0x50
 8001100:	af00      	add	r7, sp, #0
		RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001102:	f107 0318 	add.w	r3, r7, #24
 8001106:	2238      	movs	r2, #56	@ 0x38
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f005 fffe 	bl	800710c <memset>
		RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]

		/** Configure the main internal regulator output voltage
		 */
		HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800111e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001122:	f003 faa7 	bl	8004674 <HAL_PWREx_ControlVoltageScaling>

		/** Initializes the RCC Oscillators according to the specified parameters
		 * in the RCC_OscInitTypeDef structure.
		 */
		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001126:	2302      	movs	r3, #2
 8001128:	61bb      	str	r3, [r7, #24]
		RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800112a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800112e:	627b      	str	r3, [r7, #36]	@ 0x24
		RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001130:	2340      	movs	r3, #64	@ 0x40
 8001132:	62bb      	str	r3, [r7, #40]	@ 0x28
		RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001134:	2302      	movs	r3, #2
 8001136:	637b      	str	r3, [r7, #52]	@ 0x34
		RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001138:	2302      	movs	r3, #2
 800113a:	63bb      	str	r3, [r7, #56]	@ 0x38
		RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800113c:	2304      	movs	r3, #4
 800113e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		RCC_OscInitStruct.PLL.PLLN = 75;
 8001140:	234b      	movs	r3, #75	@ 0x4b
 8001142:	643b      	str	r3, [r7, #64]	@ 0x40
		RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001144:	2302      	movs	r3, #2
 8001146:	647b      	str	r3, [r7, #68]	@ 0x44
		RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001148:	2302      	movs	r3, #2
 800114a:	64bb      	str	r3, [r7, #72]	@ 0x48
		RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800114c:	2302      	movs	r3, #2
 800114e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001150:	f107 0318 	add.w	r3, r7, #24
 8001154:	4618      	mov	r0, r3
 8001156:	f003 fb41 	bl	80047dc <HAL_RCC_OscConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <SystemClock_Config+0x68>
			Error_Handler();
 8001160:	f000 fa68 	bl	8001634 <Error_Handler>
		}

		/** Initializes the CPU, AHB and APB buses clocks
		 */
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001164:	230f      	movs	r3, #15
 8001166:	607b      	str	r3, [r7, #4]
				| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001168:	2303      	movs	r3, #3
 800116a:	60bb      	str	r3, [r7, #8]
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4)
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2104      	movs	r1, #4
 800117c:	4618      	mov	r0, r3
 800117e:	f003 fe3f 	bl	8004e00 <HAL_RCC_ClockConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0x90>
				!= HAL_OK) {
			Error_Handler();
 8001188:	f000 fa54 	bl	8001634 <Error_Handler>
		}
	}
 800118c:	bf00      	nop
 800118e:	3750      	adds	r7, #80	@ 0x50
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <MX_ADC1_Init>:
	/**
	 * @brief ADC1 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_ADC1_Init(void) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b08c      	sub	sp, #48	@ 0x30
 8001198:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN ADC1_Init 0 */

		/* USER CODE END ADC1_Init 0 */

		ADC_MultiModeTypeDef multimode = { 0 };
 800119a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
		ADC_ChannelConfTypeDef sConfig = { 0 };
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	2220      	movs	r2, #32
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f005 ffad 	bl	800710c <memset>

		/* USER CODE END ADC1_Init 1 */

		/** Common config
		 */
		hadc1.Instance = ADC1;
 80011b2:	4b32      	ldr	r3, [pc, #200]	@ (800127c <MX_ADC1_Init+0xe8>)
 80011b4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80011b8:	601a      	str	r2, [r3, #0]
		hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011ba:	4b30      	ldr	r3, [pc, #192]	@ (800127c <MX_ADC1_Init+0xe8>)
 80011bc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80011c0:	605a      	str	r2, [r3, #4]
		hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011c2:	4b2e      	ldr	r3, [pc, #184]	@ (800127c <MX_ADC1_Init+0xe8>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
		hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011c8:	4b2c      	ldr	r3, [pc, #176]	@ (800127c <MX_ADC1_Init+0xe8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
		hadc1.Init.GainCompensation = 0;
 80011ce:	4b2b      	ldr	r3, [pc, #172]	@ (800127c <MX_ADC1_Init+0xe8>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
		hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011d4:	4b29      	ldr	r3, [pc, #164]	@ (800127c <MX_ADC1_Init+0xe8>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	615a      	str	r2, [r3, #20]
		hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011da:	4b28      	ldr	r3, [pc, #160]	@ (800127c <MX_ADC1_Init+0xe8>)
 80011dc:	2204      	movs	r2, #4
 80011de:	619a      	str	r2, [r3, #24]
		hadc1.Init.LowPowerAutoWait = DISABLE;
 80011e0:	4b26      	ldr	r3, [pc, #152]	@ (800127c <MX_ADC1_Init+0xe8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	771a      	strb	r2, [r3, #28]
		hadc1.Init.ContinuousConvMode = DISABLE;
 80011e6:	4b25      	ldr	r3, [pc, #148]	@ (800127c <MX_ADC1_Init+0xe8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	775a      	strb	r2, [r3, #29]
		hadc1.Init.NbrOfConversion = 1;
 80011ec:	4b23      	ldr	r3, [pc, #140]	@ (800127c <MX_ADC1_Init+0xe8>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	621a      	str	r2, [r3, #32]
		hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011f2:	4b22      	ldr	r3, [pc, #136]	@ (800127c <MX_ADC1_Init+0xe8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011fa:	4b20      	ldr	r3, [pc, #128]	@ (800127c <MX_ADC1_Init+0xe8>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	62da      	str	r2, [r3, #44]	@ 0x2c
		hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001200:	4b1e      	ldr	r3, [pc, #120]	@ (800127c <MX_ADC1_Init+0xe8>)
 8001202:	2200      	movs	r2, #0
 8001204:	631a      	str	r2, [r3, #48]	@ 0x30
		hadc1.Init.DMAContinuousRequests = DISABLE;
 8001206:	4b1d      	ldr	r3, [pc, #116]	@ (800127c <MX_ADC1_Init+0xe8>)
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800120e:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <MX_ADC1_Init+0xe8>)
 8001210:	2200      	movs	r2, #0
 8001212:	63da      	str	r2, [r3, #60]	@ 0x3c
		hadc1.Init.OversamplingMode = DISABLE;
 8001214:	4b19      	ldr	r3, [pc, #100]	@ (800127c <MX_ADC1_Init+0xe8>)
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800121c:	4817      	ldr	r0, [pc, #92]	@ (800127c <MX_ADC1_Init+0xe8>)
 800121e:	f000 ff69 	bl	80020f4 <HAL_ADC_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_ADC1_Init+0x98>
			Error_Handler();
 8001228:	f000 fa04 	bl	8001634 <Error_Handler>
		}

		/** Configure the ADC multi-mode
		 */
		multimode.Mode = ADC_MODE_INDEPENDENT;
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001230:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001234:	4619      	mov	r1, r3
 8001236:	4811      	ldr	r0, [pc, #68]	@ (800127c <MX_ADC1_Init+0xe8>)
 8001238:	f002 f80c 	bl	8003254 <HAL_ADCEx_MultiModeConfigChannel>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_ADC1_Init+0xb2>
			Error_Handler();
 8001242:	f000 f9f7 	bl	8001634 <Error_Handler>
		}

		/** Configure Regular Channel
		 */
		sConfig.Channel = ADC_CHANNEL_12;
 8001246:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <MX_ADC1_Init+0xec>)
 8001248:	607b      	str	r3, [r7, #4]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 800124a:	2306      	movs	r3, #6
 800124c:	60bb      	str	r3, [r7, #8]
		sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800124e:	2304      	movs	r3, #4
 8001250:	60fb      	str	r3, [r7, #12]
		sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001252:	237f      	movs	r3, #127	@ 0x7f
 8001254:	613b      	str	r3, [r7, #16]
		sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001256:	2304      	movs	r3, #4
 8001258:	617b      	str	r3, [r7, #20]
		sConfig.Offset = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	4619      	mov	r1, r3
 8001262:	4806      	ldr	r0, [pc, #24]	@ (800127c <MX_ADC1_Init+0xe8>)
 8001264:	f001 fa6c 	bl	8002740 <HAL_ADC_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_ADC1_Init+0xde>
			Error_Handler();
 800126e:	f000 f9e1 	bl	8001634 <Error_Handler>
		}
		/* USER CODE BEGIN ADC1_Init 2 */

		/* USER CODE END ADC1_Init 2 */

	}
 8001272:	bf00      	nop
 8001274:	3730      	adds	r7, #48	@ 0x30
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	2000008c 	.word	0x2000008c
 8001280:	32601000 	.word	0x32601000

08001284 <MX_ADC2_Init>:
	/**
	 * @brief ADC2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_ADC2_Init(void) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN ADC2_Init 0 */

		/* USER CODE END ADC2_Init 0 */

		ADC_ChannelConfTypeDef sConfig = { 0 };
 800128a:	463b      	mov	r3, r7
 800128c:	2220      	movs	r2, #32
 800128e:	2100      	movs	r1, #0
 8001290:	4618      	mov	r0, r3
 8001292:	f005 ff3b 	bl	800710c <memset>

		/* USER CODE END ADC2_Init 1 */

		/** Common config
		 */
		hadc2.Instance = ADC2;
 8001296:	4b2b      	ldr	r3, [pc, #172]	@ (8001344 <MX_ADC2_Init+0xc0>)
 8001298:	4a2b      	ldr	r2, [pc, #172]	@ (8001348 <MX_ADC2_Init+0xc4>)
 800129a:	601a      	str	r2, [r3, #0]
		hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800129c:	4b29      	ldr	r3, [pc, #164]	@ (8001344 <MX_ADC2_Init+0xc0>)
 800129e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80012a2:	605a      	str	r2, [r3, #4]
		hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80012a4:	4b27      	ldr	r3, [pc, #156]	@ (8001344 <MX_ADC2_Init+0xc0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
		hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012aa:	4b26      	ldr	r3, [pc, #152]	@ (8001344 <MX_ADC2_Init+0xc0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	60da      	str	r2, [r3, #12]
		hadc2.Init.GainCompensation = 0;
 80012b0:	4b24      	ldr	r3, [pc, #144]	@ (8001344 <MX_ADC2_Init+0xc0>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
		hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012b6:	4b23      	ldr	r3, [pc, #140]	@ (8001344 <MX_ADC2_Init+0xc0>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	615a      	str	r2, [r3, #20]
		hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012bc:	4b21      	ldr	r3, [pc, #132]	@ (8001344 <MX_ADC2_Init+0xc0>)
 80012be:	2204      	movs	r2, #4
 80012c0:	619a      	str	r2, [r3, #24]
		hadc2.Init.LowPowerAutoWait = DISABLE;
 80012c2:	4b20      	ldr	r3, [pc, #128]	@ (8001344 <MX_ADC2_Init+0xc0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	771a      	strb	r2, [r3, #28]
		hadc2.Init.ContinuousConvMode = DISABLE;
 80012c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001344 <MX_ADC2_Init+0xc0>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	775a      	strb	r2, [r3, #29]
		hadc2.Init.NbrOfConversion = 1;
 80012ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001344 <MX_ADC2_Init+0xc0>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	621a      	str	r2, [r3, #32]
		hadc2.Init.DiscontinuousConvMode = DISABLE;
 80012d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <MX_ADC2_Init+0xc0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012dc:	4b19      	ldr	r3, [pc, #100]	@ (8001344 <MX_ADC2_Init+0xc0>)
 80012de:	2200      	movs	r2, #0
 80012e0:	62da      	str	r2, [r3, #44]	@ 0x2c
		hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012e2:	4b18      	ldr	r3, [pc, #96]	@ (8001344 <MX_ADC2_Init+0xc0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	631a      	str	r2, [r3, #48]	@ 0x30
		hadc2.Init.DMAContinuousRequests = DISABLE;
 80012e8:	4b16      	ldr	r3, [pc, #88]	@ (8001344 <MX_ADC2_Init+0xc0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012f0:	4b14      	ldr	r3, [pc, #80]	@ (8001344 <MX_ADC2_Init+0xc0>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	63da      	str	r2, [r3, #60]	@ 0x3c
		hadc2.Init.OversamplingMode = DISABLE;
 80012f6:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <MX_ADC2_Init+0xc0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 80012fe:	4811      	ldr	r0, [pc, #68]	@ (8001344 <MX_ADC2_Init+0xc0>)
 8001300:	f000 fef8 	bl	80020f4 <HAL_ADC_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_ADC2_Init+0x8a>
			Error_Handler();
 800130a:	f000 f993 	bl	8001634 <Error_Handler>
		}

		/** Configure Regular Channel
		 */
		sConfig.Channel = ADC_CHANNEL_13;
 800130e:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <MX_ADC2_Init+0xc8>)
 8001310:	603b      	str	r3, [r7, #0]
		sConfig.Rank = ADC_REGULAR_RANK_1;
 8001312:	2306      	movs	r3, #6
 8001314:	607b      	str	r3, [r7, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001316:	2304      	movs	r3, #4
 8001318:	60bb      	str	r3, [r7, #8]
		sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800131a:	237f      	movs	r3, #127	@ 0x7f
 800131c:	60fb      	str	r3, [r7, #12]
		sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800131e:	2304      	movs	r3, #4
 8001320:	613b      	str	r3, [r7, #16]
		sConfig.Offset = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
		if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001326:	463b      	mov	r3, r7
 8001328:	4619      	mov	r1, r3
 800132a:	4806      	ldr	r0, [pc, #24]	@ (8001344 <MX_ADC2_Init+0xc0>)
 800132c:	f001 fa08 	bl	8002740 <HAL_ADC_ConfigChannel>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_ADC2_Init+0xb6>
			Error_Handler();
 8001336:	f000 f97d 	bl	8001634 <Error_Handler>
		}
		/* USER CODE BEGIN ADC2_Init 2 */

		/* USER CODE END ADC2_Init 2 */

	}
 800133a:	bf00      	nop
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200000f8 	.word	0x200000f8
 8001348:	50000100 	.word	0x50000100
 800134c:	36902000 	.word	0x36902000

08001350 <MX_I2C2_Init>:
	/**
	 * @brief I2C2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_I2C2_Init(void) {
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
		/* USER CODE END I2C2_Init 0 */

		/* USER CODE BEGIN I2C2_Init 1 */

		/* USER CODE END I2C2_Init 1 */
		hi2c2.Instance = I2C2;
 8001354:	4b1b      	ldr	r3, [pc, #108]	@ (80013c4 <MX_I2C2_Init+0x74>)
 8001356:	4a1c      	ldr	r2, [pc, #112]	@ (80013c8 <MX_I2C2_Init+0x78>)
 8001358:	601a      	str	r2, [r3, #0]
		hi2c2.Init.Timing = 0x20C0EDFF;
 800135a:	4b1a      	ldr	r3, [pc, #104]	@ (80013c4 <MX_I2C2_Init+0x74>)
 800135c:	4a1b      	ldr	r2, [pc, #108]	@ (80013cc <MX_I2C2_Init+0x7c>)
 800135e:	605a      	str	r2, [r3, #4]
		hi2c2.Init.OwnAddress1 = 0;
 8001360:	4b18      	ldr	r3, [pc, #96]	@ (80013c4 <MX_I2C2_Init+0x74>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
		hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001366:	4b17      	ldr	r3, [pc, #92]	@ (80013c4 <MX_I2C2_Init+0x74>)
 8001368:	2201      	movs	r2, #1
 800136a:	60da      	str	r2, [r3, #12]
		hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800136c:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <MX_I2C2_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
		hi2c2.Init.OwnAddress2 = 0;
 8001372:	4b14      	ldr	r3, [pc, #80]	@ (80013c4 <MX_I2C2_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	615a      	str	r2, [r3, #20]
		hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001378:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <MX_I2C2_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	619a      	str	r2, [r3, #24]
		hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800137e:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <MX_I2C2_Init+0x74>)
 8001380:	2200      	movs	r2, #0
 8001382:	61da      	str	r2, [r3, #28]
		hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001384:	4b0f      	ldr	r3, [pc, #60]	@ (80013c4 <MX_I2C2_Init+0x74>)
 8001386:	2200      	movs	r2, #0
 8001388:	621a      	str	r2, [r3, #32]
		if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 800138a:	480e      	ldr	r0, [pc, #56]	@ (80013c4 <MX_I2C2_Init+0x74>)
 800138c:	f002 fa9e 	bl	80038cc <HAL_I2C_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_I2C2_Init+0x4a>
			Error_Handler();
 8001396:	f000 f94d 	bl	8001634 <Error_Handler>
		}

		/** Configure Analogue filter
		 */
		if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 800139a:	2100      	movs	r1, #0
 800139c:	4809      	ldr	r0, [pc, #36]	@ (80013c4 <MX_I2C2_Init+0x74>)
 800139e:	f003 f8d1 	bl	8004544 <HAL_I2CEx_ConfigAnalogFilter>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_I2C2_Init+0x5c>
				!= HAL_OK) {
			Error_Handler();
 80013a8:	f000 f944 	bl	8001634 <Error_Handler>
		}

		/** Configure Digital filter
		 */
		if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 80013ac:	2100      	movs	r1, #0
 80013ae:	4805      	ldr	r0, [pc, #20]	@ (80013c4 <MX_I2C2_Init+0x74>)
 80013b0:	f003 f913 	bl	80045da <HAL_I2CEx_ConfigDigitalFilter>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_I2C2_Init+0x6e>
			Error_Handler();
 80013ba:	f000 f93b 	bl	8001634 <Error_Handler>
		}
		/* USER CODE BEGIN I2C2_Init 2 */

		/* USER CODE END I2C2_Init 2 */

	}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000164 	.word	0x20000164
 80013c8:	40005800 	.word	0x40005800
 80013cc:	20c0edff 	.word	0x20c0edff

080013d0 <MX_SPI2_Init>:
	/**
	 * @brief SPI2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_SPI2_Init(void) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN SPI2_Init 1 */

		/* USER CODE END SPI2_Init 1 */
		/* SPI2 parameter configuration*/
		hspi2.Instance = SPI2;
 80013d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001444 <MX_SPI2_Init+0x74>)
 80013d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001448 <MX_SPI2_Init+0x78>)
 80013d8:	601a      	str	r2, [r3, #0]
		hspi2.Init.Mode = SPI_MODE_MASTER;
 80013da:	4b1a      	ldr	r3, [pc, #104]	@ (8001444 <MX_SPI2_Init+0x74>)
 80013dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013e0:	605a      	str	r2, [r3, #4]
		hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013e2:	4b18      	ldr	r3, [pc, #96]	@ (8001444 <MX_SPI2_Init+0x74>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
		hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80013e8:	4b16      	ldr	r3, [pc, #88]	@ (8001444 <MX_SPI2_Init+0x74>)
 80013ea:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80013ee:	60da      	str	r2, [r3, #12]
		hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013f0:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <MX_SPI2_Init+0x74>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
		hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80013f6:	4b13      	ldr	r3, [pc, #76]	@ (8001444 <MX_SPI2_Init+0x74>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	615a      	str	r2, [r3, #20]
		hspi2.Init.NSS = SPI_NSS_SOFT;
 80013fc:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <MX_SPI2_Init+0x74>)
 80013fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001402:	619a      	str	r2, [r3, #24]
		hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001404:	4b0f      	ldr	r3, [pc, #60]	@ (8001444 <MX_SPI2_Init+0x74>)
 8001406:	2220      	movs	r2, #32
 8001408:	61da      	str	r2, [r3, #28]
		hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800140a:	4b0e      	ldr	r3, [pc, #56]	@ (8001444 <MX_SPI2_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	621a      	str	r2, [r3, #32]
		hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001410:	4b0c      	ldr	r3, [pc, #48]	@ (8001444 <MX_SPI2_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	625a      	str	r2, [r3, #36]	@ 0x24
		hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001416:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <MX_SPI2_Init+0x74>)
 8001418:	2200      	movs	r2, #0
 800141a:	629a      	str	r2, [r3, #40]	@ 0x28
		hspi2.Init.CRCPolynomial = 7;
 800141c:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <MX_SPI2_Init+0x74>)
 800141e:	2207      	movs	r2, #7
 8001420:	62da      	str	r2, [r3, #44]	@ 0x2c
		hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001422:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <MX_SPI2_Init+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	631a      	str	r2, [r3, #48]	@ 0x30
		hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001428:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <MX_SPI2_Init+0x74>)
 800142a:	2200      	movs	r2, #0
 800142c:	635a      	str	r2, [r3, #52]	@ 0x34
		if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800142e:	4805      	ldr	r0, [pc, #20]	@ (8001444 <MX_SPI2_Init+0x74>)
 8001430:	f004 f8ba 	bl	80055a8 <HAL_SPI_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_SPI2_Init+0x6e>
			Error_Handler();
 800143a:	f000 f8fb 	bl	8001634 <Error_Handler>
		}
		/* USER CODE BEGIN SPI2_Init 2 */

		/* USER CODE END SPI2_Init 2 */

	}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200001b8 	.word	0x200001b8
 8001448:	40003800 	.word	0x40003800

0800144c <MX_TIM2_Init>:
	/**
	 * @brief TIM2 Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_TIM2_Init(void) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b08e      	sub	sp, #56	@ 0x38
 8001450:	af00      	add	r7, sp, #0

		/* USER CODE BEGIN TIM2_Init 0 */

		/* USER CODE END TIM2_Init 0 */

		TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001452:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
		TIM_OC_InitTypeDef sConfigOC = { 0 };
 800146c:	463b      	mov	r3, r7
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]
 800147a:	615a      	str	r2, [r3, #20]
 800147c:	619a      	str	r2, [r3, #24]

		/* USER CODE BEGIN TIM2_Init 1 */

		/* USER CODE END TIM2_Init 1 */
		htim2.Instance = TIM2;
 800147e:	4b2c      	ldr	r3, [pc, #176]	@ (8001530 <MX_TIM2_Init+0xe4>)
 8001480:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001484:	601a      	str	r2, [r3, #0]
		htim2.Init.Prescaler = 60000 - 1;
 8001486:	4b2a      	ldr	r3, [pc, #168]	@ (8001530 <MX_TIM2_Init+0xe4>)
 8001488:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800148c:	605a      	str	r2, [r3, #4]
		htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148e:	4b28      	ldr	r3, [pc, #160]	@ (8001530 <MX_TIM2_Init+0xe4>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
		htim2.Init.Period = 499;
 8001494:	4b26      	ldr	r3, [pc, #152]	@ (8001530 <MX_TIM2_Init+0xe4>)
 8001496:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800149a:	60da      	str	r2, [r3, #12]
		htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149c:	4b24      	ldr	r3, [pc, #144]	@ (8001530 <MX_TIM2_Init+0xe4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
		htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a2:	4b23      	ldr	r3, [pc, #140]	@ (8001530 <MX_TIM2_Init+0xe4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
		if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80014a8:	4821      	ldr	r0, [pc, #132]	@ (8001530 <MX_TIM2_Init+0xe4>)
 80014aa:	f004 fcaf 	bl	8005e0c <HAL_TIM_Base_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM2_Init+0x6c>
			Error_Handler();
 80014b4:	f000 f8be 	bl	8001634 <Error_Handler>
		}
		sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014bc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80014be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014c2:	4619      	mov	r1, r3
 80014c4:	481a      	ldr	r0, [pc, #104]	@ (8001530 <MX_TIM2_Init+0xe4>)
 80014c6:	f004 fe6d 	bl	80061a4 <HAL_TIM_ConfigClockSource>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM2_Init+0x88>
			Error_Handler();
 80014d0:	f000 f8b0 	bl	8001634 <Error_Handler>
		}
		if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80014d4:	4816      	ldr	r0, [pc, #88]	@ (8001530 <MX_TIM2_Init+0xe4>)
 80014d6:	f004 fcf0 	bl	8005eba <HAL_TIM_PWM_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM2_Init+0x98>
			Error_Handler();
 80014e0:	f000 f8a8 	bl	8001634 <Error_Handler>
		}
		sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014e4:	2320      	movs	r3, #32
 80014e6:	61fb      	str	r3, [r7, #28]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
		if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	4619      	mov	r1, r3
 80014f2:	480f      	ldr	r0, [pc, #60]	@ (8001530 <MX_TIM2_Init+0xe4>)
 80014f4:	f005 fb7e 	bl	8006bf4 <HAL_TIMEx_MasterConfigSynchronization>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM2_Init+0xb6>
				!= HAL_OK) {
			Error_Handler();
 80014fe:	f000 f899 	bl	8001634 <Error_Handler>
		}
		sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001502:	2360      	movs	r3, #96	@ 0x60
 8001504:	603b      	str	r3, [r7, #0]
		sConfigOC.Pulse = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
		sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
		sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
		if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8001512:	463b      	mov	r3, r7
 8001514:	2200      	movs	r2, #0
 8001516:	4619      	mov	r1, r3
 8001518:	4805      	ldr	r0, [pc, #20]	@ (8001530 <MX_TIM2_Init+0xe4>)
 800151a:	f004 fd2f 	bl	8005f7c <HAL_TIM_PWM_ConfigChannel>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM2_Init+0xdc>
				!= HAL_OK) {
			Error_Handler();
 8001524:	f000 f886 	bl	8001634 <Error_Handler>
		}
		/* USER CODE BEGIN TIM2_Init 2 */

		/* USER CODE END TIM2_Init 2 */

	}
 8001528:	bf00      	nop
 800152a:	3738      	adds	r7, #56	@ 0x38
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	2000021c 	.word	0x2000021c

08001534 <MX_GPIO_Init>:
	/**
	 * @brief GPIO Initialization Function
	 * @param None
	 * @retval None
	 */
	static void MX_GPIO_Init(void) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
 8001548:	611a      	str	r2, [r3, #16]
		/* USER CODE BEGIN MX_GPIO_Init_1 */
		/* USER CODE END MX_GPIO_Init_1 */

		/* GPIO Ports Clock Enable */
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	4b2a      	ldr	r3, [pc, #168]	@ (80015f4 <MX_GPIO_Init+0xc0>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154e:	4a29      	ldr	r2, [pc, #164]	@ (80015f4 <MX_GPIO_Init+0xc0>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001556:	4b27      	ldr	r3, [pc, #156]	@ (80015f4 <MX_GPIO_Init+0xc0>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001562:	4b24      	ldr	r3, [pc, #144]	@ (80015f4 <MX_GPIO_Init+0xc0>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001566:	4a23      	ldr	r2, [pc, #140]	@ (80015f4 <MX_GPIO_Init+0xc0>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156e:	4b21      	ldr	r3, [pc, #132]	@ (80015f4 <MX_GPIO_Init+0xc0>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin,
 800157a:	2201      	movs	r2, #1
 800157c:	2140      	movs	r1, #64	@ 0x40
 800157e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001582:	f002 f971 	bl	8003868 <HAL_GPIO_WritePin>
				GPIO_PIN_SET);

		/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin | PRS_Ready_Pin | System_Ready_Pin,
 8001586:	2201      	movs	r2, #1
 8001588:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 800158c:	481a      	ldr	r0, [pc, #104]	@ (80015f8 <MX_GPIO_Init+0xc4>)
 800158e:	f002 f96b 	bl	8003868 <HAL_GPIO_WritePin>
				GPIO_PIN_SET);

		/*Configure GPIO pin : Valve_Enable_Pin */
		GPIO_InitStruct.Pin = Valve_Enable_Pin;
 8001592:	2340      	movs	r3, #64	@ 0x40
 8001594:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800159a:	2302      	movs	r3, #2
 800159c:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(Valve_Enable_GPIO_Port, &GPIO_InitStruct);
 80015a2:	f107 030c 	add.w	r3, r7, #12
 80015a6:	4619      	mov	r1, r3
 80015a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ac:	f001 ffda 	bl	8003564 <HAL_GPIO_Init>

		/*Configure GPIO pin : SPI_CS_Pin */
		GPIO_InitStruct.Pin = SPI_CS_Pin;
 80015b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015b4:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ba:	2301      	movs	r3, #1
 80015bc:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80015c2:	f107 030c 	add.w	r3, r7, #12
 80015c6:	4619      	mov	r1, r3
 80015c8:	480b      	ldr	r0, [pc, #44]	@ (80015f8 <MX_GPIO_Init+0xc4>)
 80015ca:	f001 ffcb 	bl	8003564 <HAL_GPIO_Init>

		/*Configure GPIO pins : PRS_Ready_Pin System_Ready_Pin */
		GPIO_InitStruct.Pin = PRS_Ready_Pin | System_Ready_Pin;
 80015ce:	23c0      	movs	r3, #192	@ 0xc0
 80015d0:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d2:	2301      	movs	r3, #1
 80015d4:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015d6:	2302      	movs	r3, #2
 80015d8:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	4619      	mov	r1, r3
 80015e4:	4804      	ldr	r0, [pc, #16]	@ (80015f8 <MX_GPIO_Init+0xc4>)
 80015e6:	f001 ffbd 	bl	8003564 <HAL_GPIO_Init>

		/* USER CODE BEGIN MX_GPIO_Init_2 */
		/* USER CODE END MX_GPIO_Init_2 */
	}
 80015ea:	bf00      	nop
 80015ec:	3720      	adds	r7, #32
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40021000 	.word	0x40021000
 80015f8:	48000400 	.word	0x48000400

080015fc <_write>:

	/* USER CODE BEGIN 4 */
	int _write(int file, char *ptr, int len) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
		(void) file;
		int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	e009      	b.n	8001622 <_write+0x26>
			ITM_SendChar(*ptr++);
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	1c5a      	adds	r2, r3, #1
 8001612:	60ba      	str	r2, [r7, #8]
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fa70 	bl	8000afc <ITM_SendChar>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	3301      	adds	r3, #1
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	429a      	cmp	r2, r3
 8001628:	dbf1      	blt.n	800160e <_write+0x12>
		}
		return len;
 800162a:	687b      	ldr	r3, [r7, #4]
	}
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <Error_Handler>:

	/**
	 * @brief  This function is executed in case of error occurrence.
	 * @retval None
	 */
	void Error_Handler(void) {
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001638:	b672      	cpsid	i
}
 800163a:	bf00      	nop
		/* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1) {
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <Error_Handler+0x8>

08001640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001646:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <HAL_MspInit+0x44>)
 8001648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800164a:	4a0e      	ldr	r2, [pc, #56]	@ (8001684 <HAL_MspInit+0x44>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6613      	str	r3, [r2, #96]	@ 0x60
 8001652:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <HAL_MspInit+0x44>)
 8001654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <HAL_MspInit+0x44>)
 8001660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001662:	4a08      	ldr	r2, [pc, #32]	@ (8001684 <HAL_MspInit+0x44>)
 8001664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001668:	6593      	str	r3, [r2, #88]	@ 0x58
 800166a:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <HAL_MspInit+0x44>)
 800166c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001676:	f003 f8a1 	bl	80047bc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000

08001688 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b09c      	sub	sp, #112	@ 0x70
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a0:	f107 0318 	add.w	r3, r7, #24
 80016a4:	2244      	movs	r2, #68	@ 0x44
 80016a6:	2100      	movs	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f005 fd2f 	bl	800710c <memset>
  if(hadc->Instance==ADC1)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016b6:	d13d      	bne.n	8001734 <HAL_ADC_MspInit+0xac>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80016b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80016be:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80016c2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c4:	f107 0318 	add.w	r3, r7, #24
 80016c8:	4618      	mov	r0, r3
 80016ca:	f003 fd7d 	bl	80051c8 <HAL_RCCEx_PeriphCLKConfig>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80016d4:	f7ff ffae 	bl	8001634 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80016d8:	4b3a      	ldr	r3, [pc, #232]	@ (80017c4 <HAL_ADC_MspInit+0x13c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	3301      	adds	r3, #1
 80016de:	4a39      	ldr	r2, [pc, #228]	@ (80017c4 <HAL_ADC_MspInit+0x13c>)
 80016e0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80016e2:	4b38      	ldr	r3, [pc, #224]	@ (80017c4 <HAL_ADC_MspInit+0x13c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d10b      	bne.n	8001702 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80016ea:	4b37      	ldr	r3, [pc, #220]	@ (80017c8 <HAL_ADC_MspInit+0x140>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ee:	4a36      	ldr	r2, [pc, #216]	@ (80017c8 <HAL_ADC_MspInit+0x140>)
 80016f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016f6:	4b34      	ldr	r3, [pc, #208]	@ (80017c8 <HAL_ADC_MspInit+0x140>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	4b31      	ldr	r3, [pc, #196]	@ (80017c8 <HAL_ADC_MspInit+0x140>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001706:	4a30      	ldr	r2, [pc, #192]	@ (80017c8 <HAL_ADC_MspInit+0x140>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800170e:	4b2e      	ldr	r3, [pc, #184]	@ (80017c8 <HAL_ADC_MspInit+0x140>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Low_Pressure_ADC_Pin;
 800171a:	2302      	movs	r3, #2
 800171c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800171e:	2303      	movs	r3, #3
 8001720:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(Low_Pressure_ADC_GPIO_Port, &GPIO_InitStruct);
 8001726:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800172a:	4619      	mov	r1, r3
 800172c:	4827      	ldr	r0, [pc, #156]	@ (80017cc <HAL_ADC_MspInit+0x144>)
 800172e:	f001 ff19 	bl	8003564 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001732:	e042      	b.n	80017ba <HAL_ADC_MspInit+0x132>
  else if(hadc->Instance==ADC2)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a25      	ldr	r2, [pc, #148]	@ (80017d0 <HAL_ADC_MspInit+0x148>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d13d      	bne.n	80017ba <HAL_ADC_MspInit+0x132>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800173e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001742:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001744:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001748:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800174a:	f107 0318 	add.w	r3, r7, #24
 800174e:	4618      	mov	r0, r3
 8001750:	f003 fd3a 	bl	80051c8 <HAL_RCCEx_PeriphCLKConfig>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_ADC_MspInit+0xd6>
      Error_Handler();
 800175a:	f7ff ff6b 	bl	8001634 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800175e:	4b19      	ldr	r3, [pc, #100]	@ (80017c4 <HAL_ADC_MspInit+0x13c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	3301      	adds	r3, #1
 8001764:	4a17      	ldr	r2, [pc, #92]	@ (80017c4 <HAL_ADC_MspInit+0x13c>)
 8001766:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001768:	4b16      	ldr	r3, [pc, #88]	@ (80017c4 <HAL_ADC_MspInit+0x13c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d10b      	bne.n	8001788 <HAL_ADC_MspInit+0x100>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001770:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <HAL_ADC_MspInit+0x140>)
 8001772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001774:	4a14      	ldr	r2, [pc, #80]	@ (80017c8 <HAL_ADC_MspInit+0x140>)
 8001776:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800177a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800177c:	4b12      	ldr	r3, [pc, #72]	@ (80017c8 <HAL_ADC_MspInit+0x140>)
 800177e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001780:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001788:	4b0f      	ldr	r3, [pc, #60]	@ (80017c8 <HAL_ADC_MspInit+0x140>)
 800178a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178c:	4a0e      	ldr	r2, [pc, #56]	@ (80017c8 <HAL_ADC_MspInit+0x140>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001794:	4b0c      	ldr	r3, [pc, #48]	@ (80017c8 <HAL_ADC_MspInit+0x140>)
 8001796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = High_Pressure_ADC_Pin;
 80017a0:	2320      	movs	r3, #32
 80017a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017a4:	2303      	movs	r3, #3
 80017a6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(High_Pressure_ADC_GPIO_Port, &GPIO_InitStruct);
 80017ac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80017b0:	4619      	mov	r1, r3
 80017b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017b6:	f001 fed5 	bl	8003564 <HAL_GPIO_Init>
}
 80017ba:	bf00      	nop
 80017bc:	3770      	adds	r7, #112	@ 0x70
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	2000027c 	.word	0x2000027c
 80017c8:	40021000 	.word	0x40021000
 80017cc:	48000400 	.word	0x48000400
 80017d0:	50000100 	.word	0x50000100

080017d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b09a      	sub	sp, #104	@ 0x68
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017ec:	f107 0310 	add.w	r3, r7, #16
 80017f0:	2244      	movs	r2, #68	@ 0x44
 80017f2:	2100      	movs	r1, #0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f005 fc89 	bl	800710c <memset>
  if(hi2c->Instance==I2C2)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a1f      	ldr	r2, [pc, #124]	@ (800187c <HAL_I2C_MspInit+0xa8>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d137      	bne.n	8001874 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001804:	2380      	movs	r3, #128	@ 0x80
 8001806:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001808:	2300      	movs	r3, #0
 800180a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800180c:	f107 0310 	add.w	r3, r7, #16
 8001810:	4618      	mov	r0, r3
 8001812:	f003 fcd9 	bl	80051c8 <HAL_RCCEx_PeriphCLKConfig>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800181c:	f7ff ff0a 	bl	8001634 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001820:	4b17      	ldr	r3, [pc, #92]	@ (8001880 <HAL_I2C_MspInit+0xac>)
 8001822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001824:	4a16      	ldr	r2, [pc, #88]	@ (8001880 <HAL_I2C_MspInit+0xac>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800182c:	4b14      	ldr	r3, [pc, #80]	@ (8001880 <HAL_I2C_MspInit+0xac>)
 800182e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001838:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800183c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800183e:	2312      	movs	r3, #18
 8001840:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800184a:	2304      	movs	r3, #4
 800184c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001852:	4619      	mov	r1, r3
 8001854:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001858:	f001 fe84 	bl	8003564 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800185c:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <HAL_I2C_MspInit+0xac>)
 800185e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001860:	4a07      	ldr	r2, [pc, #28]	@ (8001880 <HAL_I2C_MspInit+0xac>)
 8001862:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001866:	6593      	str	r3, [r2, #88]	@ 0x58
 8001868:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <HAL_I2C_MspInit+0xac>)
 800186a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800186c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001874:	bf00      	nop
 8001876:	3768      	adds	r7, #104	@ 0x68
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40005800 	.word	0x40005800
 8001880:	40021000 	.word	0x40021000

08001884 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	@ 0x28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a17      	ldr	r2, [pc, #92]	@ (8001900 <HAL_SPI_MspInit+0x7c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d128      	bne.n	80018f8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018a6:	4b17      	ldr	r3, [pc, #92]	@ (8001904 <HAL_SPI_MspInit+0x80>)
 80018a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018aa:	4a16      	ldr	r2, [pc, #88]	@ (8001904 <HAL_SPI_MspInit+0x80>)
 80018ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80018b2:	4b14      	ldr	r3, [pc, #80]	@ (8001904 <HAL_SPI_MspInit+0x80>)
 80018b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018be:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <HAL_SPI_MspInit+0x80>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c2:	4a10      	ldr	r2, [pc, #64]	@ (8001904 <HAL_SPI_MspInit+0x80>)
 80018c4:	f043 0302 	orr.w	r3, r3, #2
 80018c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <HAL_SPI_MspInit+0x80>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80018d6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80018da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018e4:	2302      	movs	r3, #2
 80018e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018e8:	2305      	movs	r3, #5
 80018ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	4619      	mov	r1, r3
 80018f2:	4805      	ldr	r0, [pc, #20]	@ (8001908 <HAL_SPI_MspInit+0x84>)
 80018f4:	f001 fe36 	bl	8003564 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80018f8:	bf00      	nop
 80018fa:	3728      	adds	r7, #40	@ 0x28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40003800 	.word	0x40003800
 8001904:	40021000 	.word	0x40021000
 8001908:	48000400 	.word	0x48000400

0800190c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800191c:	d10b      	bne.n	8001936 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800191e:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <HAL_TIM_Base_MspInit+0x38>)
 8001920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001922:	4a08      	ldr	r2, [pc, #32]	@ (8001944 <HAL_TIM_Base_MspInit+0x38>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6593      	str	r3, [r2, #88]	@ 0x58
 800192a:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <HAL_TIM_Base_MspInit+0x38>)
 800192c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001936:	bf00      	nop
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40021000 	.word	0x40021000

08001948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800194c:	bf00      	nop
 800194e:	e7fd      	b.n	800194c <NMI_Handler+0x4>

08001950 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <HardFault_Handler+0x4>

08001958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <MemManage_Handler+0x4>

08001960 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <BusFault_Handler+0x4>

08001968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <UsageFault_Handler+0x4>

08001970 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800199e:	f000 f917 	bl	8001bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b086      	sub	sp, #24
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	60f8      	str	r0, [r7, #12]
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	e00a      	b.n	80019ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019b8:	f3af 8000 	nop.w
 80019bc:	4601      	mov	r1, r0
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	1c5a      	adds	r2, r3, #1
 80019c2:	60ba      	str	r2, [r7, #8]
 80019c4:	b2ca      	uxtb	r2, r1
 80019c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	3301      	adds	r3, #1
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	dbf0      	blt.n	80019b8 <_read+0x12>
  }

  return len;
 80019d6:	687b      	ldr	r3, [r7, #4]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a08:	605a      	str	r2, [r3, #4]
  return 0;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <_isatty>:

int _isatty(int file)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a20:	2301      	movs	r3, #1
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b085      	sub	sp, #20
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	60f8      	str	r0, [r7, #12]
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a50:	4a14      	ldr	r2, [pc, #80]	@ (8001aa4 <_sbrk+0x5c>)
 8001a52:	4b15      	ldr	r3, [pc, #84]	@ (8001aa8 <_sbrk+0x60>)
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a5c:	4b13      	ldr	r3, [pc, #76]	@ (8001aac <_sbrk+0x64>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d102      	bne.n	8001a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a64:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <_sbrk+0x64>)
 8001a66:	4a12      	ldr	r2, [pc, #72]	@ (8001ab0 <_sbrk+0x68>)
 8001a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a6a:	4b10      	ldr	r3, [pc, #64]	@ (8001aac <_sbrk+0x64>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d207      	bcs.n	8001a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a78:	f005 fb96 	bl	80071a8 <__errno>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	220c      	movs	r2, #12
 8001a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a86:	e009      	b.n	8001a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a88:	4b08      	ldr	r3, [pc, #32]	@ (8001aac <_sbrk+0x64>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8e:	4b07      	ldr	r3, [pc, #28]	@ (8001aac <_sbrk+0x64>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	4a05      	ldr	r2, [pc, #20]	@ (8001aac <_sbrk+0x64>)
 8001a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20008000 	.word	0x20008000
 8001aa8:	00000400 	.word	0x00000400
 8001aac:	20000280 	.word	0x20000280
 8001ab0:	200003d8 	.word	0x200003d8

08001ab4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ab8:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <SystemInit+0x20>)
 8001aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001abe:	4a05      	ldr	r2, [pc, #20]	@ (8001ad4 <SystemInit+0x20>)
 8001ac0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ac4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ad8:	480d      	ldr	r0, [pc, #52]	@ (8001b10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ada:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001adc:	f7ff ffea 	bl	8001ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ae0:	480c      	ldr	r0, [pc, #48]	@ (8001b14 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ae2:	490d      	ldr	r1, [pc, #52]	@ (8001b18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8001b1c <LoopForever+0xe>)
  movs r3, #0
 8001ae6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ae8:	e002      	b.n	8001af0 <LoopCopyDataInit>

08001aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aee:	3304      	adds	r3, #4

08001af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af4:	d3f9      	bcc.n	8001aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001af6:	4a0a      	ldr	r2, [pc, #40]	@ (8001b20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001af8:	4c0a      	ldr	r4, [pc, #40]	@ (8001b24 <LoopForever+0x16>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001afc:	e001      	b.n	8001b02 <LoopFillZerobss>

08001afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b00:	3204      	adds	r2, #4

08001b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b04:	d3fb      	bcc.n	8001afe <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001b06:	f005 fb55 	bl	80071b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b0a:	f7ff f821 	bl	8000b50 <main>

08001b0e <LoopForever>:

LoopForever:
    b LoopForever
 8001b0e:	e7fe      	b.n	8001b0e <LoopForever>
  ldr   r0, =_estack
 8001b10:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b18:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b1c:	08007f7c 	.word	0x08007f7c
  ldr r2, =_sbss
 8001b20:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b24:	200003d4 	.word	0x200003d4

08001b28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b28:	e7fe      	b.n	8001b28 <ADC1_2_IRQHandler>

08001b2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b34:	2003      	movs	r0, #3
 8001b36:	f001 fce3 	bl	8003500 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b3a:	200f      	movs	r0, #15
 8001b3c:	f000 f80e 	bl	8001b5c <HAL_InitTick>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	71fb      	strb	r3, [r7, #7]
 8001b4a:	e001      	b.n	8001b50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b4c:	f7ff fd78 	bl	8001640 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b50:	79fb      	ldrb	r3, [r7, #7]

}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b68:	4b16      	ldr	r3, [pc, #88]	@ (8001bc4 <HAL_InitTick+0x68>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d022      	beq.n	8001bb6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b70:	4b15      	ldr	r3, [pc, #84]	@ (8001bc8 <HAL_InitTick+0x6c>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b13      	ldr	r3, [pc, #76]	@ (8001bc4 <HAL_InitTick+0x68>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b84:	4618      	mov	r0, r3
 8001b86:	f001 fce0 	bl	800354a <HAL_SYSTICK_Config>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10f      	bne.n	8001bb0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b0f      	cmp	r3, #15
 8001b94:	d809      	bhi.n	8001baa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b96:	2200      	movs	r2, #0
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b9e:	f001 fcba 	bl	8003516 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bcc <HAL_InitTick+0x70>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	e007      	b.n	8001bba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	73fb      	strb	r3, [r7, #15]
 8001bae:	e004      	b.n	8001bba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	73fb      	strb	r3, [r7, #15]
 8001bb4:	e001      	b.n	8001bba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000010 	.word	0x20000010
 8001bc8:	20000008 	.word	0x20000008
 8001bcc:	2000000c 	.word	0x2000000c

08001bd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd4:	4b05      	ldr	r3, [pc, #20]	@ (8001bec <HAL_IncTick+0x1c>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b05      	ldr	r3, [pc, #20]	@ (8001bf0 <HAL_IncTick+0x20>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4413      	add	r3, r2
 8001bde:	4a03      	ldr	r2, [pc, #12]	@ (8001bec <HAL_IncTick+0x1c>)
 8001be0:	6013      	str	r3, [r2, #0]
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	20000284 	.word	0x20000284
 8001bf0:	20000010 	.word	0x20000010

08001bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	@ (8001c08 <HAL_GetTick+0x14>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000284 	.word	0x20000284

08001c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c14:	f7ff ffee 	bl	8001bf4 <HAL_GetTick>
 8001c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c24:	d004      	beq.n	8001c30 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c26:	4b09      	ldr	r3, [pc, #36]	@ (8001c4c <HAL_Delay+0x40>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c30:	bf00      	nop
 8001c32:	f7ff ffdf 	bl	8001bf4 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d8f7      	bhi.n	8001c32 <HAL_Delay+0x26>
  {
  }
}
 8001c42:	bf00      	nop
 8001c44:	bf00      	nop
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000010 	.word	0x20000010

08001c50 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	609a      	str	r2, [r3, #8]
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
 8001cc4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	3360      	adds	r3, #96	@ 0x60
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b08      	ldr	r3, [pc, #32]	@ (8001cfc <LL_ADC_SetOffset+0x44>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001cf0:	bf00      	nop
 8001cf2:	371c      	adds	r7, #28
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	03fff000 	.word	0x03fff000

08001d00 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	3360      	adds	r3, #96	@ 0x60
 8001d0e:	461a      	mov	r2, r3
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	3360      	adds	r3, #96	@ 0x60
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	431a      	orrs	r2, r3
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d56:	bf00      	nop
 8001d58:	371c      	adds	r7, #28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b087      	sub	sp, #28
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	60f8      	str	r0, [r7, #12]
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	3360      	adds	r3, #96	@ 0x60
 8001d72:	461a      	mov	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	431a      	orrs	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001d8c:	bf00      	nop
 8001d8e:	371c      	adds	r7, #28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	3360      	adds	r3, #96	@ 0x60
 8001da8:	461a      	mov	r2, r3
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001dc2:	bf00      	nop
 8001dc4:	371c      	adds	r7, #28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	615a      	str	r2, [r3, #20]
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b087      	sub	sp, #28
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	3330      	adds	r3, #48	@ 0x30
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	0a1b      	lsrs	r3, r3, #8
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	4413      	add	r3, r2
 8001e38:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	f003 031f 	and.w	r3, r3, #31
 8001e44:	211f      	movs	r1, #31
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	401a      	ands	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	0e9b      	lsrs	r3, r3, #26
 8001e52:	f003 011f 	and.w	r1, r3, #31
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	f003 031f 	and.w	r3, r3, #31
 8001e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e60:	431a      	orrs	r2, r3
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e66:	bf00      	nop
 8001e68:	371c      	adds	r7, #28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b087      	sub	sp, #28
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	60f8      	str	r0, [r7, #12]
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	3314      	adds	r3, #20
 8001e82:	461a      	mov	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	0e5b      	lsrs	r3, r3, #25
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	4413      	add	r3, r2
 8001e90:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	0d1b      	lsrs	r3, r3, #20
 8001e9a:	f003 031f 	and.w	r3, r3, #31
 8001e9e:	2107      	movs	r1, #7
 8001ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	0d1b      	lsrs	r3, r3, #20
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ebc:	bf00      	nop
 8001ebe:	371c      	adds	r7, #28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f003 0318 	and.w	r3, r3, #24
 8001eea:	4908      	ldr	r1, [pc, #32]	@ (8001f0c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001eec:	40d9      	lsrs	r1, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	400b      	ands	r3, r1
 8001ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001efe:	bf00      	nop
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	0007ffff 	.word	0x0007ffff

08001f10 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 031f 	and.w	r3, r3, #31
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001f58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6093      	str	r3, [r2, #8]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f80:	d101      	bne.n	8001f86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001fa4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fa8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001fd0:	d101      	bne.n	8001fd6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ff4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ff8:	f043 0201 	orr.w	r2, r3, #1
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800201c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002020:	f043 0202 	orr.w	r2, r3, #2
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b01      	cmp	r3, #1
 8002046:	d101      	bne.n	800204c <LL_ADC_IsEnabled+0x18>
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <LL_ADC_IsEnabled+0x1a>
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b02      	cmp	r3, #2
 800206c:	d101      	bne.n	8002072 <LL_ADC_IsDisableOngoing+0x18>
 800206e:	2301      	movs	r3, #1
 8002070:	e000      	b.n	8002074 <LL_ADC_IsDisableOngoing+0x1a>
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002090:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002094:	f043 0204 	orr.w	r2, r3, #4
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d101      	bne.n	80020c0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020bc:	2301      	movs	r3, #1
 80020be:	e000      	b.n	80020c2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d101      	bne.n	80020e6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020f4:	b590      	push	{r4, r7, lr}
 80020f6:	b089      	sub	sp, #36	@ 0x24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e167      	b.n	80023de <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002118:	2b00      	cmp	r3, #0
 800211a:	d109      	bne.n	8002130 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff fab3 	bl	8001688 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff19 	bl	8001f6c <LL_ADC_IsDeepPowerDownEnabled>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d004      	beq.n	800214a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff feff 	bl	8001f48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ff34 	bl	8001fbc <LL_ADC_IsInternalRegulatorEnabled>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d115      	bne.n	8002186 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff ff18 	bl	8001f94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002164:	4ba0      	ldr	r3, [pc, #640]	@ (80023e8 <HAL_ADC_Init+0x2f4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	099b      	lsrs	r3, r3, #6
 800216a:	4aa0      	ldr	r2, [pc, #640]	@ (80023ec <HAL_ADC_Init+0x2f8>)
 800216c:	fba2 2303 	umull	r2, r3, r2, r3
 8002170:	099b      	lsrs	r3, r3, #6
 8002172:	3301      	adds	r3, #1
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002178:	e002      	b.n	8002180 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	3b01      	subs	r3, #1
 800217e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f9      	bne.n	800217a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff ff16 	bl	8001fbc <LL_ADC_IsInternalRegulatorEnabled>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10d      	bne.n	80021b2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219a:	f043 0210 	orr.w	r2, r3, #16
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021a6:	f043 0201 	orr.w	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff ff76 	bl	80020a8 <LL_ADC_REG_IsConversionOngoing>
 80021bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f040 8100 	bne.w	80023cc <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f040 80fc 	bne.w	80023cc <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80021dc:	f043 0202 	orr.w	r2, r3, #2
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff23 	bl	8002034 <LL_ADC_IsEnabled>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d111      	bne.n	8002218 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021f4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80021f8:	f7ff ff1c 	bl	8002034 <LL_ADC_IsEnabled>
 80021fc:	4604      	mov	r4, r0
 80021fe:	487c      	ldr	r0, [pc, #496]	@ (80023f0 <HAL_ADC_Init+0x2fc>)
 8002200:	f7ff ff18 	bl	8002034 <LL_ADC_IsEnabled>
 8002204:	4603      	mov	r3, r0
 8002206:	4323      	orrs	r3, r4
 8002208:	2b00      	cmp	r3, #0
 800220a:	d105      	bne.n	8002218 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	4619      	mov	r1, r3
 8002212:	4878      	ldr	r0, [pc, #480]	@ (80023f4 <HAL_ADC_Init+0x300>)
 8002214:	f7ff fd1c 	bl	8001c50 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	7f5b      	ldrb	r3, [r3, #29]
 800221c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002222:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002228:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800222e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002236:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002242:	2b01      	cmp	r3, #1
 8002244:	d106      	bne.n	8002254 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224a:	3b01      	subs	r3, #1
 800224c:	045b      	lsls	r3, r3, #17
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002258:	2b00      	cmp	r3, #0
 800225a:	d009      	beq.n	8002270 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002260:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002268:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	4b60      	ldr	r3, [pc, #384]	@ (80023f8 <HAL_ADC_Init+0x304>)
 8002278:	4013      	ands	r3, r2
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	69b9      	ldr	r1, [r7, #24]
 8002280:	430b      	orrs	r3, r1
 8002282:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff ff15 	bl	80020ce <LL_ADC_INJ_IsConversionOngoing>
 80022a4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d16d      	bne.n	8002388 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d16a      	bne.n	8002388 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022b6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80022be:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022ce:	f023 0302 	bic.w	r3, r3, #2
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	69b9      	ldr	r1, [r7, #24]
 80022d8:	430b      	orrs	r3, r1
 80022da:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d017      	beq.n	8002314 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691a      	ldr	r2, [r3, #16]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80022f2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80022fc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002300:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6911      	ldr	r1, [r2, #16]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	430b      	orrs	r3, r1
 800230e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002312:	e013      	b.n	800233c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002322:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002334:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002338:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002342:	2b01      	cmp	r3, #1
 8002344:	d118      	bne.n	8002378 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002350:	f023 0304 	bic.w	r3, r3, #4
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800235c:	4311      	orrs	r1, r2
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002362:	4311      	orrs	r1, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002368:	430a      	orrs	r2, r1
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f042 0201 	orr.w	r2, r2, #1
 8002374:	611a      	str	r2, [r3, #16]
 8002376:	e007      	b.n	8002388 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691a      	ldr	r2, [r3, #16]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0201 	bic.w	r2, r2, #1
 8002386:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d10c      	bne.n	80023aa <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002396:	f023 010f 	bic.w	r1, r3, #15
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	1e5a      	subs	r2, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80023a8:	e007      	b.n	80023ba <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 020f 	bic.w	r2, r2, #15
 80023b8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023be:	f023 0303 	bic.w	r3, r3, #3
 80023c2:	f043 0201 	orr.w	r2, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023ca:	e007      	b.n	80023dc <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d0:	f043 0210 	orr.w	r2, r3, #16
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3724      	adds	r7, #36	@ 0x24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd90      	pop	{r4, r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000008 	.word	0x20000008
 80023ec:	053e2d63 	.word	0x053e2d63
 80023f0:	50000100 	.word	0x50000100
 80023f4:	50000300 	.word	0x50000300
 80023f8:	fff04007 	.word	0xfff04007

080023fc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002404:	4859      	ldr	r0, [pc, #356]	@ (800256c <HAL_ADC_Start+0x170>)
 8002406:	f7ff fd83 	bl	8001f10 <LL_ADC_GetMultimode>
 800240a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fe49 	bl	80020a8 <LL_ADC_REG_IsConversionOngoing>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	f040 809f 	bne.w	800255c <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_ADC_Start+0x30>
 8002428:	2302      	movs	r3, #2
 800242a:	e09a      	b.n	8002562 <HAL_ADC_Start+0x166>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 fd73 	bl	8002f20 <ADC_Enable>
 800243a:	4603      	mov	r3, r0
 800243c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800243e:	7dfb      	ldrb	r3, [r7, #23]
 8002440:	2b00      	cmp	r3, #0
 8002442:	f040 8086 	bne.w	8002552 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800244a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800244e:	f023 0301 	bic.w	r3, r3, #1
 8002452:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a44      	ldr	r2, [pc, #272]	@ (8002570 <HAL_ADC_Start+0x174>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d002      	beq.n	800246a <HAL_ADC_Start+0x6e>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	e001      	b.n	800246e <HAL_ADC_Start+0x72>
 800246a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6812      	ldr	r2, [r2, #0]
 8002472:	4293      	cmp	r3, r2
 8002474:	d002      	beq.n	800247c <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d105      	bne.n	8002488 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002480:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800248c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002490:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002494:	d106      	bne.n	80024a4 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800249a:	f023 0206 	bic.w	r2, r3, #6
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	661a      	str	r2, [r3, #96]	@ 0x60
 80024a2:	e002      	b.n	80024aa <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	221c      	movs	r2, #28
 80024b0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a2c      	ldr	r2, [pc, #176]	@ (8002570 <HAL_ADC_Start+0x174>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d002      	beq.n	80024ca <HAL_ADC_Start+0xce>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	e001      	b.n	80024ce <HAL_ADC_Start+0xd2>
 80024ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d008      	beq.n	80024e8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	2b05      	cmp	r3, #5
 80024e0:	d002      	beq.n	80024e8 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	2b09      	cmp	r3, #9
 80024e6:	d114      	bne.n	8002512 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024fe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fdb8 	bl	8002080 <LL_ADC_REG_StartConversion>
 8002510:	e026      	b.n	8002560 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002516:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a13      	ldr	r2, [pc, #76]	@ (8002570 <HAL_ADC_Start+0x174>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d002      	beq.n	800252e <HAL_ADC_Start+0x132>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	e001      	b.n	8002532 <HAL_ADC_Start+0x136>
 800252e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002532:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00f      	beq.n	8002560 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002544:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002548:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002550:	e006      	b.n	8002560 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800255a:	e001      	b.n	8002560 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800255c:	2302      	movs	r3, #2
 800255e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002560:	7dfb      	ldrb	r3, [r7, #23]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	50000300 	.word	0x50000300
 8002570:	50000100 	.word	0x50000100

08002574 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800257e:	4867      	ldr	r0, [pc, #412]	@ (800271c <HAL_ADC_PollForConversion+0x1a8>)
 8002580:	f7ff fcc6 	bl	8001f10 <LL_ADC_GetMultimode>
 8002584:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	2b08      	cmp	r3, #8
 800258c:	d102      	bne.n	8002594 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800258e:	2308      	movs	r3, #8
 8002590:	61fb      	str	r3, [r7, #28]
 8002592:	e02a      	b.n	80025ea <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d005      	beq.n	80025a6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2b05      	cmp	r3, #5
 800259e:	d002      	beq.n	80025a6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	2b09      	cmp	r3, #9
 80025a4:	d111      	bne.n	80025ca <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d007      	beq.n	80025c4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b8:	f043 0220 	orr.w	r2, r3, #32
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0a6      	b.n	8002712 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80025c4:	2304      	movs	r3, #4
 80025c6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80025c8:	e00f      	b.n	80025ea <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80025ca:	4854      	ldr	r0, [pc, #336]	@ (800271c <HAL_ADC_PollForConversion+0x1a8>)
 80025cc:	f7ff fcae 	bl	8001f2c <LL_ADC_GetMultiDMATransfer>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d007      	beq.n	80025e6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025da:	f043 0220 	orr.w	r2, r3, #32
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e095      	b.n	8002712 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80025e6:	2304      	movs	r3, #4
 80025e8:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80025ea:	f7ff fb03 	bl	8001bf4 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025f0:	e021      	b.n	8002636 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025f8:	d01d      	beq.n	8002636 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80025fa:	f7ff fafb 	bl	8001bf4 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d302      	bcc.n	8002610 <HAL_ADC_PollForConversion+0x9c>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d112      	bne.n	8002636 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	4013      	ands	r3, r2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10b      	bne.n	8002636 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002622:	f043 0204 	orr.w	r2, r3, #4
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e06d      	b.n	8002712 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	4013      	ands	r3, r2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0d6      	beq.n	80025f2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002648:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fbcd 	bl	8001df4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d01c      	beq.n	800269a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	7f5b      	ldrb	r3, [r3, #29]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d118      	bne.n	800269a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b08      	cmp	r3, #8
 8002674:	d111      	bne.n	800269a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002686:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d105      	bne.n	800269a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002692:	f043 0201 	orr.w	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a20      	ldr	r2, [pc, #128]	@ (8002720 <HAL_ADC_PollForConversion+0x1ac>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d002      	beq.n	80026aa <HAL_ADC_PollForConversion+0x136>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	e001      	b.n	80026ae <HAL_ADC_PollForConversion+0x13a>
 80026aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d008      	beq.n	80026c8 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2b05      	cmp	r3, #5
 80026c0:	d002      	beq.n	80026c8 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2b09      	cmp	r3, #9
 80026c6:	d104      	bne.n	80026d2 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	61bb      	str	r3, [r7, #24]
 80026d0:	e00d      	b.n	80026ee <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a12      	ldr	r2, [pc, #72]	@ (8002720 <HAL_ADC_PollForConversion+0x1ac>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d002      	beq.n	80026e2 <HAL_ADC_PollForConversion+0x16e>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	e001      	b.n	80026e6 <HAL_ADC_PollForConversion+0x172>
 80026e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80026e6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d104      	bne.n	80026fe <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2208      	movs	r2, #8
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	e008      	b.n	8002710 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d103      	bne.n	8002710 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	220c      	movs	r2, #12
 800270e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3720      	adds	r7, #32
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	50000300 	.word	0x50000300
 8002720:	50000100 	.word	0x50000100

08002724 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b0b6      	sub	sp, #216	@ 0xd8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002750:	2300      	movs	r3, #0
 8002752:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x22>
 800275e:	2302      	movs	r3, #2
 8002760:	e3c8      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x7b4>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fc9a 	bl	80020a8 <LL_ADC_REG_IsConversionOngoing>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	f040 83ad 	bne.w	8002ed6 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6818      	ldr	r0, [r3, #0]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	6859      	ldr	r1, [r3, #4]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	f7ff fb46 	bl	8001e1a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff fc88 	bl	80020a8 <LL_ADC_REG_IsConversionOngoing>
 8002798:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fc94 	bl	80020ce <LL_ADC_INJ_IsConversionOngoing>
 80027a6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f040 81d9 	bne.w	8002b66 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f040 81d4 	bne.w	8002b66 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80027c6:	d10f      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2200      	movs	r2, #0
 80027d2:	4619      	mov	r1, r3
 80027d4:	f7ff fb4d 	bl	8001e72 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff faf4 	bl	8001dce <LL_ADC_SetSamplingTimeCommonConfig>
 80027e6:	e00e      	b.n	8002806 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6818      	ldr	r0, [r3, #0]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	6819      	ldr	r1, [r3, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	461a      	mov	r2, r3
 80027f6:	f7ff fb3c 	bl	8001e72 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2100      	movs	r1, #0
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff fae4 	bl	8001dce <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	695a      	ldr	r2, [r3, #20]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	08db      	lsrs	r3, r3, #3
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	2b04      	cmp	r3, #4
 8002826:	d022      	beq.n	800286e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	6919      	ldr	r1, [r3, #16]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002838:	f7ff fa3e 	bl	8001cb8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	6919      	ldr	r1, [r3, #16]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	461a      	mov	r2, r3
 800284a:	f7ff fa8a 	bl	8001d62 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800285a:	2b01      	cmp	r3, #1
 800285c:	d102      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x124>
 800285e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002862:	e000      	b.n	8002866 <HAL_ADC_ConfigChannel+0x126>
 8002864:	2300      	movs	r3, #0
 8002866:	461a      	mov	r2, r3
 8002868:	f7ff fa96 	bl	8001d98 <LL_ADC_SetOffsetSaturation>
 800286c:	e17b      	b.n	8002b66 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2100      	movs	r1, #0
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff fa43 	bl	8001d00 <LL_ADC_GetOffsetChannel>
 800287a:	4603      	mov	r3, r0
 800287c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10a      	bne.n	800289a <HAL_ADC_ConfigChannel+0x15a>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff fa38 	bl	8001d00 <LL_ADC_GetOffsetChannel>
 8002890:	4603      	mov	r3, r0
 8002892:	0e9b      	lsrs	r3, r3, #26
 8002894:	f003 021f 	and.w	r2, r3, #31
 8002898:	e01e      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x198>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2100      	movs	r1, #0
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff fa2d 	bl	8001d00 <LL_ADC_GetOffsetChannel>
 80028a6:	4603      	mov	r3, r0
 80028a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80028b0:	fa93 f3a3 	rbit	r3, r3
 80028b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80028bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80028c8:	2320      	movs	r3, #32
 80028ca:	e004      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80028cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028d0:	fab3 f383 	clz	r3, r3
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d105      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x1b0>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	0e9b      	lsrs	r3, r3, #26
 80028ea:	f003 031f 	and.w	r3, r3, #31
 80028ee:	e018      	b.n	8002922 <HAL_ADC_ConfigChannel+0x1e2>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80028fc:	fa93 f3a3 	rbit	r3, r3
 8002900:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002904:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002908:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800290c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002914:	2320      	movs	r3, #32
 8002916:	e004      	b.n	8002922 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002918:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800291c:	fab3 f383 	clz	r3, r3
 8002920:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002922:	429a      	cmp	r2, r3
 8002924:	d106      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2200      	movs	r2, #0
 800292c:	2100      	movs	r1, #0
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff f9fc 	bl	8001d2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2101      	movs	r1, #1
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff f9e0 	bl	8001d00 <LL_ADC_GetOffsetChannel>
 8002940:	4603      	mov	r3, r0
 8002942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10a      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x220>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2101      	movs	r1, #1
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff f9d5 	bl	8001d00 <LL_ADC_GetOffsetChannel>
 8002956:	4603      	mov	r3, r0
 8002958:	0e9b      	lsrs	r3, r3, #26
 800295a:	f003 021f 	and.w	r2, r3, #31
 800295e:	e01e      	b.n	800299e <HAL_ADC_ConfigChannel+0x25e>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2101      	movs	r1, #1
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff f9ca 	bl	8001d00 <LL_ADC_GetOffsetChannel>
 800296c:	4603      	mov	r3, r0
 800296e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002976:	fa93 f3a3 	rbit	r3, r3
 800297a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800297e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002982:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002986:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800298e:	2320      	movs	r3, #32
 8002990:	e004      	b.n	800299c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002992:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002996:	fab3 f383 	clz	r3, r3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d105      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x276>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	0e9b      	lsrs	r3, r3, #26
 80029b0:	f003 031f 	and.w	r3, r3, #31
 80029b4:	e018      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x2a8>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029c2:	fa93 f3a3 	rbit	r3, r3
 80029c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80029ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80029ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80029d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80029da:	2320      	movs	r3, #32
 80029dc:	e004      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80029de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80029e2:	fab3 f383 	clz	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d106      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2200      	movs	r2, #0
 80029f2:	2101      	movs	r1, #1
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff f999 	bl	8001d2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2102      	movs	r1, #2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff f97d 	bl	8001d00 <LL_ADC_GetOffsetChannel>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10a      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x2e6>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2102      	movs	r1, #2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff f972 	bl	8001d00 <LL_ADC_GetOffsetChannel>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	0e9b      	lsrs	r3, r3, #26
 8002a20:	f003 021f 	and.w	r2, r3, #31
 8002a24:	e01e      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x324>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2102      	movs	r1, #2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff f967 	bl	8001d00 <LL_ADC_GetOffsetChannel>
 8002a32:	4603      	mov	r3, r0
 8002a34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a3c:	fa93 f3a3 	rbit	r3, r3
 8002a40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002a44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002a4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002a54:	2320      	movs	r3, #32
 8002a56:	e004      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002a58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a5c:	fab3 f383 	clz	r3, r3
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d105      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x33c>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	0e9b      	lsrs	r3, r3, #26
 8002a76:	f003 031f 	and.w	r3, r3, #31
 8002a7a:	e016      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x36a>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a88:	fa93 f3a3 	rbit	r3, r3
 8002a8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002a8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002a94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002a9c:	2320      	movs	r3, #32
 8002a9e:	e004      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002aa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002aa4:	fab3 f383 	clz	r3, r3
 8002aa8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d106      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2102      	movs	r1, #2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff f938 	bl	8001d2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2103      	movs	r1, #3
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff f91c 	bl	8001d00 <LL_ADC_GetOffsetChannel>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10a      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x3a8>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2103      	movs	r1, #3
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff f911 	bl	8001d00 <LL_ADC_GetOffsetChannel>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	0e9b      	lsrs	r3, r3, #26
 8002ae2:	f003 021f 	and.w	r2, r3, #31
 8002ae6:	e017      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x3d8>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2103      	movs	r1, #3
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff f906 	bl	8001d00 <LL_ADC_GetOffsetChannel>
 8002af4:	4603      	mov	r3, r0
 8002af6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002afa:	fa93 f3a3 	rbit	r3, r3
 8002afe:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002b00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b02:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002b04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002b0a:	2320      	movs	r3, #32
 8002b0c:	e003      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002b0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b10:	fab3 f383 	clz	r3, r3
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d105      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x3f0>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	0e9b      	lsrs	r3, r3, #26
 8002b2a:	f003 031f 	and.w	r3, r3, #31
 8002b2e:	e011      	b.n	8002b54 <HAL_ADC_ConfigChannel+0x414>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b38:	fa93 f3a3 	rbit	r3, r3
 8002b3c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002b3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b40:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002b42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002b48:	2320      	movs	r3, #32
 8002b4a:	e003      	b.n	8002b54 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002b4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b4e:	fab3 f383 	clz	r3, r3
 8002b52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d106      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2103      	movs	r1, #3
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff f8e3 	bl	8001d2c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fa62 	bl	8002034 <LL_ADC_IsEnabled>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f040 8140 	bne.w	8002df8 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	6819      	ldr	r1, [r3, #0]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	461a      	mov	r2, r3
 8002b86:	f7ff f99f 	bl	8001ec8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	4a8f      	ldr	r2, [pc, #572]	@ (8002dcc <HAL_ADC_ConfigChannel+0x68c>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	f040 8131 	bne.w	8002df8 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10b      	bne.n	8002bbe <HAL_ADC_ConfigChannel+0x47e>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	0e9b      	lsrs	r3, r3, #26
 8002bac:	3301      	adds	r3, #1
 8002bae:	f003 031f 	and.w	r3, r3, #31
 8002bb2:	2b09      	cmp	r3, #9
 8002bb4:	bf94      	ite	ls
 8002bb6:	2301      	movls	r3, #1
 8002bb8:	2300      	movhi	r3, #0
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	e019      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x4b2>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bc6:	fa93 f3a3 	rbit	r3, r3
 8002bca:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002bcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bce:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002bd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002bd6:	2320      	movs	r3, #32
 8002bd8:	e003      	b.n	8002be2 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002bda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002bdc:	fab3 f383 	clz	r3, r3
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	3301      	adds	r3, #1
 8002be4:	f003 031f 	and.w	r3, r3, #31
 8002be8:	2b09      	cmp	r3, #9
 8002bea:	bf94      	ite	ls
 8002bec:	2301      	movls	r3, #1
 8002bee:	2300      	movhi	r3, #0
 8002bf0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d079      	beq.n	8002cea <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d107      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x4d2>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	0e9b      	lsrs	r3, r3, #26
 8002c08:	3301      	adds	r3, #1
 8002c0a:	069b      	lsls	r3, r3, #26
 8002c0c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c10:	e015      	b.n	8002c3e <HAL_ADC_ConfigChannel+0x4fe>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c1a:	fa93 f3a3 	rbit	r3, r3
 8002c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002c20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c22:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002c24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002c2a:	2320      	movs	r3, #32
 8002c2c:	e003      	b.n	8002c36 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002c2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c30:	fab3 f383 	clz	r3, r3
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	3301      	adds	r3, #1
 8002c38:	069b      	lsls	r3, r3, #26
 8002c3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d109      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x51e>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	0e9b      	lsrs	r3, r3, #26
 8002c50:	3301      	adds	r3, #1
 8002c52:	f003 031f 	and.w	r3, r3, #31
 8002c56:	2101      	movs	r1, #1
 8002c58:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5c:	e017      	b.n	8002c8e <HAL_ADC_ConfigChannel+0x54e>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c66:	fa93 f3a3 	rbit	r3, r3
 8002c6a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002c6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002c70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002c76:	2320      	movs	r3, #32
 8002c78:	e003      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002c7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c7c:	fab3 f383 	clz	r3, r3
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	3301      	adds	r3, #1
 8002c84:	f003 031f 	and.w	r3, r3, #31
 8002c88:	2101      	movs	r1, #1
 8002c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8e:	ea42 0103 	orr.w	r1, r2, r3
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10a      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x574>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	0e9b      	lsrs	r3, r3, #26
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	f003 021f 	and.w	r2, r3, #31
 8002caa:	4613      	mov	r3, r2
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	4413      	add	r3, r2
 8002cb0:	051b      	lsls	r3, r3, #20
 8002cb2:	e018      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x5a6>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cbc:	fa93 f3a3 	rbit	r3, r3
 8002cc0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002ccc:	2320      	movs	r3, #32
 8002cce:	e003      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	3301      	adds	r3, #1
 8002cda:	f003 021f 	and.w	r2, r3, #31
 8002cde:	4613      	mov	r3, r2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	4413      	add	r3, r2
 8002ce4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ce6:	430b      	orrs	r3, r1
 8002ce8:	e081      	b.n	8002dee <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d107      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x5c6>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	0e9b      	lsrs	r3, r3, #26
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	069b      	lsls	r3, r3, #26
 8002d00:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d04:	e015      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x5f2>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d0e:	fa93 f3a3 	rbit	r3, r3
 8002d12:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d16:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002d1e:	2320      	movs	r3, #32
 8002d20:	e003      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d24:	fab3 f383 	clz	r3, r3
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	069b      	lsls	r3, r3, #26
 8002d2e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d109      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x612>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	0e9b      	lsrs	r3, r3, #26
 8002d44:	3301      	adds	r3, #1
 8002d46:	f003 031f 	and.w	r3, r3, #31
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d50:	e017      	b.n	8002d82 <HAL_ADC_ConfigChannel+0x642>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	fa93 f3a3 	rbit	r3, r3
 8002d5e:	61fb      	str	r3, [r7, #28]
  return result;
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002d6a:	2320      	movs	r3, #32
 8002d6c:	e003      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d70:	fab3 f383 	clz	r3, r3
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	3301      	adds	r3, #1
 8002d78:	f003 031f 	and.w	r3, r3, #31
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d82:	ea42 0103 	orr.w	r1, r2, r3
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10d      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x66e>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	0e9b      	lsrs	r3, r3, #26
 8002d98:	3301      	adds	r3, #1
 8002d9a:	f003 021f 	and.w	r2, r3, #31
 8002d9e:	4613      	mov	r3, r2
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	4413      	add	r3, r2
 8002da4:	3b1e      	subs	r3, #30
 8002da6:	051b      	lsls	r3, r3, #20
 8002da8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002dac:	e01e      	b.n	8002dec <HAL_ADC_ConfigChannel+0x6ac>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	fa93 f3a3 	rbit	r3, r3
 8002dba:	613b      	str	r3, [r7, #16]
  return result;
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d104      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002dc6:	2320      	movs	r3, #32
 8002dc8:	e006      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x698>
 8002dca:	bf00      	nop
 8002dcc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	fab3 f383 	clz	r3, r3
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	3301      	adds	r3, #1
 8002dda:	f003 021f 	and.w	r2, r3, #31
 8002dde:	4613      	mov	r3, r2
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	4413      	add	r3, r2
 8002de4:	3b1e      	subs	r3, #30
 8002de6:	051b      	lsls	r3, r3, #20
 8002de8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dec:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002df2:	4619      	mov	r1, r3
 8002df4:	f7ff f83d 	bl	8001e72 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4b3f      	ldr	r3, [pc, #252]	@ (8002efc <HAL_ADC_ConfigChannel+0x7bc>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d071      	beq.n	8002ee8 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e04:	483e      	ldr	r0, [pc, #248]	@ (8002f00 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e06:	f7fe ff49 	bl	8001c9c <LL_ADC_GetCommonPathInternalCh>
 8002e0a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a3c      	ldr	r2, [pc, #240]	@ (8002f04 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d004      	beq.n	8002e22 <HAL_ADC_ConfigChannel+0x6e2>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a3a      	ldr	r2, [pc, #232]	@ (8002f08 <HAL_ADC_ConfigChannel+0x7c8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d127      	bne.n	8002e72 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d121      	bne.n	8002e72 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e36:	d157      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e3c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e40:	4619      	mov	r1, r3
 8002e42:	482f      	ldr	r0, [pc, #188]	@ (8002f00 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e44:	f7fe ff17 	bl	8001c76 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e48:	4b30      	ldr	r3, [pc, #192]	@ (8002f0c <HAL_ADC_ConfigChannel+0x7cc>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	099b      	lsrs	r3, r3, #6
 8002e4e:	4a30      	ldr	r2, [pc, #192]	@ (8002f10 <HAL_ADC_ConfigChannel+0x7d0>)
 8002e50:	fba2 2303 	umull	r2, r3, r2, r3
 8002e54:	099b      	lsrs	r3, r3, #6
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	4613      	mov	r3, r2
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e62:	e002      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1f9      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e70:	e03a      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a27      	ldr	r2, [pc, #156]	@ (8002f14 <HAL_ADC_ConfigChannel+0x7d4>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d113      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10d      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a22      	ldr	r2, [pc, #136]	@ (8002f18 <HAL_ADC_ConfigChannel+0x7d8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d02a      	beq.n	8002ee8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4818      	ldr	r0, [pc, #96]	@ (8002f00 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e9e:	f7fe feea 	bl	8001c76 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ea2:	e021      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a1c      	ldr	r2, [pc, #112]	@ (8002f1c <HAL_ADC_ConfigChannel+0x7dc>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d11c      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002eae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002eb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d116      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a16      	ldr	r2, [pc, #88]	@ (8002f18 <HAL_ADC_ConfigChannel+0x7d8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d011      	beq.n	8002ee8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ec4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ec8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ecc:	4619      	mov	r1, r3
 8002ece:	480c      	ldr	r0, [pc, #48]	@ (8002f00 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ed0:	f7fe fed1 	bl	8001c76 <LL_ADC_SetCommonPathInternalCh>
 8002ed4:	e008      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eda:	f043 0220 	orr.w	r2, r3, #32
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ef0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	37d8      	adds	r7, #216	@ 0xd8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	80080000 	.word	0x80080000
 8002f00:	50000300 	.word	0x50000300
 8002f04:	c3210000 	.word	0xc3210000
 8002f08:	90c00010 	.word	0x90c00010
 8002f0c:	20000008 	.word	0x20000008
 8002f10:	053e2d63 	.word	0x053e2d63
 8002f14:	c7520000 	.word	0xc7520000
 8002f18:	50000100 	.word	0x50000100
 8002f1c:	cb840000 	.word	0xcb840000

08002f20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff f87f 	bl	8002034 <LL_ADC_IsEnabled>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d169      	bne.n	8003010 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	4b36      	ldr	r3, [pc, #216]	@ (800301c <ADC_Enable+0xfc>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00d      	beq.n	8002f66 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f4e:	f043 0210 	orr.w	r2, r3, #16
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f5a:	f043 0201 	orr.w	r2, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e055      	b.n	8003012 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff f83a 	bl	8001fe4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f70:	482b      	ldr	r0, [pc, #172]	@ (8003020 <ADC_Enable+0x100>)
 8002f72:	f7fe fe93 	bl	8001c9c <LL_ADC_GetCommonPathInternalCh>
 8002f76:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d013      	beq.n	8002fa8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f80:	4b28      	ldr	r3, [pc, #160]	@ (8003024 <ADC_Enable+0x104>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	099b      	lsrs	r3, r3, #6
 8002f86:	4a28      	ldr	r2, [pc, #160]	@ (8003028 <ADC_Enable+0x108>)
 8002f88:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8c:	099b      	lsrs	r3, r3, #6
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	4613      	mov	r3, r2
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f9a:	e002      	b.n	8002fa2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1f9      	bne.n	8002f9c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002fa8:	f7fe fe24 	bl	8001bf4 <HAL_GetTick>
 8002fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fae:	e028      	b.n	8003002 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff f83d 	bl	8002034 <LL_ADC_IsEnabled>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d104      	bne.n	8002fca <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff f80d 	bl	8001fe4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fca:	f7fe fe13 	bl	8001bf4 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d914      	bls.n	8003002 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d00d      	beq.n	8003002 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fea:	f043 0210 	orr.w	r2, r3, #16
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ff6:	f043 0201 	orr.w	r2, r3, #1
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e007      	b.n	8003012 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b01      	cmp	r3, #1
 800300e:	d1cf      	bne.n	8002fb0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	8000003f 	.word	0x8000003f
 8003020:	50000300 	.word	0x50000300
 8003024:	20000008 	.word	0x20000008
 8003028:	053e2d63 	.word	0x053e2d63

0800302c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff f80e 	bl	800205a <LL_ADC_IsDisableOngoing>
 800303e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f7fe fff5 	bl	8002034 <LL_ADC_IsEnabled>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d047      	beq.n	80030e0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d144      	bne.n	80030e0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 030d 	and.w	r3, r3, #13
 8003060:	2b01      	cmp	r3, #1
 8003062:	d10c      	bne.n	800307e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f7fe ffcf 	bl	800200c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2203      	movs	r2, #3
 8003074:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003076:	f7fe fdbd 	bl	8001bf4 <HAL_GetTick>
 800307a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800307c:	e029      	b.n	80030d2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003082:	f043 0210 	orr.w	r2, r3, #16
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800308e:	f043 0201 	orr.w	r2, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e023      	b.n	80030e2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800309a:	f7fe fdab 	bl	8001bf4 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d914      	bls.n	80030d2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00d      	beq.n	80030d2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ba:	f043 0210 	orr.w	r2, r3, #16
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030c6:	f043 0201 	orr.w	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e007      	b.n	80030e2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1dc      	bne.n	800309a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <LL_ADC_IsEnabled>:
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <LL_ADC_IsEnabled+0x18>
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <LL_ADC_IsEnabled+0x1a>
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <LL_ADC_StartCalibration>:
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003122:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800312c:	4313      	orrs	r3, r2
 800312e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	609a      	str	r2, [r3, #8]
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <LL_ADC_IsCalibrationOnGoing>:
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003152:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003156:	d101      	bne.n	800315c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003158:	2301      	movs	r3, #1
 800315a:	e000      	b.n	800315e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <LL_ADC_REG_IsConversionOngoing>:
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 0304 	and.w	r3, r3, #4
 800317a:	2b04      	cmp	r3, #4
 800317c:	d101      	bne.n	8003182 <LL_ADC_REG_IsConversionOngoing+0x18>
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800319a:	2300      	movs	r3, #0
 800319c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_ADCEx_Calibration_Start+0x1c>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e04d      	b.n	8003248 <HAL_ADCEx_Calibration_Start+0xb8>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7ff ff39 	bl	800302c <ADC_Disable>
 80031ba:	4603      	mov	r3, r0
 80031bc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80031be:	7bfb      	ldrb	r3, [r7, #15]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d136      	bne.n	8003232 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80031cc:	f023 0302 	bic.w	r3, r3, #2
 80031d0:	f043 0202 	orr.w	r2, r3, #2
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6839      	ldr	r1, [r7, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff ff96 	bl	8003110 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80031e4:	e014      	b.n	8003210 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	3301      	adds	r3, #1
 80031ea:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4a18      	ldr	r2, [pc, #96]	@ (8003250 <HAL_ADCEx_Calibration_Start+0xc0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d90d      	bls.n	8003210 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f8:	f023 0312 	bic.w	r3, r3, #18
 80031fc:	f043 0210 	orr.w	r2, r3, #16
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e01b      	b.n	8003248 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ff94 	bl	8003142 <LL_ADC_IsCalibrationOnGoing>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1e2      	bne.n	80031e6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003224:	f023 0303 	bic.w	r3, r3, #3
 8003228:	f043 0201 	orr.w	r2, r3, #1
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003230:	e005      	b.n	800323e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003236:	f043 0210 	orr.w	r2, r3, #16
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003246:	7bfb      	ldrb	r3, [r7, #15]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	0004de01 	.word	0x0004de01

08003254 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003254:	b590      	push	{r4, r7, lr}
 8003256:	b0a1      	sub	sp, #132	@ 0x84
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800326a:	2b01      	cmp	r3, #1
 800326c:	d101      	bne.n	8003272 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800326e:	2302      	movs	r3, #2
 8003270:	e08b      	b.n	800338a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800327a:	2300      	movs	r3, #0
 800327c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800327e:	2300      	movs	r3, #0
 8003280:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800328a:	d102      	bne.n	8003292 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800328c:	4b41      	ldr	r3, [pc, #260]	@ (8003394 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800328e:	60bb      	str	r3, [r7, #8]
 8003290:	e001      	b.n	8003296 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003292:	2300      	movs	r3, #0
 8003294:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10b      	bne.n	80032b4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a0:	f043 0220 	orr.w	r2, r3, #32
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e06a      	b.n	800338a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff ff57 	bl	800316a <LL_ADC_REG_IsConversionOngoing>
 80032bc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff ff51 	bl	800316a <LL_ADC_REG_IsConversionOngoing>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d14c      	bne.n	8003368 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80032ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d149      	bne.n	8003368 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80032d4:	4b30      	ldr	r3, [pc, #192]	@ (8003398 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80032d6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d028      	beq.n	8003332 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80032e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	6859      	ldr	r1, [r3, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80032f2:	035b      	lsls	r3, r3, #13
 80032f4:	430b      	orrs	r3, r1
 80032f6:	431a      	orrs	r2, r3
 80032f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032fa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032fc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003300:	f7ff fef3 	bl	80030ea <LL_ADC_IsEnabled>
 8003304:	4604      	mov	r4, r0
 8003306:	4823      	ldr	r0, [pc, #140]	@ (8003394 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003308:	f7ff feef 	bl	80030ea <LL_ADC_IsEnabled>
 800330c:	4603      	mov	r3, r0
 800330e:	4323      	orrs	r3, r4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d133      	bne.n	800337c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003314:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800331c:	f023 030f 	bic.w	r3, r3, #15
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	6811      	ldr	r1, [r2, #0]
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	6892      	ldr	r2, [r2, #8]
 8003328:	430a      	orrs	r2, r1
 800332a:	431a      	orrs	r2, r3
 800332c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800332e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003330:	e024      	b.n	800337c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003332:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800333a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800333c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800333e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003342:	f7ff fed2 	bl	80030ea <LL_ADC_IsEnabled>
 8003346:	4604      	mov	r4, r0
 8003348:	4812      	ldr	r0, [pc, #72]	@ (8003394 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800334a:	f7ff fece 	bl	80030ea <LL_ADC_IsEnabled>
 800334e:	4603      	mov	r3, r0
 8003350:	4323      	orrs	r3, r4
 8003352:	2b00      	cmp	r3, #0
 8003354:	d112      	bne.n	800337c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003356:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800335e:	f023 030f 	bic.w	r3, r3, #15
 8003362:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003364:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003366:	e009      	b.n	800337c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800336c:	f043 0220 	orr.w	r2, r3, #32
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800337a:	e000      	b.n	800337e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800337c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003386:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800338a:	4618      	mov	r0, r3
 800338c:	3784      	adds	r7, #132	@ 0x84
 800338e:	46bd      	mov	sp, r7
 8003390:	bd90      	pop	{r4, r7, pc}
 8003392:	bf00      	nop
 8003394:	50000100 	.word	0x50000100
 8003398:	50000300 	.word	0x50000300

0800339c <__NVIC_SetPriorityGrouping>:
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033ac:	4b0c      	ldr	r3, [pc, #48]	@ (80033e0 <__NVIC_SetPriorityGrouping+0x44>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033b8:	4013      	ands	r3, r2
 80033ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ce:	4a04      	ldr	r2, [pc, #16]	@ (80033e0 <__NVIC_SetPriorityGrouping+0x44>)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	60d3      	str	r3, [r2, #12]
}
 80033d4:	bf00      	nop
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	e000ed00 	.word	0xe000ed00

080033e4 <__NVIC_GetPriorityGrouping>:
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033e8:	4b04      	ldr	r3, [pc, #16]	@ (80033fc <__NVIC_GetPriorityGrouping+0x18>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	0a1b      	lsrs	r3, r3, #8
 80033ee:	f003 0307 	and.w	r3, r3, #7
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	e000ed00 	.word	0xe000ed00

08003400 <__NVIC_SetPriority>:
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	6039      	str	r1, [r7, #0]
 800340a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800340c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003410:	2b00      	cmp	r3, #0
 8003412:	db0a      	blt.n	800342a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	b2da      	uxtb	r2, r3
 8003418:	490c      	ldr	r1, [pc, #48]	@ (800344c <__NVIC_SetPriority+0x4c>)
 800341a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341e:	0112      	lsls	r2, r2, #4
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	440b      	add	r3, r1
 8003424:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003428:	e00a      	b.n	8003440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	4908      	ldr	r1, [pc, #32]	@ (8003450 <__NVIC_SetPriority+0x50>)
 8003430:	79fb      	ldrb	r3, [r7, #7]
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	3b04      	subs	r3, #4
 8003438:	0112      	lsls	r2, r2, #4
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	440b      	add	r3, r1
 800343e:	761a      	strb	r2, [r3, #24]
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	e000e100 	.word	0xe000e100
 8003450:	e000ed00 	.word	0xe000ed00

08003454 <NVIC_EncodePriority>:
{
 8003454:	b480      	push	{r7}
 8003456:	b089      	sub	sp, #36	@ 0x24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f1c3 0307 	rsb	r3, r3, #7
 800346e:	2b04      	cmp	r3, #4
 8003470:	bf28      	it	cs
 8003472:	2304      	movcs	r3, #4
 8003474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	3304      	adds	r3, #4
 800347a:	2b06      	cmp	r3, #6
 800347c:	d902      	bls.n	8003484 <NVIC_EncodePriority+0x30>
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	3b03      	subs	r3, #3
 8003482:	e000      	b.n	8003486 <NVIC_EncodePriority+0x32>
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003488:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43da      	mvns	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	401a      	ands	r2, r3
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800349c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	fa01 f303 	lsl.w	r3, r1, r3
 80034a6:	43d9      	mvns	r1, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ac:	4313      	orrs	r3, r2
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3724      	adds	r7, #36	@ 0x24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
	...

080034bc <SysTick_Config>:
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034cc:	d301      	bcc.n	80034d2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80034ce:	2301      	movs	r3, #1
 80034d0:	e00f      	b.n	80034f2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034d2:	4a0a      	ldr	r2, [pc, #40]	@ (80034fc <SysTick_Config+0x40>)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034da:	210f      	movs	r1, #15
 80034dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80034e0:	f7ff ff8e 	bl	8003400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034e4:	4b05      	ldr	r3, [pc, #20]	@ (80034fc <SysTick_Config+0x40>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ea:	4b04      	ldr	r3, [pc, #16]	@ (80034fc <SysTick_Config+0x40>)
 80034ec:	2207      	movs	r2, #7
 80034ee:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	e000e010 	.word	0xe000e010

08003500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7ff ff47 	bl	800339c <__NVIC_SetPriorityGrouping>
}
 800350e:	bf00      	nop
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b086      	sub	sp, #24
 800351a:	af00      	add	r7, sp, #0
 800351c:	4603      	mov	r3, r0
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	607a      	str	r2, [r7, #4]
 8003522:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003524:	f7ff ff5e 	bl	80033e4 <__NVIC_GetPriorityGrouping>
 8003528:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	68b9      	ldr	r1, [r7, #8]
 800352e:	6978      	ldr	r0, [r7, #20]
 8003530:	f7ff ff90 	bl	8003454 <NVIC_EncodePriority>
 8003534:	4602      	mov	r2, r0
 8003536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800353a:	4611      	mov	r1, r2
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff ff5f 	bl	8003400 <__NVIC_SetPriority>
}
 8003542:	bf00      	nop
 8003544:	3718      	adds	r7, #24
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b082      	sub	sp, #8
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff ffb2 	bl	80034bc <SysTick_Config>
 8003558:	4603      	mov	r3, r0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003572:	e15a      	b.n	800382a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	2101      	movs	r1, #1
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	fa01 f303 	lsl.w	r3, r1, r3
 8003580:	4013      	ands	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 814c 	beq.w	8003824 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	2b01      	cmp	r3, #1
 8003596:	d005      	beq.n	80035a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d130      	bne.n	8003606 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	2203      	movs	r2, #3
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4013      	ands	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035da:	2201      	movs	r2, #1
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43db      	mvns	r3, r3
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4013      	ands	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	091b      	lsrs	r3, r3, #4
 80035f0:	f003 0201 	and.w	r2, r3, #1
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	2b03      	cmp	r3, #3
 8003610:	d017      	beq.n	8003642 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	2203      	movs	r2, #3
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	43db      	mvns	r3, r3
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4013      	ands	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d123      	bne.n	8003696 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	08da      	lsrs	r2, r3, #3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3208      	adds	r2, #8
 8003656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800365a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	220f      	movs	r2, #15
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	43db      	mvns	r3, r3
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4013      	ands	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	691a      	ldr	r2, [r3, #16]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	08da      	lsrs	r2, r3, #3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3208      	adds	r2, #8
 8003690:	6939      	ldr	r1, [r7, #16]
 8003692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	2203      	movs	r2, #3
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4013      	ands	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f003 0203 	and.w	r2, r3, #3
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 80a6 	beq.w	8003824 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036d8:	4b5b      	ldr	r3, [pc, #364]	@ (8003848 <HAL_GPIO_Init+0x2e4>)
 80036da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036dc:	4a5a      	ldr	r2, [pc, #360]	@ (8003848 <HAL_GPIO_Init+0x2e4>)
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80036e4:	4b58      	ldr	r3, [pc, #352]	@ (8003848 <HAL_GPIO_Init+0x2e4>)
 80036e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	60bb      	str	r3, [r7, #8]
 80036ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036f0:	4a56      	ldr	r2, [pc, #344]	@ (800384c <HAL_GPIO_Init+0x2e8>)
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	089b      	lsrs	r3, r3, #2
 80036f6:	3302      	adds	r3, #2
 80036f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	220f      	movs	r2, #15
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	43db      	mvns	r3, r3
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800371a:	d01f      	beq.n	800375c <HAL_GPIO_Init+0x1f8>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a4c      	ldr	r2, [pc, #304]	@ (8003850 <HAL_GPIO_Init+0x2ec>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d019      	beq.n	8003758 <HAL_GPIO_Init+0x1f4>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a4b      	ldr	r2, [pc, #300]	@ (8003854 <HAL_GPIO_Init+0x2f0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d013      	beq.n	8003754 <HAL_GPIO_Init+0x1f0>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a4a      	ldr	r2, [pc, #296]	@ (8003858 <HAL_GPIO_Init+0x2f4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d00d      	beq.n	8003750 <HAL_GPIO_Init+0x1ec>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a49      	ldr	r2, [pc, #292]	@ (800385c <HAL_GPIO_Init+0x2f8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d007      	beq.n	800374c <HAL_GPIO_Init+0x1e8>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a48      	ldr	r2, [pc, #288]	@ (8003860 <HAL_GPIO_Init+0x2fc>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d101      	bne.n	8003748 <HAL_GPIO_Init+0x1e4>
 8003744:	2305      	movs	r3, #5
 8003746:	e00a      	b.n	800375e <HAL_GPIO_Init+0x1fa>
 8003748:	2306      	movs	r3, #6
 800374a:	e008      	b.n	800375e <HAL_GPIO_Init+0x1fa>
 800374c:	2304      	movs	r3, #4
 800374e:	e006      	b.n	800375e <HAL_GPIO_Init+0x1fa>
 8003750:	2303      	movs	r3, #3
 8003752:	e004      	b.n	800375e <HAL_GPIO_Init+0x1fa>
 8003754:	2302      	movs	r3, #2
 8003756:	e002      	b.n	800375e <HAL_GPIO_Init+0x1fa>
 8003758:	2301      	movs	r3, #1
 800375a:	e000      	b.n	800375e <HAL_GPIO_Init+0x1fa>
 800375c:	2300      	movs	r3, #0
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	f002 0203 	and.w	r2, r2, #3
 8003764:	0092      	lsls	r2, r2, #2
 8003766:	4093      	lsls	r3, r2
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	4313      	orrs	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800376e:	4937      	ldr	r1, [pc, #220]	@ (800384c <HAL_GPIO_Init+0x2e8>)
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	089b      	lsrs	r3, r3, #2
 8003774:	3302      	adds	r3, #2
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800377c:	4b39      	ldr	r3, [pc, #228]	@ (8003864 <HAL_GPIO_Init+0x300>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	43db      	mvns	r3, r3
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4013      	ands	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037a0:	4a30      	ldr	r2, [pc, #192]	@ (8003864 <HAL_GPIO_Init+0x300>)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037a6:	4b2f      	ldr	r3, [pc, #188]	@ (8003864 <HAL_GPIO_Init+0x300>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	43db      	mvns	r3, r3
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4013      	ands	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037ca:	4a26      	ldr	r2, [pc, #152]	@ (8003864 <HAL_GPIO_Init+0x300>)
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80037d0:	4b24      	ldr	r3, [pc, #144]	@ (8003864 <HAL_GPIO_Init+0x300>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	43db      	mvns	r3, r3
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4013      	ands	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003864 <HAL_GPIO_Init+0x300>)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80037fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003864 <HAL_GPIO_Init+0x300>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	43db      	mvns	r3, r3
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4013      	ands	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4313      	orrs	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800381e:	4a11      	ldr	r2, [pc, #68]	@ (8003864 <HAL_GPIO_Init+0x300>)
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	3301      	adds	r3, #1
 8003828:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	fa22 f303 	lsr.w	r3, r2, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	f47f ae9d 	bne.w	8003574 <HAL_GPIO_Init+0x10>
  }
}
 800383a:	bf00      	nop
 800383c:	bf00      	nop
 800383e:	371c      	adds	r7, #28
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	40021000 	.word	0x40021000
 800384c:	40010000 	.word	0x40010000
 8003850:	48000400 	.word	0x48000400
 8003854:	48000800 	.word	0x48000800
 8003858:	48000c00 	.word	0x48000c00
 800385c:	48001000 	.word	0x48001000
 8003860:	48001400 	.word	0x48001400
 8003864:	40010400 	.word	0x40010400

08003868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	460b      	mov	r3, r1
 8003872:	807b      	strh	r3, [r7, #2]
 8003874:	4613      	mov	r3, r2
 8003876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003878:	787b      	ldrb	r3, [r7, #1]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800387e:	887a      	ldrh	r2, [r7, #2]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003884:	e002      	b.n	800388c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003886:	887a      	ldrh	r2, [r7, #2]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038aa:	887a      	ldrh	r2, [r7, #2]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4013      	ands	r3, r2
 80038b0:	041a      	lsls	r2, r3, #16
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	43d9      	mvns	r1, r3
 80038b6:	887b      	ldrh	r3, [r7, #2]
 80038b8:	400b      	ands	r3, r1
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	619a      	str	r2, [r3, #24]
}
 80038c0:	bf00      	nop
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e08d      	b.n	80039fa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d106      	bne.n	80038f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fd ff6e 	bl	80017d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2224      	movs	r2, #36	@ 0x24
 80038fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0201 	bic.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800391c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800392c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d107      	bne.n	8003946 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003942:	609a      	str	r2, [r3, #8]
 8003944:	e006      	b.n	8003954 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003952:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	2b02      	cmp	r3, #2
 800395a:	d108      	bne.n	800396e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800396a:	605a      	str	r2, [r3, #4]
 800396c:	e007      	b.n	800397e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800397c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6812      	ldr	r2, [r2, #0]
 8003988:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800398c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003990:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691a      	ldr	r2, [r3, #16]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69d9      	ldr	r1, [r3, #28]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a1a      	ldr	r2, [r3, #32]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0201 	orr.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b088      	sub	sp, #32
 8003a08:	af02      	add	r7, sp, #8
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	607a      	str	r2, [r7, #4]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	460b      	mov	r3, r1
 8003a12:	817b      	strh	r3, [r7, #10]
 8003a14:	4613      	mov	r3, r2
 8003a16:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	f040 80fd 	bne.w	8003c20 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_I2C_Master_Transmit+0x30>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e0f6      	b.n	8003c22 <HAL_I2C_Master_Transmit+0x21e>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a3c:	f7fe f8da 	bl	8001bf4 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	2319      	movs	r3, #25
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 faf6 	bl	8004040 <I2C_WaitOnFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e0e1      	b.n	8003c22 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2221      	movs	r2, #33	@ 0x21
 8003a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2210      	movs	r2, #16
 8003a6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	893a      	ldrh	r2, [r7, #8]
 8003a7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2bff      	cmp	r3, #255	@ 0xff
 8003a8e:	d906      	bls.n	8003a9e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	22ff      	movs	r2, #255	@ 0xff
 8003a94:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003a96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	e007      	b.n	8003aae <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003aa8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003aac:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d024      	beq.n	8003b00 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aba:	781a      	ldrb	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	3301      	adds	r3, #1
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	8979      	ldrh	r1, [r7, #10]
 8003af2:	4b4e      	ldr	r3, [pc, #312]	@ (8003c2c <HAL_I2C_Master_Transmit+0x228>)
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 fcf1 	bl	80044e0 <I2C_TransferConfig>
 8003afe:	e066      	b.n	8003bce <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	8979      	ldrh	r1, [r7, #10]
 8003b08:	4b48      	ldr	r3, [pc, #288]	@ (8003c2c <HAL_I2C_Master_Transmit+0x228>)
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 fce6 	bl	80044e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003b14:	e05b      	b.n	8003bce <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	6a39      	ldr	r1, [r7, #32]
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 fae9 	bl	80040f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e07b      	b.n	8003c22 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2e:	781a      	ldrb	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d034      	beq.n	8003bce <HAL_I2C_Master_Transmit+0x1ca>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d130      	bne.n	8003bce <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	2200      	movs	r2, #0
 8003b74:	2180      	movs	r1, #128	@ 0x80
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 fa62 	bl	8004040 <I2C_WaitOnFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e04d      	b.n	8003c22 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	2bff      	cmp	r3, #255	@ 0xff
 8003b8e:	d90e      	bls.n	8003bae <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	22ff      	movs	r2, #255	@ 0xff
 8003b94:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	8979      	ldrh	r1, [r7, #10]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 fc9a 	bl	80044e0 <I2C_TransferConfig>
 8003bac:	e00f      	b.n	8003bce <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	8979      	ldrh	r1, [r7, #10]
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 fc89 	bl	80044e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d19e      	bne.n	8003b16 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	6a39      	ldr	r1, [r7, #32]
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 facf 	bl	8004180 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e01a      	b.n	8003c22 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6859      	ldr	r1, [r3, #4]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8003c30 <HAL_I2C_Master_Transmit+0x22c>)
 8003c00:	400b      	ands	r3, r1
 8003c02:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	e000      	b.n	8003c22 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003c20:	2302      	movs	r3, #2
  }
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3718      	adds	r7, #24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	80002000 	.word	0x80002000
 8003c30:	fe00e800 	.word	0xfe00e800

08003c34 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af02      	add	r7, sp, #8
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	607a      	str	r2, [r7, #4]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	460b      	mov	r3, r1
 8003c42:	817b      	strh	r3, [r7, #10]
 8003c44:	4613      	mov	r3, r2
 8003c46:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b20      	cmp	r3, #32
 8003c52:	f040 80db 	bne.w	8003e0c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d101      	bne.n	8003c64 <HAL_I2C_Master_Receive+0x30>
 8003c60:	2302      	movs	r3, #2
 8003c62:	e0d4      	b.n	8003e0e <HAL_I2C_Master_Receive+0x1da>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c6c:	f7fd ffc2 	bl	8001bf4 <HAL_GetTick>
 8003c70:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	2319      	movs	r3, #25
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 f9de 	bl	8004040 <I2C_WaitOnFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e0bf      	b.n	8003e0e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2222      	movs	r2, #34	@ 0x22
 8003c92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2210      	movs	r2, #16
 8003c9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	893a      	ldrh	r2, [r7, #8]
 8003cae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	2bff      	cmp	r3, #255	@ 0xff
 8003cbe:	d90e      	bls.n	8003cde <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	22ff      	movs	r2, #255	@ 0xff
 8003cc4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	8979      	ldrh	r1, [r7, #10]
 8003cce:	4b52      	ldr	r3, [pc, #328]	@ (8003e18 <HAL_I2C_Master_Receive+0x1e4>)
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 fc02 	bl	80044e0 <I2C_TransferConfig>
 8003cdc:	e06d      	b.n	8003dba <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	8979      	ldrh	r1, [r7, #10]
 8003cf0:	4b49      	ldr	r3, [pc, #292]	@ (8003e18 <HAL_I2C_Master_Receive+0x1e4>)
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 fbf1 	bl	80044e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003cfe:	e05c      	b.n	8003dba <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	6a39      	ldr	r1, [r7, #32]
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 fa7f 	bl	8004208 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e07c      	b.n	8003e0e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d034      	beq.n	8003dba <HAL_I2C_Master_Receive+0x186>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d130      	bne.n	8003dba <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2180      	movs	r1, #128	@ 0x80
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 f96c 	bl	8004040 <I2C_WaitOnFlagUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e04d      	b.n	8003e0e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2bff      	cmp	r3, #255	@ 0xff
 8003d7a:	d90e      	bls.n	8003d9a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	22ff      	movs	r2, #255	@ 0xff
 8003d80:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	8979      	ldrh	r1, [r7, #10]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 fba4 	bl	80044e0 <I2C_TransferConfig>
 8003d98:	e00f      	b.n	8003dba <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	8979      	ldrh	r1, [r7, #10]
 8003dac:	2300      	movs	r3, #0
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 fb93 	bl	80044e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d19d      	bne.n	8003d00 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	6a39      	ldr	r1, [r7, #32]
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 f9d9 	bl	8004180 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e01a      	b.n	8003e0e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6859      	ldr	r1, [r3, #4]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	4b0c      	ldr	r3, [pc, #48]	@ (8003e1c <HAL_I2C_Master_Receive+0x1e8>)
 8003dec:	400b      	ands	r3, r1
 8003dee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	e000      	b.n	8003e0e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003e0c:	2302      	movs	r3, #2
  }
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	80002400 	.word	0x80002400
 8003e1c:	fe00e800 	.word	0xfe00e800

08003e20 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08a      	sub	sp, #40	@ 0x28
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	607a      	str	r2, [r7, #4]
 8003e2a:	603b      	str	r3, [r7, #0]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003e30:	2300      	movs	r3, #0
 8003e32:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	f040 80d6 	bne.w	8003fee <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e50:	d101      	bne.n	8003e56 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003e52:	2302      	movs	r3, #2
 8003e54:	e0cc      	b.n	8003ff0 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_I2C_IsDeviceReady+0x44>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e0c5      	b.n	8003ff0 <HAL_I2C_IsDeviceReady+0x1d0>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2224      	movs	r2, #36	@ 0x24
 8003e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d107      	bne.n	8003e92 <HAL_I2C_IsDeviceReady+0x72>
 8003e82:	897b      	ldrh	r3, [r7, #10]
 8003e84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e88:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e8c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e90:	e006      	b.n	8003ea0 <HAL_I2C_IsDeviceReady+0x80>
 8003e92:	897b      	ldrh	r3, [r7, #10]
 8003e94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e9c:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003ea6:	f7fd fea5 	bl	8001bf4 <HAL_GetTick>
 8003eaa:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b20      	cmp	r3, #32
 8003eb8:	bf0c      	ite	eq
 8003eba:	2301      	moveq	r3, #1
 8003ebc:	2300      	movne	r3, #0
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	f003 0310 	and.w	r3, r3, #16
 8003ecc:	2b10      	cmp	r3, #16
 8003ece:	bf0c      	ite	eq
 8003ed0:	2301      	moveq	r3, #1
 8003ed2:	2300      	movne	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003ed8:	e034      	b.n	8003f44 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ee0:	d01a      	beq.n	8003f18 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ee2:	f7fd fe87 	bl	8001bf4 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d302      	bcc.n	8003ef8 <HAL_I2C_IsDeviceReady+0xd8>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10f      	bne.n	8003f18 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f04:	f043 0220 	orr.w	r2, r3, #32
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e06b      	b.n	8003ff0 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b20      	cmp	r3, #32
 8003f24:	bf0c      	ite	eq
 8003f26:	2301      	moveq	r3, #1
 8003f28:	2300      	movne	r3, #0
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	f003 0310 	and.w	r3, r3, #16
 8003f38:	2b10      	cmp	r3, #16
 8003f3a:	bf0c      	ite	eq
 8003f3c:	2301      	moveq	r3, #1
 8003f3e:	2300      	movne	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003f44:	7ffb      	ldrb	r3, [r7, #31]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d102      	bne.n	8003f50 <HAL_I2C_IsDeviceReady+0x130>
 8003f4a:	7fbb      	ldrb	r3, [r7, #30]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0c4      	beq.n	8003eda <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	f003 0310 	and.w	r3, r3, #16
 8003f5a:	2b10      	cmp	r3, #16
 8003f5c:	d01a      	beq.n	8003f94 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2200      	movs	r2, #0
 8003f66:	2120      	movs	r1, #32
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f869 	bl	8004040 <I2C_WaitOnFlagUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e03b      	b.n	8003ff0 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	e02d      	b.n	8003ff0 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	2120      	movs	r1, #32
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 f84e 	bl	8004040 <I2C_WaitOnFlagUntilTimeout>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e020      	b.n	8003ff0 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2210      	movs	r2, #16
 8003fb4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	f63f af56 	bhi.w	8003e7a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fda:	f043 0220 	orr.w	r2, r3, #32
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8003fee:	2302      	movs	r3, #2
  }
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3720      	adds	r7, #32
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b02      	cmp	r3, #2
 800400c:	d103      	bne.n	8004016 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2200      	movs	r2, #0
 8004014:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b01      	cmp	r3, #1
 8004022:	d007      	beq.n	8004034 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699a      	ldr	r2, [r3, #24]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0201 	orr.w	r2, r2, #1
 8004032:	619a      	str	r2, [r3, #24]
  }
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	603b      	str	r3, [r7, #0]
 800404c:	4613      	mov	r3, r2
 800404e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004050:	e03b      	b.n	80040ca <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	6839      	ldr	r1, [r7, #0]
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 f962 	bl	8004320 <I2C_IsErrorOccurred>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e041      	b.n	80040ea <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800406c:	d02d      	beq.n	80040ca <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800406e:	f7fd fdc1 	bl	8001bf4 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d302      	bcc.n	8004084 <I2C_WaitOnFlagUntilTimeout+0x44>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d122      	bne.n	80040ca <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	699a      	ldr	r2, [r3, #24]
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	4013      	ands	r3, r2
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	429a      	cmp	r2, r3
 8004092:	bf0c      	ite	eq
 8004094:	2301      	moveq	r3, #1
 8004096:	2300      	movne	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	461a      	mov	r2, r3
 800409c:	79fb      	ldrb	r3, [r7, #7]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d113      	bne.n	80040ca <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a6:	f043 0220 	orr.w	r2, r3, #32
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e00f      	b.n	80040ea <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	699a      	ldr	r2, [r3, #24]
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	4013      	ands	r3, r2
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	bf0c      	ite	eq
 80040da:	2301      	moveq	r3, #1
 80040dc:	2300      	movne	r3, #0
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	461a      	mov	r2, r3
 80040e2:	79fb      	ldrb	r3, [r7, #7]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d0b4      	beq.n	8004052 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b084      	sub	sp, #16
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040fe:	e033      	b.n	8004168 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	68b9      	ldr	r1, [r7, #8]
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 f90b 	bl	8004320 <I2C_IsErrorOccurred>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e031      	b.n	8004178 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800411a:	d025      	beq.n	8004168 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800411c:	f7fd fd6a 	bl	8001bf4 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	429a      	cmp	r2, r3
 800412a:	d302      	bcc.n	8004132 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d11a      	bne.n	8004168 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b02      	cmp	r3, #2
 800413e:	d013      	beq.n	8004168 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004144:	f043 0220 	orr.w	r2, r3, #32
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e007      	b.n	8004178 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b02      	cmp	r3, #2
 8004174:	d1c4      	bne.n	8004100 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800418c:	e02f      	b.n	80041ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	68b9      	ldr	r1, [r7, #8]
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 f8c4 	bl	8004320 <I2C_IsErrorOccurred>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e02d      	b.n	80041fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041a2:	f7fd fd27 	bl	8001bf4 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d302      	bcc.n	80041b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d11a      	bne.n	80041ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	f003 0320 	and.w	r3, r3, #32
 80041c2:	2b20      	cmp	r3, #32
 80041c4:	d013      	beq.n	80041ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ca:	f043 0220 	orr.w	r2, r3, #32
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e007      	b.n	80041fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b20      	cmp	r3, #32
 80041fa:	d1c8      	bne.n	800418e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004214:	2300      	movs	r3, #0
 8004216:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004218:	e071      	b.n	80042fe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	68b9      	ldr	r1, [r7, #8]
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 f87e 	bl	8004320 <I2C_IsErrorOccurred>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	f003 0320 	and.w	r3, r3, #32
 8004238:	2b20      	cmp	r3, #32
 800423a:	d13b      	bne.n	80042b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800423c:	7dfb      	ldrb	r3, [r7, #23]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d138      	bne.n	80042b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b04      	cmp	r3, #4
 800424e:	d105      	bne.n	800425c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	f003 0310 	and.w	r3, r3, #16
 8004266:	2b10      	cmp	r3, #16
 8004268:	d121      	bne.n	80042ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2210      	movs	r2, #16
 8004270:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2204      	movs	r2, #4
 8004276:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2220      	movs	r2, #32
 800427e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6859      	ldr	r1, [r3, #4]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	4b24      	ldr	r3, [pc, #144]	@ (800431c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800428c:	400b      	ands	r3, r1
 800428e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2220      	movs	r2, #32
 8004294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	75fb      	strb	r3, [r7, #23]
 80042ac:	e002      	b.n	80042b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80042b4:	f7fd fc9e 	bl	8001bf4 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d302      	bcc.n	80042ca <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d119      	bne.n	80042fe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80042ca:	7dfb      	ldrb	r3, [r7, #23]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d116      	bne.n	80042fe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	2b04      	cmp	r3, #4
 80042dc:	d00f      	beq.n	80042fe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e2:	f043 0220 	orr.w	r2, r3, #32
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2220      	movs	r2, #32
 80042ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b04      	cmp	r3, #4
 800430a:	d002      	beq.n	8004312 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800430c:	7dfb      	ldrb	r3, [r7, #23]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d083      	beq.n	800421a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8004312:	7dfb      	ldrb	r3, [r7, #23]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	fe00e800 	.word	0xfe00e800

08004320 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08a      	sub	sp, #40	@ 0x28
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800432c:	2300      	movs	r3, #0
 800432e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	f003 0310 	and.w	r3, r3, #16
 8004348:	2b00      	cmp	r3, #0
 800434a:	d068      	beq.n	800441e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2210      	movs	r2, #16
 8004352:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004354:	e049      	b.n	80043ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800435c:	d045      	beq.n	80043ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800435e:	f7fd fc49 	bl	8001bf4 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	429a      	cmp	r2, r3
 800436c:	d302      	bcc.n	8004374 <I2C_IsErrorOccurred+0x54>
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d13a      	bne.n	80043ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800437e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004386:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004392:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004396:	d121      	bne.n	80043dc <I2C_IsErrorOccurred+0xbc>
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800439e:	d01d      	beq.n	80043dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80043a0:	7cfb      	ldrb	r3, [r7, #19]
 80043a2:	2b20      	cmp	r3, #32
 80043a4:	d01a      	beq.n	80043dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80043b6:	f7fd fc1d 	bl	8001bf4 <HAL_GetTick>
 80043ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043bc:	e00e      	b.n	80043dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80043be:	f7fd fc19 	bl	8001bf4 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b19      	cmp	r3, #25
 80043ca:	d907      	bls.n	80043dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	f043 0320 	orr.w	r3, r3, #32
 80043d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80043da:	e006      	b.n	80043ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b20      	cmp	r3, #32
 80043e8:	d1e9      	bne.n	80043be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	f003 0320 	and.w	r3, r3, #32
 80043f4:	2b20      	cmp	r3, #32
 80043f6:	d003      	beq.n	8004400 <I2C_IsErrorOccurred+0xe0>
 80043f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0aa      	beq.n	8004356 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004400:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004404:	2b00      	cmp	r3, #0
 8004406:	d103      	bne.n	8004410 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2220      	movs	r2, #32
 800440e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	f043 0304 	orr.w	r3, r3, #4
 8004416:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00b      	beq.n	8004448 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	f043 0301 	orr.w	r3, r3, #1
 8004436:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004440:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00b      	beq.n	800446a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	f043 0308 	orr.w	r3, r3, #8
 8004458:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004462:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00b      	beq.n	800448c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	f043 0302 	orr.w	r3, r3, #2
 800447a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004484:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800448c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004490:	2b00      	cmp	r3, #0
 8004492:	d01c      	beq.n	80044ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f7ff fdaf 	bl	8003ff8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6859      	ldr	r1, [r3, #4]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	4b0d      	ldr	r3, [pc, #52]	@ (80044dc <I2C_IsErrorOccurred+0x1bc>)
 80044a6:	400b      	ands	r3, r1
 80044a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	431a      	orrs	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80044ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3728      	adds	r7, #40	@ 0x28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	fe00e800 	.word	0xfe00e800

080044e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	607b      	str	r3, [r7, #4]
 80044ea:	460b      	mov	r3, r1
 80044ec:	817b      	strh	r3, [r7, #10]
 80044ee:	4613      	mov	r3, r2
 80044f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044f2:	897b      	ldrh	r3, [r7, #10]
 80044f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80044f8:	7a7b      	ldrb	r3, [r7, #9]
 80044fa:	041b      	lsls	r3, r3, #16
 80044fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004500:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	4313      	orrs	r3, r2
 800450a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800450e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	0d5b      	lsrs	r3, r3, #21
 800451a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800451e:	4b08      	ldr	r3, [pc, #32]	@ (8004540 <I2C_TransferConfig+0x60>)
 8004520:	430b      	orrs	r3, r1
 8004522:	43db      	mvns	r3, r3
 8004524:	ea02 0103 	and.w	r1, r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	430a      	orrs	r2, r1
 8004530:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004532:	bf00      	nop
 8004534:	371c      	adds	r7, #28
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	03ff63ff 	.word	0x03ff63ff

08004544 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b20      	cmp	r3, #32
 8004558:	d138      	bne.n	80045cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004560:	2b01      	cmp	r3, #1
 8004562:	d101      	bne.n	8004568 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004564:	2302      	movs	r3, #2
 8004566:	e032      	b.n	80045ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2224      	movs	r2, #36	@ 0x24
 8004574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0201 	bic.w	r2, r2, #1
 8004586:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004596:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6819      	ldr	r1, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0201 	orr.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80045c8:	2300      	movs	r3, #0
 80045ca:	e000      	b.n	80045ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045cc:	2302      	movs	r3, #2
  }
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045da:	b480      	push	{r7}
 80045dc:	b085      	sub	sp, #20
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b20      	cmp	r3, #32
 80045ee:	d139      	bne.n	8004664 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d101      	bne.n	80045fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045fa:	2302      	movs	r3, #2
 80045fc:	e033      	b.n	8004666 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2224      	movs	r2, #36	@ 0x24
 800460a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0201 	bic.w	r2, r2, #1
 800461c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800462c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	021b      	lsls	r3, r3, #8
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4313      	orrs	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2220      	movs	r2, #32
 8004654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004660:	2300      	movs	r3, #0
 8004662:	e000      	b.n	8004666 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004664:	2302      	movs	r3, #2
  }
}
 8004666:	4618      	mov	r0, r3
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
	...

08004674 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d141      	bne.n	8004706 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004682:	4b4b      	ldr	r3, [pc, #300]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800468a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800468e:	d131      	bne.n	80046f4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004690:	4b47      	ldr	r3, [pc, #284]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004692:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004696:	4a46      	ldr	r2, [pc, #280]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800469c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046a0:	4b43      	ldr	r3, [pc, #268]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80046a8:	4a41      	ldr	r2, [pc, #260]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046b0:	4b40      	ldr	r3, [pc, #256]	@ (80047b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2232      	movs	r2, #50	@ 0x32
 80046b6:	fb02 f303 	mul.w	r3, r2, r3
 80046ba:	4a3f      	ldr	r2, [pc, #252]	@ (80047b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046bc:	fba2 2303 	umull	r2, r3, r2, r3
 80046c0:	0c9b      	lsrs	r3, r3, #18
 80046c2:	3301      	adds	r3, #1
 80046c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046c6:	e002      	b.n	80046ce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	3b01      	subs	r3, #1
 80046cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046ce:	4b38      	ldr	r3, [pc, #224]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046da:	d102      	bne.n	80046e2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1f2      	bne.n	80046c8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046e2:	4b33      	ldr	r3, [pc, #204]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ee:	d158      	bne.n	80047a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e057      	b.n	80047a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046f4:	4b2e      	ldr	r3, [pc, #184]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046fa:	4a2d      	ldr	r2, [pc, #180]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004700:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004704:	e04d      	b.n	80047a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800470c:	d141      	bne.n	8004792 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800470e:	4b28      	ldr	r3, [pc, #160]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004716:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800471a:	d131      	bne.n	8004780 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800471c:	4b24      	ldr	r3, [pc, #144]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800471e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004722:	4a23      	ldr	r2, [pc, #140]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004728:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800472c:	4b20      	ldr	r3, [pc, #128]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004734:	4a1e      	ldr	r2, [pc, #120]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004736:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800473a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800473c:	4b1d      	ldr	r3, [pc, #116]	@ (80047b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2232      	movs	r2, #50	@ 0x32
 8004742:	fb02 f303 	mul.w	r3, r2, r3
 8004746:	4a1c      	ldr	r2, [pc, #112]	@ (80047b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004748:	fba2 2303 	umull	r2, r3, r2, r3
 800474c:	0c9b      	lsrs	r3, r3, #18
 800474e:	3301      	adds	r3, #1
 8004750:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004752:	e002      	b.n	800475a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	3b01      	subs	r3, #1
 8004758:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800475a:	4b15      	ldr	r3, [pc, #84]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004762:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004766:	d102      	bne.n	800476e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1f2      	bne.n	8004754 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800476e:	4b10      	ldr	r3, [pc, #64]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004776:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800477a:	d112      	bne.n	80047a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e011      	b.n	80047a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004780:	4b0b      	ldr	r3, [pc, #44]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004786:	4a0a      	ldr	r2, [pc, #40]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800478c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004790:	e007      	b.n	80047a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004792:	4b07      	ldr	r3, [pc, #28]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800479a:	4a05      	ldr	r2, [pc, #20]	@ (80047b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800479c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047a0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	40007000 	.word	0x40007000
 80047b4:	20000008 	.word	0x20000008
 80047b8:	431bde83 	.word	0x431bde83

080047bc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80047c0:	4b05      	ldr	r3, [pc, #20]	@ (80047d8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	4a04      	ldr	r2, [pc, #16]	@ (80047d8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80047c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047ca:	6093      	str	r3, [r2, #8]
}
 80047cc:	bf00      	nop
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	40007000 	.word	0x40007000

080047dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e2fe      	b.n	8004dec <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d075      	beq.n	80048e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047fa:	4b97      	ldr	r3, [pc, #604]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 030c 	and.w	r3, r3, #12
 8004802:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004804:	4b94      	ldr	r3, [pc, #592]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f003 0303 	and.w	r3, r3, #3
 800480c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	2b0c      	cmp	r3, #12
 8004812:	d102      	bne.n	800481a <HAL_RCC_OscConfig+0x3e>
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2b03      	cmp	r3, #3
 8004818:	d002      	beq.n	8004820 <HAL_RCC_OscConfig+0x44>
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	2b08      	cmp	r3, #8
 800481e:	d10b      	bne.n	8004838 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004820:	4b8d      	ldr	r3, [pc, #564]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d05b      	beq.n	80048e4 <HAL_RCC_OscConfig+0x108>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d157      	bne.n	80048e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e2d9      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004840:	d106      	bne.n	8004850 <HAL_RCC_OscConfig+0x74>
 8004842:	4b85      	ldr	r3, [pc, #532]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a84      	ldr	r2, [pc, #528]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004848:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	e01d      	b.n	800488c <HAL_RCC_OscConfig+0xb0>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004858:	d10c      	bne.n	8004874 <HAL_RCC_OscConfig+0x98>
 800485a:	4b7f      	ldr	r3, [pc, #508]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a7e      	ldr	r2, [pc, #504]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004860:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004864:	6013      	str	r3, [r2, #0]
 8004866:	4b7c      	ldr	r3, [pc, #496]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a7b      	ldr	r2, [pc, #492]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 800486c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004870:	6013      	str	r3, [r2, #0]
 8004872:	e00b      	b.n	800488c <HAL_RCC_OscConfig+0xb0>
 8004874:	4b78      	ldr	r3, [pc, #480]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a77      	ldr	r2, [pc, #476]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 800487a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800487e:	6013      	str	r3, [r2, #0]
 8004880:	4b75      	ldr	r3, [pc, #468]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a74      	ldr	r2, [pc, #464]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004886:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800488a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d013      	beq.n	80048bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004894:	f7fd f9ae 	bl	8001bf4 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800489c:	f7fd f9aa 	bl	8001bf4 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b64      	cmp	r3, #100	@ 0x64
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e29e      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048ae:	4b6a      	ldr	r3, [pc, #424]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0f0      	beq.n	800489c <HAL_RCC_OscConfig+0xc0>
 80048ba:	e014      	b.n	80048e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048bc:	f7fd f99a 	bl	8001bf4 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048c4:	f7fd f996 	bl	8001bf4 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b64      	cmp	r3, #100	@ 0x64
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e28a      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048d6:	4b60      	ldr	r3, [pc, #384]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1f0      	bne.n	80048c4 <HAL_RCC_OscConfig+0xe8>
 80048e2:	e000      	b.n	80048e6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d075      	beq.n	80049de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048f2:	4b59      	ldr	r3, [pc, #356]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 030c 	and.w	r3, r3, #12
 80048fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048fc:	4b56      	ldr	r3, [pc, #344]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f003 0303 	and.w	r3, r3, #3
 8004904:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	2b0c      	cmp	r3, #12
 800490a:	d102      	bne.n	8004912 <HAL_RCC_OscConfig+0x136>
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d002      	beq.n	8004918 <HAL_RCC_OscConfig+0x13c>
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	2b04      	cmp	r3, #4
 8004916:	d11f      	bne.n	8004958 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004918:	4b4f      	ldr	r3, [pc, #316]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004920:	2b00      	cmp	r3, #0
 8004922:	d005      	beq.n	8004930 <HAL_RCC_OscConfig+0x154>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e25d      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004930:	4b49      	ldr	r3, [pc, #292]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	061b      	lsls	r3, r3, #24
 800493e:	4946      	ldr	r1, [pc, #280]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004940:	4313      	orrs	r3, r2
 8004942:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004944:	4b45      	ldr	r3, [pc, #276]	@ (8004a5c <HAL_RCC_OscConfig+0x280>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4618      	mov	r0, r3
 800494a:	f7fd f907 	bl	8001b5c <HAL_InitTick>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d043      	beq.n	80049dc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e249      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d023      	beq.n	80049a8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004960:	4b3d      	ldr	r3, [pc, #244]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a3c      	ldr	r2, [pc, #240]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004966:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800496a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496c:	f7fd f942 	bl	8001bf4 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004974:	f7fd f93e 	bl	8001bf4 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e232      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004986:	4b34      	ldr	r3, [pc, #208]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0f0      	beq.n	8004974 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004992:	4b31      	ldr	r3, [pc, #196]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	061b      	lsls	r3, r3, #24
 80049a0:	492d      	ldr	r1, [pc, #180]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	604b      	str	r3, [r1, #4]
 80049a6:	e01a      	b.n	80049de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a2a      	ldr	r2, [pc, #168]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 80049ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b4:	f7fd f91e 	bl	8001bf4 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049bc:	f7fd f91a 	bl	8001bf4 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e20e      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049ce:	4b22      	ldr	r3, [pc, #136]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f0      	bne.n	80049bc <HAL_RCC_OscConfig+0x1e0>
 80049da:	e000      	b.n	80049de <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d041      	beq.n	8004a6e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d01c      	beq.n	8004a2c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049f2:	4b19      	ldr	r3, [pc, #100]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 80049f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049f8:	4a17      	ldr	r2, [pc, #92]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 80049fa:	f043 0301 	orr.w	r3, r3, #1
 80049fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a02:	f7fd f8f7 	bl	8001bf4 <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a0a:	f7fd f8f3 	bl	8001bf4 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e1e7      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0ef      	beq.n	8004a0a <HAL_RCC_OscConfig+0x22e>
 8004a2a:	e020      	b.n	8004a6e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a32:	4a09      	ldr	r2, [pc, #36]	@ (8004a58 <HAL_RCC_OscConfig+0x27c>)
 8004a34:	f023 0301 	bic.w	r3, r3, #1
 8004a38:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a3c:	f7fd f8da 	bl	8001bf4 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a42:	e00d      	b.n	8004a60 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a44:	f7fd f8d6 	bl	8001bf4 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d906      	bls.n	8004a60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e1ca      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
 8004a56:	bf00      	nop
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a60:	4b8c      	ldr	r3, [pc, #560]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1ea      	bne.n	8004a44 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0304 	and.w	r3, r3, #4
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 80a6 	beq.w	8004bc8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a80:	4b84      	ldr	r3, [pc, #528]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <HAL_RCC_OscConfig+0x2b4>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e000      	b.n	8004a92 <HAL_RCC_OscConfig+0x2b6>
 8004a90:	2300      	movs	r3, #0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00d      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a96:	4b7f      	ldr	r3, [pc, #508]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a9a:	4a7e      	ldr	r2, [pc, #504]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004aa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004aa2:	4b7c      	ldr	r3, [pc, #496]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ab2:	4b79      	ldr	r3, [pc, #484]	@ (8004c98 <HAL_RCC_OscConfig+0x4bc>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d118      	bne.n	8004af0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004abe:	4b76      	ldr	r3, [pc, #472]	@ (8004c98 <HAL_RCC_OscConfig+0x4bc>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a75      	ldr	r2, [pc, #468]	@ (8004c98 <HAL_RCC_OscConfig+0x4bc>)
 8004ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ac8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aca:	f7fd f893 	bl	8001bf4 <HAL_GetTick>
 8004ace:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ad0:	e008      	b.n	8004ae4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ad2:	f7fd f88f 	bl	8001bf4 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e183      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ae4:	4b6c      	ldr	r3, [pc, #432]	@ (8004c98 <HAL_RCC_OscConfig+0x4bc>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0f0      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d108      	bne.n	8004b0a <HAL_RCC_OscConfig+0x32e>
 8004af8:	4b66      	ldr	r3, [pc, #408]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004afe:	4a65      	ldr	r2, [pc, #404]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004b00:	f043 0301 	orr.w	r3, r3, #1
 8004b04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b08:	e024      	b.n	8004b54 <HAL_RCC_OscConfig+0x378>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	2b05      	cmp	r3, #5
 8004b10:	d110      	bne.n	8004b34 <HAL_RCC_OscConfig+0x358>
 8004b12:	4b60      	ldr	r3, [pc, #384]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b18:	4a5e      	ldr	r2, [pc, #376]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004b1a:	f043 0304 	orr.w	r3, r3, #4
 8004b1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b22:	4b5c      	ldr	r3, [pc, #368]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b28:	4a5a      	ldr	r2, [pc, #360]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004b2a:	f043 0301 	orr.w	r3, r3, #1
 8004b2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b32:	e00f      	b.n	8004b54 <HAL_RCC_OscConfig+0x378>
 8004b34:	4b57      	ldr	r3, [pc, #348]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b3a:	4a56      	ldr	r2, [pc, #344]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004b3c:	f023 0301 	bic.w	r3, r3, #1
 8004b40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b44:	4b53      	ldr	r3, [pc, #332]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b4a:	4a52      	ldr	r2, [pc, #328]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004b4c:	f023 0304 	bic.w	r3, r3, #4
 8004b50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d016      	beq.n	8004b8a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b5c:	f7fd f84a 	bl	8001bf4 <HAL_GetTick>
 8004b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b62:	e00a      	b.n	8004b7a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b64:	f7fd f846 	bl	8001bf4 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e138      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b7a:	4b46      	ldr	r3, [pc, #280]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0ed      	beq.n	8004b64 <HAL_RCC_OscConfig+0x388>
 8004b88:	e015      	b.n	8004bb6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b8a:	f7fd f833 	bl	8001bf4 <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b90:	e00a      	b.n	8004ba8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b92:	f7fd f82f 	bl	8001bf4 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e121      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ba8:	4b3a      	ldr	r3, [pc, #232]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1ed      	bne.n	8004b92 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bb6:	7ffb      	ldrb	r3, [r7, #31]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d105      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bbc:	4b35      	ldr	r3, [pc, #212]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc0:	4a34      	ldr	r2, [pc, #208]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004bc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bc6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0320 	and.w	r3, r3, #32
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d03c      	beq.n	8004c4e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d01c      	beq.n	8004c16 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004bde:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004be2:	4a2c      	ldr	r2, [pc, #176]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004be4:	f043 0301 	orr.w	r3, r3, #1
 8004be8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bec:	f7fd f802 	bl	8001bf4 <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bf4:	f7fc fffe 	bl	8001bf4 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e0f2      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c06:	4b23      	ldr	r3, [pc, #140]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004c08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d0ef      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x418>
 8004c14:	e01b      	b.n	8004c4e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c16:	4b1f      	ldr	r3, [pc, #124]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004c18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004c1e:	f023 0301 	bic.w	r3, r3, #1
 8004c22:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c26:	f7fc ffe5 	bl	8001bf4 <HAL_GetTick>
 8004c2a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c2c:	e008      	b.n	8004c40 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c2e:	f7fc ffe1 	bl	8001bf4 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e0d5      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c40:	4b14      	ldr	r3, [pc, #80]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004c42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1ef      	bne.n	8004c2e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 80c9 	beq.w	8004dea <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c58:	4b0e      	ldr	r3, [pc, #56]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f003 030c 	and.w	r3, r3, #12
 8004c60:	2b0c      	cmp	r3, #12
 8004c62:	f000 8083 	beq.w	8004d6c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d15e      	bne.n	8004d2c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c6e:	4b09      	ldr	r3, [pc, #36]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a08      	ldr	r2, [pc, #32]	@ (8004c94 <HAL_RCC_OscConfig+0x4b8>)
 8004c74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7a:	f7fc ffbb 	bl	8001bf4 <HAL_GetTick>
 8004c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c80:	e00c      	b.n	8004c9c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c82:	f7fc ffb7 	bl	8001bf4 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d905      	bls.n	8004c9c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e0ab      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
 8004c94:	40021000 	.word	0x40021000
 8004c98:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c9c:	4b55      	ldr	r3, [pc, #340]	@ (8004df4 <HAL_RCC_OscConfig+0x618>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1ec      	bne.n	8004c82 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ca8:	4b52      	ldr	r3, [pc, #328]	@ (8004df4 <HAL_RCC_OscConfig+0x618>)
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	4b52      	ldr	r3, [pc, #328]	@ (8004df8 <HAL_RCC_OscConfig+0x61c>)
 8004cae:	4013      	ands	r3, r2
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6a11      	ldr	r1, [r2, #32]
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004cb8:	3a01      	subs	r2, #1
 8004cba:	0112      	lsls	r2, r2, #4
 8004cbc:	4311      	orrs	r1, r2
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004cc2:	0212      	lsls	r2, r2, #8
 8004cc4:	4311      	orrs	r1, r2
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004cca:	0852      	lsrs	r2, r2, #1
 8004ccc:	3a01      	subs	r2, #1
 8004cce:	0552      	lsls	r2, r2, #21
 8004cd0:	4311      	orrs	r1, r2
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004cd6:	0852      	lsrs	r2, r2, #1
 8004cd8:	3a01      	subs	r2, #1
 8004cda:	0652      	lsls	r2, r2, #25
 8004cdc:	4311      	orrs	r1, r2
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004ce2:	06d2      	lsls	r2, r2, #27
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	4943      	ldr	r1, [pc, #268]	@ (8004df4 <HAL_RCC_OscConfig+0x618>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cec:	4b41      	ldr	r3, [pc, #260]	@ (8004df4 <HAL_RCC_OscConfig+0x618>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a40      	ldr	r2, [pc, #256]	@ (8004df4 <HAL_RCC_OscConfig+0x618>)
 8004cf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cf6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004cf8:	4b3e      	ldr	r3, [pc, #248]	@ (8004df4 <HAL_RCC_OscConfig+0x618>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	4a3d      	ldr	r2, [pc, #244]	@ (8004df4 <HAL_RCC_OscConfig+0x618>)
 8004cfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d02:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d04:	f7fc ff76 	bl	8001bf4 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d0c:	f7fc ff72 	bl	8001bf4 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e066      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d1e:	4b35      	ldr	r3, [pc, #212]	@ (8004df4 <HAL_RCC_OscConfig+0x618>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f0      	beq.n	8004d0c <HAL_RCC_OscConfig+0x530>
 8004d2a:	e05e      	b.n	8004dea <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d2c:	4b31      	ldr	r3, [pc, #196]	@ (8004df4 <HAL_RCC_OscConfig+0x618>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a30      	ldr	r2, [pc, #192]	@ (8004df4 <HAL_RCC_OscConfig+0x618>)
 8004d32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d38:	f7fc ff5c 	bl	8001bf4 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d40:	f7fc ff58 	bl	8001bf4 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e04c      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d52:	4b28      	ldr	r3, [pc, #160]	@ (8004df4 <HAL_RCC_OscConfig+0x618>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1f0      	bne.n	8004d40 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004d5e:	4b25      	ldr	r3, [pc, #148]	@ (8004df4 <HAL_RCC_OscConfig+0x618>)
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	4924      	ldr	r1, [pc, #144]	@ (8004df4 <HAL_RCC_OscConfig+0x618>)
 8004d64:	4b25      	ldr	r3, [pc, #148]	@ (8004dfc <HAL_RCC_OscConfig+0x620>)
 8004d66:	4013      	ands	r3, r2
 8004d68:	60cb      	str	r3, [r1, #12]
 8004d6a:	e03e      	b.n	8004dea <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e039      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004d78:	4b1e      	ldr	r3, [pc, #120]	@ (8004df4 <HAL_RCC_OscConfig+0x618>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f003 0203 	and.w	r2, r3, #3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d12c      	bne.n	8004de6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d96:	3b01      	subs	r3, #1
 8004d98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d123      	bne.n	8004de6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d11b      	bne.n	8004de6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d113      	bne.n	8004de6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc8:	085b      	lsrs	r3, r3, #1
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d109      	bne.n	8004de6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ddc:	085b      	lsrs	r3, r3, #1
 8004dde:	3b01      	subs	r3, #1
 8004de0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d001      	beq.n	8004dea <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e000      	b.n	8004dec <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3720      	adds	r7, #32
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	40021000 	.word	0x40021000
 8004df8:	019f800c 	.word	0x019f800c
 8004dfc:	feeefffc 	.word	0xfeeefffc

08004e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e11e      	b.n	8005056 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e18:	4b91      	ldr	r3, [pc, #580]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 030f 	and.w	r3, r3, #15
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d910      	bls.n	8004e48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e26:	4b8e      	ldr	r3, [pc, #568]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f023 020f 	bic.w	r2, r3, #15
 8004e2e:	498c      	ldr	r1, [pc, #560]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e36:	4b8a      	ldr	r3, [pc, #552]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d001      	beq.n	8004e48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e106      	b.n	8005056 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d073      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b03      	cmp	r3, #3
 8004e5a:	d129      	bne.n	8004eb0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e5c:	4b81      	ldr	r3, [pc, #516]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d101      	bne.n	8004e6c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e0f4      	b.n	8005056 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004e6c:	f000 f966 	bl	800513c <RCC_GetSysClockFreqFromPLLSource>
 8004e70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	4a7c      	ldr	r2, [pc, #496]	@ (8005068 <HAL_RCC_ClockConfig+0x268>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d93f      	bls.n	8004efa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e7a:	4b7a      	ldr	r3, [pc, #488]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d009      	beq.n	8004e9a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d033      	beq.n	8004efa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d12f      	bne.n	8004efa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e9a:	4b72      	ldr	r3, [pc, #456]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ea2:	4a70      	ldr	r2, [pc, #448]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004ea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ea8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004eaa:	2380      	movs	r3, #128	@ 0x80
 8004eac:	617b      	str	r3, [r7, #20]
 8004eae:	e024      	b.n	8004efa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d107      	bne.n	8004ec8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eb8:	4b6a      	ldr	r3, [pc, #424]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d109      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e0c6      	b.n	8005056 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ec8:	4b66      	ldr	r3, [pc, #408]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e0be      	b.n	8005056 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004ed8:	f000 f8ce 	bl	8005078 <HAL_RCC_GetSysClockFreq>
 8004edc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	4a61      	ldr	r2, [pc, #388]	@ (8005068 <HAL_RCC_ClockConfig+0x268>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d909      	bls.n	8004efa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ee6:	4b5f      	ldr	r3, [pc, #380]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004eee:	4a5d      	ldr	r2, [pc, #372]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004ef0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ef4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004ef6:	2380      	movs	r3, #128	@ 0x80
 8004ef8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004efa:	4b5a      	ldr	r3, [pc, #360]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f023 0203 	bic.w	r2, r3, #3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	4957      	ldr	r1, [pc, #348]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f0c:	f7fc fe72 	bl	8001bf4 <HAL_GetTick>
 8004f10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f12:	e00a      	b.n	8004f2a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f14:	f7fc fe6e 	bl	8001bf4 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e095      	b.n	8005056 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f2a:	4b4e      	ldr	r3, [pc, #312]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 020c 	and.w	r2, r3, #12
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d1eb      	bne.n	8004f14 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d023      	beq.n	8004f90 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d005      	beq.n	8004f60 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f54:	4b43      	ldr	r3, [pc, #268]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	4a42      	ldr	r2, [pc, #264]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004f5a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f5e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0308 	and.w	r3, r3, #8
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d007      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004f6c:	4b3d      	ldr	r3, [pc, #244]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004f74:	4a3b      	ldr	r2, [pc, #236]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004f76:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f7c:	4b39      	ldr	r3, [pc, #228]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	4936      	ldr	r1, [pc, #216]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	608b      	str	r3, [r1, #8]
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	2b80      	cmp	r3, #128	@ 0x80
 8004f94:	d105      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f96:	4b33      	ldr	r3, [pc, #204]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	4a32      	ldr	r2, [pc, #200]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004f9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fa0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fa2:	4b2f      	ldr	r3, [pc, #188]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 030f 	and.w	r3, r3, #15
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d21d      	bcs.n	8004fec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fb0:	4b2b      	ldr	r3, [pc, #172]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f023 020f 	bic.w	r2, r3, #15
 8004fb8:	4929      	ldr	r1, [pc, #164]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004fc0:	f7fc fe18 	bl	8001bf4 <HAL_GetTick>
 8004fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fc6:	e00a      	b.n	8004fde <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fc8:	f7fc fe14 	bl	8001bf4 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e03b      	b.n	8005056 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fde:	4b20      	ldr	r3, [pc, #128]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d1ed      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d008      	beq.n	800500a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	4917      	ldr	r1, [pc, #92]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8005006:	4313      	orrs	r3, r2
 8005008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0308 	and.w	r3, r3, #8
 8005012:	2b00      	cmp	r3, #0
 8005014:	d009      	beq.n	800502a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005016:	4b13      	ldr	r3, [pc, #76]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	490f      	ldr	r1, [pc, #60]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8005026:	4313      	orrs	r3, r2
 8005028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800502a:	f000 f825 	bl	8005078 <HAL_RCC_GetSysClockFreq>
 800502e:	4602      	mov	r2, r0
 8005030:	4b0c      	ldr	r3, [pc, #48]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	091b      	lsrs	r3, r3, #4
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	490c      	ldr	r1, [pc, #48]	@ (800506c <HAL_RCC_ClockConfig+0x26c>)
 800503c:	5ccb      	ldrb	r3, [r1, r3]
 800503e:	f003 031f 	and.w	r3, r3, #31
 8005042:	fa22 f303 	lsr.w	r3, r2, r3
 8005046:	4a0a      	ldr	r2, [pc, #40]	@ (8005070 <HAL_RCC_ClockConfig+0x270>)
 8005048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800504a:	4b0a      	ldr	r3, [pc, #40]	@ (8005074 <HAL_RCC_ClockConfig+0x274>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4618      	mov	r0, r3
 8005050:	f7fc fd84 	bl	8001b5c <HAL_InitTick>
 8005054:	4603      	mov	r3, r0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	40022000 	.word	0x40022000
 8005064:	40021000 	.word	0x40021000
 8005068:	04c4b400 	.word	0x04c4b400
 800506c:	08007f28 	.word	0x08007f28
 8005070:	20000008 	.word	0x20000008
 8005074:	2000000c 	.word	0x2000000c

08005078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800507e:	4b2c      	ldr	r3, [pc, #176]	@ (8005130 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 030c 	and.w	r3, r3, #12
 8005086:	2b04      	cmp	r3, #4
 8005088:	d102      	bne.n	8005090 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800508a:	4b2a      	ldr	r3, [pc, #168]	@ (8005134 <HAL_RCC_GetSysClockFreq+0xbc>)
 800508c:	613b      	str	r3, [r7, #16]
 800508e:	e047      	b.n	8005120 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005090:	4b27      	ldr	r3, [pc, #156]	@ (8005130 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f003 030c 	and.w	r3, r3, #12
 8005098:	2b08      	cmp	r3, #8
 800509a:	d102      	bne.n	80050a2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800509c:	4b26      	ldr	r3, [pc, #152]	@ (8005138 <HAL_RCC_GetSysClockFreq+0xc0>)
 800509e:	613b      	str	r3, [r7, #16]
 80050a0:	e03e      	b.n	8005120 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80050a2:	4b23      	ldr	r3, [pc, #140]	@ (8005130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 030c 	and.w	r3, r3, #12
 80050aa:	2b0c      	cmp	r3, #12
 80050ac:	d136      	bne.n	800511c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050ae:	4b20      	ldr	r3, [pc, #128]	@ (8005130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	091b      	lsrs	r3, r3, #4
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	3301      	adds	r3, #1
 80050c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b03      	cmp	r3, #3
 80050ca:	d10c      	bne.n	80050e6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050cc:	4a1a      	ldr	r2, [pc, #104]	@ (8005138 <HAL_RCC_GetSysClockFreq+0xc0>)
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d4:	4a16      	ldr	r2, [pc, #88]	@ (8005130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050d6:	68d2      	ldr	r2, [r2, #12]
 80050d8:	0a12      	lsrs	r2, r2, #8
 80050da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80050de:	fb02 f303 	mul.w	r3, r2, r3
 80050e2:	617b      	str	r3, [r7, #20]
      break;
 80050e4:	e00c      	b.n	8005100 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050e6:	4a13      	ldr	r2, [pc, #76]	@ (8005134 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ee:	4a10      	ldr	r2, [pc, #64]	@ (8005130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050f0:	68d2      	ldr	r2, [r2, #12]
 80050f2:	0a12      	lsrs	r2, r2, #8
 80050f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80050f8:	fb02 f303 	mul.w	r3, r2, r3
 80050fc:	617b      	str	r3, [r7, #20]
      break;
 80050fe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005100:	4b0b      	ldr	r3, [pc, #44]	@ (8005130 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	0e5b      	lsrs	r3, r3, #25
 8005106:	f003 0303 	and.w	r3, r3, #3
 800510a:	3301      	adds	r3, #1
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	fbb2 f3f3 	udiv	r3, r2, r3
 8005118:	613b      	str	r3, [r7, #16]
 800511a:	e001      	b.n	8005120 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005120:	693b      	ldr	r3, [r7, #16]
}
 8005122:	4618      	mov	r0, r3
 8005124:	371c      	adds	r7, #28
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	40021000 	.word	0x40021000
 8005134:	00f42400 	.word	0x00f42400
 8005138:	007a1200 	.word	0x007a1200

0800513c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005142:	4b1e      	ldr	r3, [pc, #120]	@ (80051bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f003 0303 	and.w	r3, r3, #3
 800514a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800514c:	4b1b      	ldr	r3, [pc, #108]	@ (80051bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	091b      	lsrs	r3, r3, #4
 8005152:	f003 030f 	and.w	r3, r3, #15
 8005156:	3301      	adds	r3, #1
 8005158:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	2b03      	cmp	r3, #3
 800515e:	d10c      	bne.n	800517a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005160:	4a17      	ldr	r2, [pc, #92]	@ (80051c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	fbb2 f3f3 	udiv	r3, r2, r3
 8005168:	4a14      	ldr	r2, [pc, #80]	@ (80051bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800516a:	68d2      	ldr	r2, [r2, #12]
 800516c:	0a12      	lsrs	r2, r2, #8
 800516e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005172:	fb02 f303 	mul.w	r3, r2, r3
 8005176:	617b      	str	r3, [r7, #20]
    break;
 8005178:	e00c      	b.n	8005194 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800517a:	4a12      	ldr	r2, [pc, #72]	@ (80051c4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005182:	4a0e      	ldr	r2, [pc, #56]	@ (80051bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005184:	68d2      	ldr	r2, [r2, #12]
 8005186:	0a12      	lsrs	r2, r2, #8
 8005188:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800518c:	fb02 f303 	mul.w	r3, r2, r3
 8005190:	617b      	str	r3, [r7, #20]
    break;
 8005192:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005194:	4b09      	ldr	r3, [pc, #36]	@ (80051bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	0e5b      	lsrs	r3, r3, #25
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	3301      	adds	r3, #1
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80051ae:	687b      	ldr	r3, [r7, #4]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	371c      	adds	r7, #28
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	40021000 	.word	0x40021000
 80051c0:	007a1200 	.word	0x007a1200
 80051c4:	00f42400 	.word	0x00f42400

080051c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051d0:	2300      	movs	r3, #0
 80051d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051d4:	2300      	movs	r3, #0
 80051d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 8098 	beq.w	8005316 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051e6:	2300      	movs	r3, #0
 80051e8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ea:	4b43      	ldr	r3, [pc, #268]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10d      	bne.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051f6:	4b40      	ldr	r3, [pc, #256]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051fa:	4a3f      	ldr	r2, [pc, #252]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80051fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005200:	6593      	str	r3, [r2, #88]	@ 0x58
 8005202:	4b3d      	ldr	r3, [pc, #244]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800520a:	60bb      	str	r3, [r7, #8]
 800520c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800520e:	2301      	movs	r3, #1
 8005210:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005212:	4b3a      	ldr	r3, [pc, #232]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a39      	ldr	r2, [pc, #228]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800521c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800521e:	f7fc fce9 	bl	8001bf4 <HAL_GetTick>
 8005222:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005224:	e009      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005226:	f7fc fce5 	bl	8001bf4 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b02      	cmp	r3, #2
 8005232:	d902      	bls.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	74fb      	strb	r3, [r7, #19]
        break;
 8005238:	e005      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800523a:	4b30      	ldr	r3, [pc, #192]	@ (80052fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005242:	2b00      	cmp	r3, #0
 8005244:	d0ef      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005246:	7cfb      	ldrb	r3, [r7, #19]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d159      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800524c:	4b2a      	ldr	r3, [pc, #168]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800524e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005252:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005256:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d01e      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	429a      	cmp	r2, r3
 8005266:	d019      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005268:	4b23      	ldr	r3, [pc, #140]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800526a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800526e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005272:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005274:	4b20      	ldr	r3, [pc, #128]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800527a:	4a1f      	ldr	r2, [pc, #124]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800527c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005280:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005284:	4b1c      	ldr	r3, [pc, #112]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800528a:	4a1b      	ldr	r2, [pc, #108]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800528c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005290:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005294:	4a18      	ldr	r2, [pc, #96]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d016      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a6:	f7fc fca5 	bl	8001bf4 <HAL_GetTick>
 80052aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052ac:	e00b      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ae:	f7fc fca1 	bl	8001bf4 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052bc:	4293      	cmp	r3, r2
 80052be:	d902      	bls.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	74fb      	strb	r3, [r7, #19]
            break;
 80052c4:	e006      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052c6:	4b0c      	ldr	r3, [pc, #48]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d0ec      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80052d4:	7cfb      	ldrb	r3, [r7, #19]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10b      	bne.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052da:	4b07      	ldr	r3, [pc, #28]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e8:	4903      	ldr	r1, [pc, #12]	@ (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80052f0:	e008      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052f2:	7cfb      	ldrb	r3, [r7, #19]
 80052f4:	74bb      	strb	r3, [r7, #18]
 80052f6:	e005      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80052f8:	40021000 	.word	0x40021000
 80052fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005300:	7cfb      	ldrb	r3, [r7, #19]
 8005302:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005304:	7c7b      	ldrb	r3, [r7, #17]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d105      	bne.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800530a:	4ba6      	ldr	r3, [pc, #664]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800530c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800530e:	4aa5      	ldr	r2, [pc, #660]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005310:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005314:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00a      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005322:	4ba0      	ldr	r3, [pc, #640]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005328:	f023 0203 	bic.w	r2, r3, #3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	499c      	ldr	r1, [pc, #624]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005332:	4313      	orrs	r3, r2
 8005334:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00a      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005344:	4b97      	ldr	r3, [pc, #604]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800534a:	f023 020c 	bic.w	r2, r3, #12
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	4994      	ldr	r1, [pc, #592]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005354:	4313      	orrs	r3, r2
 8005356:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0304 	and.w	r3, r3, #4
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005366:	4b8f      	ldr	r3, [pc, #572]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800536c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	498b      	ldr	r1, [pc, #556]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005376:	4313      	orrs	r3, r2
 8005378:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0308 	and.w	r3, r3, #8
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00a      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005388:	4b86      	ldr	r3, [pc, #536]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800538a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800538e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	4983      	ldr	r1, [pc, #524]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005398:	4313      	orrs	r3, r2
 800539a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0320 	and.w	r3, r3, #32
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053aa:	4b7e      	ldr	r3, [pc, #504]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	497a      	ldr	r1, [pc, #488]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00a      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053cc:	4b75      	ldr	r3, [pc, #468]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053d2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	4972      	ldr	r1, [pc, #456]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053ee:	4b6d      	ldr	r3, [pc, #436]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	4969      	ldr	r1, [pc, #420]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00a      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005410:	4b64      	ldr	r3, [pc, #400]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005416:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	4961      	ldr	r1, [pc, #388]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005420:	4313      	orrs	r3, r2
 8005422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00a      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005432:	4b5c      	ldr	r3, [pc, #368]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005438:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005440:	4958      	ldr	r1, [pc, #352]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005442:	4313      	orrs	r3, r2
 8005444:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005450:	2b00      	cmp	r3, #0
 8005452:	d015      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005454:	4b53      	ldr	r3, [pc, #332]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800545a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005462:	4950      	ldr	r1, [pc, #320]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005464:	4313      	orrs	r3, r2
 8005466:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005472:	d105      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005474:	4b4b      	ldr	r3, [pc, #300]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	4a4a      	ldr	r2, [pc, #296]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800547a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800547e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005488:	2b00      	cmp	r3, #0
 800548a:	d015      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800548c:	4b45      	ldr	r3, [pc, #276]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800548e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005492:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549a:	4942      	ldr	r1, [pc, #264]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800549c:	4313      	orrs	r3, r2
 800549e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054aa:	d105      	bne.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054ac:	4b3d      	ldr	r3, [pc, #244]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	4a3c      	ldr	r2, [pc, #240]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054b6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d015      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80054c4:	4b37      	ldr	r3, [pc, #220]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d2:	4934      	ldr	r1, [pc, #208]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054e2:	d105      	bne.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054e4:	4b2f      	ldr	r3, [pc, #188]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	4a2e      	ldr	r2, [pc, #184]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054ee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d015      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054fc:	4b29      	ldr	r3, [pc, #164]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80054fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005502:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800550a:	4926      	ldr	r1, [pc, #152]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800550c:	4313      	orrs	r3, r2
 800550e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005516:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800551a:	d105      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800551c:	4b21      	ldr	r3, [pc, #132]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	4a20      	ldr	r2, [pc, #128]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005522:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005526:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d015      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005534:	4b1b      	ldr	r3, [pc, #108]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800553a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005542:	4918      	ldr	r1, [pc, #96]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005544:	4313      	orrs	r3, r2
 8005546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800554e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005552:	d105      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005554:	4b13      	ldr	r3, [pc, #76]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	4a12      	ldr	r2, [pc, #72]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800555a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800555e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d015      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800556c:	4b0d      	ldr	r3, [pc, #52]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800556e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005572:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800557a:	490a      	ldr	r1, [pc, #40]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800557c:	4313      	orrs	r3, r2
 800557e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005586:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800558a:	d105      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800558c:	4b05      	ldr	r3, [pc, #20]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	4a04      	ldr	r2, [pc, #16]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005592:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005596:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005598:	7cbb      	ldrb	r3, [r7, #18]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	40021000 	.word	0x40021000

080055a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e09d      	b.n	80056f6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d108      	bne.n	80055d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055ca:	d009      	beq.n	80055e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	61da      	str	r2, [r3, #28]
 80055d2:	e005      	b.n	80055e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d106      	bne.n	8005600 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7fc f942 	bl	8001884 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2202      	movs	r2, #2
 8005604:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005616:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005620:	d902      	bls.n	8005628 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005622:	2300      	movs	r3, #0
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	e002      	b.n	800562e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005628:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800562c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005636:	d007      	beq.n	8005648 <HAL_SPI_Init+0xa0>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005640:	d002      	beq.n	8005648 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005658:	431a      	orrs	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	431a      	orrs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	431a      	orrs	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005680:	431a      	orrs	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800568a:	ea42 0103 	orr.w	r1, r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005692:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	430a      	orrs	r2, r1
 800569c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	0c1b      	lsrs	r3, r3, #16
 80056a4:	f003 0204 	and.w	r2, r3, #4
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ac:	f003 0310 	and.w	r3, r3, #16
 80056b0:	431a      	orrs	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056b6:	f003 0308 	and.w	r3, r3, #8
 80056ba:	431a      	orrs	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80056c4:	ea42 0103 	orr.w	r1, r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69da      	ldr	r2, [r3, #28]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b08a      	sub	sp, #40	@ 0x28
 8005702:	af00      	add	r7, sp, #0
 8005704:	60f8      	str	r0, [r7, #12]
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	607a      	str	r2, [r7, #4]
 800570a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800570c:	2301      	movs	r3, #1
 800570e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005710:	2300      	movs	r3, #0
 8005712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <HAL_SPI_TransmitReceive+0x26>
 8005720:	2302      	movs	r3, #2
 8005722:	e20a      	b.n	8005b3a <HAL_SPI_TransmitReceive+0x43c>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800572c:	f7fc fa62 	bl	8001bf4 <HAL_GetTick>
 8005730:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005738:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005740:	887b      	ldrh	r3, [r7, #2]
 8005742:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005744:	887b      	ldrh	r3, [r7, #2]
 8005746:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005748:	7efb      	ldrb	r3, [r7, #27]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d00e      	beq.n	800576c <HAL_SPI_TransmitReceive+0x6e>
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005754:	d106      	bne.n	8005764 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d102      	bne.n	8005764 <HAL_SPI_TransmitReceive+0x66>
 800575e:	7efb      	ldrb	r3, [r7, #27]
 8005760:	2b04      	cmp	r3, #4
 8005762:	d003      	beq.n	800576c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005764:	2302      	movs	r3, #2
 8005766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800576a:	e1e0      	b.n	8005b2e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d005      	beq.n	800577e <HAL_SPI_TransmitReceive+0x80>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <HAL_SPI_TransmitReceive+0x80>
 8005778:	887b      	ldrh	r3, [r7, #2]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d103      	bne.n	8005786 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005784:	e1d3      	b.n	8005b2e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b04      	cmp	r3, #4
 8005790:	d003      	beq.n	800579a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2205      	movs	r2, #5
 8005796:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	887a      	ldrh	r2, [r7, #2]
 80057aa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	887a      	ldrh	r2, [r7, #2]
 80057b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	887a      	ldrh	r2, [r7, #2]
 80057c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	887a      	ldrh	r2, [r7, #2]
 80057c6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80057dc:	d802      	bhi.n	80057e4 <HAL_SPI_TransmitReceive+0xe6>
 80057de:	8a3b      	ldrh	r3, [r7, #16]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d908      	bls.n	80057f6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80057f2:	605a      	str	r2, [r3, #4]
 80057f4:	e007      	b.n	8005806 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005804:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005810:	2b40      	cmp	r3, #64	@ 0x40
 8005812:	d007      	beq.n	8005824 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005822:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800582c:	f240 8081 	bls.w	8005932 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d002      	beq.n	800583e <HAL_SPI_TransmitReceive+0x140>
 8005838:	8a7b      	ldrh	r3, [r7, #18]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d16d      	bne.n	800591a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005842:	881a      	ldrh	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800584e:	1c9a      	adds	r2, r3, #2
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005858:	b29b      	uxth	r3, r3
 800585a:	3b01      	subs	r3, #1
 800585c:	b29a      	uxth	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005862:	e05a      	b.n	800591a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b02      	cmp	r3, #2
 8005870:	d11b      	bne.n	80058aa <HAL_SPI_TransmitReceive+0x1ac>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005876:	b29b      	uxth	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	d016      	beq.n	80058aa <HAL_SPI_TransmitReceive+0x1ac>
 800587c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587e:	2b01      	cmp	r3, #1
 8005880:	d113      	bne.n	80058aa <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005886:	881a      	ldrh	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005892:	1c9a      	adds	r2, r3, #2
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800589c:	b29b      	uxth	r3, r3
 800589e:	3b01      	subs	r3, #1
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058a6:	2300      	movs	r3, #0
 80058a8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d11c      	bne.n	80058f2 <HAL_SPI_TransmitReceive+0x1f4>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058be:	b29b      	uxth	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d016      	beq.n	80058f2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68da      	ldr	r2, [r3, #12]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ce:	b292      	uxth	r2, r2
 80058d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d6:	1c9a      	adds	r2, r3, #2
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058ee:	2301      	movs	r3, #1
 80058f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80058f2:	f7fc f97f 	bl	8001bf4 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058fe:	429a      	cmp	r2, r3
 8005900:	d80b      	bhi.n	800591a <HAL_SPI_TransmitReceive+0x21c>
 8005902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005904:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005908:	d007      	beq.n	800591a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005918:	e109      	b.n	8005b2e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800591e:	b29b      	uxth	r3, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	d19f      	bne.n	8005864 <HAL_SPI_TransmitReceive+0x166>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800592a:	b29b      	uxth	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	d199      	bne.n	8005864 <HAL_SPI_TransmitReceive+0x166>
 8005930:	e0e3      	b.n	8005afa <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_SPI_TransmitReceive+0x244>
 800593a:	8a7b      	ldrh	r3, [r7, #18]
 800593c:	2b01      	cmp	r3, #1
 800593e:	f040 80cf 	bne.w	8005ae0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005946:	b29b      	uxth	r3, r3
 8005948:	2b01      	cmp	r3, #1
 800594a:	d912      	bls.n	8005972 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005950:	881a      	ldrh	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800595c:	1c9a      	adds	r2, r3, #2
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005966:	b29b      	uxth	r3, r3
 8005968:	3b02      	subs	r3, #2
 800596a:	b29a      	uxth	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005970:	e0b6      	b.n	8005ae0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	330c      	adds	r3, #12
 800597c:	7812      	ldrb	r2, [r2, #0]
 800597e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005984:	1c5a      	adds	r2, r3, #1
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800598e:	b29b      	uxth	r3, r3
 8005990:	3b01      	subs	r3, #1
 8005992:	b29a      	uxth	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005998:	e0a2      	b.n	8005ae0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d134      	bne.n	8005a12 <HAL_SPI_TransmitReceive+0x314>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d02f      	beq.n	8005a12 <HAL_SPI_TransmitReceive+0x314>
 80059b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d12c      	bne.n	8005a12 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059bc:	b29b      	uxth	r3, r3
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d912      	bls.n	80059e8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c6:	881a      	ldrh	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d2:	1c9a      	adds	r2, r3, #2
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059dc:	b29b      	uxth	r3, r3
 80059de:	3b02      	subs	r3, #2
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80059e6:	e012      	b.n	8005a0e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	330c      	adds	r3, #12
 80059f2:	7812      	ldrb	r2, [r2, #0]
 80059f4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	3b01      	subs	r3, #1
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d148      	bne.n	8005ab2 <HAL_SPI_TransmitReceive+0x3b4>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d042      	beq.n	8005ab2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d923      	bls.n	8005a80 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a42:	b292      	uxth	r2, r2
 8005a44:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4a:	1c9a      	adds	r2, r3, #2
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	3b02      	subs	r3, #2
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d81f      	bhi.n	8005aae <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a7c:	605a      	str	r2, [r3, #4]
 8005a7e:	e016      	b.n	8005aae <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f103 020c 	add.w	r2, r3, #12
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8c:	7812      	ldrb	r2, [r2, #0]
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ab2:	f7fc f89f 	bl	8001bf4 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d803      	bhi.n	8005aca <HAL_SPI_TransmitReceive+0x3cc>
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ac8:	d102      	bne.n	8005ad0 <HAL_SPI_TransmitReceive+0x3d2>
 8005aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d107      	bne.n	8005ae0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005ade:	e026      	b.n	8005b2e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f47f af57 	bne.w	800599a <HAL_SPI_TransmitReceive+0x29c>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f47f af50 	bne.w	800599a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005afa:	69fa      	ldr	r2, [r7, #28]
 8005afc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 f93e 	bl	8005d80 <SPI_EndRxTxTransaction>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d005      	beq.n	8005b16 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2220      	movs	r2, #32
 8005b14:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b24:	e003      	b.n	8005b2e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005b36:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3728      	adds	r7, #40	@ 0x28
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
	...

08005b44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b088      	sub	sp, #32
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	603b      	str	r3, [r7, #0]
 8005b50:	4613      	mov	r3, r2
 8005b52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b54:	f7fc f84e 	bl	8001bf4 <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5c:	1a9b      	subs	r3, r3, r2
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	4413      	add	r3, r2
 8005b62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b64:	f7fc f846 	bl	8001bf4 <HAL_GetTick>
 8005b68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b6a:	4b39      	ldr	r3, [pc, #228]	@ (8005c50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	015b      	lsls	r3, r3, #5
 8005b70:	0d1b      	lsrs	r3, r3, #20
 8005b72:	69fa      	ldr	r2, [r7, #28]
 8005b74:	fb02 f303 	mul.w	r3, r2, r3
 8005b78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b7a:	e054      	b.n	8005c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b82:	d050      	beq.n	8005c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b84:	f7fc f836 	bl	8001bf4 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	69fa      	ldr	r2, [r7, #28]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d902      	bls.n	8005b9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d13d      	bne.n	8005c16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ba8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bb2:	d111      	bne.n	8005bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bbc:	d004      	beq.n	8005bc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bc6:	d107      	bne.n	8005bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005be0:	d10f      	bne.n	8005c02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e017      	b.n	8005c46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	3b01      	subs	r3, #1
 8005c24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	bf0c      	ite	eq
 8005c36:	2301      	moveq	r3, #1
 8005c38:	2300      	movne	r3, #0
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	79fb      	ldrb	r3, [r7, #7]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d19b      	bne.n	8005b7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3720      	adds	r7, #32
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	20000008 	.word	0x20000008

08005c54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b08a      	sub	sp, #40	@ 0x28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
 8005c60:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005c62:	2300      	movs	r3, #0
 8005c64:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005c66:	f7fb ffc5 	bl	8001bf4 <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c6e:	1a9b      	subs	r3, r3, r2
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	4413      	add	r3, r2
 8005c74:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005c76:	f7fb ffbd 	bl	8001bf4 <HAL_GetTick>
 8005c7a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	330c      	adds	r3, #12
 8005c82:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005c84:	4b3d      	ldr	r3, [pc, #244]	@ (8005d7c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	4613      	mov	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	00da      	lsls	r2, r3, #3
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	0d1b      	lsrs	r3, r3, #20
 8005c94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c96:	fb02 f303 	mul.w	r3, r2, r3
 8005c9a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005c9c:	e060      	b.n	8005d60 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005ca4:	d107      	bne.n	8005cb6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d104      	bne.n	8005cb6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005cb4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cbc:	d050      	beq.n	8005d60 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005cbe:	f7fb ff99 	bl	8001bf4 <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d902      	bls.n	8005cd4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d13d      	bne.n	8005d50 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ce2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cec:	d111      	bne.n	8005d12 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cf6:	d004      	beq.n	8005d02 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d00:	d107      	bne.n	8005d12 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d1a:	d10f      	bne.n	8005d3c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e010      	b.n	8005d72 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d101      	bne.n	8005d5a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005d56:	2300      	movs	r3, #0
 8005d58:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689a      	ldr	r2, [r3, #8]
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	4013      	ands	r3, r2
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d196      	bne.n	8005c9e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3728      	adds	r7, #40	@ 0x28
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20000008 	.word	0x20000008

08005d80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af02      	add	r7, sp, #8
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f7ff ff5b 	bl	8005c54 <SPI_WaitFifoStateUntilTimeout>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d007      	beq.n	8005db4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005da8:	f043 0220 	orr.w	r2, r3, #32
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e027      	b.n	8005e04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	2180      	movs	r1, #128	@ 0x80
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f7ff fec0 	bl	8005b44 <SPI_WaitFlagStateUntilTimeout>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d007      	beq.n	8005dda <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dce:	f043 0220 	orr.w	r2, r3, #32
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e014      	b.n	8005e04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f7ff ff34 	bl	8005c54 <SPI_WaitFifoStateUntilTimeout>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d007      	beq.n	8005e02 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005df6:	f043 0220 	orr.w	r2, r3, #32
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e000      	b.n	8005e04 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e049      	b.n	8005eb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d106      	bne.n	8005e38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7fb fd6a 	bl	800190c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	3304      	adds	r3, #4
 8005e48:	4619      	mov	r1, r3
 8005e4a:	4610      	mov	r0, r2
 8005e4c:	f000 faa4 	bl	8006398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b082      	sub	sp, #8
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e049      	b.n	8005f60 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d106      	bne.n	8005ee6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f841 	bl	8005f68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2202      	movs	r2, #2
 8005eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	4610      	mov	r0, r2
 8005efa:	f000 fa4d 	bl	8006398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d101      	bne.n	8005f9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f96:	2302      	movs	r3, #2
 8005f98:	e0ff      	b.n	800619a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b14      	cmp	r3, #20
 8005fa6:	f200 80f0 	bhi.w	800618a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005faa:	a201      	add	r2, pc, #4	@ (adr r2, 8005fb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb0:	08006005 	.word	0x08006005
 8005fb4:	0800618b 	.word	0x0800618b
 8005fb8:	0800618b 	.word	0x0800618b
 8005fbc:	0800618b 	.word	0x0800618b
 8005fc0:	08006045 	.word	0x08006045
 8005fc4:	0800618b 	.word	0x0800618b
 8005fc8:	0800618b 	.word	0x0800618b
 8005fcc:	0800618b 	.word	0x0800618b
 8005fd0:	08006087 	.word	0x08006087
 8005fd4:	0800618b 	.word	0x0800618b
 8005fd8:	0800618b 	.word	0x0800618b
 8005fdc:	0800618b 	.word	0x0800618b
 8005fe0:	080060c7 	.word	0x080060c7
 8005fe4:	0800618b 	.word	0x0800618b
 8005fe8:	0800618b 	.word	0x0800618b
 8005fec:	0800618b 	.word	0x0800618b
 8005ff0:	08006109 	.word	0x08006109
 8005ff4:	0800618b 	.word	0x0800618b
 8005ff8:	0800618b 	.word	0x0800618b
 8005ffc:	0800618b 	.word	0x0800618b
 8006000:	08006149 	.word	0x08006149
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68b9      	ldr	r1, [r7, #8]
 800600a:	4618      	mov	r0, r3
 800600c:	f000 fa60 	bl	80064d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	699a      	ldr	r2, [r3, #24]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0208 	orr.w	r2, r2, #8
 800601e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	699a      	ldr	r2, [r3, #24]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0204 	bic.w	r2, r2, #4
 800602e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6999      	ldr	r1, [r3, #24]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	691a      	ldr	r2, [r3, #16]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	619a      	str	r2, [r3, #24]
      break;
 8006042:	e0a5      	b.n	8006190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68b9      	ldr	r1, [r7, #8]
 800604a:	4618      	mov	r0, r3
 800604c:	f000 fad0 	bl	80065f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	699a      	ldr	r2, [r3, #24]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800605e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	699a      	ldr	r2, [r3, #24]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800606e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6999      	ldr	r1, [r3, #24]
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	021a      	lsls	r2, r3, #8
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	619a      	str	r2, [r3, #24]
      break;
 8006084:	e084      	b.n	8006190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68b9      	ldr	r1, [r7, #8]
 800608c:	4618      	mov	r0, r3
 800608e:	f000 fb39 	bl	8006704 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	69da      	ldr	r2, [r3, #28]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f042 0208 	orr.w	r2, r2, #8
 80060a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	69da      	ldr	r2, [r3, #28]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 0204 	bic.w	r2, r2, #4
 80060b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	69d9      	ldr	r1, [r3, #28]
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	691a      	ldr	r2, [r3, #16]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	61da      	str	r2, [r3, #28]
      break;
 80060c4:	e064      	b.n	8006190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68b9      	ldr	r1, [r7, #8]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f000 fba1 	bl	8006814 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	69da      	ldr	r2, [r3, #28]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	69da      	ldr	r2, [r3, #28]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69d9      	ldr	r1, [r3, #28]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	021a      	lsls	r2, r3, #8
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	430a      	orrs	r2, r1
 8006104:	61da      	str	r2, [r3, #28]
      break;
 8006106:	e043      	b.n	8006190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68b9      	ldr	r1, [r7, #8]
 800610e:	4618      	mov	r0, r3
 8006110:	f000 fc0a 	bl	8006928 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f042 0208 	orr.w	r2, r2, #8
 8006122:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 0204 	bic.w	r2, r2, #4
 8006132:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	691a      	ldr	r2, [r3, #16]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006146:	e023      	b.n	8006190 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68b9      	ldr	r1, [r7, #8]
 800614e:	4618      	mov	r0, r3
 8006150:	f000 fc4e 	bl	80069f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006162:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006172:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	021a      	lsls	r2, r3, #8
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	430a      	orrs	r2, r1
 8006186:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006188:	e002      	b.n	8006190 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	75fb      	strb	r3, [r7, #23]
      break;
 800618e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006198:	7dfb      	ldrb	r3, [r7, #23]
}
 800619a:	4618      	mov	r0, r3
 800619c:	3718      	adds	r7, #24
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop

080061a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d101      	bne.n	80061c0 <HAL_TIM_ConfigClockSource+0x1c>
 80061bc:	2302      	movs	r3, #2
 80061be:	e0de      	b.n	800637e <HAL_TIM_ConfigClockSource+0x1da>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80061de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80061e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a63      	ldr	r2, [pc, #396]	@ (8006388 <HAL_TIM_ConfigClockSource+0x1e4>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	f000 80a9 	beq.w	8006352 <HAL_TIM_ConfigClockSource+0x1ae>
 8006200:	4a61      	ldr	r2, [pc, #388]	@ (8006388 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006202:	4293      	cmp	r3, r2
 8006204:	f200 80ae 	bhi.w	8006364 <HAL_TIM_ConfigClockSource+0x1c0>
 8006208:	4a60      	ldr	r2, [pc, #384]	@ (800638c <HAL_TIM_ConfigClockSource+0x1e8>)
 800620a:	4293      	cmp	r3, r2
 800620c:	f000 80a1 	beq.w	8006352 <HAL_TIM_ConfigClockSource+0x1ae>
 8006210:	4a5e      	ldr	r2, [pc, #376]	@ (800638c <HAL_TIM_ConfigClockSource+0x1e8>)
 8006212:	4293      	cmp	r3, r2
 8006214:	f200 80a6 	bhi.w	8006364 <HAL_TIM_ConfigClockSource+0x1c0>
 8006218:	4a5d      	ldr	r2, [pc, #372]	@ (8006390 <HAL_TIM_ConfigClockSource+0x1ec>)
 800621a:	4293      	cmp	r3, r2
 800621c:	f000 8099 	beq.w	8006352 <HAL_TIM_ConfigClockSource+0x1ae>
 8006220:	4a5b      	ldr	r2, [pc, #364]	@ (8006390 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006222:	4293      	cmp	r3, r2
 8006224:	f200 809e 	bhi.w	8006364 <HAL_TIM_ConfigClockSource+0x1c0>
 8006228:	4a5a      	ldr	r2, [pc, #360]	@ (8006394 <HAL_TIM_ConfigClockSource+0x1f0>)
 800622a:	4293      	cmp	r3, r2
 800622c:	f000 8091 	beq.w	8006352 <HAL_TIM_ConfigClockSource+0x1ae>
 8006230:	4a58      	ldr	r2, [pc, #352]	@ (8006394 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	f200 8096 	bhi.w	8006364 <HAL_TIM_ConfigClockSource+0x1c0>
 8006238:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800623c:	f000 8089 	beq.w	8006352 <HAL_TIM_ConfigClockSource+0x1ae>
 8006240:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006244:	f200 808e 	bhi.w	8006364 <HAL_TIM_ConfigClockSource+0x1c0>
 8006248:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800624c:	d03e      	beq.n	80062cc <HAL_TIM_ConfigClockSource+0x128>
 800624e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006252:	f200 8087 	bhi.w	8006364 <HAL_TIM_ConfigClockSource+0x1c0>
 8006256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800625a:	f000 8086 	beq.w	800636a <HAL_TIM_ConfigClockSource+0x1c6>
 800625e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006262:	d87f      	bhi.n	8006364 <HAL_TIM_ConfigClockSource+0x1c0>
 8006264:	2b70      	cmp	r3, #112	@ 0x70
 8006266:	d01a      	beq.n	800629e <HAL_TIM_ConfigClockSource+0xfa>
 8006268:	2b70      	cmp	r3, #112	@ 0x70
 800626a:	d87b      	bhi.n	8006364 <HAL_TIM_ConfigClockSource+0x1c0>
 800626c:	2b60      	cmp	r3, #96	@ 0x60
 800626e:	d050      	beq.n	8006312 <HAL_TIM_ConfigClockSource+0x16e>
 8006270:	2b60      	cmp	r3, #96	@ 0x60
 8006272:	d877      	bhi.n	8006364 <HAL_TIM_ConfigClockSource+0x1c0>
 8006274:	2b50      	cmp	r3, #80	@ 0x50
 8006276:	d03c      	beq.n	80062f2 <HAL_TIM_ConfigClockSource+0x14e>
 8006278:	2b50      	cmp	r3, #80	@ 0x50
 800627a:	d873      	bhi.n	8006364 <HAL_TIM_ConfigClockSource+0x1c0>
 800627c:	2b40      	cmp	r3, #64	@ 0x40
 800627e:	d058      	beq.n	8006332 <HAL_TIM_ConfigClockSource+0x18e>
 8006280:	2b40      	cmp	r3, #64	@ 0x40
 8006282:	d86f      	bhi.n	8006364 <HAL_TIM_ConfigClockSource+0x1c0>
 8006284:	2b30      	cmp	r3, #48	@ 0x30
 8006286:	d064      	beq.n	8006352 <HAL_TIM_ConfigClockSource+0x1ae>
 8006288:	2b30      	cmp	r3, #48	@ 0x30
 800628a:	d86b      	bhi.n	8006364 <HAL_TIM_ConfigClockSource+0x1c0>
 800628c:	2b20      	cmp	r3, #32
 800628e:	d060      	beq.n	8006352 <HAL_TIM_ConfigClockSource+0x1ae>
 8006290:	2b20      	cmp	r3, #32
 8006292:	d867      	bhi.n	8006364 <HAL_TIM_ConfigClockSource+0x1c0>
 8006294:	2b00      	cmp	r3, #0
 8006296:	d05c      	beq.n	8006352 <HAL_TIM_ConfigClockSource+0x1ae>
 8006298:	2b10      	cmp	r3, #16
 800629a:	d05a      	beq.n	8006352 <HAL_TIM_ConfigClockSource+0x1ae>
 800629c:	e062      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062ae:	f000 fc81 	bl	8006bb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80062c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	609a      	str	r2, [r3, #8]
      break;
 80062ca:	e04f      	b.n	800636c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062dc:	f000 fc6a 	bl	8006bb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689a      	ldr	r2, [r3, #8]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062ee:	609a      	str	r2, [r3, #8]
      break;
 80062f0:	e03c      	b.n	800636c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062fe:	461a      	mov	r2, r3
 8006300:	f000 fbdc 	bl	8006abc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2150      	movs	r1, #80	@ 0x50
 800630a:	4618      	mov	r0, r3
 800630c:	f000 fc35 	bl	8006b7a <TIM_ITRx_SetConfig>
      break;
 8006310:	e02c      	b.n	800636c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800631e:	461a      	mov	r2, r3
 8006320:	f000 fbfb 	bl	8006b1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2160      	movs	r1, #96	@ 0x60
 800632a:	4618      	mov	r0, r3
 800632c:	f000 fc25 	bl	8006b7a <TIM_ITRx_SetConfig>
      break;
 8006330:	e01c      	b.n	800636c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800633e:	461a      	mov	r2, r3
 8006340:	f000 fbbc 	bl	8006abc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2140      	movs	r1, #64	@ 0x40
 800634a:	4618      	mov	r0, r3
 800634c:	f000 fc15 	bl	8006b7a <TIM_ITRx_SetConfig>
      break;
 8006350:	e00c      	b.n	800636c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4619      	mov	r1, r3
 800635c:	4610      	mov	r0, r2
 800635e:	f000 fc0c 	bl	8006b7a <TIM_ITRx_SetConfig>
      break;
 8006362:	e003      	b.n	800636c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	73fb      	strb	r3, [r7, #15]
      break;
 8006368:	e000      	b.n	800636c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800636a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800637c:	7bfb      	ldrb	r3, [r7, #15]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	00100070 	.word	0x00100070
 800638c:	00100040 	.word	0x00100040
 8006390:	00100030 	.word	0x00100030
 8006394:	00100020 	.word	0x00100020

08006398 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a42      	ldr	r2, [pc, #264]	@ (80064b4 <TIM_Base_SetConfig+0x11c>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d00f      	beq.n	80063d0 <TIM_Base_SetConfig+0x38>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063b6:	d00b      	beq.n	80063d0 <TIM_Base_SetConfig+0x38>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a3f      	ldr	r2, [pc, #252]	@ (80064b8 <TIM_Base_SetConfig+0x120>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d007      	beq.n	80063d0 <TIM_Base_SetConfig+0x38>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a3e      	ldr	r2, [pc, #248]	@ (80064bc <TIM_Base_SetConfig+0x124>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d003      	beq.n	80063d0 <TIM_Base_SetConfig+0x38>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a3d      	ldr	r2, [pc, #244]	@ (80064c0 <TIM_Base_SetConfig+0x128>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d108      	bne.n	80063e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	4313      	orrs	r3, r2
 80063e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a33      	ldr	r2, [pc, #204]	@ (80064b4 <TIM_Base_SetConfig+0x11c>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d01b      	beq.n	8006422 <TIM_Base_SetConfig+0x8a>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063f0:	d017      	beq.n	8006422 <TIM_Base_SetConfig+0x8a>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a30      	ldr	r2, [pc, #192]	@ (80064b8 <TIM_Base_SetConfig+0x120>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d013      	beq.n	8006422 <TIM_Base_SetConfig+0x8a>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a2f      	ldr	r2, [pc, #188]	@ (80064bc <TIM_Base_SetConfig+0x124>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d00f      	beq.n	8006422 <TIM_Base_SetConfig+0x8a>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a2e      	ldr	r2, [pc, #184]	@ (80064c0 <TIM_Base_SetConfig+0x128>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00b      	beq.n	8006422 <TIM_Base_SetConfig+0x8a>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a2d      	ldr	r2, [pc, #180]	@ (80064c4 <TIM_Base_SetConfig+0x12c>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d007      	beq.n	8006422 <TIM_Base_SetConfig+0x8a>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a2c      	ldr	r2, [pc, #176]	@ (80064c8 <TIM_Base_SetConfig+0x130>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d003      	beq.n	8006422 <TIM_Base_SetConfig+0x8a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a2b      	ldr	r2, [pc, #172]	@ (80064cc <TIM_Base_SetConfig+0x134>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d108      	bne.n	8006434 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a16      	ldr	r2, [pc, #88]	@ (80064b4 <TIM_Base_SetConfig+0x11c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d00f      	beq.n	8006480 <TIM_Base_SetConfig+0xe8>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a17      	ldr	r2, [pc, #92]	@ (80064c0 <TIM_Base_SetConfig+0x128>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00b      	beq.n	8006480 <TIM_Base_SetConfig+0xe8>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a16      	ldr	r2, [pc, #88]	@ (80064c4 <TIM_Base_SetConfig+0x12c>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d007      	beq.n	8006480 <TIM_Base_SetConfig+0xe8>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a15      	ldr	r2, [pc, #84]	@ (80064c8 <TIM_Base_SetConfig+0x130>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d003      	beq.n	8006480 <TIM_Base_SetConfig+0xe8>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a14      	ldr	r2, [pc, #80]	@ (80064cc <TIM_Base_SetConfig+0x134>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d103      	bne.n	8006488 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	691a      	ldr	r2, [r3, #16]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b01      	cmp	r3, #1
 8006498:	d105      	bne.n	80064a6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	f023 0201 	bic.w	r2, r3, #1
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	611a      	str	r2, [r3, #16]
  }
}
 80064a6:	bf00      	nop
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	40012c00 	.word	0x40012c00
 80064b8:	40000400 	.word	0x40000400
 80064bc:	40000800 	.word	0x40000800
 80064c0:	40013400 	.word	0x40013400
 80064c4:	40014000 	.word	0x40014000
 80064c8:	40014400 	.word	0x40014400
 80064cc:	40014800 	.word	0x40014800

080064d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b087      	sub	sp, #28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	f023 0201 	bic.w	r2, r3, #1
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f023 0303 	bic.w	r3, r3, #3
 800650a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	4313      	orrs	r3, r2
 8006514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f023 0302 	bic.w	r3, r3, #2
 800651c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	4313      	orrs	r3, r2
 8006526:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a2c      	ldr	r2, [pc, #176]	@ (80065dc <TIM_OC1_SetConfig+0x10c>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d00f      	beq.n	8006550 <TIM_OC1_SetConfig+0x80>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a2b      	ldr	r2, [pc, #172]	@ (80065e0 <TIM_OC1_SetConfig+0x110>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d00b      	beq.n	8006550 <TIM_OC1_SetConfig+0x80>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a2a      	ldr	r2, [pc, #168]	@ (80065e4 <TIM_OC1_SetConfig+0x114>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d007      	beq.n	8006550 <TIM_OC1_SetConfig+0x80>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a29      	ldr	r2, [pc, #164]	@ (80065e8 <TIM_OC1_SetConfig+0x118>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d003      	beq.n	8006550 <TIM_OC1_SetConfig+0x80>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a28      	ldr	r2, [pc, #160]	@ (80065ec <TIM_OC1_SetConfig+0x11c>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d10c      	bne.n	800656a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f023 0308 	bic.w	r3, r3, #8
 8006556:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	4313      	orrs	r3, r2
 8006560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f023 0304 	bic.w	r3, r3, #4
 8006568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a1b      	ldr	r2, [pc, #108]	@ (80065dc <TIM_OC1_SetConfig+0x10c>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d00f      	beq.n	8006592 <TIM_OC1_SetConfig+0xc2>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a1a      	ldr	r2, [pc, #104]	@ (80065e0 <TIM_OC1_SetConfig+0x110>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d00b      	beq.n	8006592 <TIM_OC1_SetConfig+0xc2>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a19      	ldr	r2, [pc, #100]	@ (80065e4 <TIM_OC1_SetConfig+0x114>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d007      	beq.n	8006592 <TIM_OC1_SetConfig+0xc2>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a18      	ldr	r2, [pc, #96]	@ (80065e8 <TIM_OC1_SetConfig+0x118>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d003      	beq.n	8006592 <TIM_OC1_SetConfig+0xc2>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a17      	ldr	r2, [pc, #92]	@ (80065ec <TIM_OC1_SetConfig+0x11c>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d111      	bne.n	80065b6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006598:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	685a      	ldr	r2, [r3, #4]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	621a      	str	r2, [r3, #32]
}
 80065d0:	bf00      	nop
 80065d2:	371c      	adds	r7, #28
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr
 80065dc:	40012c00 	.word	0x40012c00
 80065e0:	40013400 	.word	0x40013400
 80065e4:	40014000 	.word	0x40014000
 80065e8:	40014400 	.word	0x40014400
 80065ec:	40014800 	.word	0x40014800

080065f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	f023 0210 	bic.w	r2, r3, #16
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800661e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800662a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	021b      	lsls	r3, r3, #8
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	4313      	orrs	r3, r2
 8006636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	f023 0320 	bic.w	r3, r3, #32
 800663e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	011b      	lsls	r3, r3, #4
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	4313      	orrs	r3, r2
 800664a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a28      	ldr	r2, [pc, #160]	@ (80066f0 <TIM_OC2_SetConfig+0x100>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d003      	beq.n	800665c <TIM_OC2_SetConfig+0x6c>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a27      	ldr	r2, [pc, #156]	@ (80066f4 <TIM_OC2_SetConfig+0x104>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d10d      	bne.n	8006678 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	011b      	lsls	r3, r3, #4
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	4313      	orrs	r3, r2
 800666e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006676:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a1d      	ldr	r2, [pc, #116]	@ (80066f0 <TIM_OC2_SetConfig+0x100>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d00f      	beq.n	80066a0 <TIM_OC2_SetConfig+0xb0>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a1c      	ldr	r2, [pc, #112]	@ (80066f4 <TIM_OC2_SetConfig+0x104>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d00b      	beq.n	80066a0 <TIM_OC2_SetConfig+0xb0>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a1b      	ldr	r2, [pc, #108]	@ (80066f8 <TIM_OC2_SetConfig+0x108>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d007      	beq.n	80066a0 <TIM_OC2_SetConfig+0xb0>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a1a      	ldr	r2, [pc, #104]	@ (80066fc <TIM_OC2_SetConfig+0x10c>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d003      	beq.n	80066a0 <TIM_OC2_SetConfig+0xb0>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a19      	ldr	r2, [pc, #100]	@ (8006700 <TIM_OC2_SetConfig+0x110>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d113      	bne.n	80066c8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	621a      	str	r2, [r3, #32]
}
 80066e2:	bf00      	nop
 80066e4:	371c      	adds	r7, #28
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	40012c00 	.word	0x40012c00
 80066f4:	40013400 	.word	0x40013400
 80066f8:	40014000 	.word	0x40014000
 80066fc:	40014400 	.word	0x40014400
 8006700:	40014800 	.word	0x40014800

08006704 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	69db      	ldr	r3, [r3, #28]
 800672a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 0303 	bic.w	r3, r3, #3
 800673e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	4313      	orrs	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	021b      	lsls	r3, r3, #8
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	4313      	orrs	r3, r2
 800675c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a27      	ldr	r2, [pc, #156]	@ (8006800 <TIM_OC3_SetConfig+0xfc>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d003      	beq.n	800676e <TIM_OC3_SetConfig+0x6a>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a26      	ldr	r2, [pc, #152]	@ (8006804 <TIM_OC3_SetConfig+0x100>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d10d      	bne.n	800678a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006774:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	021b      	lsls	r3, r3, #8
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	4313      	orrs	r3, r2
 8006780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a1c      	ldr	r2, [pc, #112]	@ (8006800 <TIM_OC3_SetConfig+0xfc>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d00f      	beq.n	80067b2 <TIM_OC3_SetConfig+0xae>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a1b      	ldr	r2, [pc, #108]	@ (8006804 <TIM_OC3_SetConfig+0x100>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d00b      	beq.n	80067b2 <TIM_OC3_SetConfig+0xae>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a1a      	ldr	r2, [pc, #104]	@ (8006808 <TIM_OC3_SetConfig+0x104>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d007      	beq.n	80067b2 <TIM_OC3_SetConfig+0xae>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a19      	ldr	r2, [pc, #100]	@ (800680c <TIM_OC3_SetConfig+0x108>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d003      	beq.n	80067b2 <TIM_OC3_SetConfig+0xae>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a18      	ldr	r2, [pc, #96]	@ (8006810 <TIM_OC3_SetConfig+0x10c>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d113      	bne.n	80067da <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	011b      	lsls	r3, r3, #4
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	011b      	lsls	r3, r3, #4
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	621a      	str	r2, [r3, #32]
}
 80067f4:	bf00      	nop
 80067f6:	371c      	adds	r7, #28
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	40012c00 	.word	0x40012c00
 8006804:	40013400 	.word	0x40013400
 8006808:	40014000 	.word	0x40014000
 800680c:	40014400 	.word	0x40014400
 8006810:	40014800 	.word	0x40014800

08006814 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006814:	b480      	push	{r7}
 8006816:	b087      	sub	sp, #28
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006842:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800684e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	021b      	lsls	r3, r3, #8
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	4313      	orrs	r3, r2
 800685a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006862:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	031b      	lsls	r3, r3, #12
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	4313      	orrs	r3, r2
 800686e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a28      	ldr	r2, [pc, #160]	@ (8006914 <TIM_OC4_SetConfig+0x100>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d003      	beq.n	8006880 <TIM_OC4_SetConfig+0x6c>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a27      	ldr	r2, [pc, #156]	@ (8006918 <TIM_OC4_SetConfig+0x104>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d10d      	bne.n	800689c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	031b      	lsls	r3, r3, #12
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	4313      	orrs	r3, r2
 8006892:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800689a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a1d      	ldr	r2, [pc, #116]	@ (8006914 <TIM_OC4_SetConfig+0x100>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d00f      	beq.n	80068c4 <TIM_OC4_SetConfig+0xb0>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a1c      	ldr	r2, [pc, #112]	@ (8006918 <TIM_OC4_SetConfig+0x104>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d00b      	beq.n	80068c4 <TIM_OC4_SetConfig+0xb0>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a1b      	ldr	r2, [pc, #108]	@ (800691c <TIM_OC4_SetConfig+0x108>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d007      	beq.n	80068c4 <TIM_OC4_SetConfig+0xb0>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a1a      	ldr	r2, [pc, #104]	@ (8006920 <TIM_OC4_SetConfig+0x10c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d003      	beq.n	80068c4 <TIM_OC4_SetConfig+0xb0>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a19      	ldr	r2, [pc, #100]	@ (8006924 <TIM_OC4_SetConfig+0x110>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d113      	bne.n	80068ec <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068ca:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068d2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	019b      	lsls	r3, r3, #6
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	4313      	orrs	r3, r2
 80068de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	019b      	lsls	r3, r3, #6
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	621a      	str	r2, [r3, #32]
}
 8006906:	bf00      	nop
 8006908:	371c      	adds	r7, #28
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	40012c00 	.word	0x40012c00
 8006918:	40013400 	.word	0x40013400
 800691c:	40014000 	.word	0x40014000
 8006920:	40014400 	.word	0x40014400
 8006924:	40014800 	.word	0x40014800

08006928 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006928:	b480      	push	{r7}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800694e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800695a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	4313      	orrs	r3, r2
 8006964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800696c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	041b      	lsls	r3, r3, #16
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	4313      	orrs	r3, r2
 8006978:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a17      	ldr	r2, [pc, #92]	@ (80069dc <TIM_OC5_SetConfig+0xb4>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d00f      	beq.n	80069a2 <TIM_OC5_SetConfig+0x7a>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a16      	ldr	r2, [pc, #88]	@ (80069e0 <TIM_OC5_SetConfig+0xb8>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d00b      	beq.n	80069a2 <TIM_OC5_SetConfig+0x7a>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a15      	ldr	r2, [pc, #84]	@ (80069e4 <TIM_OC5_SetConfig+0xbc>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d007      	beq.n	80069a2 <TIM_OC5_SetConfig+0x7a>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a14      	ldr	r2, [pc, #80]	@ (80069e8 <TIM_OC5_SetConfig+0xc0>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d003      	beq.n	80069a2 <TIM_OC5_SetConfig+0x7a>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a13      	ldr	r2, [pc, #76]	@ (80069ec <TIM_OC5_SetConfig+0xc4>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d109      	bne.n	80069b6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	021b      	lsls	r3, r3, #8
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	621a      	str	r2, [r3, #32]
}
 80069d0:	bf00      	nop
 80069d2:	371c      	adds	r7, #28
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	40012c00 	.word	0x40012c00
 80069e0:	40013400 	.word	0x40013400
 80069e4:	40014000 	.word	0x40014000
 80069e8:	40014400 	.word	0x40014400
 80069ec:	40014800 	.word	0x40014800

080069f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b087      	sub	sp, #28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	021b      	lsls	r3, r3, #8
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	051b      	lsls	r3, r3, #20
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a18      	ldr	r2, [pc, #96]	@ (8006aa8 <TIM_OC6_SetConfig+0xb8>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d00f      	beq.n	8006a6c <TIM_OC6_SetConfig+0x7c>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a17      	ldr	r2, [pc, #92]	@ (8006aac <TIM_OC6_SetConfig+0xbc>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d00b      	beq.n	8006a6c <TIM_OC6_SetConfig+0x7c>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a16      	ldr	r2, [pc, #88]	@ (8006ab0 <TIM_OC6_SetConfig+0xc0>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d007      	beq.n	8006a6c <TIM_OC6_SetConfig+0x7c>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a15      	ldr	r2, [pc, #84]	@ (8006ab4 <TIM_OC6_SetConfig+0xc4>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d003      	beq.n	8006a6c <TIM_OC6_SetConfig+0x7c>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a14      	ldr	r2, [pc, #80]	@ (8006ab8 <TIM_OC6_SetConfig+0xc8>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d109      	bne.n	8006a80 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	029b      	lsls	r3, r3, #10
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	621a      	str	r2, [r3, #32]
}
 8006a9a:	bf00      	nop
 8006a9c:	371c      	adds	r7, #28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	40012c00 	.word	0x40012c00
 8006aac:	40013400 	.word	0x40013400
 8006ab0:	40014000 	.word	0x40014000
 8006ab4:	40014400 	.word	0x40014400
 8006ab8:	40014800 	.word	0x40014800

08006abc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6a1b      	ldr	r3, [r3, #32]
 8006acc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	f023 0201 	bic.w	r2, r3, #1
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ae6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	011b      	lsls	r3, r3, #4
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f023 030a 	bic.w	r3, r3, #10
 8006af8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	621a      	str	r2, [r3, #32]
}
 8006b0e:	bf00      	nop
 8006b10:	371c      	adds	r7, #28
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b087      	sub	sp, #28
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	60f8      	str	r0, [r7, #12]
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	f023 0210 	bic.w	r2, r3, #16
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	031b      	lsls	r3, r3, #12
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b56:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	011b      	lsls	r3, r3, #4
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	621a      	str	r2, [r3, #32]
}
 8006b6e:	bf00      	nop
 8006b70:	371c      	adds	r7, #28
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b085      	sub	sp, #20
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
 8006b82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006b90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	f043 0307 	orr.w	r3, r3, #7
 8006ba0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	609a      	str	r2, [r3, #8]
}
 8006ba8:	bf00      	nop
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
 8006bc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006bce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	021a      	lsls	r2, r3, #8
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	609a      	str	r2, [r3, #8]
}
 8006be8:	bf00      	nop
 8006bea:	371c      	adds	r7, #28
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d101      	bne.n	8006c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c08:	2302      	movs	r3, #2
 8006c0a:	e065      	b.n	8006cd8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2202      	movs	r2, #2
 8006c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a2c      	ldr	r2, [pc, #176]	@ (8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d004      	beq.n	8006c40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a2b      	ldr	r2, [pc, #172]	@ (8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d108      	bne.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006c46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006c58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a1b      	ldr	r2, [pc, #108]	@ (8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d018      	beq.n	8006cac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c82:	d013      	beq.n	8006cac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a18      	ldr	r2, [pc, #96]	@ (8006cec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d00e      	beq.n	8006cac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a17      	ldr	r2, [pc, #92]	@ (8006cf0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d009      	beq.n	8006cac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a12      	ldr	r2, [pc, #72]	@ (8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d004      	beq.n	8006cac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a13      	ldr	r2, [pc, #76]	@ (8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d10c      	bne.n	8006cc6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cb2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68ba      	ldr	r2, [r7, #8]
 8006cc4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	40012c00 	.word	0x40012c00
 8006ce8:	40013400 	.word	0x40013400
 8006cec:	40000400 	.word	0x40000400
 8006cf0:	40000800 	.word	0x40000800
 8006cf4:	40014000 	.word	0x40014000

08006cf8 <std>:
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	b510      	push	{r4, lr}
 8006cfc:	4604      	mov	r4, r0
 8006cfe:	e9c0 3300 	strd	r3, r3, [r0]
 8006d02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d06:	6083      	str	r3, [r0, #8]
 8006d08:	8181      	strh	r1, [r0, #12]
 8006d0a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d0c:	81c2      	strh	r2, [r0, #14]
 8006d0e:	6183      	str	r3, [r0, #24]
 8006d10:	4619      	mov	r1, r3
 8006d12:	2208      	movs	r2, #8
 8006d14:	305c      	adds	r0, #92	@ 0x5c
 8006d16:	f000 f9f9 	bl	800710c <memset>
 8006d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d50 <std+0x58>)
 8006d1c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d54 <std+0x5c>)
 8006d20:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d22:	4b0d      	ldr	r3, [pc, #52]	@ (8006d58 <std+0x60>)
 8006d24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d26:	4b0d      	ldr	r3, [pc, #52]	@ (8006d5c <std+0x64>)
 8006d28:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d60 <std+0x68>)
 8006d2c:	6224      	str	r4, [r4, #32]
 8006d2e:	429c      	cmp	r4, r3
 8006d30:	d006      	beq.n	8006d40 <std+0x48>
 8006d32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d36:	4294      	cmp	r4, r2
 8006d38:	d002      	beq.n	8006d40 <std+0x48>
 8006d3a:	33d0      	adds	r3, #208	@ 0xd0
 8006d3c:	429c      	cmp	r4, r3
 8006d3e:	d105      	bne.n	8006d4c <std+0x54>
 8006d40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d48:	f000 ba58 	b.w	80071fc <__retarget_lock_init_recursive>
 8006d4c:	bd10      	pop	{r4, pc}
 8006d4e:	bf00      	nop
 8006d50:	08006f5d 	.word	0x08006f5d
 8006d54:	08006f7f 	.word	0x08006f7f
 8006d58:	08006fb7 	.word	0x08006fb7
 8006d5c:	08006fdb 	.word	0x08006fdb
 8006d60:	20000288 	.word	0x20000288

08006d64 <stdio_exit_handler>:
 8006d64:	4a02      	ldr	r2, [pc, #8]	@ (8006d70 <stdio_exit_handler+0xc>)
 8006d66:	4903      	ldr	r1, [pc, #12]	@ (8006d74 <stdio_exit_handler+0x10>)
 8006d68:	4803      	ldr	r0, [pc, #12]	@ (8006d78 <stdio_exit_handler+0x14>)
 8006d6a:	f000 b869 	b.w	8006e40 <_fwalk_sglue>
 8006d6e:	bf00      	nop
 8006d70:	20000014 	.word	0x20000014
 8006d74:	08007a9d 	.word	0x08007a9d
 8006d78:	20000024 	.word	0x20000024

08006d7c <cleanup_stdio>:
 8006d7c:	6841      	ldr	r1, [r0, #4]
 8006d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8006db0 <cleanup_stdio+0x34>)
 8006d80:	4299      	cmp	r1, r3
 8006d82:	b510      	push	{r4, lr}
 8006d84:	4604      	mov	r4, r0
 8006d86:	d001      	beq.n	8006d8c <cleanup_stdio+0x10>
 8006d88:	f000 fe88 	bl	8007a9c <_fflush_r>
 8006d8c:	68a1      	ldr	r1, [r4, #8]
 8006d8e:	4b09      	ldr	r3, [pc, #36]	@ (8006db4 <cleanup_stdio+0x38>)
 8006d90:	4299      	cmp	r1, r3
 8006d92:	d002      	beq.n	8006d9a <cleanup_stdio+0x1e>
 8006d94:	4620      	mov	r0, r4
 8006d96:	f000 fe81 	bl	8007a9c <_fflush_r>
 8006d9a:	68e1      	ldr	r1, [r4, #12]
 8006d9c:	4b06      	ldr	r3, [pc, #24]	@ (8006db8 <cleanup_stdio+0x3c>)
 8006d9e:	4299      	cmp	r1, r3
 8006da0:	d004      	beq.n	8006dac <cleanup_stdio+0x30>
 8006da2:	4620      	mov	r0, r4
 8006da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006da8:	f000 be78 	b.w	8007a9c <_fflush_r>
 8006dac:	bd10      	pop	{r4, pc}
 8006dae:	bf00      	nop
 8006db0:	20000288 	.word	0x20000288
 8006db4:	200002f0 	.word	0x200002f0
 8006db8:	20000358 	.word	0x20000358

08006dbc <global_stdio_init.part.0>:
 8006dbc:	b510      	push	{r4, lr}
 8006dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8006dec <global_stdio_init.part.0+0x30>)
 8006dc0:	4c0b      	ldr	r4, [pc, #44]	@ (8006df0 <global_stdio_init.part.0+0x34>)
 8006dc2:	4a0c      	ldr	r2, [pc, #48]	@ (8006df4 <global_stdio_init.part.0+0x38>)
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	2200      	movs	r2, #0
 8006dca:	2104      	movs	r1, #4
 8006dcc:	f7ff ff94 	bl	8006cf8 <std>
 8006dd0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	2109      	movs	r1, #9
 8006dd8:	f7ff ff8e 	bl	8006cf8 <std>
 8006ddc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006de0:	2202      	movs	r2, #2
 8006de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006de6:	2112      	movs	r1, #18
 8006de8:	f7ff bf86 	b.w	8006cf8 <std>
 8006dec:	200003c0 	.word	0x200003c0
 8006df0:	20000288 	.word	0x20000288
 8006df4:	08006d65 	.word	0x08006d65

08006df8 <__sfp_lock_acquire>:
 8006df8:	4801      	ldr	r0, [pc, #4]	@ (8006e00 <__sfp_lock_acquire+0x8>)
 8006dfa:	f000 ba00 	b.w	80071fe <__retarget_lock_acquire_recursive>
 8006dfe:	bf00      	nop
 8006e00:	200003c9 	.word	0x200003c9

08006e04 <__sfp_lock_release>:
 8006e04:	4801      	ldr	r0, [pc, #4]	@ (8006e0c <__sfp_lock_release+0x8>)
 8006e06:	f000 b9fb 	b.w	8007200 <__retarget_lock_release_recursive>
 8006e0a:	bf00      	nop
 8006e0c:	200003c9 	.word	0x200003c9

08006e10 <__sinit>:
 8006e10:	b510      	push	{r4, lr}
 8006e12:	4604      	mov	r4, r0
 8006e14:	f7ff fff0 	bl	8006df8 <__sfp_lock_acquire>
 8006e18:	6a23      	ldr	r3, [r4, #32]
 8006e1a:	b11b      	cbz	r3, 8006e24 <__sinit+0x14>
 8006e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e20:	f7ff bff0 	b.w	8006e04 <__sfp_lock_release>
 8006e24:	4b04      	ldr	r3, [pc, #16]	@ (8006e38 <__sinit+0x28>)
 8006e26:	6223      	str	r3, [r4, #32]
 8006e28:	4b04      	ldr	r3, [pc, #16]	@ (8006e3c <__sinit+0x2c>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1f5      	bne.n	8006e1c <__sinit+0xc>
 8006e30:	f7ff ffc4 	bl	8006dbc <global_stdio_init.part.0>
 8006e34:	e7f2      	b.n	8006e1c <__sinit+0xc>
 8006e36:	bf00      	nop
 8006e38:	08006d7d 	.word	0x08006d7d
 8006e3c:	200003c0 	.word	0x200003c0

08006e40 <_fwalk_sglue>:
 8006e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e44:	4607      	mov	r7, r0
 8006e46:	4688      	mov	r8, r1
 8006e48:	4614      	mov	r4, r2
 8006e4a:	2600      	movs	r6, #0
 8006e4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e50:	f1b9 0901 	subs.w	r9, r9, #1
 8006e54:	d505      	bpl.n	8006e62 <_fwalk_sglue+0x22>
 8006e56:	6824      	ldr	r4, [r4, #0]
 8006e58:	2c00      	cmp	r4, #0
 8006e5a:	d1f7      	bne.n	8006e4c <_fwalk_sglue+0xc>
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e62:	89ab      	ldrh	r3, [r5, #12]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d907      	bls.n	8006e78 <_fwalk_sglue+0x38>
 8006e68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	d003      	beq.n	8006e78 <_fwalk_sglue+0x38>
 8006e70:	4629      	mov	r1, r5
 8006e72:	4638      	mov	r0, r7
 8006e74:	47c0      	blx	r8
 8006e76:	4306      	orrs	r6, r0
 8006e78:	3568      	adds	r5, #104	@ 0x68
 8006e7a:	e7e9      	b.n	8006e50 <_fwalk_sglue+0x10>

08006e7c <iprintf>:
 8006e7c:	b40f      	push	{r0, r1, r2, r3}
 8006e7e:	b507      	push	{r0, r1, r2, lr}
 8006e80:	4906      	ldr	r1, [pc, #24]	@ (8006e9c <iprintf+0x20>)
 8006e82:	ab04      	add	r3, sp, #16
 8006e84:	6808      	ldr	r0, [r1, #0]
 8006e86:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e8a:	6881      	ldr	r1, [r0, #8]
 8006e8c:	9301      	str	r3, [sp, #4]
 8006e8e:	f000 fadb 	bl	8007448 <_vfiprintf_r>
 8006e92:	b003      	add	sp, #12
 8006e94:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e98:	b004      	add	sp, #16
 8006e9a:	4770      	bx	lr
 8006e9c:	20000020 	.word	0x20000020

08006ea0 <_puts_r>:
 8006ea0:	6a03      	ldr	r3, [r0, #32]
 8006ea2:	b570      	push	{r4, r5, r6, lr}
 8006ea4:	6884      	ldr	r4, [r0, #8]
 8006ea6:	4605      	mov	r5, r0
 8006ea8:	460e      	mov	r6, r1
 8006eaa:	b90b      	cbnz	r3, 8006eb0 <_puts_r+0x10>
 8006eac:	f7ff ffb0 	bl	8006e10 <__sinit>
 8006eb0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006eb2:	07db      	lsls	r3, r3, #31
 8006eb4:	d405      	bmi.n	8006ec2 <_puts_r+0x22>
 8006eb6:	89a3      	ldrh	r3, [r4, #12]
 8006eb8:	0598      	lsls	r0, r3, #22
 8006eba:	d402      	bmi.n	8006ec2 <_puts_r+0x22>
 8006ebc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ebe:	f000 f99e 	bl	80071fe <__retarget_lock_acquire_recursive>
 8006ec2:	89a3      	ldrh	r3, [r4, #12]
 8006ec4:	0719      	lsls	r1, r3, #28
 8006ec6:	d502      	bpl.n	8006ece <_puts_r+0x2e>
 8006ec8:	6923      	ldr	r3, [r4, #16]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d135      	bne.n	8006f3a <_puts_r+0x9a>
 8006ece:	4621      	mov	r1, r4
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	f000 f8c5 	bl	8007060 <__swsetup_r>
 8006ed6:	b380      	cbz	r0, 8006f3a <_puts_r+0x9a>
 8006ed8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006edc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ede:	07da      	lsls	r2, r3, #31
 8006ee0:	d405      	bmi.n	8006eee <_puts_r+0x4e>
 8006ee2:	89a3      	ldrh	r3, [r4, #12]
 8006ee4:	059b      	lsls	r3, r3, #22
 8006ee6:	d402      	bmi.n	8006eee <_puts_r+0x4e>
 8006ee8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006eea:	f000 f989 	bl	8007200 <__retarget_lock_release_recursive>
 8006eee:	4628      	mov	r0, r5
 8006ef0:	bd70      	pop	{r4, r5, r6, pc}
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	da04      	bge.n	8006f00 <_puts_r+0x60>
 8006ef6:	69a2      	ldr	r2, [r4, #24]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	dc17      	bgt.n	8006f2c <_puts_r+0x8c>
 8006efc:	290a      	cmp	r1, #10
 8006efe:	d015      	beq.n	8006f2c <_puts_r+0x8c>
 8006f00:	6823      	ldr	r3, [r4, #0]
 8006f02:	1c5a      	adds	r2, r3, #1
 8006f04:	6022      	str	r2, [r4, #0]
 8006f06:	7019      	strb	r1, [r3, #0]
 8006f08:	68a3      	ldr	r3, [r4, #8]
 8006f0a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	60a3      	str	r3, [r4, #8]
 8006f12:	2900      	cmp	r1, #0
 8006f14:	d1ed      	bne.n	8006ef2 <_puts_r+0x52>
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	da11      	bge.n	8006f3e <_puts_r+0x9e>
 8006f1a:	4622      	mov	r2, r4
 8006f1c:	210a      	movs	r1, #10
 8006f1e:	4628      	mov	r0, r5
 8006f20:	f000 f85f 	bl	8006fe2 <__swbuf_r>
 8006f24:	3001      	adds	r0, #1
 8006f26:	d0d7      	beq.n	8006ed8 <_puts_r+0x38>
 8006f28:	250a      	movs	r5, #10
 8006f2a:	e7d7      	b.n	8006edc <_puts_r+0x3c>
 8006f2c:	4622      	mov	r2, r4
 8006f2e:	4628      	mov	r0, r5
 8006f30:	f000 f857 	bl	8006fe2 <__swbuf_r>
 8006f34:	3001      	adds	r0, #1
 8006f36:	d1e7      	bne.n	8006f08 <_puts_r+0x68>
 8006f38:	e7ce      	b.n	8006ed8 <_puts_r+0x38>
 8006f3a:	3e01      	subs	r6, #1
 8006f3c:	e7e4      	b.n	8006f08 <_puts_r+0x68>
 8006f3e:	6823      	ldr	r3, [r4, #0]
 8006f40:	1c5a      	adds	r2, r3, #1
 8006f42:	6022      	str	r2, [r4, #0]
 8006f44:	220a      	movs	r2, #10
 8006f46:	701a      	strb	r2, [r3, #0]
 8006f48:	e7ee      	b.n	8006f28 <_puts_r+0x88>
	...

08006f4c <puts>:
 8006f4c:	4b02      	ldr	r3, [pc, #8]	@ (8006f58 <puts+0xc>)
 8006f4e:	4601      	mov	r1, r0
 8006f50:	6818      	ldr	r0, [r3, #0]
 8006f52:	f7ff bfa5 	b.w	8006ea0 <_puts_r>
 8006f56:	bf00      	nop
 8006f58:	20000020 	.word	0x20000020

08006f5c <__sread>:
 8006f5c:	b510      	push	{r4, lr}
 8006f5e:	460c      	mov	r4, r1
 8006f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f64:	f000 f8fc 	bl	8007160 <_read_r>
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	bfab      	itete	ge
 8006f6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f6e:	89a3      	ldrhlt	r3, [r4, #12]
 8006f70:	181b      	addge	r3, r3, r0
 8006f72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f76:	bfac      	ite	ge
 8006f78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f7a:	81a3      	strhlt	r3, [r4, #12]
 8006f7c:	bd10      	pop	{r4, pc}

08006f7e <__swrite>:
 8006f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f82:	461f      	mov	r7, r3
 8006f84:	898b      	ldrh	r3, [r1, #12]
 8006f86:	05db      	lsls	r3, r3, #23
 8006f88:	4605      	mov	r5, r0
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	4616      	mov	r6, r2
 8006f8e:	d505      	bpl.n	8006f9c <__swrite+0x1e>
 8006f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f94:	2302      	movs	r3, #2
 8006f96:	2200      	movs	r2, #0
 8006f98:	f000 f8d0 	bl	800713c <_lseek_r>
 8006f9c:	89a3      	ldrh	r3, [r4, #12]
 8006f9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fa2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006fa6:	81a3      	strh	r3, [r4, #12]
 8006fa8:	4632      	mov	r2, r6
 8006faa:	463b      	mov	r3, r7
 8006fac:	4628      	mov	r0, r5
 8006fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb2:	f000 b8e7 	b.w	8007184 <_write_r>

08006fb6 <__sseek>:
 8006fb6:	b510      	push	{r4, lr}
 8006fb8:	460c      	mov	r4, r1
 8006fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fbe:	f000 f8bd 	bl	800713c <_lseek_r>
 8006fc2:	1c43      	adds	r3, r0, #1
 8006fc4:	89a3      	ldrh	r3, [r4, #12]
 8006fc6:	bf15      	itete	ne
 8006fc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006fca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006fce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006fd2:	81a3      	strheq	r3, [r4, #12]
 8006fd4:	bf18      	it	ne
 8006fd6:	81a3      	strhne	r3, [r4, #12]
 8006fd8:	bd10      	pop	{r4, pc}

08006fda <__sclose>:
 8006fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fde:	f000 b89d 	b.w	800711c <_close_r>

08006fe2 <__swbuf_r>:
 8006fe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe4:	460e      	mov	r6, r1
 8006fe6:	4614      	mov	r4, r2
 8006fe8:	4605      	mov	r5, r0
 8006fea:	b118      	cbz	r0, 8006ff4 <__swbuf_r+0x12>
 8006fec:	6a03      	ldr	r3, [r0, #32]
 8006fee:	b90b      	cbnz	r3, 8006ff4 <__swbuf_r+0x12>
 8006ff0:	f7ff ff0e 	bl	8006e10 <__sinit>
 8006ff4:	69a3      	ldr	r3, [r4, #24]
 8006ff6:	60a3      	str	r3, [r4, #8]
 8006ff8:	89a3      	ldrh	r3, [r4, #12]
 8006ffa:	071a      	lsls	r2, r3, #28
 8006ffc:	d501      	bpl.n	8007002 <__swbuf_r+0x20>
 8006ffe:	6923      	ldr	r3, [r4, #16]
 8007000:	b943      	cbnz	r3, 8007014 <__swbuf_r+0x32>
 8007002:	4621      	mov	r1, r4
 8007004:	4628      	mov	r0, r5
 8007006:	f000 f82b 	bl	8007060 <__swsetup_r>
 800700a:	b118      	cbz	r0, 8007014 <__swbuf_r+0x32>
 800700c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007010:	4638      	mov	r0, r7
 8007012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	6922      	ldr	r2, [r4, #16]
 8007018:	1a98      	subs	r0, r3, r2
 800701a:	6963      	ldr	r3, [r4, #20]
 800701c:	b2f6      	uxtb	r6, r6
 800701e:	4283      	cmp	r3, r0
 8007020:	4637      	mov	r7, r6
 8007022:	dc05      	bgt.n	8007030 <__swbuf_r+0x4e>
 8007024:	4621      	mov	r1, r4
 8007026:	4628      	mov	r0, r5
 8007028:	f000 fd38 	bl	8007a9c <_fflush_r>
 800702c:	2800      	cmp	r0, #0
 800702e:	d1ed      	bne.n	800700c <__swbuf_r+0x2a>
 8007030:	68a3      	ldr	r3, [r4, #8]
 8007032:	3b01      	subs	r3, #1
 8007034:	60a3      	str	r3, [r4, #8]
 8007036:	6823      	ldr	r3, [r4, #0]
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	6022      	str	r2, [r4, #0]
 800703c:	701e      	strb	r6, [r3, #0]
 800703e:	6962      	ldr	r2, [r4, #20]
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	429a      	cmp	r2, r3
 8007044:	d004      	beq.n	8007050 <__swbuf_r+0x6e>
 8007046:	89a3      	ldrh	r3, [r4, #12]
 8007048:	07db      	lsls	r3, r3, #31
 800704a:	d5e1      	bpl.n	8007010 <__swbuf_r+0x2e>
 800704c:	2e0a      	cmp	r6, #10
 800704e:	d1df      	bne.n	8007010 <__swbuf_r+0x2e>
 8007050:	4621      	mov	r1, r4
 8007052:	4628      	mov	r0, r5
 8007054:	f000 fd22 	bl	8007a9c <_fflush_r>
 8007058:	2800      	cmp	r0, #0
 800705a:	d0d9      	beq.n	8007010 <__swbuf_r+0x2e>
 800705c:	e7d6      	b.n	800700c <__swbuf_r+0x2a>
	...

08007060 <__swsetup_r>:
 8007060:	b538      	push	{r3, r4, r5, lr}
 8007062:	4b29      	ldr	r3, [pc, #164]	@ (8007108 <__swsetup_r+0xa8>)
 8007064:	4605      	mov	r5, r0
 8007066:	6818      	ldr	r0, [r3, #0]
 8007068:	460c      	mov	r4, r1
 800706a:	b118      	cbz	r0, 8007074 <__swsetup_r+0x14>
 800706c:	6a03      	ldr	r3, [r0, #32]
 800706e:	b90b      	cbnz	r3, 8007074 <__swsetup_r+0x14>
 8007070:	f7ff fece 	bl	8006e10 <__sinit>
 8007074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007078:	0719      	lsls	r1, r3, #28
 800707a:	d422      	bmi.n	80070c2 <__swsetup_r+0x62>
 800707c:	06da      	lsls	r2, r3, #27
 800707e:	d407      	bmi.n	8007090 <__swsetup_r+0x30>
 8007080:	2209      	movs	r2, #9
 8007082:	602a      	str	r2, [r5, #0]
 8007084:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007088:	81a3      	strh	r3, [r4, #12]
 800708a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800708e:	e033      	b.n	80070f8 <__swsetup_r+0x98>
 8007090:	0758      	lsls	r0, r3, #29
 8007092:	d512      	bpl.n	80070ba <__swsetup_r+0x5a>
 8007094:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007096:	b141      	cbz	r1, 80070aa <__swsetup_r+0x4a>
 8007098:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800709c:	4299      	cmp	r1, r3
 800709e:	d002      	beq.n	80070a6 <__swsetup_r+0x46>
 80070a0:	4628      	mov	r0, r5
 80070a2:	f000 f8af 	bl	8007204 <_free_r>
 80070a6:	2300      	movs	r3, #0
 80070a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80070aa:	89a3      	ldrh	r3, [r4, #12]
 80070ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80070b0:	81a3      	strh	r3, [r4, #12]
 80070b2:	2300      	movs	r3, #0
 80070b4:	6063      	str	r3, [r4, #4]
 80070b6:	6923      	ldr	r3, [r4, #16]
 80070b8:	6023      	str	r3, [r4, #0]
 80070ba:	89a3      	ldrh	r3, [r4, #12]
 80070bc:	f043 0308 	orr.w	r3, r3, #8
 80070c0:	81a3      	strh	r3, [r4, #12]
 80070c2:	6923      	ldr	r3, [r4, #16]
 80070c4:	b94b      	cbnz	r3, 80070da <__swsetup_r+0x7a>
 80070c6:	89a3      	ldrh	r3, [r4, #12]
 80070c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80070cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070d0:	d003      	beq.n	80070da <__swsetup_r+0x7a>
 80070d2:	4621      	mov	r1, r4
 80070d4:	4628      	mov	r0, r5
 80070d6:	f000 fd2f 	bl	8007b38 <__smakebuf_r>
 80070da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070de:	f013 0201 	ands.w	r2, r3, #1
 80070e2:	d00a      	beq.n	80070fa <__swsetup_r+0x9a>
 80070e4:	2200      	movs	r2, #0
 80070e6:	60a2      	str	r2, [r4, #8]
 80070e8:	6962      	ldr	r2, [r4, #20]
 80070ea:	4252      	negs	r2, r2
 80070ec:	61a2      	str	r2, [r4, #24]
 80070ee:	6922      	ldr	r2, [r4, #16]
 80070f0:	b942      	cbnz	r2, 8007104 <__swsetup_r+0xa4>
 80070f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80070f6:	d1c5      	bne.n	8007084 <__swsetup_r+0x24>
 80070f8:	bd38      	pop	{r3, r4, r5, pc}
 80070fa:	0799      	lsls	r1, r3, #30
 80070fc:	bf58      	it	pl
 80070fe:	6962      	ldrpl	r2, [r4, #20]
 8007100:	60a2      	str	r2, [r4, #8]
 8007102:	e7f4      	b.n	80070ee <__swsetup_r+0x8e>
 8007104:	2000      	movs	r0, #0
 8007106:	e7f7      	b.n	80070f8 <__swsetup_r+0x98>
 8007108:	20000020 	.word	0x20000020

0800710c <memset>:
 800710c:	4402      	add	r2, r0
 800710e:	4603      	mov	r3, r0
 8007110:	4293      	cmp	r3, r2
 8007112:	d100      	bne.n	8007116 <memset+0xa>
 8007114:	4770      	bx	lr
 8007116:	f803 1b01 	strb.w	r1, [r3], #1
 800711a:	e7f9      	b.n	8007110 <memset+0x4>

0800711c <_close_r>:
 800711c:	b538      	push	{r3, r4, r5, lr}
 800711e:	4d06      	ldr	r5, [pc, #24]	@ (8007138 <_close_r+0x1c>)
 8007120:	2300      	movs	r3, #0
 8007122:	4604      	mov	r4, r0
 8007124:	4608      	mov	r0, r1
 8007126:	602b      	str	r3, [r5, #0]
 8007128:	f7fa fc5a 	bl	80019e0 <_close>
 800712c:	1c43      	adds	r3, r0, #1
 800712e:	d102      	bne.n	8007136 <_close_r+0x1a>
 8007130:	682b      	ldr	r3, [r5, #0]
 8007132:	b103      	cbz	r3, 8007136 <_close_r+0x1a>
 8007134:	6023      	str	r3, [r4, #0]
 8007136:	bd38      	pop	{r3, r4, r5, pc}
 8007138:	200003c4 	.word	0x200003c4

0800713c <_lseek_r>:
 800713c:	b538      	push	{r3, r4, r5, lr}
 800713e:	4d07      	ldr	r5, [pc, #28]	@ (800715c <_lseek_r+0x20>)
 8007140:	4604      	mov	r4, r0
 8007142:	4608      	mov	r0, r1
 8007144:	4611      	mov	r1, r2
 8007146:	2200      	movs	r2, #0
 8007148:	602a      	str	r2, [r5, #0]
 800714a:	461a      	mov	r2, r3
 800714c:	f7fa fc6f 	bl	8001a2e <_lseek>
 8007150:	1c43      	adds	r3, r0, #1
 8007152:	d102      	bne.n	800715a <_lseek_r+0x1e>
 8007154:	682b      	ldr	r3, [r5, #0]
 8007156:	b103      	cbz	r3, 800715a <_lseek_r+0x1e>
 8007158:	6023      	str	r3, [r4, #0]
 800715a:	bd38      	pop	{r3, r4, r5, pc}
 800715c:	200003c4 	.word	0x200003c4

08007160 <_read_r>:
 8007160:	b538      	push	{r3, r4, r5, lr}
 8007162:	4d07      	ldr	r5, [pc, #28]	@ (8007180 <_read_r+0x20>)
 8007164:	4604      	mov	r4, r0
 8007166:	4608      	mov	r0, r1
 8007168:	4611      	mov	r1, r2
 800716a:	2200      	movs	r2, #0
 800716c:	602a      	str	r2, [r5, #0]
 800716e:	461a      	mov	r2, r3
 8007170:	f7fa fc19 	bl	80019a6 <_read>
 8007174:	1c43      	adds	r3, r0, #1
 8007176:	d102      	bne.n	800717e <_read_r+0x1e>
 8007178:	682b      	ldr	r3, [r5, #0]
 800717a:	b103      	cbz	r3, 800717e <_read_r+0x1e>
 800717c:	6023      	str	r3, [r4, #0]
 800717e:	bd38      	pop	{r3, r4, r5, pc}
 8007180:	200003c4 	.word	0x200003c4

08007184 <_write_r>:
 8007184:	b538      	push	{r3, r4, r5, lr}
 8007186:	4d07      	ldr	r5, [pc, #28]	@ (80071a4 <_write_r+0x20>)
 8007188:	4604      	mov	r4, r0
 800718a:	4608      	mov	r0, r1
 800718c:	4611      	mov	r1, r2
 800718e:	2200      	movs	r2, #0
 8007190:	602a      	str	r2, [r5, #0]
 8007192:	461a      	mov	r2, r3
 8007194:	f7fa fa32 	bl	80015fc <_write>
 8007198:	1c43      	adds	r3, r0, #1
 800719a:	d102      	bne.n	80071a2 <_write_r+0x1e>
 800719c:	682b      	ldr	r3, [r5, #0]
 800719e:	b103      	cbz	r3, 80071a2 <_write_r+0x1e>
 80071a0:	6023      	str	r3, [r4, #0]
 80071a2:	bd38      	pop	{r3, r4, r5, pc}
 80071a4:	200003c4 	.word	0x200003c4

080071a8 <__errno>:
 80071a8:	4b01      	ldr	r3, [pc, #4]	@ (80071b0 <__errno+0x8>)
 80071aa:	6818      	ldr	r0, [r3, #0]
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	20000020 	.word	0x20000020

080071b4 <__libc_init_array>:
 80071b4:	b570      	push	{r4, r5, r6, lr}
 80071b6:	4d0d      	ldr	r5, [pc, #52]	@ (80071ec <__libc_init_array+0x38>)
 80071b8:	4c0d      	ldr	r4, [pc, #52]	@ (80071f0 <__libc_init_array+0x3c>)
 80071ba:	1b64      	subs	r4, r4, r5
 80071bc:	10a4      	asrs	r4, r4, #2
 80071be:	2600      	movs	r6, #0
 80071c0:	42a6      	cmp	r6, r4
 80071c2:	d109      	bne.n	80071d8 <__libc_init_array+0x24>
 80071c4:	4d0b      	ldr	r5, [pc, #44]	@ (80071f4 <__libc_init_array+0x40>)
 80071c6:	4c0c      	ldr	r4, [pc, #48]	@ (80071f8 <__libc_init_array+0x44>)
 80071c8:	f000 fd24 	bl	8007c14 <_init>
 80071cc:	1b64      	subs	r4, r4, r5
 80071ce:	10a4      	asrs	r4, r4, #2
 80071d0:	2600      	movs	r6, #0
 80071d2:	42a6      	cmp	r6, r4
 80071d4:	d105      	bne.n	80071e2 <__libc_init_array+0x2e>
 80071d6:	bd70      	pop	{r4, r5, r6, pc}
 80071d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80071dc:	4798      	blx	r3
 80071de:	3601      	adds	r6, #1
 80071e0:	e7ee      	b.n	80071c0 <__libc_init_array+0xc>
 80071e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80071e6:	4798      	blx	r3
 80071e8:	3601      	adds	r6, #1
 80071ea:	e7f2      	b.n	80071d2 <__libc_init_array+0x1e>
 80071ec:	08007f74 	.word	0x08007f74
 80071f0:	08007f74 	.word	0x08007f74
 80071f4:	08007f74 	.word	0x08007f74
 80071f8:	08007f78 	.word	0x08007f78

080071fc <__retarget_lock_init_recursive>:
 80071fc:	4770      	bx	lr

080071fe <__retarget_lock_acquire_recursive>:
 80071fe:	4770      	bx	lr

08007200 <__retarget_lock_release_recursive>:
 8007200:	4770      	bx	lr
	...

08007204 <_free_r>:
 8007204:	b538      	push	{r3, r4, r5, lr}
 8007206:	4605      	mov	r5, r0
 8007208:	2900      	cmp	r1, #0
 800720a:	d041      	beq.n	8007290 <_free_r+0x8c>
 800720c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007210:	1f0c      	subs	r4, r1, #4
 8007212:	2b00      	cmp	r3, #0
 8007214:	bfb8      	it	lt
 8007216:	18e4      	addlt	r4, r4, r3
 8007218:	f000 f8e0 	bl	80073dc <__malloc_lock>
 800721c:	4a1d      	ldr	r2, [pc, #116]	@ (8007294 <_free_r+0x90>)
 800721e:	6813      	ldr	r3, [r2, #0]
 8007220:	b933      	cbnz	r3, 8007230 <_free_r+0x2c>
 8007222:	6063      	str	r3, [r4, #4]
 8007224:	6014      	str	r4, [r2, #0]
 8007226:	4628      	mov	r0, r5
 8007228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800722c:	f000 b8dc 	b.w	80073e8 <__malloc_unlock>
 8007230:	42a3      	cmp	r3, r4
 8007232:	d908      	bls.n	8007246 <_free_r+0x42>
 8007234:	6820      	ldr	r0, [r4, #0]
 8007236:	1821      	adds	r1, r4, r0
 8007238:	428b      	cmp	r3, r1
 800723a:	bf01      	itttt	eq
 800723c:	6819      	ldreq	r1, [r3, #0]
 800723e:	685b      	ldreq	r3, [r3, #4]
 8007240:	1809      	addeq	r1, r1, r0
 8007242:	6021      	streq	r1, [r4, #0]
 8007244:	e7ed      	b.n	8007222 <_free_r+0x1e>
 8007246:	461a      	mov	r2, r3
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	b10b      	cbz	r3, 8007250 <_free_r+0x4c>
 800724c:	42a3      	cmp	r3, r4
 800724e:	d9fa      	bls.n	8007246 <_free_r+0x42>
 8007250:	6811      	ldr	r1, [r2, #0]
 8007252:	1850      	adds	r0, r2, r1
 8007254:	42a0      	cmp	r0, r4
 8007256:	d10b      	bne.n	8007270 <_free_r+0x6c>
 8007258:	6820      	ldr	r0, [r4, #0]
 800725a:	4401      	add	r1, r0
 800725c:	1850      	adds	r0, r2, r1
 800725e:	4283      	cmp	r3, r0
 8007260:	6011      	str	r1, [r2, #0]
 8007262:	d1e0      	bne.n	8007226 <_free_r+0x22>
 8007264:	6818      	ldr	r0, [r3, #0]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	6053      	str	r3, [r2, #4]
 800726a:	4408      	add	r0, r1
 800726c:	6010      	str	r0, [r2, #0]
 800726e:	e7da      	b.n	8007226 <_free_r+0x22>
 8007270:	d902      	bls.n	8007278 <_free_r+0x74>
 8007272:	230c      	movs	r3, #12
 8007274:	602b      	str	r3, [r5, #0]
 8007276:	e7d6      	b.n	8007226 <_free_r+0x22>
 8007278:	6820      	ldr	r0, [r4, #0]
 800727a:	1821      	adds	r1, r4, r0
 800727c:	428b      	cmp	r3, r1
 800727e:	bf04      	itt	eq
 8007280:	6819      	ldreq	r1, [r3, #0]
 8007282:	685b      	ldreq	r3, [r3, #4]
 8007284:	6063      	str	r3, [r4, #4]
 8007286:	bf04      	itt	eq
 8007288:	1809      	addeq	r1, r1, r0
 800728a:	6021      	streq	r1, [r4, #0]
 800728c:	6054      	str	r4, [r2, #4]
 800728e:	e7ca      	b.n	8007226 <_free_r+0x22>
 8007290:	bd38      	pop	{r3, r4, r5, pc}
 8007292:	bf00      	nop
 8007294:	200003d0 	.word	0x200003d0

08007298 <sbrk_aligned>:
 8007298:	b570      	push	{r4, r5, r6, lr}
 800729a:	4e0f      	ldr	r6, [pc, #60]	@ (80072d8 <sbrk_aligned+0x40>)
 800729c:	460c      	mov	r4, r1
 800729e:	6831      	ldr	r1, [r6, #0]
 80072a0:	4605      	mov	r5, r0
 80072a2:	b911      	cbnz	r1, 80072aa <sbrk_aligned+0x12>
 80072a4:	f000 fca6 	bl	8007bf4 <_sbrk_r>
 80072a8:	6030      	str	r0, [r6, #0]
 80072aa:	4621      	mov	r1, r4
 80072ac:	4628      	mov	r0, r5
 80072ae:	f000 fca1 	bl	8007bf4 <_sbrk_r>
 80072b2:	1c43      	adds	r3, r0, #1
 80072b4:	d103      	bne.n	80072be <sbrk_aligned+0x26>
 80072b6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80072ba:	4620      	mov	r0, r4
 80072bc:	bd70      	pop	{r4, r5, r6, pc}
 80072be:	1cc4      	adds	r4, r0, #3
 80072c0:	f024 0403 	bic.w	r4, r4, #3
 80072c4:	42a0      	cmp	r0, r4
 80072c6:	d0f8      	beq.n	80072ba <sbrk_aligned+0x22>
 80072c8:	1a21      	subs	r1, r4, r0
 80072ca:	4628      	mov	r0, r5
 80072cc:	f000 fc92 	bl	8007bf4 <_sbrk_r>
 80072d0:	3001      	adds	r0, #1
 80072d2:	d1f2      	bne.n	80072ba <sbrk_aligned+0x22>
 80072d4:	e7ef      	b.n	80072b6 <sbrk_aligned+0x1e>
 80072d6:	bf00      	nop
 80072d8:	200003cc 	.word	0x200003cc

080072dc <_malloc_r>:
 80072dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072e0:	1ccd      	adds	r5, r1, #3
 80072e2:	f025 0503 	bic.w	r5, r5, #3
 80072e6:	3508      	adds	r5, #8
 80072e8:	2d0c      	cmp	r5, #12
 80072ea:	bf38      	it	cc
 80072ec:	250c      	movcc	r5, #12
 80072ee:	2d00      	cmp	r5, #0
 80072f0:	4606      	mov	r6, r0
 80072f2:	db01      	blt.n	80072f8 <_malloc_r+0x1c>
 80072f4:	42a9      	cmp	r1, r5
 80072f6:	d904      	bls.n	8007302 <_malloc_r+0x26>
 80072f8:	230c      	movs	r3, #12
 80072fa:	6033      	str	r3, [r6, #0]
 80072fc:	2000      	movs	r0, #0
 80072fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007302:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80073d8 <_malloc_r+0xfc>
 8007306:	f000 f869 	bl	80073dc <__malloc_lock>
 800730a:	f8d8 3000 	ldr.w	r3, [r8]
 800730e:	461c      	mov	r4, r3
 8007310:	bb44      	cbnz	r4, 8007364 <_malloc_r+0x88>
 8007312:	4629      	mov	r1, r5
 8007314:	4630      	mov	r0, r6
 8007316:	f7ff ffbf 	bl	8007298 <sbrk_aligned>
 800731a:	1c43      	adds	r3, r0, #1
 800731c:	4604      	mov	r4, r0
 800731e:	d158      	bne.n	80073d2 <_malloc_r+0xf6>
 8007320:	f8d8 4000 	ldr.w	r4, [r8]
 8007324:	4627      	mov	r7, r4
 8007326:	2f00      	cmp	r7, #0
 8007328:	d143      	bne.n	80073b2 <_malloc_r+0xd6>
 800732a:	2c00      	cmp	r4, #0
 800732c:	d04b      	beq.n	80073c6 <_malloc_r+0xea>
 800732e:	6823      	ldr	r3, [r4, #0]
 8007330:	4639      	mov	r1, r7
 8007332:	4630      	mov	r0, r6
 8007334:	eb04 0903 	add.w	r9, r4, r3
 8007338:	f000 fc5c 	bl	8007bf4 <_sbrk_r>
 800733c:	4581      	cmp	r9, r0
 800733e:	d142      	bne.n	80073c6 <_malloc_r+0xea>
 8007340:	6821      	ldr	r1, [r4, #0]
 8007342:	1a6d      	subs	r5, r5, r1
 8007344:	4629      	mov	r1, r5
 8007346:	4630      	mov	r0, r6
 8007348:	f7ff ffa6 	bl	8007298 <sbrk_aligned>
 800734c:	3001      	adds	r0, #1
 800734e:	d03a      	beq.n	80073c6 <_malloc_r+0xea>
 8007350:	6823      	ldr	r3, [r4, #0]
 8007352:	442b      	add	r3, r5
 8007354:	6023      	str	r3, [r4, #0]
 8007356:	f8d8 3000 	ldr.w	r3, [r8]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	bb62      	cbnz	r2, 80073b8 <_malloc_r+0xdc>
 800735e:	f8c8 7000 	str.w	r7, [r8]
 8007362:	e00f      	b.n	8007384 <_malloc_r+0xa8>
 8007364:	6822      	ldr	r2, [r4, #0]
 8007366:	1b52      	subs	r2, r2, r5
 8007368:	d420      	bmi.n	80073ac <_malloc_r+0xd0>
 800736a:	2a0b      	cmp	r2, #11
 800736c:	d917      	bls.n	800739e <_malloc_r+0xc2>
 800736e:	1961      	adds	r1, r4, r5
 8007370:	42a3      	cmp	r3, r4
 8007372:	6025      	str	r5, [r4, #0]
 8007374:	bf18      	it	ne
 8007376:	6059      	strne	r1, [r3, #4]
 8007378:	6863      	ldr	r3, [r4, #4]
 800737a:	bf08      	it	eq
 800737c:	f8c8 1000 	streq.w	r1, [r8]
 8007380:	5162      	str	r2, [r4, r5]
 8007382:	604b      	str	r3, [r1, #4]
 8007384:	4630      	mov	r0, r6
 8007386:	f000 f82f 	bl	80073e8 <__malloc_unlock>
 800738a:	f104 000b 	add.w	r0, r4, #11
 800738e:	1d23      	adds	r3, r4, #4
 8007390:	f020 0007 	bic.w	r0, r0, #7
 8007394:	1ac2      	subs	r2, r0, r3
 8007396:	bf1c      	itt	ne
 8007398:	1a1b      	subne	r3, r3, r0
 800739a:	50a3      	strne	r3, [r4, r2]
 800739c:	e7af      	b.n	80072fe <_malloc_r+0x22>
 800739e:	6862      	ldr	r2, [r4, #4]
 80073a0:	42a3      	cmp	r3, r4
 80073a2:	bf0c      	ite	eq
 80073a4:	f8c8 2000 	streq.w	r2, [r8]
 80073a8:	605a      	strne	r2, [r3, #4]
 80073aa:	e7eb      	b.n	8007384 <_malloc_r+0xa8>
 80073ac:	4623      	mov	r3, r4
 80073ae:	6864      	ldr	r4, [r4, #4]
 80073b0:	e7ae      	b.n	8007310 <_malloc_r+0x34>
 80073b2:	463c      	mov	r4, r7
 80073b4:	687f      	ldr	r7, [r7, #4]
 80073b6:	e7b6      	b.n	8007326 <_malloc_r+0x4a>
 80073b8:	461a      	mov	r2, r3
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	42a3      	cmp	r3, r4
 80073be:	d1fb      	bne.n	80073b8 <_malloc_r+0xdc>
 80073c0:	2300      	movs	r3, #0
 80073c2:	6053      	str	r3, [r2, #4]
 80073c4:	e7de      	b.n	8007384 <_malloc_r+0xa8>
 80073c6:	230c      	movs	r3, #12
 80073c8:	6033      	str	r3, [r6, #0]
 80073ca:	4630      	mov	r0, r6
 80073cc:	f000 f80c 	bl	80073e8 <__malloc_unlock>
 80073d0:	e794      	b.n	80072fc <_malloc_r+0x20>
 80073d2:	6005      	str	r5, [r0, #0]
 80073d4:	e7d6      	b.n	8007384 <_malloc_r+0xa8>
 80073d6:	bf00      	nop
 80073d8:	200003d0 	.word	0x200003d0

080073dc <__malloc_lock>:
 80073dc:	4801      	ldr	r0, [pc, #4]	@ (80073e4 <__malloc_lock+0x8>)
 80073de:	f7ff bf0e 	b.w	80071fe <__retarget_lock_acquire_recursive>
 80073e2:	bf00      	nop
 80073e4:	200003c8 	.word	0x200003c8

080073e8 <__malloc_unlock>:
 80073e8:	4801      	ldr	r0, [pc, #4]	@ (80073f0 <__malloc_unlock+0x8>)
 80073ea:	f7ff bf09 	b.w	8007200 <__retarget_lock_release_recursive>
 80073ee:	bf00      	nop
 80073f0:	200003c8 	.word	0x200003c8

080073f4 <__sfputc_r>:
 80073f4:	6893      	ldr	r3, [r2, #8]
 80073f6:	3b01      	subs	r3, #1
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	b410      	push	{r4}
 80073fc:	6093      	str	r3, [r2, #8]
 80073fe:	da08      	bge.n	8007412 <__sfputc_r+0x1e>
 8007400:	6994      	ldr	r4, [r2, #24]
 8007402:	42a3      	cmp	r3, r4
 8007404:	db01      	blt.n	800740a <__sfputc_r+0x16>
 8007406:	290a      	cmp	r1, #10
 8007408:	d103      	bne.n	8007412 <__sfputc_r+0x1e>
 800740a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800740e:	f7ff bde8 	b.w	8006fe2 <__swbuf_r>
 8007412:	6813      	ldr	r3, [r2, #0]
 8007414:	1c58      	adds	r0, r3, #1
 8007416:	6010      	str	r0, [r2, #0]
 8007418:	7019      	strb	r1, [r3, #0]
 800741a:	4608      	mov	r0, r1
 800741c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007420:	4770      	bx	lr

08007422 <__sfputs_r>:
 8007422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007424:	4606      	mov	r6, r0
 8007426:	460f      	mov	r7, r1
 8007428:	4614      	mov	r4, r2
 800742a:	18d5      	adds	r5, r2, r3
 800742c:	42ac      	cmp	r4, r5
 800742e:	d101      	bne.n	8007434 <__sfputs_r+0x12>
 8007430:	2000      	movs	r0, #0
 8007432:	e007      	b.n	8007444 <__sfputs_r+0x22>
 8007434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007438:	463a      	mov	r2, r7
 800743a:	4630      	mov	r0, r6
 800743c:	f7ff ffda 	bl	80073f4 <__sfputc_r>
 8007440:	1c43      	adds	r3, r0, #1
 8007442:	d1f3      	bne.n	800742c <__sfputs_r+0xa>
 8007444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007448 <_vfiprintf_r>:
 8007448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800744c:	460d      	mov	r5, r1
 800744e:	b09d      	sub	sp, #116	@ 0x74
 8007450:	4614      	mov	r4, r2
 8007452:	4698      	mov	r8, r3
 8007454:	4606      	mov	r6, r0
 8007456:	b118      	cbz	r0, 8007460 <_vfiprintf_r+0x18>
 8007458:	6a03      	ldr	r3, [r0, #32]
 800745a:	b90b      	cbnz	r3, 8007460 <_vfiprintf_r+0x18>
 800745c:	f7ff fcd8 	bl	8006e10 <__sinit>
 8007460:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007462:	07d9      	lsls	r1, r3, #31
 8007464:	d405      	bmi.n	8007472 <_vfiprintf_r+0x2a>
 8007466:	89ab      	ldrh	r3, [r5, #12]
 8007468:	059a      	lsls	r2, r3, #22
 800746a:	d402      	bmi.n	8007472 <_vfiprintf_r+0x2a>
 800746c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800746e:	f7ff fec6 	bl	80071fe <__retarget_lock_acquire_recursive>
 8007472:	89ab      	ldrh	r3, [r5, #12]
 8007474:	071b      	lsls	r3, r3, #28
 8007476:	d501      	bpl.n	800747c <_vfiprintf_r+0x34>
 8007478:	692b      	ldr	r3, [r5, #16]
 800747a:	b99b      	cbnz	r3, 80074a4 <_vfiprintf_r+0x5c>
 800747c:	4629      	mov	r1, r5
 800747e:	4630      	mov	r0, r6
 8007480:	f7ff fdee 	bl	8007060 <__swsetup_r>
 8007484:	b170      	cbz	r0, 80074a4 <_vfiprintf_r+0x5c>
 8007486:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007488:	07dc      	lsls	r4, r3, #31
 800748a:	d504      	bpl.n	8007496 <_vfiprintf_r+0x4e>
 800748c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007490:	b01d      	add	sp, #116	@ 0x74
 8007492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007496:	89ab      	ldrh	r3, [r5, #12]
 8007498:	0598      	lsls	r0, r3, #22
 800749a:	d4f7      	bmi.n	800748c <_vfiprintf_r+0x44>
 800749c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800749e:	f7ff feaf 	bl	8007200 <__retarget_lock_release_recursive>
 80074a2:	e7f3      	b.n	800748c <_vfiprintf_r+0x44>
 80074a4:	2300      	movs	r3, #0
 80074a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80074a8:	2320      	movs	r3, #32
 80074aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80074ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80074b2:	2330      	movs	r3, #48	@ 0x30
 80074b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007664 <_vfiprintf_r+0x21c>
 80074b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80074bc:	f04f 0901 	mov.w	r9, #1
 80074c0:	4623      	mov	r3, r4
 80074c2:	469a      	mov	sl, r3
 80074c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074c8:	b10a      	cbz	r2, 80074ce <_vfiprintf_r+0x86>
 80074ca:	2a25      	cmp	r2, #37	@ 0x25
 80074cc:	d1f9      	bne.n	80074c2 <_vfiprintf_r+0x7a>
 80074ce:	ebba 0b04 	subs.w	fp, sl, r4
 80074d2:	d00b      	beq.n	80074ec <_vfiprintf_r+0xa4>
 80074d4:	465b      	mov	r3, fp
 80074d6:	4622      	mov	r2, r4
 80074d8:	4629      	mov	r1, r5
 80074da:	4630      	mov	r0, r6
 80074dc:	f7ff ffa1 	bl	8007422 <__sfputs_r>
 80074e0:	3001      	adds	r0, #1
 80074e2:	f000 80a7 	beq.w	8007634 <_vfiprintf_r+0x1ec>
 80074e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074e8:	445a      	add	r2, fp
 80074ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80074ec:	f89a 3000 	ldrb.w	r3, [sl]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f000 809f 	beq.w	8007634 <_vfiprintf_r+0x1ec>
 80074f6:	2300      	movs	r3, #0
 80074f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80074fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007500:	f10a 0a01 	add.w	sl, sl, #1
 8007504:	9304      	str	r3, [sp, #16]
 8007506:	9307      	str	r3, [sp, #28]
 8007508:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800750c:	931a      	str	r3, [sp, #104]	@ 0x68
 800750e:	4654      	mov	r4, sl
 8007510:	2205      	movs	r2, #5
 8007512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007516:	4853      	ldr	r0, [pc, #332]	@ (8007664 <_vfiprintf_r+0x21c>)
 8007518:	f7f8 fe82 	bl	8000220 <memchr>
 800751c:	9a04      	ldr	r2, [sp, #16]
 800751e:	b9d8      	cbnz	r0, 8007558 <_vfiprintf_r+0x110>
 8007520:	06d1      	lsls	r1, r2, #27
 8007522:	bf44      	itt	mi
 8007524:	2320      	movmi	r3, #32
 8007526:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800752a:	0713      	lsls	r3, r2, #28
 800752c:	bf44      	itt	mi
 800752e:	232b      	movmi	r3, #43	@ 0x2b
 8007530:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007534:	f89a 3000 	ldrb.w	r3, [sl]
 8007538:	2b2a      	cmp	r3, #42	@ 0x2a
 800753a:	d015      	beq.n	8007568 <_vfiprintf_r+0x120>
 800753c:	9a07      	ldr	r2, [sp, #28]
 800753e:	4654      	mov	r4, sl
 8007540:	2000      	movs	r0, #0
 8007542:	f04f 0c0a 	mov.w	ip, #10
 8007546:	4621      	mov	r1, r4
 8007548:	f811 3b01 	ldrb.w	r3, [r1], #1
 800754c:	3b30      	subs	r3, #48	@ 0x30
 800754e:	2b09      	cmp	r3, #9
 8007550:	d94b      	bls.n	80075ea <_vfiprintf_r+0x1a2>
 8007552:	b1b0      	cbz	r0, 8007582 <_vfiprintf_r+0x13a>
 8007554:	9207      	str	r2, [sp, #28]
 8007556:	e014      	b.n	8007582 <_vfiprintf_r+0x13a>
 8007558:	eba0 0308 	sub.w	r3, r0, r8
 800755c:	fa09 f303 	lsl.w	r3, r9, r3
 8007560:	4313      	orrs	r3, r2
 8007562:	9304      	str	r3, [sp, #16]
 8007564:	46a2      	mov	sl, r4
 8007566:	e7d2      	b.n	800750e <_vfiprintf_r+0xc6>
 8007568:	9b03      	ldr	r3, [sp, #12]
 800756a:	1d19      	adds	r1, r3, #4
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	9103      	str	r1, [sp, #12]
 8007570:	2b00      	cmp	r3, #0
 8007572:	bfbb      	ittet	lt
 8007574:	425b      	neglt	r3, r3
 8007576:	f042 0202 	orrlt.w	r2, r2, #2
 800757a:	9307      	strge	r3, [sp, #28]
 800757c:	9307      	strlt	r3, [sp, #28]
 800757e:	bfb8      	it	lt
 8007580:	9204      	strlt	r2, [sp, #16]
 8007582:	7823      	ldrb	r3, [r4, #0]
 8007584:	2b2e      	cmp	r3, #46	@ 0x2e
 8007586:	d10a      	bne.n	800759e <_vfiprintf_r+0x156>
 8007588:	7863      	ldrb	r3, [r4, #1]
 800758a:	2b2a      	cmp	r3, #42	@ 0x2a
 800758c:	d132      	bne.n	80075f4 <_vfiprintf_r+0x1ac>
 800758e:	9b03      	ldr	r3, [sp, #12]
 8007590:	1d1a      	adds	r2, r3, #4
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	9203      	str	r2, [sp, #12]
 8007596:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800759a:	3402      	adds	r4, #2
 800759c:	9305      	str	r3, [sp, #20]
 800759e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007674 <_vfiprintf_r+0x22c>
 80075a2:	7821      	ldrb	r1, [r4, #0]
 80075a4:	2203      	movs	r2, #3
 80075a6:	4650      	mov	r0, sl
 80075a8:	f7f8 fe3a 	bl	8000220 <memchr>
 80075ac:	b138      	cbz	r0, 80075be <_vfiprintf_r+0x176>
 80075ae:	9b04      	ldr	r3, [sp, #16]
 80075b0:	eba0 000a 	sub.w	r0, r0, sl
 80075b4:	2240      	movs	r2, #64	@ 0x40
 80075b6:	4082      	lsls	r2, r0
 80075b8:	4313      	orrs	r3, r2
 80075ba:	3401      	adds	r4, #1
 80075bc:	9304      	str	r3, [sp, #16]
 80075be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075c2:	4829      	ldr	r0, [pc, #164]	@ (8007668 <_vfiprintf_r+0x220>)
 80075c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80075c8:	2206      	movs	r2, #6
 80075ca:	f7f8 fe29 	bl	8000220 <memchr>
 80075ce:	2800      	cmp	r0, #0
 80075d0:	d03f      	beq.n	8007652 <_vfiprintf_r+0x20a>
 80075d2:	4b26      	ldr	r3, [pc, #152]	@ (800766c <_vfiprintf_r+0x224>)
 80075d4:	bb1b      	cbnz	r3, 800761e <_vfiprintf_r+0x1d6>
 80075d6:	9b03      	ldr	r3, [sp, #12]
 80075d8:	3307      	adds	r3, #7
 80075da:	f023 0307 	bic.w	r3, r3, #7
 80075de:	3308      	adds	r3, #8
 80075e0:	9303      	str	r3, [sp, #12]
 80075e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075e4:	443b      	add	r3, r7
 80075e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80075e8:	e76a      	b.n	80074c0 <_vfiprintf_r+0x78>
 80075ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80075ee:	460c      	mov	r4, r1
 80075f0:	2001      	movs	r0, #1
 80075f2:	e7a8      	b.n	8007546 <_vfiprintf_r+0xfe>
 80075f4:	2300      	movs	r3, #0
 80075f6:	3401      	adds	r4, #1
 80075f8:	9305      	str	r3, [sp, #20]
 80075fa:	4619      	mov	r1, r3
 80075fc:	f04f 0c0a 	mov.w	ip, #10
 8007600:	4620      	mov	r0, r4
 8007602:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007606:	3a30      	subs	r2, #48	@ 0x30
 8007608:	2a09      	cmp	r2, #9
 800760a:	d903      	bls.n	8007614 <_vfiprintf_r+0x1cc>
 800760c:	2b00      	cmp	r3, #0
 800760e:	d0c6      	beq.n	800759e <_vfiprintf_r+0x156>
 8007610:	9105      	str	r1, [sp, #20]
 8007612:	e7c4      	b.n	800759e <_vfiprintf_r+0x156>
 8007614:	fb0c 2101 	mla	r1, ip, r1, r2
 8007618:	4604      	mov	r4, r0
 800761a:	2301      	movs	r3, #1
 800761c:	e7f0      	b.n	8007600 <_vfiprintf_r+0x1b8>
 800761e:	ab03      	add	r3, sp, #12
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	462a      	mov	r2, r5
 8007624:	4b12      	ldr	r3, [pc, #72]	@ (8007670 <_vfiprintf_r+0x228>)
 8007626:	a904      	add	r1, sp, #16
 8007628:	4630      	mov	r0, r6
 800762a:	f3af 8000 	nop.w
 800762e:	4607      	mov	r7, r0
 8007630:	1c78      	adds	r0, r7, #1
 8007632:	d1d6      	bne.n	80075e2 <_vfiprintf_r+0x19a>
 8007634:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007636:	07d9      	lsls	r1, r3, #31
 8007638:	d405      	bmi.n	8007646 <_vfiprintf_r+0x1fe>
 800763a:	89ab      	ldrh	r3, [r5, #12]
 800763c:	059a      	lsls	r2, r3, #22
 800763e:	d402      	bmi.n	8007646 <_vfiprintf_r+0x1fe>
 8007640:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007642:	f7ff fddd 	bl	8007200 <__retarget_lock_release_recursive>
 8007646:	89ab      	ldrh	r3, [r5, #12]
 8007648:	065b      	lsls	r3, r3, #25
 800764a:	f53f af1f 	bmi.w	800748c <_vfiprintf_r+0x44>
 800764e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007650:	e71e      	b.n	8007490 <_vfiprintf_r+0x48>
 8007652:	ab03      	add	r3, sp, #12
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	462a      	mov	r2, r5
 8007658:	4b05      	ldr	r3, [pc, #20]	@ (8007670 <_vfiprintf_r+0x228>)
 800765a:	a904      	add	r1, sp, #16
 800765c:	4630      	mov	r0, r6
 800765e:	f000 f879 	bl	8007754 <_printf_i>
 8007662:	e7e4      	b.n	800762e <_vfiprintf_r+0x1e6>
 8007664:	08007f38 	.word	0x08007f38
 8007668:	08007f42 	.word	0x08007f42
 800766c:	00000000 	.word	0x00000000
 8007670:	08007423 	.word	0x08007423
 8007674:	08007f3e 	.word	0x08007f3e

08007678 <_printf_common>:
 8007678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800767c:	4616      	mov	r6, r2
 800767e:	4698      	mov	r8, r3
 8007680:	688a      	ldr	r2, [r1, #8]
 8007682:	690b      	ldr	r3, [r1, #16]
 8007684:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007688:	4293      	cmp	r3, r2
 800768a:	bfb8      	it	lt
 800768c:	4613      	movlt	r3, r2
 800768e:	6033      	str	r3, [r6, #0]
 8007690:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007694:	4607      	mov	r7, r0
 8007696:	460c      	mov	r4, r1
 8007698:	b10a      	cbz	r2, 800769e <_printf_common+0x26>
 800769a:	3301      	adds	r3, #1
 800769c:	6033      	str	r3, [r6, #0]
 800769e:	6823      	ldr	r3, [r4, #0]
 80076a0:	0699      	lsls	r1, r3, #26
 80076a2:	bf42      	ittt	mi
 80076a4:	6833      	ldrmi	r3, [r6, #0]
 80076a6:	3302      	addmi	r3, #2
 80076a8:	6033      	strmi	r3, [r6, #0]
 80076aa:	6825      	ldr	r5, [r4, #0]
 80076ac:	f015 0506 	ands.w	r5, r5, #6
 80076b0:	d106      	bne.n	80076c0 <_printf_common+0x48>
 80076b2:	f104 0a19 	add.w	sl, r4, #25
 80076b6:	68e3      	ldr	r3, [r4, #12]
 80076b8:	6832      	ldr	r2, [r6, #0]
 80076ba:	1a9b      	subs	r3, r3, r2
 80076bc:	42ab      	cmp	r3, r5
 80076be:	dc26      	bgt.n	800770e <_printf_common+0x96>
 80076c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80076c4:	6822      	ldr	r2, [r4, #0]
 80076c6:	3b00      	subs	r3, #0
 80076c8:	bf18      	it	ne
 80076ca:	2301      	movne	r3, #1
 80076cc:	0692      	lsls	r2, r2, #26
 80076ce:	d42b      	bmi.n	8007728 <_printf_common+0xb0>
 80076d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80076d4:	4641      	mov	r1, r8
 80076d6:	4638      	mov	r0, r7
 80076d8:	47c8      	blx	r9
 80076da:	3001      	adds	r0, #1
 80076dc:	d01e      	beq.n	800771c <_printf_common+0xa4>
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	6922      	ldr	r2, [r4, #16]
 80076e2:	f003 0306 	and.w	r3, r3, #6
 80076e6:	2b04      	cmp	r3, #4
 80076e8:	bf02      	ittt	eq
 80076ea:	68e5      	ldreq	r5, [r4, #12]
 80076ec:	6833      	ldreq	r3, [r6, #0]
 80076ee:	1aed      	subeq	r5, r5, r3
 80076f0:	68a3      	ldr	r3, [r4, #8]
 80076f2:	bf0c      	ite	eq
 80076f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076f8:	2500      	movne	r5, #0
 80076fa:	4293      	cmp	r3, r2
 80076fc:	bfc4      	itt	gt
 80076fe:	1a9b      	subgt	r3, r3, r2
 8007700:	18ed      	addgt	r5, r5, r3
 8007702:	2600      	movs	r6, #0
 8007704:	341a      	adds	r4, #26
 8007706:	42b5      	cmp	r5, r6
 8007708:	d11a      	bne.n	8007740 <_printf_common+0xc8>
 800770a:	2000      	movs	r0, #0
 800770c:	e008      	b.n	8007720 <_printf_common+0xa8>
 800770e:	2301      	movs	r3, #1
 8007710:	4652      	mov	r2, sl
 8007712:	4641      	mov	r1, r8
 8007714:	4638      	mov	r0, r7
 8007716:	47c8      	blx	r9
 8007718:	3001      	adds	r0, #1
 800771a:	d103      	bne.n	8007724 <_printf_common+0xac>
 800771c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007724:	3501      	adds	r5, #1
 8007726:	e7c6      	b.n	80076b6 <_printf_common+0x3e>
 8007728:	18e1      	adds	r1, r4, r3
 800772a:	1c5a      	adds	r2, r3, #1
 800772c:	2030      	movs	r0, #48	@ 0x30
 800772e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007732:	4422      	add	r2, r4
 8007734:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007738:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800773c:	3302      	adds	r3, #2
 800773e:	e7c7      	b.n	80076d0 <_printf_common+0x58>
 8007740:	2301      	movs	r3, #1
 8007742:	4622      	mov	r2, r4
 8007744:	4641      	mov	r1, r8
 8007746:	4638      	mov	r0, r7
 8007748:	47c8      	blx	r9
 800774a:	3001      	adds	r0, #1
 800774c:	d0e6      	beq.n	800771c <_printf_common+0xa4>
 800774e:	3601      	adds	r6, #1
 8007750:	e7d9      	b.n	8007706 <_printf_common+0x8e>
	...

08007754 <_printf_i>:
 8007754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007758:	7e0f      	ldrb	r7, [r1, #24]
 800775a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800775c:	2f78      	cmp	r7, #120	@ 0x78
 800775e:	4691      	mov	r9, r2
 8007760:	4680      	mov	r8, r0
 8007762:	460c      	mov	r4, r1
 8007764:	469a      	mov	sl, r3
 8007766:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800776a:	d807      	bhi.n	800777c <_printf_i+0x28>
 800776c:	2f62      	cmp	r7, #98	@ 0x62
 800776e:	d80a      	bhi.n	8007786 <_printf_i+0x32>
 8007770:	2f00      	cmp	r7, #0
 8007772:	f000 80d2 	beq.w	800791a <_printf_i+0x1c6>
 8007776:	2f58      	cmp	r7, #88	@ 0x58
 8007778:	f000 80b9 	beq.w	80078ee <_printf_i+0x19a>
 800777c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007780:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007784:	e03a      	b.n	80077fc <_printf_i+0xa8>
 8007786:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800778a:	2b15      	cmp	r3, #21
 800778c:	d8f6      	bhi.n	800777c <_printf_i+0x28>
 800778e:	a101      	add	r1, pc, #4	@ (adr r1, 8007794 <_printf_i+0x40>)
 8007790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007794:	080077ed 	.word	0x080077ed
 8007798:	08007801 	.word	0x08007801
 800779c:	0800777d 	.word	0x0800777d
 80077a0:	0800777d 	.word	0x0800777d
 80077a4:	0800777d 	.word	0x0800777d
 80077a8:	0800777d 	.word	0x0800777d
 80077ac:	08007801 	.word	0x08007801
 80077b0:	0800777d 	.word	0x0800777d
 80077b4:	0800777d 	.word	0x0800777d
 80077b8:	0800777d 	.word	0x0800777d
 80077bc:	0800777d 	.word	0x0800777d
 80077c0:	08007901 	.word	0x08007901
 80077c4:	0800782b 	.word	0x0800782b
 80077c8:	080078bb 	.word	0x080078bb
 80077cc:	0800777d 	.word	0x0800777d
 80077d0:	0800777d 	.word	0x0800777d
 80077d4:	08007923 	.word	0x08007923
 80077d8:	0800777d 	.word	0x0800777d
 80077dc:	0800782b 	.word	0x0800782b
 80077e0:	0800777d 	.word	0x0800777d
 80077e4:	0800777d 	.word	0x0800777d
 80077e8:	080078c3 	.word	0x080078c3
 80077ec:	6833      	ldr	r3, [r6, #0]
 80077ee:	1d1a      	adds	r2, r3, #4
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	6032      	str	r2, [r6, #0]
 80077f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80077fc:	2301      	movs	r3, #1
 80077fe:	e09d      	b.n	800793c <_printf_i+0x1e8>
 8007800:	6833      	ldr	r3, [r6, #0]
 8007802:	6820      	ldr	r0, [r4, #0]
 8007804:	1d19      	adds	r1, r3, #4
 8007806:	6031      	str	r1, [r6, #0]
 8007808:	0606      	lsls	r6, r0, #24
 800780a:	d501      	bpl.n	8007810 <_printf_i+0xbc>
 800780c:	681d      	ldr	r5, [r3, #0]
 800780e:	e003      	b.n	8007818 <_printf_i+0xc4>
 8007810:	0645      	lsls	r5, r0, #25
 8007812:	d5fb      	bpl.n	800780c <_printf_i+0xb8>
 8007814:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007818:	2d00      	cmp	r5, #0
 800781a:	da03      	bge.n	8007824 <_printf_i+0xd0>
 800781c:	232d      	movs	r3, #45	@ 0x2d
 800781e:	426d      	negs	r5, r5
 8007820:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007824:	4859      	ldr	r0, [pc, #356]	@ (800798c <_printf_i+0x238>)
 8007826:	230a      	movs	r3, #10
 8007828:	e011      	b.n	800784e <_printf_i+0xfa>
 800782a:	6821      	ldr	r1, [r4, #0]
 800782c:	6833      	ldr	r3, [r6, #0]
 800782e:	0608      	lsls	r0, r1, #24
 8007830:	f853 5b04 	ldr.w	r5, [r3], #4
 8007834:	d402      	bmi.n	800783c <_printf_i+0xe8>
 8007836:	0649      	lsls	r1, r1, #25
 8007838:	bf48      	it	mi
 800783a:	b2ad      	uxthmi	r5, r5
 800783c:	2f6f      	cmp	r7, #111	@ 0x6f
 800783e:	4853      	ldr	r0, [pc, #332]	@ (800798c <_printf_i+0x238>)
 8007840:	6033      	str	r3, [r6, #0]
 8007842:	bf14      	ite	ne
 8007844:	230a      	movne	r3, #10
 8007846:	2308      	moveq	r3, #8
 8007848:	2100      	movs	r1, #0
 800784a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800784e:	6866      	ldr	r6, [r4, #4]
 8007850:	60a6      	str	r6, [r4, #8]
 8007852:	2e00      	cmp	r6, #0
 8007854:	bfa2      	ittt	ge
 8007856:	6821      	ldrge	r1, [r4, #0]
 8007858:	f021 0104 	bicge.w	r1, r1, #4
 800785c:	6021      	strge	r1, [r4, #0]
 800785e:	b90d      	cbnz	r5, 8007864 <_printf_i+0x110>
 8007860:	2e00      	cmp	r6, #0
 8007862:	d04b      	beq.n	80078fc <_printf_i+0x1a8>
 8007864:	4616      	mov	r6, r2
 8007866:	fbb5 f1f3 	udiv	r1, r5, r3
 800786a:	fb03 5711 	mls	r7, r3, r1, r5
 800786e:	5dc7      	ldrb	r7, [r0, r7]
 8007870:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007874:	462f      	mov	r7, r5
 8007876:	42bb      	cmp	r3, r7
 8007878:	460d      	mov	r5, r1
 800787a:	d9f4      	bls.n	8007866 <_printf_i+0x112>
 800787c:	2b08      	cmp	r3, #8
 800787e:	d10b      	bne.n	8007898 <_printf_i+0x144>
 8007880:	6823      	ldr	r3, [r4, #0]
 8007882:	07df      	lsls	r7, r3, #31
 8007884:	d508      	bpl.n	8007898 <_printf_i+0x144>
 8007886:	6923      	ldr	r3, [r4, #16]
 8007888:	6861      	ldr	r1, [r4, #4]
 800788a:	4299      	cmp	r1, r3
 800788c:	bfde      	ittt	le
 800788e:	2330      	movle	r3, #48	@ 0x30
 8007890:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007894:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007898:	1b92      	subs	r2, r2, r6
 800789a:	6122      	str	r2, [r4, #16]
 800789c:	f8cd a000 	str.w	sl, [sp]
 80078a0:	464b      	mov	r3, r9
 80078a2:	aa03      	add	r2, sp, #12
 80078a4:	4621      	mov	r1, r4
 80078a6:	4640      	mov	r0, r8
 80078a8:	f7ff fee6 	bl	8007678 <_printf_common>
 80078ac:	3001      	adds	r0, #1
 80078ae:	d14a      	bne.n	8007946 <_printf_i+0x1f2>
 80078b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078b4:	b004      	add	sp, #16
 80078b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	f043 0320 	orr.w	r3, r3, #32
 80078c0:	6023      	str	r3, [r4, #0]
 80078c2:	4833      	ldr	r0, [pc, #204]	@ (8007990 <_printf_i+0x23c>)
 80078c4:	2778      	movs	r7, #120	@ 0x78
 80078c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	6831      	ldr	r1, [r6, #0]
 80078ce:	061f      	lsls	r7, r3, #24
 80078d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80078d4:	d402      	bmi.n	80078dc <_printf_i+0x188>
 80078d6:	065f      	lsls	r7, r3, #25
 80078d8:	bf48      	it	mi
 80078da:	b2ad      	uxthmi	r5, r5
 80078dc:	6031      	str	r1, [r6, #0]
 80078de:	07d9      	lsls	r1, r3, #31
 80078e0:	bf44      	itt	mi
 80078e2:	f043 0320 	orrmi.w	r3, r3, #32
 80078e6:	6023      	strmi	r3, [r4, #0]
 80078e8:	b11d      	cbz	r5, 80078f2 <_printf_i+0x19e>
 80078ea:	2310      	movs	r3, #16
 80078ec:	e7ac      	b.n	8007848 <_printf_i+0xf4>
 80078ee:	4827      	ldr	r0, [pc, #156]	@ (800798c <_printf_i+0x238>)
 80078f0:	e7e9      	b.n	80078c6 <_printf_i+0x172>
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	f023 0320 	bic.w	r3, r3, #32
 80078f8:	6023      	str	r3, [r4, #0]
 80078fa:	e7f6      	b.n	80078ea <_printf_i+0x196>
 80078fc:	4616      	mov	r6, r2
 80078fe:	e7bd      	b.n	800787c <_printf_i+0x128>
 8007900:	6833      	ldr	r3, [r6, #0]
 8007902:	6825      	ldr	r5, [r4, #0]
 8007904:	6961      	ldr	r1, [r4, #20]
 8007906:	1d18      	adds	r0, r3, #4
 8007908:	6030      	str	r0, [r6, #0]
 800790a:	062e      	lsls	r6, r5, #24
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	d501      	bpl.n	8007914 <_printf_i+0x1c0>
 8007910:	6019      	str	r1, [r3, #0]
 8007912:	e002      	b.n	800791a <_printf_i+0x1c6>
 8007914:	0668      	lsls	r0, r5, #25
 8007916:	d5fb      	bpl.n	8007910 <_printf_i+0x1bc>
 8007918:	8019      	strh	r1, [r3, #0]
 800791a:	2300      	movs	r3, #0
 800791c:	6123      	str	r3, [r4, #16]
 800791e:	4616      	mov	r6, r2
 8007920:	e7bc      	b.n	800789c <_printf_i+0x148>
 8007922:	6833      	ldr	r3, [r6, #0]
 8007924:	1d1a      	adds	r2, r3, #4
 8007926:	6032      	str	r2, [r6, #0]
 8007928:	681e      	ldr	r6, [r3, #0]
 800792a:	6862      	ldr	r2, [r4, #4]
 800792c:	2100      	movs	r1, #0
 800792e:	4630      	mov	r0, r6
 8007930:	f7f8 fc76 	bl	8000220 <memchr>
 8007934:	b108      	cbz	r0, 800793a <_printf_i+0x1e6>
 8007936:	1b80      	subs	r0, r0, r6
 8007938:	6060      	str	r0, [r4, #4]
 800793a:	6863      	ldr	r3, [r4, #4]
 800793c:	6123      	str	r3, [r4, #16]
 800793e:	2300      	movs	r3, #0
 8007940:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007944:	e7aa      	b.n	800789c <_printf_i+0x148>
 8007946:	6923      	ldr	r3, [r4, #16]
 8007948:	4632      	mov	r2, r6
 800794a:	4649      	mov	r1, r9
 800794c:	4640      	mov	r0, r8
 800794e:	47d0      	blx	sl
 8007950:	3001      	adds	r0, #1
 8007952:	d0ad      	beq.n	80078b0 <_printf_i+0x15c>
 8007954:	6823      	ldr	r3, [r4, #0]
 8007956:	079b      	lsls	r3, r3, #30
 8007958:	d413      	bmi.n	8007982 <_printf_i+0x22e>
 800795a:	68e0      	ldr	r0, [r4, #12]
 800795c:	9b03      	ldr	r3, [sp, #12]
 800795e:	4298      	cmp	r0, r3
 8007960:	bfb8      	it	lt
 8007962:	4618      	movlt	r0, r3
 8007964:	e7a6      	b.n	80078b4 <_printf_i+0x160>
 8007966:	2301      	movs	r3, #1
 8007968:	4632      	mov	r2, r6
 800796a:	4649      	mov	r1, r9
 800796c:	4640      	mov	r0, r8
 800796e:	47d0      	blx	sl
 8007970:	3001      	adds	r0, #1
 8007972:	d09d      	beq.n	80078b0 <_printf_i+0x15c>
 8007974:	3501      	adds	r5, #1
 8007976:	68e3      	ldr	r3, [r4, #12]
 8007978:	9903      	ldr	r1, [sp, #12]
 800797a:	1a5b      	subs	r3, r3, r1
 800797c:	42ab      	cmp	r3, r5
 800797e:	dcf2      	bgt.n	8007966 <_printf_i+0x212>
 8007980:	e7eb      	b.n	800795a <_printf_i+0x206>
 8007982:	2500      	movs	r5, #0
 8007984:	f104 0619 	add.w	r6, r4, #25
 8007988:	e7f5      	b.n	8007976 <_printf_i+0x222>
 800798a:	bf00      	nop
 800798c:	08007f49 	.word	0x08007f49
 8007990:	08007f5a 	.word	0x08007f5a

08007994 <__sflush_r>:
 8007994:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800799c:	0716      	lsls	r6, r2, #28
 800799e:	4605      	mov	r5, r0
 80079a0:	460c      	mov	r4, r1
 80079a2:	d454      	bmi.n	8007a4e <__sflush_r+0xba>
 80079a4:	684b      	ldr	r3, [r1, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	dc02      	bgt.n	80079b0 <__sflush_r+0x1c>
 80079aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	dd48      	ble.n	8007a42 <__sflush_r+0xae>
 80079b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80079b2:	2e00      	cmp	r6, #0
 80079b4:	d045      	beq.n	8007a42 <__sflush_r+0xae>
 80079b6:	2300      	movs	r3, #0
 80079b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80079bc:	682f      	ldr	r7, [r5, #0]
 80079be:	6a21      	ldr	r1, [r4, #32]
 80079c0:	602b      	str	r3, [r5, #0]
 80079c2:	d030      	beq.n	8007a26 <__sflush_r+0x92>
 80079c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80079c6:	89a3      	ldrh	r3, [r4, #12]
 80079c8:	0759      	lsls	r1, r3, #29
 80079ca:	d505      	bpl.n	80079d8 <__sflush_r+0x44>
 80079cc:	6863      	ldr	r3, [r4, #4]
 80079ce:	1ad2      	subs	r2, r2, r3
 80079d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80079d2:	b10b      	cbz	r3, 80079d8 <__sflush_r+0x44>
 80079d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80079d6:	1ad2      	subs	r2, r2, r3
 80079d8:	2300      	movs	r3, #0
 80079da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80079dc:	6a21      	ldr	r1, [r4, #32]
 80079de:	4628      	mov	r0, r5
 80079e0:	47b0      	blx	r6
 80079e2:	1c43      	adds	r3, r0, #1
 80079e4:	89a3      	ldrh	r3, [r4, #12]
 80079e6:	d106      	bne.n	80079f6 <__sflush_r+0x62>
 80079e8:	6829      	ldr	r1, [r5, #0]
 80079ea:	291d      	cmp	r1, #29
 80079ec:	d82b      	bhi.n	8007a46 <__sflush_r+0xb2>
 80079ee:	4a2a      	ldr	r2, [pc, #168]	@ (8007a98 <__sflush_r+0x104>)
 80079f0:	410a      	asrs	r2, r1
 80079f2:	07d6      	lsls	r6, r2, #31
 80079f4:	d427      	bmi.n	8007a46 <__sflush_r+0xb2>
 80079f6:	2200      	movs	r2, #0
 80079f8:	6062      	str	r2, [r4, #4]
 80079fa:	04d9      	lsls	r1, r3, #19
 80079fc:	6922      	ldr	r2, [r4, #16]
 80079fe:	6022      	str	r2, [r4, #0]
 8007a00:	d504      	bpl.n	8007a0c <__sflush_r+0x78>
 8007a02:	1c42      	adds	r2, r0, #1
 8007a04:	d101      	bne.n	8007a0a <__sflush_r+0x76>
 8007a06:	682b      	ldr	r3, [r5, #0]
 8007a08:	b903      	cbnz	r3, 8007a0c <__sflush_r+0x78>
 8007a0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007a0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a0e:	602f      	str	r7, [r5, #0]
 8007a10:	b1b9      	cbz	r1, 8007a42 <__sflush_r+0xae>
 8007a12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a16:	4299      	cmp	r1, r3
 8007a18:	d002      	beq.n	8007a20 <__sflush_r+0x8c>
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	f7ff fbf2 	bl	8007204 <_free_r>
 8007a20:	2300      	movs	r3, #0
 8007a22:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a24:	e00d      	b.n	8007a42 <__sflush_r+0xae>
 8007a26:	2301      	movs	r3, #1
 8007a28:	4628      	mov	r0, r5
 8007a2a:	47b0      	blx	r6
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	1c50      	adds	r0, r2, #1
 8007a30:	d1c9      	bne.n	80079c6 <__sflush_r+0x32>
 8007a32:	682b      	ldr	r3, [r5, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d0c6      	beq.n	80079c6 <__sflush_r+0x32>
 8007a38:	2b1d      	cmp	r3, #29
 8007a3a:	d001      	beq.n	8007a40 <__sflush_r+0xac>
 8007a3c:	2b16      	cmp	r3, #22
 8007a3e:	d11e      	bne.n	8007a7e <__sflush_r+0xea>
 8007a40:	602f      	str	r7, [r5, #0]
 8007a42:	2000      	movs	r0, #0
 8007a44:	e022      	b.n	8007a8c <__sflush_r+0xf8>
 8007a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a4a:	b21b      	sxth	r3, r3
 8007a4c:	e01b      	b.n	8007a86 <__sflush_r+0xf2>
 8007a4e:	690f      	ldr	r7, [r1, #16]
 8007a50:	2f00      	cmp	r7, #0
 8007a52:	d0f6      	beq.n	8007a42 <__sflush_r+0xae>
 8007a54:	0793      	lsls	r3, r2, #30
 8007a56:	680e      	ldr	r6, [r1, #0]
 8007a58:	bf08      	it	eq
 8007a5a:	694b      	ldreq	r3, [r1, #20]
 8007a5c:	600f      	str	r7, [r1, #0]
 8007a5e:	bf18      	it	ne
 8007a60:	2300      	movne	r3, #0
 8007a62:	eba6 0807 	sub.w	r8, r6, r7
 8007a66:	608b      	str	r3, [r1, #8]
 8007a68:	f1b8 0f00 	cmp.w	r8, #0
 8007a6c:	dde9      	ble.n	8007a42 <__sflush_r+0xae>
 8007a6e:	6a21      	ldr	r1, [r4, #32]
 8007a70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007a72:	4643      	mov	r3, r8
 8007a74:	463a      	mov	r2, r7
 8007a76:	4628      	mov	r0, r5
 8007a78:	47b0      	blx	r6
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	dc08      	bgt.n	8007a90 <__sflush_r+0xfc>
 8007a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a86:	81a3      	strh	r3, [r4, #12]
 8007a88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a90:	4407      	add	r7, r0
 8007a92:	eba8 0800 	sub.w	r8, r8, r0
 8007a96:	e7e7      	b.n	8007a68 <__sflush_r+0xd4>
 8007a98:	dfbffffe 	.word	0xdfbffffe

08007a9c <_fflush_r>:
 8007a9c:	b538      	push	{r3, r4, r5, lr}
 8007a9e:	690b      	ldr	r3, [r1, #16]
 8007aa0:	4605      	mov	r5, r0
 8007aa2:	460c      	mov	r4, r1
 8007aa4:	b913      	cbnz	r3, 8007aac <_fflush_r+0x10>
 8007aa6:	2500      	movs	r5, #0
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	bd38      	pop	{r3, r4, r5, pc}
 8007aac:	b118      	cbz	r0, 8007ab6 <_fflush_r+0x1a>
 8007aae:	6a03      	ldr	r3, [r0, #32]
 8007ab0:	b90b      	cbnz	r3, 8007ab6 <_fflush_r+0x1a>
 8007ab2:	f7ff f9ad 	bl	8006e10 <__sinit>
 8007ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d0f3      	beq.n	8007aa6 <_fflush_r+0xa>
 8007abe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ac0:	07d0      	lsls	r0, r2, #31
 8007ac2:	d404      	bmi.n	8007ace <_fflush_r+0x32>
 8007ac4:	0599      	lsls	r1, r3, #22
 8007ac6:	d402      	bmi.n	8007ace <_fflush_r+0x32>
 8007ac8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007aca:	f7ff fb98 	bl	80071fe <__retarget_lock_acquire_recursive>
 8007ace:	4628      	mov	r0, r5
 8007ad0:	4621      	mov	r1, r4
 8007ad2:	f7ff ff5f 	bl	8007994 <__sflush_r>
 8007ad6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ad8:	07da      	lsls	r2, r3, #31
 8007ada:	4605      	mov	r5, r0
 8007adc:	d4e4      	bmi.n	8007aa8 <_fflush_r+0xc>
 8007ade:	89a3      	ldrh	r3, [r4, #12]
 8007ae0:	059b      	lsls	r3, r3, #22
 8007ae2:	d4e1      	bmi.n	8007aa8 <_fflush_r+0xc>
 8007ae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ae6:	f7ff fb8b 	bl	8007200 <__retarget_lock_release_recursive>
 8007aea:	e7dd      	b.n	8007aa8 <_fflush_r+0xc>

08007aec <__swhatbuf_r>:
 8007aec:	b570      	push	{r4, r5, r6, lr}
 8007aee:	460c      	mov	r4, r1
 8007af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007af4:	2900      	cmp	r1, #0
 8007af6:	b096      	sub	sp, #88	@ 0x58
 8007af8:	4615      	mov	r5, r2
 8007afa:	461e      	mov	r6, r3
 8007afc:	da0d      	bge.n	8007b1a <__swhatbuf_r+0x2e>
 8007afe:	89a3      	ldrh	r3, [r4, #12]
 8007b00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007b04:	f04f 0100 	mov.w	r1, #0
 8007b08:	bf14      	ite	ne
 8007b0a:	2340      	movne	r3, #64	@ 0x40
 8007b0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007b10:	2000      	movs	r0, #0
 8007b12:	6031      	str	r1, [r6, #0]
 8007b14:	602b      	str	r3, [r5, #0]
 8007b16:	b016      	add	sp, #88	@ 0x58
 8007b18:	bd70      	pop	{r4, r5, r6, pc}
 8007b1a:	466a      	mov	r2, sp
 8007b1c:	f000 f848 	bl	8007bb0 <_fstat_r>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	dbec      	blt.n	8007afe <__swhatbuf_r+0x12>
 8007b24:	9901      	ldr	r1, [sp, #4]
 8007b26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007b2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007b2e:	4259      	negs	r1, r3
 8007b30:	4159      	adcs	r1, r3
 8007b32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b36:	e7eb      	b.n	8007b10 <__swhatbuf_r+0x24>

08007b38 <__smakebuf_r>:
 8007b38:	898b      	ldrh	r3, [r1, #12]
 8007b3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b3c:	079d      	lsls	r5, r3, #30
 8007b3e:	4606      	mov	r6, r0
 8007b40:	460c      	mov	r4, r1
 8007b42:	d507      	bpl.n	8007b54 <__smakebuf_r+0x1c>
 8007b44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	6123      	str	r3, [r4, #16]
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	6163      	str	r3, [r4, #20]
 8007b50:	b003      	add	sp, #12
 8007b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b54:	ab01      	add	r3, sp, #4
 8007b56:	466a      	mov	r2, sp
 8007b58:	f7ff ffc8 	bl	8007aec <__swhatbuf_r>
 8007b5c:	9f00      	ldr	r7, [sp, #0]
 8007b5e:	4605      	mov	r5, r0
 8007b60:	4639      	mov	r1, r7
 8007b62:	4630      	mov	r0, r6
 8007b64:	f7ff fbba 	bl	80072dc <_malloc_r>
 8007b68:	b948      	cbnz	r0, 8007b7e <__smakebuf_r+0x46>
 8007b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b6e:	059a      	lsls	r2, r3, #22
 8007b70:	d4ee      	bmi.n	8007b50 <__smakebuf_r+0x18>
 8007b72:	f023 0303 	bic.w	r3, r3, #3
 8007b76:	f043 0302 	orr.w	r3, r3, #2
 8007b7a:	81a3      	strh	r3, [r4, #12]
 8007b7c:	e7e2      	b.n	8007b44 <__smakebuf_r+0xc>
 8007b7e:	89a3      	ldrh	r3, [r4, #12]
 8007b80:	6020      	str	r0, [r4, #0]
 8007b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b86:	81a3      	strh	r3, [r4, #12]
 8007b88:	9b01      	ldr	r3, [sp, #4]
 8007b8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007b8e:	b15b      	cbz	r3, 8007ba8 <__smakebuf_r+0x70>
 8007b90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b94:	4630      	mov	r0, r6
 8007b96:	f000 f81d 	bl	8007bd4 <_isatty_r>
 8007b9a:	b128      	cbz	r0, 8007ba8 <__smakebuf_r+0x70>
 8007b9c:	89a3      	ldrh	r3, [r4, #12]
 8007b9e:	f023 0303 	bic.w	r3, r3, #3
 8007ba2:	f043 0301 	orr.w	r3, r3, #1
 8007ba6:	81a3      	strh	r3, [r4, #12]
 8007ba8:	89a3      	ldrh	r3, [r4, #12]
 8007baa:	431d      	orrs	r5, r3
 8007bac:	81a5      	strh	r5, [r4, #12]
 8007bae:	e7cf      	b.n	8007b50 <__smakebuf_r+0x18>

08007bb0 <_fstat_r>:
 8007bb0:	b538      	push	{r3, r4, r5, lr}
 8007bb2:	4d07      	ldr	r5, [pc, #28]	@ (8007bd0 <_fstat_r+0x20>)
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	4608      	mov	r0, r1
 8007bba:	4611      	mov	r1, r2
 8007bbc:	602b      	str	r3, [r5, #0]
 8007bbe:	f7f9 ff1b 	bl	80019f8 <_fstat>
 8007bc2:	1c43      	adds	r3, r0, #1
 8007bc4:	d102      	bne.n	8007bcc <_fstat_r+0x1c>
 8007bc6:	682b      	ldr	r3, [r5, #0]
 8007bc8:	b103      	cbz	r3, 8007bcc <_fstat_r+0x1c>
 8007bca:	6023      	str	r3, [r4, #0]
 8007bcc:	bd38      	pop	{r3, r4, r5, pc}
 8007bce:	bf00      	nop
 8007bd0:	200003c4 	.word	0x200003c4

08007bd4 <_isatty_r>:
 8007bd4:	b538      	push	{r3, r4, r5, lr}
 8007bd6:	4d06      	ldr	r5, [pc, #24]	@ (8007bf0 <_isatty_r+0x1c>)
 8007bd8:	2300      	movs	r3, #0
 8007bda:	4604      	mov	r4, r0
 8007bdc:	4608      	mov	r0, r1
 8007bde:	602b      	str	r3, [r5, #0]
 8007be0:	f7f9 ff1a 	bl	8001a18 <_isatty>
 8007be4:	1c43      	adds	r3, r0, #1
 8007be6:	d102      	bne.n	8007bee <_isatty_r+0x1a>
 8007be8:	682b      	ldr	r3, [r5, #0]
 8007bea:	b103      	cbz	r3, 8007bee <_isatty_r+0x1a>
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	bd38      	pop	{r3, r4, r5, pc}
 8007bf0:	200003c4 	.word	0x200003c4

08007bf4 <_sbrk_r>:
 8007bf4:	b538      	push	{r3, r4, r5, lr}
 8007bf6:	4d06      	ldr	r5, [pc, #24]	@ (8007c10 <_sbrk_r+0x1c>)
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	4604      	mov	r4, r0
 8007bfc:	4608      	mov	r0, r1
 8007bfe:	602b      	str	r3, [r5, #0]
 8007c00:	f7f9 ff22 	bl	8001a48 <_sbrk>
 8007c04:	1c43      	adds	r3, r0, #1
 8007c06:	d102      	bne.n	8007c0e <_sbrk_r+0x1a>
 8007c08:	682b      	ldr	r3, [r5, #0]
 8007c0a:	b103      	cbz	r3, 8007c0e <_sbrk_r+0x1a>
 8007c0c:	6023      	str	r3, [r4, #0]
 8007c0e:	bd38      	pop	{r3, r4, r5, pc}
 8007c10:	200003c4 	.word	0x200003c4

08007c14 <_init>:
 8007c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c16:	bf00      	nop
 8007c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c1a:	bc08      	pop	{r3}
 8007c1c:	469e      	mov	lr, r3
 8007c1e:	4770      	bx	lr

08007c20 <_fini>:
 8007c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c22:	bf00      	nop
 8007c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c26:	bc08      	pop	{r3}
 8007c28:	469e      	mov	lr, r3
 8007c2a:	4770      	bx	lr
