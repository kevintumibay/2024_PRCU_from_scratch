
STM32_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064ac  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  0800668c  0800668c  0000768c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006880  08006880  00008070  2**0
                  CONTENTS
  4 .ARM          00000008  08006880  08006880  00007880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006888  08006888  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006888  08006888  00007888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800688c  0800688c  0000788c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006890  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  20000070  08006900  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08006900  000083c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015603  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a74  00000000  00000000  0001d6a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  00020118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000116c  00000000  00000000  00021788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021484  00000000  00000000  000228f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017dae  00000000  00000000  00043d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc193  00000000  00000000  0005bb26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137cb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068f4  00000000  00000000  00137cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0013e5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006674 	.word	0x08006674

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08006674 	.word	0x08006674

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002cc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80002d0:	f003 0301 	and.w	r3, r3, #1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d013      	beq.n	8000300 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80002d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002dc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80002e0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d00b      	beq.n	8000300 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002e8:	e000      	b.n	80002ec <ITM_SendChar+0x2c>
    {
      __NOP();
 80002ea:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002ec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d0f9      	beq.n	80002ea <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002f6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	b2d2      	uxtb	r2, r2
 80002fe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000300:	687b      	ldr	r3, [r7, #4]
}
 8000302:	4618      	mov	r0, r3
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
	...

08000310 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b08a      	sub	sp, #40	@ 0x28
 8000314:	af02      	add	r7, sp, #8

	/* USER CODE BEGIN 1 */
	uint16_t AD_RES = 0;
 8000316:	2300      	movs	r3, #0
 8000318:	837b      	strh	r3, [r7, #26]
	float AD_RES_float = 0;
 800031a:	f04f 0300 	mov.w	r3, #0
 800031e:	61fb      	str	r3, [r7, #28]
	float low_pressure = 0;
 8000320:	f04f 0300 	mov.w	r3, #0
 8000324:	617b      	str	r3, [r7, #20]
	uint16_t SPI_buffer;

	// Variables for CO2 level sensor
	uint8_t CO2_buffer[12];
	int CO2_level_int = 33;
 8000326:	2321      	movs	r3, #33	@ 0x21
 8000328:	613b      	str	r3, [r7, #16]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800032a:	f000 fed0 	bl	80010ce <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800032e:	f000 f9b7 	bl	80006a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000332:	f000 fbd1 	bl	8000ad8 <MX_GPIO_Init>
	MX_SPI2_Init();
 8000336:	f000 fb1d 	bl	8000974 <MX_SPI2_Init>
	MX_ADC2_Init();
 800033a:	f000 fa75 	bl	8000828 <MX_ADC2_Init>
	MX_ADC1_Init();
 800033e:	f000 f9fb 	bl	8000738 <MX_ADC1_Init>
	MX_TIM2_Init();
 8000342:	f000 fb55 	bl	80009f0 <MX_TIM2_Init>
	MX_I2C2_Init();
 8000346:	f000 fad5 	bl	80008f4 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800034a:	2201      	movs	r2, #1
 800034c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000350:	48b9      	ldr	r0, [pc, #740]	@ (8000638 <main+0x328>)
 8000352:	f002 fd5b 	bl	8002e0c <HAL_GPIO_WritePin>
	printf("Requesting SPI Identifier from Pressure Sensor... \r\n");
 8000356:	48b9      	ldr	r0, [pc, #740]	@ (800063c <main+0x32c>)
 8000358:	f005 fb28 	bl	80059ac <puts>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800035c:	2200      	movs	r2, #0
 800035e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000362:	48b5      	ldr	r0, [pc, #724]	@ (8000638 <main+0x328>)
 8000364:	f002 fd52 	bl	8002e0c <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) &request_identifier,
 8000368:	f107 020e 	add.w	r2, r7, #14
 800036c:	2364      	movs	r3, #100	@ 0x64
 800036e:	9300      	str	r3, [sp, #0]
 8000370:	2301      	movs	r3, #1
 8000372:	49b3      	ldr	r1, [pc, #716]	@ (8000640 <main+0x330>)
 8000374:	48b3      	ldr	r0, [pc, #716]	@ (8000644 <main+0x334>)
 8000376:	f003 fef2 	bl	800415e <HAL_SPI_TransmitReceive>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d002      	beq.n	8000386 <main+0x76>
			(uint8_t*) &SPI_buffer, 1, 100) != HAL_OK) {
		printf("ERROR: SPI failed the HAL_OK check \r\n");
 8000380:	48b1      	ldr	r0, [pc, #708]	@ (8000648 <main+0x338>)
 8000382:	f005 fb13 	bl	80059ac <puts>
	}
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000386:	2201      	movs	r2, #1
 8000388:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800038c:	48aa      	ldr	r0, [pc, #680]	@ (8000638 <main+0x328>)
 800038e:	f002 fd3d 	bl	8002e0c <HAL_GPIO_WritePin>
	// Check if received data is notifying about any errors
	// Check for communication error
	if (SPI_buffer == com_error_mask) {
 8000392:	89fb      	ldrh	r3, [r7, #14]
 8000394:	2201      	movs	r2, #1
 8000396:	4293      	cmp	r3, r2
 8000398:	d103      	bne.n	80003a2 <main+0x92>
		printf("ERROR: Communication Error \r\n");
 800039a:	48ac      	ldr	r0, [pc, #688]	@ (800064c <main+0x33c>)
 800039c:	f005 fb06 	bl	80059ac <puts>
 80003a0:	e04b      	b.n	800043a <main+0x12a>
	}
	// Check for FEC Error
	else if ((SPI_buffer & FEC_error_mask) != 0) {
 80003a2:	89fb      	ldrh	r3, [r7, #14]
 80003a4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80003a8:	4013      	ands	r3, r2
 80003aa:	b29b      	uxth	r3, r3
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d003      	beq.n	80003b8 <main+0xa8>
		printf("ERROR: FEC Error \r\n");
 80003b0:	48a7      	ldr	r0, [pc, #668]	@ (8000650 <main+0x340>)
 80003b2:	f005 fafb 	bl	80059ac <puts>
 80003b6:	e040      	b.n	800043a <main+0x12a>
	}
	// Check for Acquisition Chain Failure
	else if ((SPI_buffer & no_error_mask) == Diag1_mask) {
 80003b8:	89fb      	ldrh	r3, [r7, #14]
 80003ba:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80003be:	4013      	ands	r3, r2
 80003c0:	b29b      	uxth	r3, r3
 80003c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d103      	bne.n	80003d2 <main+0xc2>
		printf("ERROR: Acquisition chain failure \r\n");
 80003ca:	48a2      	ldr	r0, [pc, #648]	@ (8000654 <main+0x344>)
 80003cc:	f005 faee 	bl	80059ac <puts>
 80003d0:	e033      	b.n	800043a <main+0x12a>
	}
	// Check for Sensor Cell Failure
	else if ((SPI_buffer & Diag2_mask) != 0) {
 80003d2:	89fb      	ldrh	r3, [r7, #14]
 80003d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80003d8:	4013      	ands	r3, r2
 80003da:	b29b      	uxth	r3, r3
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d003      	beq.n	80003e8 <main+0xd8>
		printf("ERROR: Sensor cell failure \r\n");
 80003e0:	489d      	ldr	r0, [pc, #628]	@ (8000658 <main+0x348>)
 80003e2:	f005 fae3 	bl	80059ac <puts>
 80003e6:	e028      	b.n	800043a <main+0x12a>
	}
	// Check if pressure is above measuring range maximum
	else if ((SPI_buffer & no_error_mask) == pressure_over_max_mask) {
 80003e8:	89fb      	ldrh	r3, [r7, #14]
 80003ea:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80003ee:	4013      	ands	r3, r2
 80003f0:	b29b      	uxth	r3, r3
 80003f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d103      	bne.n	8000402 <main+0xf2>
		printf("ERROR: Pressure above measuring range maximum \r\n");
 80003fa:	4898      	ldr	r0, [pc, #608]	@ (800065c <main+0x34c>)
 80003fc:	f005 fad6 	bl	80059ac <puts>
 8000400:	e01b      	b.n	800043a <main+0x12a>
	}
	// Check if pressure is below measuring range minimum
	else if ((SPI_buffer & pressure_under_min_mask) != 0) {
 8000402:	89fb      	ldrh	r3, [r7, #14]
 8000404:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000408:	4013      	ands	r3, r2
 800040a:	b29b      	uxth	r3, r3
 800040c:	2b00      	cmp	r3, #0
 800040e:	d003      	beq.n	8000418 <main+0x108>
		printf("ERROR: Pressure below measuring range minimum \r\n");
 8000410:	4893      	ldr	r0, [pc, #588]	@ (8000660 <main+0x350>)
 8000412:	f005 facb 	bl	80059ac <puts>
 8000416:	e010      	b.n	800043a <main+0x12a>
	}
	// Check if no errors were detected
	else if ((SPI_buffer & no_error_mask) == no_error_mask) {
 8000418:	89fb      	ldrh	r3, [r7, #14]
 800041a:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800041e:	4013      	ands	r3, r2
 8000420:	b29b      	uxth	r3, r3
 8000422:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000426:	4293      	cmp	r3, r2
 8000428:	d107      	bne.n	800043a <main+0x12a>
		printf("No errors detected \r\n");
 800042a:	488e      	ldr	r0, [pc, #568]	@ (8000664 <main+0x354>)
 800042c:	f005 fabe 	bl	80059ac <puts>
		printf("Identifier: %u \r\n", SPI_buffer);
 8000430:	89fb      	ldrh	r3, [r7, #14]
 8000432:	4619      	mov	r1, r3
 8000434:	488c      	ldr	r0, [pc, #560]	@ (8000668 <main+0x358>)
 8000436:	f005 fa51 	bl	80058dc <iprintf>
	}

	// Start ADC calibration and ADC conversion
	HAL_ADCEx_Calibration_Start(&hadc1, 1);
 800043a:	2101      	movs	r1, #1
 800043c:	488b      	ldr	r0, [pc, #556]	@ (800066c <main+0x35c>)
 800043e:	f002 f979 	bl	8002734 <HAL_ADCEx_Calibration_Start>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		// Toggle the LEDs
		HAL_GPIO_TogglePin(GPIOB, PRS_Ready_Pin);
 8000442:	2140      	movs	r1, #64	@ 0x40
 8000444:	487c      	ldr	r0, [pc, #496]	@ (8000638 <main+0x328>)
 8000446:	f002 fcf9 	bl	8002e3c <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 800044a:	2064      	movs	r0, #100	@ 0x64
 800044c:	f000 feb0 	bl	80011b0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, PRS_Ready_Pin);
 8000450:	2140      	movs	r1, #64	@ 0x40
 8000452:	4879      	ldr	r0, [pc, #484]	@ (8000638 <main+0x328>)
 8000454:	f002 fcf2 	bl	8002e3c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, System_Ready_Pin);
 8000458:	2180      	movs	r1, #128	@ 0x80
 800045a:	4877      	ldr	r0, [pc, #476]	@ (8000638 <main+0x328>)
 800045c:	f002 fcee 	bl	8002e3c <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000460:	2064      	movs	r0, #100	@ 0x64
 8000462:	f000 fea5 	bl	80011b0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, System_Ready_Pin);
 8000466:	2180      	movs	r1, #128	@ 0x80
 8000468:	4873      	ldr	r0, [pc, #460]	@ (8000638 <main+0x328>)
 800046a:	f002 fce7 	bl	8002e3c <HAL_GPIO_TogglePin>

		// Measure Pod Pressure
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800046e:	2200      	movs	r2, #0
 8000470:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000474:	4870      	ldr	r0, [pc, #448]	@ (8000638 <main+0x328>)
 8000476:	f002 fcc9 	bl	8002e0c <HAL_GPIO_WritePin>
		if (HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) &request_pressure,
 800047a:	f107 020e 	add.w	r2, r7, #14
 800047e:	2364      	movs	r3, #100	@ 0x64
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	2301      	movs	r3, #1
 8000484:	497a      	ldr	r1, [pc, #488]	@ (8000670 <main+0x360>)
 8000486:	486f      	ldr	r0, [pc, #444]	@ (8000644 <main+0x334>)
 8000488:	f003 fe69 	bl	800415e <HAL_SPI_TransmitReceive>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d002      	beq.n	8000498 <main+0x188>
				(uint8_t*) &SPI_buffer, 1, 100) != HAL_OK) {
			printf("ERROR: SPI failed the HAL_OK check \r\n");
 8000492:	486d      	ldr	r0, [pc, #436]	@ (8000648 <main+0x338>)
 8000494:	f005 fa8a 	bl	80059ac <puts>
		}
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000498:	2201      	movs	r2, #1
 800049a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800049e:	4866      	ldr	r0, [pc, #408]	@ (8000638 <main+0x328>)
 80004a0:	f002 fcb4 	bl	8002e0c <HAL_GPIO_WritePin>
		// Check if received data is notifying about any errors
		// Check for communication error
		if (SPI_buffer == com_error_mask) {
 80004a4:	89fb      	ldrh	r3, [r7, #14]
 80004a6:	2201      	movs	r2, #1
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d103      	bne.n	80004b4 <main+0x1a4>
			printf("ERROR: Communication Error \r\n");
 80004ac:	4867      	ldr	r0, [pc, #412]	@ (800064c <main+0x33c>)
 80004ae:	f005 fa7d 	bl	80059ac <puts>
 80004b2:	e071      	b.n	8000598 <main+0x288>
		}
		// Check for FEC Error
		else if ((SPI_buffer & FEC_error_mask) != 0) {
 80004b4:	89fb      	ldrh	r3, [r7, #14]
 80004b6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80004ba:	4013      	ands	r3, r2
 80004bc:	b29b      	uxth	r3, r3
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d003      	beq.n	80004ca <main+0x1ba>
			printf("ERROR: FEC Error \r\n");
 80004c2:	4863      	ldr	r0, [pc, #396]	@ (8000650 <main+0x340>)
 80004c4:	f005 fa72 	bl	80059ac <puts>
 80004c8:	e066      	b.n	8000598 <main+0x288>
		}
		// Check for Acquisition Chain Failure
		else if ((SPI_buffer & no_error_mask) == Diag1_mask) {
 80004ca:	89fb      	ldrh	r3, [r7, #14]
 80004cc:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80004d0:	4013      	ands	r3, r2
 80004d2:	b29b      	uxth	r3, r3
 80004d4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80004d8:	4293      	cmp	r3, r2
 80004da:	d108      	bne.n	80004ee <main+0x1de>
			printf("ERROR: Acquisition chain failure \r\n");
 80004dc:	485d      	ldr	r0, [pc, #372]	@ (8000654 <main+0x344>)
 80004de:	f005 fa65 	bl	80059ac <puts>
			printf("Received bytes = %u", SPI_buffer);
 80004e2:	89fb      	ldrh	r3, [r7, #14]
 80004e4:	4619      	mov	r1, r3
 80004e6:	4863      	ldr	r0, [pc, #396]	@ (8000674 <main+0x364>)
 80004e8:	f005 f9f8 	bl	80058dc <iprintf>
 80004ec:	e054      	b.n	8000598 <main+0x288>
		}
		// Check for Sensor Cell Failure
		else if ((SPI_buffer & Diag2_mask) != 0) {
 80004ee:	89fb      	ldrh	r3, [r7, #14]
 80004f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004f4:	4013      	ands	r3, r2
 80004f6:	b29b      	uxth	r3, r3
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d003      	beq.n	8000504 <main+0x1f4>
			printf("ERROR: Sensor cell failure \r\n");
 80004fc:	4856      	ldr	r0, [pc, #344]	@ (8000658 <main+0x348>)
 80004fe:	f005 fa55 	bl	80059ac <puts>
 8000502:	e049      	b.n	8000598 <main+0x288>
		}
		// Check if pressure is above measuring range maximum
		else if ((SPI_buffer & no_error_mask) == pressure_over_max_mask) {
 8000504:	89fb      	ldrh	r3, [r7, #14]
 8000506:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800050a:	4013      	ands	r3, r2
 800050c:	b29b      	uxth	r3, r3
 800050e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000512:	4293      	cmp	r3, r2
 8000514:	d103      	bne.n	800051e <main+0x20e>
			printf("ERROR: Pressure above measuring range maximum \r\n");
 8000516:	4851      	ldr	r0, [pc, #324]	@ (800065c <main+0x34c>)
 8000518:	f005 fa48 	bl	80059ac <puts>
 800051c:	e03c      	b.n	8000598 <main+0x288>
		}
		// Check if pressure is below measuring range minimum
		else if ((SPI_buffer & pressure_under_min_mask) != 0) {
 800051e:	89fb      	ldrh	r3, [r7, #14]
 8000520:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000524:	4013      	ands	r3, r2
 8000526:	b29b      	uxth	r3, r3
 8000528:	2b00      	cmp	r3, #0
 800052a:	d003      	beq.n	8000534 <main+0x224>
			printf("ERROR: Pressure below measuring range minimum \r\n");
 800052c:	484c      	ldr	r0, [pc, #304]	@ (8000660 <main+0x350>)
 800052e:	f005 fa3d 	bl	80059ac <puts>
 8000532:	e031      	b.n	8000598 <main+0x288>
		}
		// Check if no errors were detected
		else if ((SPI_buffer & no_error_mask) == no_error_mask) {
 8000534:	89fb      	ldrh	r3, [r7, #14]
 8000536:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800053a:	4013      	ands	r3, r2
 800053c:	b29b      	uxth	r3, r3
 800053e:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000542:	4293      	cmp	r3, r2
 8000544:	d128      	bne.n	8000598 <main+0x288>
			printf("No errors detected \r\n");
 8000546:	4847      	ldr	r0, [pc, #284]	@ (8000664 <main+0x354>)
 8000548:	f005 fa30 	bl	80059ac <puts>
			// Get the pressure data using a bit mask and right shift operator to get rid of parity bit
			pressure_LSB = (SPI_buffer & data_mask) >> 1;
 800054c:	89fb      	ldrh	r3, [r7, #14]
 800054e:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8000552:	4013      	ands	r3, r2
 8000554:	b29b      	uxth	r3, r3
 8000556:	085b      	lsrs	r3, r3, #1
 8000558:	b29a      	uxth	r2, r3
 800055a:	4b47      	ldr	r3, [pc, #284]	@ (8000678 <main+0x368>)
 800055c:	801a      	strh	r2, [r3, #0]
			// Convert pressure from LSB to kPa using transfer function from data sheet
			pressure_Bar = ((float) pressure_LSB - offs_p) / S_p;
 800055e:	4b46      	ldr	r3, [pc, #280]	@ (8000678 <main+0x368>)
 8000560:	881b      	ldrh	r3, [r3, #0]
 8000562:	ee07 3a90 	vmov	s15, r3
 8000566:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800056a:	4b44      	ldr	r3, [pc, #272]	@ (800067c <main+0x36c>)
 800056c:	edd3 7a00 	vldr	s15, [r3]
 8000570:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000574:	4b42      	ldr	r3, [pc, #264]	@ (8000680 <main+0x370>)
 8000576:	ed93 7a00 	vldr	s14, [r3]
 800057a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800057e:	4b41      	ldr	r3, [pc, #260]	@ (8000684 <main+0x374>)
 8000580:	edc3 7a00 	vstr	s15, [r3]
			// Convert pressure from Bar to kPa
			// pressure_Bar = pressure_Bar/100;
			// Print pressure value
			printf("Measured pressure: %i kPa \r\n", (int) pressure_Bar);
 8000584:	4b3f      	ldr	r3, [pc, #252]	@ (8000684 <main+0x374>)
 8000586:	edd3 7a00 	vldr	s15, [r3]
 800058a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800058e:	ee17 1a90 	vmov	r1, s15
 8000592:	483d      	ldr	r0, [pc, #244]	@ (8000688 <main+0x378>)
 8000594:	f005 f9a2 	bl	80058dc <iprintf>

		}

		// Start ADC Conversion
		HAL_ADC_Start(&hadc2);
 8000598:	483c      	ldr	r0, [pc, #240]	@ (800068c <main+0x37c>)
 800059a:	f001 fa01 	bl	80019a0 <HAL_ADC_Start>
		// Poll ADC2 Peripheral & TimeOut = 1mSec
		HAL_ADC_PollForConversion(&hadc2, 1);
 800059e:	2101      	movs	r1, #1
 80005a0:	483a      	ldr	r0, [pc, #232]	@ (800068c <main+0x37c>)
 80005a2:	f001 fab9 	bl	8001b18 <HAL_ADC_PollForConversion>
		// Read The ADC Conversion Result & Print it
		AD_RES = HAL_ADC_GetValue(&hadc2);
 80005a6:	4839      	ldr	r0, [pc, #228]	@ (800068c <main+0x37c>)
 80005a8:	f001 fb8e 	bl	8001cc8 <HAL_ADC_GetValue>
 80005ac:	4603      	mov	r3, r0
 80005ae:	837b      	strh	r3, [r7, #26]
		if ((float) AD_RES <= 780) {
 80005b0:	8b7b      	ldrh	r3, [r7, #26]
 80005b2:	f5b3 7f43 	cmp.w	r3, #780	@ 0x30c
 80005b6:	d803      	bhi.n	80005c0 <main+0x2b0>
			AD_RES_float = 0;
 80005b8:	f04f 0300 	mov.w	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
 80005be:	e00a      	b.n	80005d6 <main+0x2c6>
		} else {
			AD_RES_float = (float) AD_RES - 780;
 80005c0:	8b7b      	ldrh	r3, [r7, #26]
 80005c2:	ee07 3a90 	vmov	s15, r3
 80005c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005ca:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8000690 <main+0x380>
 80005ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80005d2:	edc7 7a07 	vstr	s15, [r7, #28]
		}
		low_pressure = AD_RES_float * 10 / 3438 * 1000;
 80005d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80005da:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80005de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80005e2:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8000694 <main+0x384>
 80005e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005ea:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8000698 <main+0x388>
 80005ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005f2:	edc7 7a05 	vstr	s15, [r7, #20]
		printf("ADC value = %i mBar\r\n", (int) low_pressure);
 80005f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80005fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005fe:	ee17 1a90 	vmov	r1, s15
 8000602:	4826      	ldr	r0, [pc, #152]	@ (800069c <main+0x38c>)
 8000604:	f005 f96a 	bl	80058dc <iprintf>
		HAL_Delay(1);
 8000608:	2001      	movs	r0, #1
 800060a:	f000 fdd1 	bl	80011b0 <HAL_Delay>

		// Trigger solenoid valve

		HAL_GPIO_WritePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin, GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	2140      	movs	r1, #64	@ 0x40
 8000612:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000616:	f002 fbf9 	bl	8002e0c <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800061a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800061e:	f000 fdc7 	bl	80011b0 <HAL_Delay>
		HAL_GPIO_WritePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2140      	movs	r1, #64	@ 0x40
 8000626:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800062a:	f002 fbef 	bl	8002e0c <HAL_GPIO_WritePin>
		HAL_Delay(3000);
 800062e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000632:	f000 fdbd 	bl	80011b0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, PRS_Ready_Pin);
 8000636:	e704      	b.n	8000442 <main+0x132>
 8000638:	48000400 	.word	0x48000400
 800063c:	0800668c 	.word	0x0800668c
 8000640:	08006838 	.word	0x08006838
 8000644:	200001b8 	.word	0x200001b8
 8000648:	080066c0 	.word	0x080066c0
 800064c:	080066e8 	.word	0x080066e8
 8000650:	08006708 	.word	0x08006708
 8000654:	0800671c 	.word	0x0800671c
 8000658:	08006740 	.word	0x08006740
 800065c:	08006760 	.word	0x08006760
 8000660:	08006790 	.word	0x08006790
 8000664:	080067c0 	.word	0x080067c0
 8000668:	080067d8 	.word	0x080067d8
 800066c:	2000008c 	.word	0x2000008c
 8000670:	08006836 	.word	0x08006836
 8000674:	080067ec 	.word	0x080067ec
 8000678:	20000268 	.word	0x20000268
 800067c:	20000000 	.word	0x20000000
 8000680:	20000004 	.word	0x20000004
 8000684:	2000026c 	.word	0x2000026c
 8000688:	08006800 	.word	0x08006800
 800068c:	200000f8 	.word	0x200000f8
 8000690:	44430000 	.word	0x44430000
 8000694:	4556e000 	.word	0x4556e000
 8000698:	447a0000 	.word	0x447a0000
 800069c:	08006820 	.word	0x08006820

080006a0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	@ 0x50
 80006a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006a6:	f107 0318 	add.w	r3, r7, #24
 80006aa:	2238      	movs	r2, #56	@ 0x38
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f005 fa5c 	bl	8005b6c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006c6:	f002 fd05 	bl	80030d4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ca:	2302      	movs	r3, #2
 80006cc:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006d2:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d4:	2340      	movs	r3, #64	@ 0x40
 80006d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d8:	2302      	movs	r3, #2
 80006da:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006dc:	2302      	movs	r3, #2
 80006de:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006e0:	2304      	movs	r3, #4
 80006e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 75;
 80006e4:	234b      	movs	r3, #75	@ 0x4b
 80006e6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006f4:	f107 0318 	add.w	r3, r7, #24
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 fd9f 	bl	800323c <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x68>
		Error_Handler();
 8000704:	f000 fa68 	bl	8000bd8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	2303      	movs	r3, #3
 800070e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2104      	movs	r1, #4
 8000720:	4618      	mov	r0, r3
 8000722:	f003 f89d 	bl	8003860 <HAL_RCC_ClockConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x90>
		Error_Handler();
 800072c:	f000 fa54 	bl	8000bd8 <Error_Handler>
	}
}
 8000730:	bf00      	nop
 8000732:	3750      	adds	r7, #80	@ 0x50
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000738:	b580      	push	{r7, lr}
 800073a:	b08c      	sub	sp, #48	@ 0x30
 800073c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 800073e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	2220      	movs	r2, #32
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f005 fa0b 	bl	8005b6c <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000756:	4b32      	ldr	r3, [pc, #200]	@ (8000820 <MX_ADC1_Init+0xe8>)
 8000758:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800075c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800075e:	4b30      	ldr	r3, [pc, #192]	@ (8000820 <MX_ADC1_Init+0xe8>)
 8000760:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000764:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000766:	4b2e      	ldr	r3, [pc, #184]	@ (8000820 <MX_ADC1_Init+0xe8>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800076c:	4b2c      	ldr	r3, [pc, #176]	@ (8000820 <MX_ADC1_Init+0xe8>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 8000772:	4b2b      	ldr	r3, [pc, #172]	@ (8000820 <MX_ADC1_Init+0xe8>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000778:	4b29      	ldr	r3, [pc, #164]	@ (8000820 <MX_ADC1_Init+0xe8>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077e:	4b28      	ldr	r3, [pc, #160]	@ (8000820 <MX_ADC1_Init+0xe8>)
 8000780:	2204      	movs	r2, #4
 8000782:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000784:	4b26      	ldr	r3, [pc, #152]	@ (8000820 <MX_ADC1_Init+0xe8>)
 8000786:	2200      	movs	r2, #0
 8000788:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800078a:	4b25      	ldr	r3, [pc, #148]	@ (8000820 <MX_ADC1_Init+0xe8>)
 800078c:	2200      	movs	r2, #0
 800078e:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 1;
 8000790:	4b23      	ldr	r3, [pc, #140]	@ (8000820 <MX_ADC1_Init+0xe8>)
 8000792:	2201      	movs	r2, #1
 8000794:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000796:	4b22      	ldr	r3, [pc, #136]	@ (8000820 <MX_ADC1_Init+0xe8>)
 8000798:	2200      	movs	r2, #0
 800079a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079e:	4b20      	ldr	r3, [pc, #128]	@ (8000820 <MX_ADC1_Init+0xe8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000820 <MX_ADC1_Init+0xe8>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80007aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000820 <MX_ADC1_Init+0xe8>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000820 <MX_ADC1_Init+0xe8>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 80007b8:	4b19      	ldr	r3, [pc, #100]	@ (8000820 <MX_ADC1_Init+0xe8>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80007c0:	4817      	ldr	r0, [pc, #92]	@ (8000820 <MX_ADC1_Init+0xe8>)
 80007c2:	f000 ff69 	bl	8001698 <HAL_ADC_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_ADC1_Init+0x98>
		Error_Handler();
 80007cc:	f000 fa04 	bl	8000bd8 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80007d0:	2300      	movs	r3, #0
 80007d2:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80007d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007d8:	4619      	mov	r1, r3
 80007da:	4811      	ldr	r0, [pc, #68]	@ (8000820 <MX_ADC1_Init+0xe8>)
 80007dc:	f002 f80c 	bl	80027f8 <HAL_ADCEx_MultiModeConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0xb2>
		Error_Handler();
 80007e6:	f000 f9f7 	bl	8000bd8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <MX_ADC1_Init+0xec>)
 80007ec:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ee:	2306      	movs	r3, #6
 80007f0:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f6:	237f      	movs	r3, #127	@ 0x7f
 80007f8:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007fa:	2304      	movs	r3, #4
 80007fc:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	4619      	mov	r1, r3
 8000806:	4806      	ldr	r0, [pc, #24]	@ (8000820 <MX_ADC1_Init+0xe8>)
 8000808:	f001 fa6c 	bl	8001ce4 <HAL_ADC_ConfigChannel>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_ADC1_Init+0xde>
		Error_Handler();
 8000812:	f000 f9e1 	bl	8000bd8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	3730      	adds	r7, #48	@ 0x30
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000008c 	.word	0x2000008c
 8000824:	32601000 	.word	0x32601000

08000828 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800082e:	463b      	mov	r3, r7
 8000830:	2220      	movs	r2, #32
 8000832:	2100      	movs	r1, #0
 8000834:	4618      	mov	r0, r3
 8000836:	f005 f999 	bl	8005b6c <memset>

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 800083a:	4b2b      	ldr	r3, [pc, #172]	@ (80008e8 <MX_ADC2_Init+0xc0>)
 800083c:	4a2b      	ldr	r2, [pc, #172]	@ (80008ec <MX_ADC2_Init+0xc4>)
 800083e:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000840:	4b29      	ldr	r3, [pc, #164]	@ (80008e8 <MX_ADC2_Init+0xc0>)
 8000842:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000846:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000848:	4b27      	ldr	r3, [pc, #156]	@ (80008e8 <MX_ADC2_Init+0xc0>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800084e:	4b26      	ldr	r3, [pc, #152]	@ (80008e8 <MX_ADC2_Init+0xc0>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
	hadc2.Init.GainCompensation = 0;
 8000854:	4b24      	ldr	r3, [pc, #144]	@ (80008e8 <MX_ADC2_Init+0xc0>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800085a:	4b23      	ldr	r3, [pc, #140]	@ (80008e8 <MX_ADC2_Init+0xc0>)
 800085c:	2200      	movs	r2, #0
 800085e:	615a      	str	r2, [r3, #20]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000860:	4b21      	ldr	r3, [pc, #132]	@ (80008e8 <MX_ADC2_Init+0xc0>)
 8000862:	2204      	movs	r2, #4
 8000864:	619a      	str	r2, [r3, #24]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8000866:	4b20      	ldr	r3, [pc, #128]	@ (80008e8 <MX_ADC2_Init+0xc0>)
 8000868:	2200      	movs	r2, #0
 800086a:	771a      	strb	r2, [r3, #28]
	hadc2.Init.ContinuousConvMode = DISABLE;
 800086c:	4b1e      	ldr	r3, [pc, #120]	@ (80008e8 <MX_ADC2_Init+0xc0>)
 800086e:	2200      	movs	r2, #0
 8000870:	775a      	strb	r2, [r3, #29]
	hadc2.Init.NbrOfConversion = 1;
 8000872:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <MX_ADC2_Init+0xc0>)
 8000874:	2201      	movs	r2, #1
 8000876:	621a      	str	r2, [r3, #32]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000878:	4b1b      	ldr	r3, [pc, #108]	@ (80008e8 <MX_ADC2_Init+0xc0>)
 800087a:	2200      	movs	r2, #0
 800087c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000880:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <MX_ADC2_Init+0xc0>)
 8000882:	2200      	movs	r2, #0
 8000884:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000886:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <MX_ADC2_Init+0xc0>)
 8000888:	2200      	movs	r2, #0
 800088a:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc2.Init.DMAContinuousRequests = DISABLE;
 800088c:	4b16      	ldr	r3, [pc, #88]	@ (80008e8 <MX_ADC2_Init+0xc0>)
 800088e:	2200      	movs	r2, #0
 8000890:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000894:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <MX_ADC2_Init+0xc0>)
 8000896:	2200      	movs	r2, #0
 8000898:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc2.Init.OversamplingMode = DISABLE;
 800089a:	4b13      	ldr	r3, [pc, #76]	@ (80008e8 <MX_ADC2_Init+0xc0>)
 800089c:	2200      	movs	r2, #0
 800089e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 80008a2:	4811      	ldr	r0, [pc, #68]	@ (80008e8 <MX_ADC2_Init+0xc0>)
 80008a4:	f000 fef8 	bl	8001698 <HAL_ADC_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_ADC2_Init+0x8a>
		Error_Handler();
 80008ae:	f000 f993 	bl	8000bd8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 80008b2:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <MX_ADC2_Init+0xc8>)
 80008b4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80008b6:	2306      	movs	r3, #6
 80008b8:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008be:	237f      	movs	r3, #127	@ 0x7f
 80008c0:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008c2:	2304      	movs	r3, #4
 80008c4:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 80008ca:	463b      	mov	r3, r7
 80008cc:	4619      	mov	r1, r3
 80008ce:	4806      	ldr	r0, [pc, #24]	@ (80008e8 <MX_ADC2_Init+0xc0>)
 80008d0:	f001 fa08 	bl	8001ce4 <HAL_ADC_ConfigChannel>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_ADC2_Init+0xb6>
		Error_Handler();
 80008da:	f000 f97d 	bl	8000bd8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	3720      	adds	r7, #32
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200000f8 	.word	0x200000f8
 80008ec:	50000100 	.word	0x50000100
 80008f0:	36902000 	.word	0x36902000

080008f4 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000968 <MX_I2C2_Init+0x74>)
 80008fa:	4a1c      	ldr	r2, [pc, #112]	@ (800096c <MX_I2C2_Init+0x78>)
 80008fc:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x20C0EDFF;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000968 <MX_I2C2_Init+0x74>)
 8000900:	4a1b      	ldr	r2, [pc, #108]	@ (8000970 <MX_I2C2_Init+0x7c>)
 8000902:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8000904:	4b18      	ldr	r3, [pc, #96]	@ (8000968 <MX_I2C2_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800090a:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <MX_I2C2_Init+0x74>)
 800090c:	2201      	movs	r2, #1
 800090e:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000910:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <MX_I2C2_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8000916:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <MX_I2C2_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800091c:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <MX_I2C2_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000922:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <MX_I2C2_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000928:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <MX_I2C2_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 800092e:	480e      	ldr	r0, [pc, #56]	@ (8000968 <MX_I2C2_Init+0x74>)
 8000930:	f002 fa9e 	bl	8002e70 <HAL_I2C_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_I2C2_Init+0x4a>
		Error_Handler();
 800093a:	f000 f94d 	bl	8000bd8 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 800093e:	2100      	movs	r1, #0
 8000940:	4809      	ldr	r0, [pc, #36]	@ (8000968 <MX_I2C2_Init+0x74>)
 8000942:	f002 fb30 	bl	8002fa6 <HAL_I2CEx_ConfigAnalogFilter>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 800094c:	f000 f944 	bl	8000bd8 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8000950:	2100      	movs	r1, #0
 8000952:	4805      	ldr	r0, [pc, #20]	@ (8000968 <MX_I2C2_Init+0x74>)
 8000954:	f002 fb72 	bl	800303c <HAL_I2CEx_ConfigDigitalFilter>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_I2C2_Init+0x6e>
		Error_Handler();
 800095e:	f000 f93b 	bl	8000bd8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000164 	.word	0x20000164
 800096c:	40005800 	.word	0x40005800
 8000970:	20c0edff 	.word	0x20c0edff

08000974 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000978:	4b1b      	ldr	r3, [pc, #108]	@ (80009e8 <MX_SPI2_Init+0x74>)
 800097a:	4a1c      	ldr	r2, [pc, #112]	@ (80009ec <MX_SPI2_Init+0x78>)
 800097c:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800097e:	4b1a      	ldr	r3, [pc, #104]	@ (80009e8 <MX_SPI2_Init+0x74>)
 8000980:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000984:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000986:	4b18      	ldr	r3, [pc, #96]	@ (80009e8 <MX_SPI2_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800098c:	4b16      	ldr	r3, [pc, #88]	@ (80009e8 <MX_SPI2_Init+0x74>)
 800098e:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8000992:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000994:	4b14      	ldr	r3, [pc, #80]	@ (80009e8 <MX_SPI2_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800099a:	4b13      	ldr	r3, [pc, #76]	@ (80009e8 <MX_SPI2_Init+0x74>)
 800099c:	2201      	movs	r2, #1
 800099e:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80009a0:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <MX_SPI2_Init+0x74>)
 80009a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009a6:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <MX_SPI2_Init+0x74>)
 80009aa:	2220      	movs	r2, #32
 80009ac:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <MX_SPI2_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <MX_SPI2_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <MX_SPI2_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 7;
 80009c0:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <MX_SPI2_Init+0x74>)
 80009c2:	2207      	movs	r2, #7
 80009c4:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <MX_SPI2_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009cc:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <MX_SPI2_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80009d2:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <MX_SPI2_Init+0x74>)
 80009d4:	f003 fb18 	bl	8004008 <HAL_SPI_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_SPI2_Init+0x6e>
		Error_Handler();
 80009de:	f000 f8fb 	bl	8000bd8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200001b8 	.word	0x200001b8
 80009ec:	40003800 	.word	0x40003800

080009f0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08e      	sub	sp, #56	@ 0x38
 80009f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80009f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000a10:	463b      	mov	r3, r7
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]
 8000a1e:	615a      	str	r2, [r3, #20]
 8000a20:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000a22:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad4 <MX_TIM2_Init+0xe4>)
 8000a24:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a28:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 60000 - 1;
 8000a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad4 <MX_TIM2_Init+0xe4>)
 8000a2c:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000a30:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a32:	4b28      	ldr	r3, [pc, #160]	@ (8000ad4 <MX_TIM2_Init+0xe4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 499;
 8000a38:	4b26      	ldr	r3, [pc, #152]	@ (8000ad4 <MX_TIM2_Init+0xe4>)
 8000a3a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000a3e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a40:	4b24      	ldr	r3, [pc, #144]	@ (8000ad4 <MX_TIM2_Init+0xe4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a46:	4b23      	ldr	r3, [pc, #140]	@ (8000ad4 <MX_TIM2_Init+0xe4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000a4c:	4821      	ldr	r0, [pc, #132]	@ (8000ad4 <MX_TIM2_Init+0xe4>)
 8000a4e:	f003 ff0d 	bl	800486c <HAL_TIM_Base_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM2_Init+0x6c>
		Error_Handler();
 8000a58:	f000 f8be 	bl	8000bd8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a60:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000a62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a66:	4619      	mov	r1, r3
 8000a68:	481a      	ldr	r0, [pc, #104]	@ (8000ad4 <MX_TIM2_Init+0xe4>)
 8000a6a:	f004 f8cb 	bl	8004c04 <HAL_TIM_ConfigClockSource>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM2_Init+0x88>
		Error_Handler();
 8000a74:	f000 f8b0 	bl	8000bd8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000a78:	4816      	ldr	r0, [pc, #88]	@ (8000ad4 <MX_TIM2_Init+0xe4>)
 8000a7a:	f003 ff4e 	bl	800491a <HAL_TIM_PWM_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM2_Init+0x98>
		Error_Handler();
 8000a84:	f000 f8a8 	bl	8000bd8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a88:	2320      	movs	r3, #32
 8000a8a:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	4619      	mov	r1, r3
 8000a96:	480f      	ldr	r0, [pc, #60]	@ (8000ad4 <MX_TIM2_Init+0xe4>)
 8000a98:	f004 fddc 	bl	8005654 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM2_Init+0xb6>
			!= HAL_OK) {
		Error_Handler();
 8000aa2:	f000 f899 	bl	8000bd8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa6:	2360      	movs	r3, #96	@ 0x60
 8000aa8:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	2200      	movs	r2, #0
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <MX_TIM2_Init+0xe4>)
 8000abe:	f003 ff8d 	bl	80049dc <HAL_TIM_PWM_ConfigChannel>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM2_Init+0xdc>
			!= HAL_OK) {
		Error_Handler();
 8000ac8:	f000 f886 	bl	8000bd8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	3738      	adds	r7, #56	@ 0x38
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	2000021c 	.word	0x2000021c

08000ad8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	4b2a      	ldr	r3, [pc, #168]	@ (8000b98 <MX_GPIO_Init+0xc0>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af2:	4a29      	ldr	r2, [pc, #164]	@ (8000b98 <MX_GPIO_Init+0xc0>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000afa:	4b27      	ldr	r3, [pc, #156]	@ (8000b98 <MX_GPIO_Init+0xc0>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	4b24      	ldr	r3, [pc, #144]	@ (8000b98 <MX_GPIO_Init+0xc0>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0a:	4a23      	ldr	r2, [pc, #140]	@ (8000b98 <MX_GPIO_Init+0xc0>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b12:	4b21      	ldr	r3, [pc, #132]	@ (8000b98 <MX_GPIO_Init+0xc0>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin, GPIO_PIN_SET);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2140      	movs	r1, #64	@ 0x40
 8000b22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b26:	f002 f971 	bl	8002e0c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin | PRS_Ready_Pin | System_Ready_Pin,
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 8000b30:	481a      	ldr	r0, [pc, #104]	@ (8000b9c <MX_GPIO_Init+0xc4>)
 8000b32:	f002 f96b 	bl	8002e0c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin : Valve_Enable_Pin */
	GPIO_InitStruct.Pin = Valve_Enable_Pin;
 8000b36:	2340      	movs	r3, #64	@ 0x40
 8000b38:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(Valve_Enable_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 030c 	add.w	r3, r7, #12
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b50:	f001 ffda 	bl	8002b08 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI_CS_Pin */
	GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000b54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b58:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480b      	ldr	r0, [pc, #44]	@ (8000b9c <MX_GPIO_Init+0xc4>)
 8000b6e:	f001 ffcb 	bl	8002b08 <HAL_GPIO_Init>

	/*Configure GPIO pins : PRS_Ready_Pin System_Ready_Pin */
	GPIO_InitStruct.Pin = PRS_Ready_Pin | System_Ready_Pin;
 8000b72:	23c0      	movs	r3, #192	@ 0xc0
 8000b74:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b76:	2301      	movs	r3, #1
 8000b78:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	4619      	mov	r1, r3
 8000b88:	4804      	ldr	r0, [pc, #16]	@ (8000b9c <MX_GPIO_Init+0xc4>)
 8000b8a:	f001 ffbd 	bl	8002b08 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b8e:	bf00      	nop
 8000b90:	3720      	adds	r7, #32
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	48000400 	.word	0x48000400

08000ba0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	e009      	b.n	8000bc6 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	1c5a      	adds	r2, r3, #1
 8000bb6:	60ba      	str	r2, [r7, #8]
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fb80 	bl	80002c0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	697a      	ldr	r2, [r7, #20]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	dbf1      	blt.n	8000bb2 <_write+0x12>
	}
	return len;
 8000bce:	687b      	ldr	r3, [r7, #4]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bdc:	b672      	cpsid	i
}
 8000bde:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <Error_Handler+0x8>

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bea:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <HAL_MspInit+0x44>)
 8000bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bee:	4a0e      	ldr	r2, [pc, #56]	@ (8000c28 <HAL_MspInit+0x44>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <HAL_MspInit+0x44>)
 8000bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <HAL_MspInit+0x44>)
 8000c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c06:	4a08      	ldr	r2, [pc, #32]	@ (8000c28 <HAL_MspInit+0x44>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <HAL_MspInit+0x44>)
 8000c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c1a:	f002 faff 	bl	800321c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000

08000c2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b09c      	sub	sp, #112	@ 0x70
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c44:	f107 0318 	add.w	r3, r7, #24
 8000c48:	2244      	movs	r2, #68	@ 0x44
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f004 ff8d 	bl	8005b6c <memset>
  if(hadc->Instance==ADC1)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c5a:	d13d      	bne.n	8000cd8 <HAL_ADC_MspInit+0xac>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000c5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c60:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000c62:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000c66:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c68:	f107 0318 	add.w	r3, r7, #24
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f002 ffdb 	bl	8003c28 <HAL_RCCEx_PeriphCLKConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000c78:	f7ff ffae 	bl	8000bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c7c:	4b3a      	ldr	r3, [pc, #232]	@ (8000d68 <HAL_ADC_MspInit+0x13c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	3301      	adds	r3, #1
 8000c82:	4a39      	ldr	r2, [pc, #228]	@ (8000d68 <HAL_ADC_MspInit+0x13c>)
 8000c84:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c86:	4b38      	ldr	r3, [pc, #224]	@ (8000d68 <HAL_ADC_MspInit+0x13c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d10b      	bne.n	8000ca6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c8e:	4b37      	ldr	r3, [pc, #220]	@ (8000d6c <HAL_ADC_MspInit+0x140>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c92:	4a36      	ldr	r2, [pc, #216]	@ (8000d6c <HAL_ADC_MspInit+0x140>)
 8000c94:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c9a:	4b34      	ldr	r3, [pc, #208]	@ (8000d6c <HAL_ADC_MspInit+0x140>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	4b31      	ldr	r3, [pc, #196]	@ (8000d6c <HAL_ADC_MspInit+0x140>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000caa:	4a30      	ldr	r2, [pc, #192]	@ (8000d6c <HAL_ADC_MspInit+0x140>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cb2:	4b2e      	ldr	r3, [pc, #184]	@ (8000d6c <HAL_ADC_MspInit+0x140>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Low_Pressure_ADC_Pin;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(Low_Pressure_ADC_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4827      	ldr	r0, [pc, #156]	@ (8000d70 <HAL_ADC_MspInit+0x144>)
 8000cd2:	f001 ff19 	bl	8002b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000cd6:	e042      	b.n	8000d5e <HAL_ADC_MspInit+0x132>
  else if(hadc->Instance==ADC2)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a25      	ldr	r2, [pc, #148]	@ (8000d74 <HAL_ADC_MspInit+0x148>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d13d      	bne.n	8000d5e <HAL_ADC_MspInit+0x132>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000ce2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ce6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000ce8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000cec:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cee:	f107 0318 	add.w	r3, r7, #24
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f002 ff98 	bl	8003c28 <HAL_RCCEx_PeriphCLKConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_ADC_MspInit+0xd6>
      Error_Handler();
 8000cfe:	f7ff ff6b 	bl	8000bd8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d02:	4b19      	ldr	r3, [pc, #100]	@ (8000d68 <HAL_ADC_MspInit+0x13c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	3301      	adds	r3, #1
 8000d08:	4a17      	ldr	r2, [pc, #92]	@ (8000d68 <HAL_ADC_MspInit+0x13c>)
 8000d0a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d0c:	4b16      	ldr	r3, [pc, #88]	@ (8000d68 <HAL_ADC_MspInit+0x13c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d10b      	bne.n	8000d2c <HAL_ADC_MspInit+0x100>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d14:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <HAL_ADC_MspInit+0x140>)
 8000d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d18:	4a14      	ldr	r2, [pc, #80]	@ (8000d6c <HAL_ADC_MspInit+0x140>)
 8000d1a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d20:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <HAL_ADC_MspInit+0x140>)
 8000d22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d6c <HAL_ADC_MspInit+0x140>)
 8000d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d30:	4a0e      	ldr	r2, [pc, #56]	@ (8000d6c <HAL_ADC_MspInit+0x140>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d38:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <HAL_ADC_MspInit+0x140>)
 8000d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = High_Pressure_ADC_Pin;
 8000d44:	2320      	movs	r3, #32
 8000d46:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(High_Pressure_ADC_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d54:	4619      	mov	r1, r3
 8000d56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d5a:	f001 fed5 	bl	8002b08 <HAL_GPIO_Init>
}
 8000d5e:	bf00      	nop
 8000d60:	3770      	adds	r7, #112	@ 0x70
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000270 	.word	0x20000270
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	48000400 	.word	0x48000400
 8000d74:	50000100 	.word	0x50000100

08000d78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b09a      	sub	sp, #104	@ 0x68
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	2244      	movs	r2, #68	@ 0x44
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f004 fee7 	bl	8005b6c <memset>
  if(hi2c->Instance==I2C2)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a1f      	ldr	r2, [pc, #124]	@ (8000e20 <HAL_I2C_MspInit+0xa8>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d137      	bne.n	8000e18 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000da8:	2380      	movs	r3, #128	@ 0x80
 8000daa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db0:	f107 0310 	add.w	r3, r7, #16
 8000db4:	4618      	mov	r0, r3
 8000db6:	f002 ff37 	bl	8003c28 <HAL_RCCEx_PeriphCLKConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000dc0:	f7ff ff0a 	bl	8000bd8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc4:	4b17      	ldr	r3, [pc, #92]	@ (8000e24 <HAL_I2C_MspInit+0xac>)
 8000dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc8:	4a16      	ldr	r2, [pc, #88]	@ (8000e24 <HAL_I2C_MspInit+0xac>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dd0:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <HAL_I2C_MspInit+0xac>)
 8000dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ddc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000de0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000de2:	2312      	movs	r3, #18
 8000de4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000dee:	2304      	movs	r3, #4
 8000df0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000df6:	4619      	mov	r1, r3
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dfc:	f001 fe84 	bl	8002b08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e00:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <HAL_I2C_MspInit+0xac>)
 8000e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e04:	4a07      	ldr	r2, [pc, #28]	@ (8000e24 <HAL_I2C_MspInit+0xac>)
 8000e06:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e0c:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <HAL_I2C_MspInit+0xac>)
 8000e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e18:	bf00      	nop
 8000e1a:	3768      	adds	r7, #104	@ 0x68
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40005800 	.word	0x40005800
 8000e24:	40021000 	.word	0x40021000

08000e28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	@ 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a17      	ldr	r2, [pc, #92]	@ (8000ea4 <HAL_SPI_MspInit+0x7c>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d128      	bne.n	8000e9c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ea8 <HAL_SPI_MspInit+0x80>)
 8000e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e4e:	4a16      	ldr	r2, [pc, #88]	@ (8000ea8 <HAL_SPI_MspInit+0x80>)
 8000e50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e54:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e56:	4b14      	ldr	r3, [pc, #80]	@ (8000ea8 <HAL_SPI_MspInit+0x80>)
 8000e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <HAL_SPI_MspInit+0x80>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e66:	4a10      	ldr	r2, [pc, #64]	@ (8000ea8 <HAL_SPI_MspInit+0x80>)
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea8 <HAL_SPI_MspInit+0x80>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e7a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e8c:	2305      	movs	r3, #5
 8000e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4619      	mov	r1, r3
 8000e96:	4805      	ldr	r0, [pc, #20]	@ (8000eac <HAL_SPI_MspInit+0x84>)
 8000e98:	f001 fe36 	bl	8002b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e9c:	bf00      	nop
 8000e9e:	3728      	adds	r7, #40	@ 0x28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40003800 	.word	0x40003800
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	48000400 	.word	0x48000400

08000eb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ec0:	d10b      	bne.n	8000eda <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ec2:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <HAL_TIM_Base_MspInit+0x38>)
 8000ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec6:	4a08      	ldr	r2, [pc, #32]	@ (8000ee8 <HAL_TIM_Base_MspInit+0x38>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ece:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <HAL_TIM_Base_MspInit+0x38>)
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40021000 	.word	0x40021000

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <NMI_Handler+0x4>

08000ef4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <HardFault_Handler+0x4>

08000efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <MemManage_Handler+0x4>

08000f04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f42:	f000 f917 	bl	8001174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b086      	sub	sp, #24
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	60f8      	str	r0, [r7, #12]
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	e00a      	b.n	8000f72 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f5c:	f3af 8000 	nop.w
 8000f60:	4601      	mov	r1, r0
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	1c5a      	adds	r2, r3, #1
 8000f66:	60ba      	str	r2, [r7, #8]
 8000f68:	b2ca      	uxtb	r2, r1
 8000f6a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	dbf0      	blt.n	8000f5c <_read+0x12>
  }

  return len;
 8000f7a:	687b      	ldr	r3, [r7, #4]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fac:	605a      	str	r2, [r3, #4]
  return 0;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <_isatty>:

int _isatty(int file)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fc4:	2301      	movs	r3, #1
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b085      	sub	sp, #20
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	60f8      	str	r0, [r7, #12]
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff4:	4a14      	ldr	r2, [pc, #80]	@ (8001048 <_sbrk+0x5c>)
 8000ff6:	4b15      	ldr	r3, [pc, #84]	@ (800104c <_sbrk+0x60>)
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001000:	4b13      	ldr	r3, [pc, #76]	@ (8001050 <_sbrk+0x64>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d102      	bne.n	800100e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001008:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <_sbrk+0x64>)
 800100a:	4a12      	ldr	r2, [pc, #72]	@ (8001054 <_sbrk+0x68>)
 800100c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100e:	4b10      	ldr	r3, [pc, #64]	@ (8001050 <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	429a      	cmp	r2, r3
 800101a:	d207      	bcs.n	800102c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800101c:	f004 fdf4 	bl	8005c08 <__errno>
 8001020:	4603      	mov	r3, r0
 8001022:	220c      	movs	r2, #12
 8001024:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001026:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800102a:	e009      	b.n	8001040 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800102c:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <_sbrk+0x64>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001032:	4b07      	ldr	r3, [pc, #28]	@ (8001050 <_sbrk+0x64>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	4a05      	ldr	r2, [pc, #20]	@ (8001050 <_sbrk+0x64>)
 800103c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103e:	68fb      	ldr	r3, [r7, #12]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20008000 	.word	0x20008000
 800104c:	00000400 	.word	0x00000400
 8001050:	20000274 	.word	0x20000274
 8001054:	200003c8 	.word	0x200003c8

08001058 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800105c:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <SystemInit+0x20>)
 800105e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001062:	4a05      	ldr	r2, [pc, #20]	@ (8001078 <SystemInit+0x20>)
 8001064:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001068:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800107c:	480d      	ldr	r0, [pc, #52]	@ (80010b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800107e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001080:	f7ff ffea 	bl	8001058 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001084:	480c      	ldr	r0, [pc, #48]	@ (80010b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001086:	490d      	ldr	r1, [pc, #52]	@ (80010bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001088:	4a0d      	ldr	r2, [pc, #52]	@ (80010c0 <LoopForever+0xe>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800109c:	4c0a      	ldr	r4, [pc, #40]	@ (80010c8 <LoopForever+0x16>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80010aa:	f004 fdb3 	bl	8005c14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ae:	f7ff f92f 	bl	8000310 <main>

080010b2 <LoopForever>:

LoopForever:
    b LoopForever
 80010b2:	e7fe      	b.n	80010b2 <LoopForever>
  ldr   r0, =_estack
 80010b4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010c0:	08006890 	.word	0x08006890
  ldr r2, =_sbss
 80010c4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010c8:	200003c8 	.word	0x200003c8

080010cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC1_2_IRQHandler>

080010ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010d4:	2300      	movs	r3, #0
 80010d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d8:	2003      	movs	r0, #3
 80010da:	f001 fce3 	bl	8002aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010de:	200f      	movs	r0, #15
 80010e0:	f000 f80e 	bl	8001100 <HAL_InitTick>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d002      	beq.n	80010f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	71fb      	strb	r3, [r7, #7]
 80010ee:	e001      	b.n	80010f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010f0:	f7ff fd78 	bl	8000be4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010f4:	79fb      	ldrb	r3, [r7, #7]

}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001108:	2300      	movs	r3, #0
 800110a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800110c:	4b16      	ldr	r3, [pc, #88]	@ (8001168 <HAL_InitTick+0x68>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d022      	beq.n	800115a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001114:	4b15      	ldr	r3, [pc, #84]	@ (800116c <HAL_InitTick+0x6c>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b13      	ldr	r3, [pc, #76]	@ (8001168 <HAL_InitTick+0x68>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001120:	fbb1 f3f3 	udiv	r3, r1, r3
 8001124:	fbb2 f3f3 	udiv	r3, r2, r3
 8001128:	4618      	mov	r0, r3
 800112a:	f001 fce0 	bl	8002aee <HAL_SYSTICK_Config>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d10f      	bne.n	8001154 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b0f      	cmp	r3, #15
 8001138:	d809      	bhi.n	800114e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800113a:	2200      	movs	r2, #0
 800113c:	6879      	ldr	r1, [r7, #4]
 800113e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001142:	f001 fcba 	bl	8002aba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001146:	4a0a      	ldr	r2, [pc, #40]	@ (8001170 <HAL_InitTick+0x70>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	e007      	b.n	800115e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	73fb      	strb	r3, [r7, #15]
 8001152:	e004      	b.n	800115e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	73fb      	strb	r3, [r7, #15]
 8001158:	e001      	b.n	800115e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800115e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000010 	.word	0x20000010
 800116c:	20000008 	.word	0x20000008
 8001170:	2000000c 	.word	0x2000000c

08001174 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001178:	4b05      	ldr	r3, [pc, #20]	@ (8001190 <HAL_IncTick+0x1c>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <HAL_IncTick+0x20>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4413      	add	r3, r2
 8001182:	4a03      	ldr	r2, [pc, #12]	@ (8001190 <HAL_IncTick+0x1c>)
 8001184:	6013      	str	r3, [r2, #0]
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	20000278 	.word	0x20000278
 8001194:	20000010 	.word	0x20000010

08001198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return uwTick;
 800119c:	4b03      	ldr	r3, [pc, #12]	@ (80011ac <HAL_GetTick+0x14>)
 800119e:	681b      	ldr	r3, [r3, #0]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000278 	.word	0x20000278

080011b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b8:	f7ff ffee 	bl	8001198 <HAL_GetTick>
 80011bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011c8:	d004      	beq.n	80011d4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ca:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <HAL_Delay+0x40>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	4413      	add	r3, r2
 80011d2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011d4:	bf00      	nop
 80011d6:	f7ff ffdf 	bl	8001198 <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d8f7      	bhi.n	80011d6 <HAL_Delay+0x26>
  {
  }
}
 80011e6:	bf00      	nop
 80011e8:	bf00      	nop
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000010 	.word	0x20000010

080011f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	431a      	orrs	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	609a      	str	r2, [r3, #8]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	609a      	str	r2, [r3, #8]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800125c:	b480      	push	{r7}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	3360      	adds	r3, #96	@ 0x60
 800126e:	461a      	mov	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <LL_ADC_SetOffset+0x44>)
 800127e:	4013      	ands	r3, r2
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	430a      	orrs	r2, r1
 800128a:	4313      	orrs	r3, r2
 800128c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001294:	bf00      	nop
 8001296:	371c      	adds	r7, #28
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	03fff000 	.word	0x03fff000

080012a4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3360      	adds	r3, #96	@ 0x60
 80012b2:	461a      	mov	r2, r3
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b087      	sub	sp, #28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3360      	adds	r3, #96	@ 0x60
 80012e0:	461a      	mov	r2, r3
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	431a      	orrs	r2, r3
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012fa:	bf00      	nop
 80012fc:	371c      	adds	r7, #28
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001306:	b480      	push	{r7}
 8001308:	b087      	sub	sp, #28
 800130a:	af00      	add	r7, sp, #0
 800130c:	60f8      	str	r0, [r7, #12]
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	3360      	adds	r3, #96	@ 0x60
 8001316:	461a      	mov	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	431a      	orrs	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001330:	bf00      	nop
 8001332:	371c      	adds	r7, #28
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800133c:	b480      	push	{r7}
 800133e:	b087      	sub	sp, #28
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3360      	adds	r3, #96	@ 0x60
 800134c:	461a      	mov	r2, r3
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	431a      	orrs	r2, r3
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001366:	bf00      	nop
 8001368:	371c      	adds	r7, #28
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	431a      	orrs	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	615a      	str	r2, [r3, #20]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80013ac:	2301      	movs	r3, #1
 80013ae:	e000      	b.n	80013b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013be:	b480      	push	{r7}
 80013c0:	b087      	sub	sp, #28
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	60f8      	str	r0, [r7, #12]
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	3330      	adds	r3, #48	@ 0x30
 80013ce:	461a      	mov	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	0a1b      	lsrs	r3, r3, #8
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	4413      	add	r3, r2
 80013dc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	f003 031f 	and.w	r3, r3, #31
 80013e8:	211f      	movs	r1, #31
 80013ea:	fa01 f303 	lsl.w	r3, r1, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	401a      	ands	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	0e9b      	lsrs	r3, r3, #26
 80013f6:	f003 011f 	and.w	r1, r3, #31
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	f003 031f 	and.w	r3, r3, #31
 8001400:	fa01 f303 	lsl.w	r3, r1, r3
 8001404:	431a      	orrs	r2, r3
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800140a:	bf00      	nop
 800140c:	371c      	adds	r7, #28
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001416:	b480      	push	{r7}
 8001418:	b087      	sub	sp, #28
 800141a:	af00      	add	r7, sp, #0
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	3314      	adds	r3, #20
 8001426:	461a      	mov	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	0e5b      	lsrs	r3, r3, #25
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	4413      	add	r3, r2
 8001434:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	0d1b      	lsrs	r3, r3, #20
 800143e:	f003 031f 	and.w	r3, r3, #31
 8001442:	2107      	movs	r1, #7
 8001444:	fa01 f303 	lsl.w	r3, r1, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	401a      	ands	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	0d1b      	lsrs	r3, r3, #20
 8001450:	f003 031f 	and.w	r3, r3, #31
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	431a      	orrs	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001460:	bf00      	nop
 8001462:	371c      	adds	r7, #28
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001484:	43db      	mvns	r3, r3
 8001486:	401a      	ands	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f003 0318 	and.w	r3, r3, #24
 800148e:	4908      	ldr	r1, [pc, #32]	@ (80014b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001490:	40d9      	lsrs	r1, r3
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	400b      	ands	r3, r1
 8001496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800149a:	431a      	orrs	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	0007ffff 	.word	0x0007ffff

080014b4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 031f 	and.w	r3, r3, #31
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80014fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6093      	str	r3, [r2, #8]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001520:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001524:	d101      	bne.n	800152a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001548:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800154c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001570:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001574:	d101      	bne.n	800157a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001576:	2301      	movs	r3, #1
 8001578:	e000      	b.n	800157c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001598:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800159c:	f043 0201 	orr.w	r2, r3, #1
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015c4:	f043 0202 	orr.w	r2, r3, #2
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d101      	bne.n	80015f0 <LL_ADC_IsEnabled+0x18>
 80015ec:	2301      	movs	r3, #1
 80015ee:	e000      	b.n	80015f2 <LL_ADC_IsEnabled+0x1a>
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b02      	cmp	r3, #2
 8001610:	d101      	bne.n	8001616 <LL_ADC_IsDisableOngoing+0x18>
 8001612:	2301      	movs	r3, #1
 8001614:	e000      	b.n	8001618 <LL_ADC_IsDisableOngoing+0x1a>
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001634:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001638:	f043 0204 	orr.w	r2, r3, #4
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	2b04      	cmp	r3, #4
 800165e:	d101      	bne.n	8001664 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	2b08      	cmp	r3, #8
 8001684:	d101      	bne.n	800168a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001686:	2301      	movs	r3, #1
 8001688:	e000      	b.n	800168c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b089      	sub	sp, #36	@ 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e167      	b.n	8001982 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d109      	bne.n	80016d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff fab3 	bl	8000c2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff19 	bl	8001510 <LL_ADC_IsDeepPowerDownEnabled>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d004      	beq.n	80016ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff feff 	bl	80014ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff ff34 	bl	8001560 <LL_ADC_IsInternalRegulatorEnabled>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d115      	bne.n	800172a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ff18 	bl	8001538 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001708:	4ba0      	ldr	r3, [pc, #640]	@ (800198c <HAL_ADC_Init+0x2f4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	099b      	lsrs	r3, r3, #6
 800170e:	4aa0      	ldr	r2, [pc, #640]	@ (8001990 <HAL_ADC_Init+0x2f8>)
 8001710:	fba2 2303 	umull	r2, r3, r2, r3
 8001714:	099b      	lsrs	r3, r3, #6
 8001716:	3301      	adds	r3, #1
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800171c:	e002      	b.n	8001724 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	3b01      	subs	r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f9      	bne.n	800171e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ff16 	bl	8001560 <LL_ADC_IsInternalRegulatorEnabled>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10d      	bne.n	8001756 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800173e:	f043 0210 	orr.w	r2, r3, #16
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800174a:	f043 0201 	orr.w	r2, r3, #1
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ff76 	bl	800164c <LL_ADC_REG_IsConversionOngoing>
 8001760:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001766:	f003 0310 	and.w	r3, r3, #16
 800176a:	2b00      	cmp	r3, #0
 800176c:	f040 8100 	bne.w	8001970 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	2b00      	cmp	r3, #0
 8001774:	f040 80fc 	bne.w	8001970 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800177c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001780:	f043 0202 	orr.w	r2, r3, #2
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff23 	bl	80015d8 <LL_ADC_IsEnabled>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d111      	bne.n	80017bc <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001798:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800179c:	f7ff ff1c 	bl	80015d8 <LL_ADC_IsEnabled>
 80017a0:	4604      	mov	r4, r0
 80017a2:	487c      	ldr	r0, [pc, #496]	@ (8001994 <HAL_ADC_Init+0x2fc>)
 80017a4:	f7ff ff18 	bl	80015d8 <LL_ADC_IsEnabled>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4323      	orrs	r3, r4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d105      	bne.n	80017bc <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	4619      	mov	r1, r3
 80017b6:	4878      	ldr	r0, [pc, #480]	@ (8001998 <HAL_ADC_Init+0x300>)
 80017b8:	f7ff fd1c 	bl	80011f4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	7f5b      	ldrb	r3, [r3, #29]
 80017c0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017c6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80017cc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80017d2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017da:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d106      	bne.n	80017f8 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ee:	3b01      	subs	r3, #1
 80017f0:	045b      	lsls	r3, r3, #17
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d009      	beq.n	8001814 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001804:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68da      	ldr	r2, [r3, #12]
 800181a:	4b60      	ldr	r3, [pc, #384]	@ (800199c <HAL_ADC_Init+0x304>)
 800181c:	4013      	ands	r3, r2
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6812      	ldr	r2, [r2, #0]
 8001822:	69b9      	ldr	r1, [r7, #24]
 8001824:	430b      	orrs	r3, r1
 8001826:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ff15 	bl	8001672 <LL_ADC_INJ_IsConversionOngoing>
 8001848:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d16d      	bne.n	800192c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d16a      	bne.n	800192c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800185a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001862:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001872:	f023 0302 	bic.w	r3, r3, #2
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6812      	ldr	r2, [r2, #0]
 800187a:	69b9      	ldr	r1, [r7, #24]
 800187c:	430b      	orrs	r3, r1
 800187e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d017      	beq.n	80018b8 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	691a      	ldr	r2, [r3, #16]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001896:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80018a0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80018a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6911      	ldr	r1, [r2, #16]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	430b      	orrs	r3, r1
 80018b2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80018b6:	e013      	b.n	80018e0 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	691a      	ldr	r2, [r3, #16]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80018c6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80018d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018dc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d118      	bne.n	800191c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80018f4:	f023 0304 	bic.w	r3, r3, #4
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001900:	4311      	orrs	r1, r2
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001906:	4311      	orrs	r1, r2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800190c:	430a      	orrs	r2, r1
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f042 0201 	orr.w	r2, r2, #1
 8001918:	611a      	str	r2, [r3, #16]
 800191a:	e007      	b.n	800192c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	691a      	ldr	r2, [r3, #16]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0201 	bic.w	r2, r2, #1
 800192a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d10c      	bne.n	800194e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	f023 010f 	bic.w	r1, r3, #15
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	1e5a      	subs	r2, r3, #1
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	631a      	str	r2, [r3, #48]	@ 0x30
 800194c:	e007      	b.n	800195e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 020f 	bic.w	r2, r2, #15
 800195c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001962:	f023 0303 	bic.w	r3, r3, #3
 8001966:	f043 0201 	orr.w	r2, r3, #1
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800196e:	e007      	b.n	8001980 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001974:	f043 0210 	orr.w	r2, r3, #16
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001980:	7ffb      	ldrb	r3, [r7, #31]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3724      	adds	r7, #36	@ 0x24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd90      	pop	{r4, r7, pc}
 800198a:	bf00      	nop
 800198c:	20000008 	.word	0x20000008
 8001990:	053e2d63 	.word	0x053e2d63
 8001994:	50000100 	.word	0x50000100
 8001998:	50000300 	.word	0x50000300
 800199c:	fff04007 	.word	0xfff04007

080019a0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019a8:	4859      	ldr	r0, [pc, #356]	@ (8001b10 <HAL_ADC_Start+0x170>)
 80019aa:	f7ff fd83 	bl	80014b4 <LL_ADC_GetMultimode>
 80019ae:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fe49 	bl	800164c <LL_ADC_REG_IsConversionOngoing>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f040 809f 	bne.w	8001b00 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d101      	bne.n	80019d0 <HAL_ADC_Start+0x30>
 80019cc:	2302      	movs	r3, #2
 80019ce:	e09a      	b.n	8001b06 <HAL_ADC_Start+0x166>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 fd73 	bl	80024c4 <ADC_Enable>
 80019de:	4603      	mov	r3, r0
 80019e0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80019e2:	7dfb      	ldrb	r3, [r7, #23]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f040 8086 	bne.w	8001af6 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ee:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80019f2:	f023 0301 	bic.w	r3, r3, #1
 80019f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a44      	ldr	r2, [pc, #272]	@ (8001b14 <HAL_ADC_Start+0x174>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d002      	beq.n	8001a0e <HAL_ADC_Start+0x6e>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	e001      	b.n	8001a12 <HAL_ADC_Start+0x72>
 8001a0e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d002      	beq.n	8001a20 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d105      	bne.n	8001a2c <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a24:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a38:	d106      	bne.n	8001a48 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a3e:	f023 0206 	bic.w	r2, r3, #6
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	661a      	str	r2, [r3, #96]	@ 0x60
 8001a46:	e002      	b.n	8001a4e <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	221c      	movs	r2, #28
 8001a54:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a2c      	ldr	r2, [pc, #176]	@ (8001b14 <HAL_ADC_Start+0x174>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d002      	beq.n	8001a6e <HAL_ADC_Start+0xce>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	e001      	b.n	8001a72 <HAL_ADC_Start+0xd2>
 8001a6e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6812      	ldr	r2, [r2, #0]
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d008      	beq.n	8001a8c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	2b05      	cmp	r3, #5
 8001a84:	d002      	beq.n	8001a8c <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	2b09      	cmp	r3, #9
 8001a8a:	d114      	bne.n	8001ab6 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d007      	beq.n	8001aaa <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a9e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001aa2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fdb8 	bl	8001624 <LL_ADC_REG_StartConversion>
 8001ab4:	e026      	b.n	8001b04 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a13      	ldr	r2, [pc, #76]	@ (8001b14 <HAL_ADC_Start+0x174>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d002      	beq.n	8001ad2 <HAL_ADC_Start+0x132>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	e001      	b.n	8001ad6 <HAL_ADC_Start+0x136>
 8001ad2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001ad6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00f      	beq.n	8001b04 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ae8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001aec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001af4:	e006      	b.n	8001b04 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001afe:	e001      	b.n	8001b04 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b00:	2302      	movs	r3, #2
 8001b02:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	50000300 	.word	0x50000300
 8001b14:	50000100 	.word	0x50000100

08001b18 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b088      	sub	sp, #32
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b22:	4867      	ldr	r0, [pc, #412]	@ (8001cc0 <HAL_ADC_PollForConversion+0x1a8>)
 8001b24:	f7ff fcc6 	bl	80014b4 <LL_ADC_GetMultimode>
 8001b28:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d102      	bne.n	8001b38 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001b32:	2308      	movs	r3, #8
 8001b34:	61fb      	str	r3, [r7, #28]
 8001b36:	e02a      	b.n	8001b8e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d005      	beq.n	8001b4a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	2b05      	cmp	r3, #5
 8001b42:	d002      	beq.n	8001b4a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	2b09      	cmp	r3, #9
 8001b48:	d111      	bne.n	8001b6e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d007      	beq.n	8001b68 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b5c:	f043 0220 	orr.w	r2, r3, #32
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e0a6      	b.n	8001cb6 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001b68:	2304      	movs	r3, #4
 8001b6a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001b6c:	e00f      	b.n	8001b8e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001b6e:	4854      	ldr	r0, [pc, #336]	@ (8001cc0 <HAL_ADC_PollForConversion+0x1a8>)
 8001b70:	f7ff fcae 	bl	80014d0 <LL_ADC_GetMultiDMATransfer>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d007      	beq.n	8001b8a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b7e:	f043 0220 	orr.w	r2, r3, #32
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e095      	b.n	8001cb6 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001b8a:	2304      	movs	r3, #4
 8001b8c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001b8e:	f7ff fb03 	bl	8001198 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b94:	e021      	b.n	8001bda <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b9c:	d01d      	beq.n	8001bda <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001b9e:	f7ff fafb 	bl	8001198 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d302      	bcc.n	8001bb4 <HAL_ADC_PollForConversion+0x9c>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d112      	bne.n	8001bda <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10b      	bne.n	8001bda <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bc6:	f043 0204 	orr.w	r2, r3, #4
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e06d      	b.n	8001cb6 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	4013      	ands	r3, r2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0d6      	beq.n	8001b96 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fbcd 	bl	8001398 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d01c      	beq.n	8001c3e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7f5b      	ldrb	r3, [r3, #29]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d118      	bne.n	8001c3e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d111      	bne.n	8001c3e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c1e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d105      	bne.n	8001c3e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c36:	f043 0201 	orr.w	r2, r3, #1
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a20      	ldr	r2, [pc, #128]	@ (8001cc4 <HAL_ADC_PollForConversion+0x1ac>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d002      	beq.n	8001c4e <HAL_ADC_PollForConversion+0x136>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	e001      	b.n	8001c52 <HAL_ADC_PollForConversion+0x13a>
 8001c4e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6812      	ldr	r2, [r2, #0]
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d008      	beq.n	8001c6c <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2b05      	cmp	r3, #5
 8001c64:	d002      	beq.n	8001c6c <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2b09      	cmp	r3, #9
 8001c6a:	d104      	bne.n	8001c76 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	61bb      	str	r3, [r7, #24]
 8001c74:	e00d      	b.n	8001c92 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a12      	ldr	r2, [pc, #72]	@ (8001cc4 <HAL_ADC_PollForConversion+0x1ac>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d002      	beq.n	8001c86 <HAL_ADC_PollForConversion+0x16e>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	e001      	b.n	8001c8a <HAL_ADC_PollForConversion+0x172>
 8001c86:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001c8a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d104      	bne.n	8001ca2 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2208      	movs	r2, #8
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	e008      	b.n	8001cb4 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d103      	bne.n	8001cb4 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	220c      	movs	r2, #12
 8001cb2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3720      	adds	r7, #32
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	50000300 	.word	0x50000300
 8001cc4:	50000100 	.word	0x50000100

08001cc8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b0b6      	sub	sp, #216	@ 0xd8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d101      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x22>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e3c8      	b.n	8002498 <HAL_ADC_ConfigChannel+0x7b4>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fc9a 	bl	800164c <LL_ADC_REG_IsConversionOngoing>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f040 83ad 	bne.w	800247a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6818      	ldr	r0, [r3, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	6859      	ldr	r1, [r3, #4]
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	f7ff fb46 	bl	80013be <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff fc88 	bl	800164c <LL_ADC_REG_IsConversionOngoing>
 8001d3c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fc94 	bl	8001672 <LL_ADC_INJ_IsConversionOngoing>
 8001d4a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d4e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f040 81d9 	bne.w	800210a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f040 81d4 	bne.w	800210a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001d6a:	d10f      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6818      	ldr	r0, [r3, #0]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2200      	movs	r2, #0
 8001d76:	4619      	mov	r1, r3
 8001d78:	f7ff fb4d 	bl	8001416 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff faf4 	bl	8001372 <LL_ADC_SetSamplingTimeCommonConfig>
 8001d8a:	e00e      	b.n	8001daa <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	6819      	ldr	r1, [r3, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	f7ff fb3c 	bl	8001416 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2100      	movs	r1, #0
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fae4 	bl	8001372 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	695a      	ldr	r2, [r3, #20]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	08db      	lsrs	r3, r3, #3
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d022      	beq.n	8001e12 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6818      	ldr	r0, [r3, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	6919      	ldr	r1, [r3, #16]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001ddc:	f7ff fa3e 	bl	800125c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	6919      	ldr	r1, [r3, #16]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	461a      	mov	r2, r3
 8001dee:	f7ff fa8a 	bl	8001306 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6818      	ldr	r0, [r3, #0]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d102      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x124>
 8001e02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e06:	e000      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x126>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	f7ff fa96 	bl	800133c <LL_ADC_SetOffsetSaturation>
 8001e10:	e17b      	b.n	800210a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2100      	movs	r1, #0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fa43 	bl	80012a4 <LL_ADC_GetOffsetChannel>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10a      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x15a>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fa38 	bl	80012a4 <LL_ADC_GetOffsetChannel>
 8001e34:	4603      	mov	r3, r0
 8001e36:	0e9b      	lsrs	r3, r3, #26
 8001e38:	f003 021f 	and.w	r2, r3, #31
 8001e3c:	e01e      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x198>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2100      	movs	r1, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff fa2d 	bl	80012a4 <LL_ADC_GetOffsetChannel>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001e6c:	2320      	movs	r3, #32
 8001e6e:	e004      	b.n	8001e7a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001e70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e74:	fab3 f383 	clz	r3, r3
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d105      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x1b0>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	0e9b      	lsrs	r3, r3, #26
 8001e8e:	f003 031f 	and.w	r3, r3, #31
 8001e92:	e018      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x1e2>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ea0:	fa93 f3a3 	rbit	r3, r3
 8001ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001ea8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001eac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001eb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001eb8:	2320      	movs	r3, #32
 8001eba:	e004      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001ebc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ec0:	fab3 f383 	clz	r3, r3
 8001ec4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d106      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff f9fc 	bl	80012d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2101      	movs	r1, #1
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff f9e0 	bl	80012a4 <LL_ADC_GetOffsetChannel>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10a      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x220>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff f9d5 	bl	80012a4 <LL_ADC_GetOffsetChannel>
 8001efa:	4603      	mov	r3, r0
 8001efc:	0e9b      	lsrs	r3, r3, #26
 8001efe:	f003 021f 	and.w	r2, r3, #31
 8001f02:	e01e      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x25e>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2101      	movs	r1, #1
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff f9ca 	bl	80012a4 <LL_ADC_GetOffsetChannel>
 8001f10:	4603      	mov	r3, r0
 8001f12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f1a:	fa93 f3a3 	rbit	r3, r3
 8001f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001f22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001f2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001f32:	2320      	movs	r3, #32
 8001f34:	e004      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001f36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f3a:	fab3 f383 	clz	r3, r3
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d105      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x276>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	0e9b      	lsrs	r3, r3, #26
 8001f54:	f003 031f 	and.w	r3, r3, #31
 8001f58:	e018      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x2a8>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f62:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f66:	fa93 f3a3 	rbit	r3, r3
 8001f6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001f6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001f76:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001f7e:	2320      	movs	r3, #32
 8001f80:	e004      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001f82:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f86:	fab3 f383 	clz	r3, r3
 8001f8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d106      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2200      	movs	r2, #0
 8001f96:	2101      	movs	r1, #1
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff f999 	bl	80012d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2102      	movs	r1, #2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff f97d 	bl	80012a4 <LL_ADC_GetOffsetChannel>
 8001faa:	4603      	mov	r3, r0
 8001fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10a      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x2e6>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2102      	movs	r1, #2
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff f972 	bl	80012a4 <LL_ADC_GetOffsetChannel>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	0e9b      	lsrs	r3, r3, #26
 8001fc4:	f003 021f 	and.w	r2, r3, #31
 8001fc8:	e01e      	b.n	8002008 <HAL_ADC_ConfigChannel+0x324>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2102      	movs	r1, #2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff f967 	bl	80012a4 <LL_ADC_GetOffsetChannel>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001fe8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001fec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001ff0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001ff8:	2320      	movs	r3, #32
 8001ffa:	e004      	b.n	8002006 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001ffc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002000:	fab3 f383 	clz	r3, r3
 8002004:	b2db      	uxtb	r3, r3
 8002006:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002010:	2b00      	cmp	r3, #0
 8002012:	d105      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x33c>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	0e9b      	lsrs	r3, r3, #26
 800201a:	f003 031f 	and.w	r3, r3, #31
 800201e:	e016      	b.n	800204e <HAL_ADC_ConfigChannel+0x36a>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002028:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800202c:	fa93 f3a3 	rbit	r3, r3
 8002030:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002032:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002034:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002038:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002040:	2320      	movs	r3, #32
 8002042:	e004      	b.n	800204e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002044:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002048:	fab3 f383 	clz	r3, r3
 800204c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800204e:	429a      	cmp	r2, r3
 8002050:	d106      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2200      	movs	r2, #0
 8002058:	2102      	movs	r1, #2
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff f938 	bl	80012d0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2103      	movs	r1, #3
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff f91c 	bl	80012a4 <LL_ADC_GetOffsetChannel>
 800206c:	4603      	mov	r3, r0
 800206e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10a      	bne.n	800208c <HAL_ADC_ConfigChannel+0x3a8>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2103      	movs	r1, #3
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff f911 	bl	80012a4 <LL_ADC_GetOffsetChannel>
 8002082:	4603      	mov	r3, r0
 8002084:	0e9b      	lsrs	r3, r3, #26
 8002086:	f003 021f 	and.w	r2, r3, #31
 800208a:	e017      	b.n	80020bc <HAL_ADC_ConfigChannel+0x3d8>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2103      	movs	r1, #3
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff f906 	bl	80012a4 <LL_ADC_GetOffsetChannel>
 8002098:	4603      	mov	r3, r0
 800209a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800209e:	fa93 f3a3 	rbit	r3, r3
 80020a2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80020a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020a6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80020a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80020ae:	2320      	movs	r3, #32
 80020b0:	e003      	b.n	80020ba <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80020b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020b4:	fab3 f383 	clz	r3, r3
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d105      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x3f0>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	0e9b      	lsrs	r3, r3, #26
 80020ce:	f003 031f 	and.w	r3, r3, #31
 80020d2:	e011      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x414>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020dc:	fa93 f3a3 	rbit	r3, r3
 80020e0:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80020e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80020e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80020ec:	2320      	movs	r3, #32
 80020ee:	e003      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80020f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020f2:	fab3 f383 	clz	r3, r3
 80020f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d106      	bne.n	800210a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2200      	movs	r2, #0
 8002102:	2103      	movs	r1, #3
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff f8e3 	bl	80012d0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fa62 	bl	80015d8 <LL_ADC_IsEnabled>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	f040 8140 	bne.w	800239c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	6819      	ldr	r1, [r3, #0]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	461a      	mov	r2, r3
 800212a:	f7ff f99f 	bl	800146c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	4a8f      	ldr	r2, [pc, #572]	@ (8002370 <HAL_ADC_ConfigChannel+0x68c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	f040 8131 	bne.w	800239c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10b      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x47e>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	0e9b      	lsrs	r3, r3, #26
 8002150:	3301      	adds	r3, #1
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	2b09      	cmp	r3, #9
 8002158:	bf94      	ite	ls
 800215a:	2301      	movls	r3, #1
 800215c:	2300      	movhi	r3, #0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	e019      	b.n	8002196 <HAL_ADC_ConfigChannel+0x4b2>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002168:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800216a:	fa93 f3a3 	rbit	r3, r3
 800216e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002170:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002172:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002174:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800217a:	2320      	movs	r3, #32
 800217c:	e003      	b.n	8002186 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800217e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002180:	fab3 f383 	clz	r3, r3
 8002184:	b2db      	uxtb	r3, r3
 8002186:	3301      	adds	r3, #1
 8002188:	f003 031f 	and.w	r3, r3, #31
 800218c:	2b09      	cmp	r3, #9
 800218e:	bf94      	ite	ls
 8002190:	2301      	movls	r3, #1
 8002192:	2300      	movhi	r3, #0
 8002194:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002196:	2b00      	cmp	r3, #0
 8002198:	d079      	beq.n	800228e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d107      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x4d2>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	0e9b      	lsrs	r3, r3, #26
 80021ac:	3301      	adds	r3, #1
 80021ae:	069b      	lsls	r3, r3, #26
 80021b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021b4:	e015      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x4fe>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021be:	fa93 f3a3 	rbit	r3, r3
 80021c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80021c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021c6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80021c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80021ce:	2320      	movs	r3, #32
 80021d0:	e003      	b.n	80021da <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80021d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021d4:	fab3 f383 	clz	r3, r3
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	3301      	adds	r3, #1
 80021dc:	069b      	lsls	r3, r3, #26
 80021de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d109      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x51e>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	0e9b      	lsrs	r3, r3, #26
 80021f4:	3301      	adds	r3, #1
 80021f6:	f003 031f 	and.w	r3, r3, #31
 80021fa:	2101      	movs	r1, #1
 80021fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002200:	e017      	b.n	8002232 <HAL_ADC_ConfigChannel+0x54e>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800220a:	fa93 f3a3 	rbit	r3, r3
 800220e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002210:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002212:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002214:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800221a:	2320      	movs	r3, #32
 800221c:	e003      	b.n	8002226 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800221e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002220:	fab3 f383 	clz	r3, r3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	3301      	adds	r3, #1
 8002228:	f003 031f 	and.w	r3, r3, #31
 800222c:	2101      	movs	r1, #1
 800222e:	fa01 f303 	lsl.w	r3, r1, r3
 8002232:	ea42 0103 	orr.w	r1, r2, r3
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10a      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x574>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	0e9b      	lsrs	r3, r3, #26
 8002248:	3301      	adds	r3, #1
 800224a:	f003 021f 	and.w	r2, r3, #31
 800224e:	4613      	mov	r3, r2
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	4413      	add	r3, r2
 8002254:	051b      	lsls	r3, r3, #20
 8002256:	e018      	b.n	800228a <HAL_ADC_ConfigChannel+0x5a6>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002268:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800226a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002270:	2320      	movs	r3, #32
 8002272:	e003      	b.n	800227c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	3301      	adds	r3, #1
 800227e:	f003 021f 	and.w	r2, r3, #31
 8002282:	4613      	mov	r3, r2
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4413      	add	r3, r2
 8002288:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800228a:	430b      	orrs	r3, r1
 800228c:	e081      	b.n	8002392 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002296:	2b00      	cmp	r3, #0
 8002298:	d107      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x5c6>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	0e9b      	lsrs	r3, r3, #26
 80022a0:	3301      	adds	r3, #1
 80022a2:	069b      	lsls	r3, r3, #26
 80022a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022a8:	e015      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x5f2>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022b2:	fa93 f3a3 	rbit	r3, r3
 80022b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80022b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ba:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80022bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80022c2:	2320      	movs	r3, #32
 80022c4:	e003      	b.n	80022ce <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80022c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c8:	fab3 f383 	clz	r3, r3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	3301      	adds	r3, #1
 80022d0:	069b      	lsls	r3, r3, #26
 80022d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d109      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x612>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	0e9b      	lsrs	r3, r3, #26
 80022e8:	3301      	adds	r3, #1
 80022ea:	f003 031f 	and.w	r3, r3, #31
 80022ee:	2101      	movs	r1, #1
 80022f0:	fa01 f303 	lsl.w	r3, r1, r3
 80022f4:	e017      	b.n	8002326 <HAL_ADC_ConfigChannel+0x642>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	fa93 f3a3 	rbit	r3, r3
 8002302:	61fb      	str	r3, [r7, #28]
  return result;
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800230e:	2320      	movs	r3, #32
 8002310:	e003      	b.n	800231a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002314:	fab3 f383 	clz	r3, r3
 8002318:	b2db      	uxtb	r3, r3
 800231a:	3301      	adds	r3, #1
 800231c:	f003 031f 	and.w	r3, r3, #31
 8002320:	2101      	movs	r1, #1
 8002322:	fa01 f303 	lsl.w	r3, r1, r3
 8002326:	ea42 0103 	orr.w	r1, r2, r3
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10d      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x66e>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	0e9b      	lsrs	r3, r3, #26
 800233c:	3301      	adds	r3, #1
 800233e:	f003 021f 	and.w	r2, r3, #31
 8002342:	4613      	mov	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	4413      	add	r3, r2
 8002348:	3b1e      	subs	r3, #30
 800234a:	051b      	lsls	r3, r3, #20
 800234c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002350:	e01e      	b.n	8002390 <HAL_ADC_ConfigChannel+0x6ac>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	613b      	str	r3, [r7, #16]
  return result;
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d104      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800236a:	2320      	movs	r3, #32
 800236c:	e006      	b.n	800237c <HAL_ADC_ConfigChannel+0x698>
 800236e:	bf00      	nop
 8002370:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	3301      	adds	r3, #1
 800237e:	f003 021f 	and.w	r2, r3, #31
 8002382:	4613      	mov	r3, r2
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	4413      	add	r3, r2
 8002388:	3b1e      	subs	r3, #30
 800238a:	051b      	lsls	r3, r3, #20
 800238c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002390:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002396:	4619      	mov	r1, r3
 8002398:	f7ff f83d 	bl	8001416 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	4b3f      	ldr	r3, [pc, #252]	@ (80024a0 <HAL_ADC_ConfigChannel+0x7bc>)
 80023a2:	4013      	ands	r3, r2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d071      	beq.n	800248c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023a8:	483e      	ldr	r0, [pc, #248]	@ (80024a4 <HAL_ADC_ConfigChannel+0x7c0>)
 80023aa:	f7fe ff49 	bl	8001240 <LL_ADC_GetCommonPathInternalCh>
 80023ae:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a3c      	ldr	r2, [pc, #240]	@ (80024a8 <HAL_ADC_ConfigChannel+0x7c4>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d004      	beq.n	80023c6 <HAL_ADC_ConfigChannel+0x6e2>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a3a      	ldr	r2, [pc, #232]	@ (80024ac <HAL_ADC_ConfigChannel+0x7c8>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d127      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d121      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023da:	d157      	bne.n	800248c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80023e4:	4619      	mov	r1, r3
 80023e6:	482f      	ldr	r0, [pc, #188]	@ (80024a4 <HAL_ADC_ConfigChannel+0x7c0>)
 80023e8:	f7fe ff17 	bl	800121a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023ec:	4b30      	ldr	r3, [pc, #192]	@ (80024b0 <HAL_ADC_ConfigChannel+0x7cc>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	099b      	lsrs	r3, r3, #6
 80023f2:	4a30      	ldr	r2, [pc, #192]	@ (80024b4 <HAL_ADC_ConfigChannel+0x7d0>)
 80023f4:	fba2 2303 	umull	r2, r3, r2, r3
 80023f8:	099b      	lsrs	r3, r3, #6
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	4613      	mov	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4413      	add	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002406:	e002      	b.n	800240e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	3b01      	subs	r3, #1
 800240c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1f9      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002414:	e03a      	b.n	800248c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a27      	ldr	r2, [pc, #156]	@ (80024b8 <HAL_ADC_ConfigChannel+0x7d4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d113      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002420:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002424:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10d      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a22      	ldr	r2, [pc, #136]	@ (80024bc <HAL_ADC_ConfigChannel+0x7d8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d02a      	beq.n	800248c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002436:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800243a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800243e:	4619      	mov	r1, r3
 8002440:	4818      	ldr	r0, [pc, #96]	@ (80024a4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002442:	f7fe feea 	bl	800121a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002446:	e021      	b.n	800248c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a1c      	ldr	r2, [pc, #112]	@ (80024c0 <HAL_ADC_ConfigChannel+0x7dc>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d11c      	bne.n	800248c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002452:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d116      	bne.n	800248c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a16      	ldr	r2, [pc, #88]	@ (80024bc <HAL_ADC_ConfigChannel+0x7d8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d011      	beq.n	800248c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002468:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800246c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002470:	4619      	mov	r1, r3
 8002472:	480c      	ldr	r0, [pc, #48]	@ (80024a4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002474:	f7fe fed1 	bl	800121a <LL_ADC_SetCommonPathInternalCh>
 8002478:	e008      	b.n	800248c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800247e:	f043 0220 	orr.w	r2, r3, #32
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002494:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002498:	4618      	mov	r0, r3
 800249a:	37d8      	adds	r7, #216	@ 0xd8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	80080000 	.word	0x80080000
 80024a4:	50000300 	.word	0x50000300
 80024a8:	c3210000 	.word	0xc3210000
 80024ac:	90c00010 	.word	0x90c00010
 80024b0:	20000008 	.word	0x20000008
 80024b4:	053e2d63 	.word	0x053e2d63
 80024b8:	c7520000 	.word	0xc7520000
 80024bc:	50000100 	.word	0x50000100
 80024c0:	cb840000 	.word	0xcb840000

080024c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff f87f 	bl	80015d8 <LL_ADC_IsEnabled>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d169      	bne.n	80025b4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	4b36      	ldr	r3, [pc, #216]	@ (80025c0 <ADC_Enable+0xfc>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00d      	beq.n	800250a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f2:	f043 0210 	orr.w	r2, r3, #16
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024fe:	f043 0201 	orr.w	r2, r3, #1
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e055      	b.n	80025b6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff f83a 	bl	8001588 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002514:	482b      	ldr	r0, [pc, #172]	@ (80025c4 <ADC_Enable+0x100>)
 8002516:	f7fe fe93 	bl	8001240 <LL_ADC_GetCommonPathInternalCh>
 800251a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800251c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002520:	2b00      	cmp	r3, #0
 8002522:	d013      	beq.n	800254c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002524:	4b28      	ldr	r3, [pc, #160]	@ (80025c8 <ADC_Enable+0x104>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	099b      	lsrs	r3, r3, #6
 800252a:	4a28      	ldr	r2, [pc, #160]	@ (80025cc <ADC_Enable+0x108>)
 800252c:	fba2 2303 	umull	r2, r3, r2, r3
 8002530:	099b      	lsrs	r3, r3, #6
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	4613      	mov	r3, r2
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	4413      	add	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800253e:	e002      	b.n	8002546 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	3b01      	subs	r3, #1
 8002544:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1f9      	bne.n	8002540 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800254c:	f7fe fe24 	bl	8001198 <HAL_GetTick>
 8002550:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002552:	e028      	b.n	80025a6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff f83d 	bl	80015d8 <LL_ADC_IsEnabled>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d104      	bne.n	800256e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff f80d 	bl	8001588 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800256e:	f7fe fe13 	bl	8001198 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d914      	bls.n	80025a6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b01      	cmp	r3, #1
 8002588:	d00d      	beq.n	80025a6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800258e:	f043 0210 	orr.w	r2, r3, #16
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800259a:	f043 0201 	orr.w	r2, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e007      	b.n	80025b6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d1cf      	bne.n	8002554 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	8000003f 	.word	0x8000003f
 80025c4:	50000300 	.word	0x50000300
 80025c8:	20000008 	.word	0x20000008
 80025cc:	053e2d63 	.word	0x053e2d63

080025d0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff f80e 	bl	80015fe <LL_ADC_IsDisableOngoing>
 80025e2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe fff5 	bl	80015d8 <LL_ADC_IsEnabled>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d047      	beq.n	8002684 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d144      	bne.n	8002684 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 030d 	and.w	r3, r3, #13
 8002604:	2b01      	cmp	r3, #1
 8002606:	d10c      	bne.n	8002622 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7fe ffcf 	bl	80015b0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2203      	movs	r2, #3
 8002618:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800261a:	f7fe fdbd 	bl	8001198 <HAL_GetTick>
 800261e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002620:	e029      	b.n	8002676 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002626:	f043 0210 	orr.w	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002632:	f043 0201 	orr.w	r2, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e023      	b.n	8002686 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800263e:	f7fe fdab 	bl	8001198 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d914      	bls.n	8002676 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00d      	beq.n	8002676 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800265e:	f043 0210 	orr.w	r2, r3, #16
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800266a:	f043 0201 	orr.w	r2, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e007      	b.n	8002686 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1dc      	bne.n	800263e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <LL_ADC_IsEnabled>:
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d101      	bne.n	80026a6 <LL_ADC_IsEnabled+0x18>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <LL_ADC_IsEnabled+0x1a>
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <LL_ADC_StartCalibration>:
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80026c6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	609a      	str	r2, [r3, #8]
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <LL_ADC_IsCalibrationOnGoing>:
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80026f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026fa:	d101      	bne.n	8002700 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80026fc:	2301      	movs	r3, #1
 80026fe:	e000      	b.n	8002702 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <LL_ADC_REG_IsConversionOngoing>:
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	2b04      	cmp	r3, #4
 8002720:	d101      	bne.n	8002726 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800273e:	2300      	movs	r3, #0
 8002740:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <HAL_ADCEx_Calibration_Start+0x1c>
 800274c:	2302      	movs	r3, #2
 800274e:	e04d      	b.n	80027ec <HAL_ADCEx_Calibration_Start+0xb8>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7ff ff39 	bl	80025d0 <ADC_Disable>
 800275e:	4603      	mov	r3, r0
 8002760:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d136      	bne.n	80027d6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800276c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002770:	f023 0302 	bic.w	r3, r3, #2
 8002774:	f043 0202 	orr.w	r2, r3, #2
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6839      	ldr	r1, [r7, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff ff96 	bl	80026b4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002788:	e014      	b.n	80027b4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	3301      	adds	r3, #1
 800278e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	4a18      	ldr	r2, [pc, #96]	@ (80027f4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d90d      	bls.n	80027b4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800279c:	f023 0312 	bic.w	r3, r3, #18
 80027a0:	f043 0210 	orr.w	r2, r3, #16
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e01b      	b.n	80027ec <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ff94 	bl	80026e6 <LL_ADC_IsCalibrationOnGoing>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1e2      	bne.n	800278a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c8:	f023 0303 	bic.w	r3, r3, #3
 80027cc:	f043 0201 	orr.w	r2, r3, #1
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80027d4:	e005      	b.n	80027e2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027da:	f043 0210 	orr.w	r2, r3, #16
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	0004de01 	.word	0x0004de01

080027f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80027f8:	b590      	push	{r4, r7, lr}
 80027fa:	b0a1      	sub	sp, #132	@ 0x84
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002812:	2302      	movs	r3, #2
 8002814:	e08b      	b.n	800292e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800281e:	2300      	movs	r3, #0
 8002820:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002822:	2300      	movs	r3, #0
 8002824:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800282e:	d102      	bne.n	8002836 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002830:	4b41      	ldr	r3, [pc, #260]	@ (8002938 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	e001      	b.n	800283a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002836:	2300      	movs	r3, #0
 8002838:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10b      	bne.n	8002858 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002844:	f043 0220 	orr.w	r2, r3, #32
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e06a      	b.n	800292e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff ff57 	bl	800270e <LL_ADC_REG_IsConversionOngoing>
 8002860:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff ff51 	bl	800270e <LL_ADC_REG_IsConversionOngoing>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d14c      	bne.n	800290c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002872:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002874:	2b00      	cmp	r3, #0
 8002876:	d149      	bne.n	800290c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002878:	4b30      	ldr	r3, [pc, #192]	@ (800293c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800287a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d028      	beq.n	80028d6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002884:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	6859      	ldr	r1, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002896:	035b      	lsls	r3, r3, #13
 8002898:	430b      	orrs	r3, r1
 800289a:	431a      	orrs	r2, r3
 800289c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800289e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028a0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80028a4:	f7ff fef3 	bl	800268e <LL_ADC_IsEnabled>
 80028a8:	4604      	mov	r4, r0
 80028aa:	4823      	ldr	r0, [pc, #140]	@ (8002938 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80028ac:	f7ff feef 	bl	800268e <LL_ADC_IsEnabled>
 80028b0:	4603      	mov	r3, r0
 80028b2:	4323      	orrs	r3, r4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d133      	bne.n	8002920 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80028b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80028c0:	f023 030f 	bic.w	r3, r3, #15
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	6811      	ldr	r1, [r2, #0]
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	6892      	ldr	r2, [r2, #8]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	431a      	orrs	r2, r3
 80028d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028d2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028d4:	e024      	b.n	8002920 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80028d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028e0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028e2:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80028e6:	f7ff fed2 	bl	800268e <LL_ADC_IsEnabled>
 80028ea:	4604      	mov	r4, r0
 80028ec:	4812      	ldr	r0, [pc, #72]	@ (8002938 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80028ee:	f7ff fece 	bl	800268e <LL_ADC_IsEnabled>
 80028f2:	4603      	mov	r3, r0
 80028f4:	4323      	orrs	r3, r4
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d112      	bne.n	8002920 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80028fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002902:	f023 030f 	bic.w	r3, r3, #15
 8002906:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002908:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800290a:	e009      	b.n	8002920 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002910:	f043 0220 	orr.w	r2, r3, #32
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800291e:	e000      	b.n	8002922 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002920:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800292a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800292e:	4618      	mov	r0, r3
 8002930:	3784      	adds	r7, #132	@ 0x84
 8002932:	46bd      	mov	sp, r7
 8002934:	bd90      	pop	{r4, r7, pc}
 8002936:	bf00      	nop
 8002938:	50000100 	.word	0x50000100
 800293c:	50000300 	.word	0x50000300

08002940 <__NVIC_SetPriorityGrouping>:
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002950:	4b0c      	ldr	r3, [pc, #48]	@ (8002984 <__NVIC_SetPriorityGrouping+0x44>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800295c:	4013      	ands	r3, r2
 800295e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002968:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800296c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002972:	4a04      	ldr	r2, [pc, #16]	@ (8002984 <__NVIC_SetPriorityGrouping+0x44>)
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	60d3      	str	r3, [r2, #12]
}
 8002978:	bf00      	nop
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <__NVIC_GetPriorityGrouping>:
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800298c:	4b04      	ldr	r3, [pc, #16]	@ (80029a0 <__NVIC_GetPriorityGrouping+0x18>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	0a1b      	lsrs	r3, r3, #8
 8002992:	f003 0307 	and.w	r3, r3, #7
}
 8002996:	4618      	mov	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <__NVIC_SetPriority>:
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	6039      	str	r1, [r7, #0]
 80029ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	db0a      	blt.n	80029ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	490c      	ldr	r1, [pc, #48]	@ (80029f0 <__NVIC_SetPriority+0x4c>)
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	0112      	lsls	r2, r2, #4
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	440b      	add	r3, r1
 80029c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80029cc:	e00a      	b.n	80029e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	4908      	ldr	r1, [pc, #32]	@ (80029f4 <__NVIC_SetPriority+0x50>)
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	3b04      	subs	r3, #4
 80029dc:	0112      	lsls	r2, r2, #4
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	440b      	add	r3, r1
 80029e2:	761a      	strb	r2, [r3, #24]
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	e000e100 	.word	0xe000e100
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <NVIC_EncodePriority>:
{
 80029f8:	b480      	push	{r7}
 80029fa:	b089      	sub	sp, #36	@ 0x24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f1c3 0307 	rsb	r3, r3, #7
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	bf28      	it	cs
 8002a16:	2304      	movcs	r3, #4
 8002a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	2b06      	cmp	r3, #6
 8002a20:	d902      	bls.n	8002a28 <NVIC_EncodePriority+0x30>
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3b03      	subs	r3, #3
 8002a26:	e000      	b.n	8002a2a <NVIC_EncodePriority+0x32>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43da      	mvns	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	401a      	ands	r2, r3
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a40:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4a:	43d9      	mvns	r1, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a50:	4313      	orrs	r3, r2
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3724      	adds	r7, #36	@ 0x24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
	...

08002a60 <SysTick_Config>:
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a70:	d301      	bcc.n	8002a76 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002a72:	2301      	movs	r3, #1
 8002a74:	e00f      	b.n	8002a96 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a76:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa0 <SysTick_Config+0x40>)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a7e:	210f      	movs	r1, #15
 8002a80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a84:	f7ff ff8e 	bl	80029a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a88:	4b05      	ldr	r3, [pc, #20]	@ (8002aa0 <SysTick_Config+0x40>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a8e:	4b04      	ldr	r3, [pc, #16]	@ (8002aa0 <SysTick_Config+0x40>)
 8002a90:	2207      	movs	r2, #7
 8002a92:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	e000e010 	.word	0xe000e010

08002aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ff47 	bl	8002940 <__NVIC_SetPriorityGrouping>
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b086      	sub	sp, #24
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
 8002ac6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ac8:	f7ff ff5e 	bl	8002988 <__NVIC_GetPriorityGrouping>
 8002acc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	6978      	ldr	r0, [r7, #20]
 8002ad4:	f7ff ff90 	bl	80029f8 <NVIC_EncodePriority>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ade:	4611      	mov	r1, r2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff ff5f 	bl	80029a4 <__NVIC_SetPriority>
}
 8002ae6:	bf00      	nop
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff ffb2 	bl	8002a60 <SysTick_Config>
 8002afc:	4603      	mov	r3, r0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b16:	e15a      	b.n	8002dce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	fa01 f303 	lsl.w	r3, r1, r3
 8002b24:	4013      	ands	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 814c 	beq.w	8002dc8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d005      	beq.n	8002b48 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d130      	bne.n	8002baa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	2203      	movs	r2, #3
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b7e:	2201      	movs	r2, #1
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43db      	mvns	r3, r3
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	091b      	lsrs	r3, r3, #4
 8002b94:	f003 0201 	and.w	r2, r3, #1
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	d017      	beq.n	8002be6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d123      	bne.n	8002c3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	08da      	lsrs	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3208      	adds	r2, #8
 8002bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	220f      	movs	r2, #15
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4013      	ands	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	691a      	ldr	r2, [r3, #16]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	08da      	lsrs	r2, r3, #3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3208      	adds	r2, #8
 8002c34:	6939      	ldr	r1, [r7, #16]
 8002c36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	2203      	movs	r2, #3
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f003 0203 	and.w	r2, r3, #3
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 80a6 	beq.w	8002dc8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7c:	4b5b      	ldr	r3, [pc, #364]	@ (8002dec <HAL_GPIO_Init+0x2e4>)
 8002c7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c80:	4a5a      	ldr	r2, [pc, #360]	@ (8002dec <HAL_GPIO_Init+0x2e4>)
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c88:	4b58      	ldr	r3, [pc, #352]	@ (8002dec <HAL_GPIO_Init+0x2e4>)
 8002c8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	60bb      	str	r3, [r7, #8]
 8002c92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c94:	4a56      	ldr	r2, [pc, #344]	@ (8002df0 <HAL_GPIO_Init+0x2e8>)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	089b      	lsrs	r3, r3, #2
 8002c9a:	3302      	adds	r3, #2
 8002c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	220f      	movs	r2, #15
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002cbe:	d01f      	beq.n	8002d00 <HAL_GPIO_Init+0x1f8>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a4c      	ldr	r2, [pc, #304]	@ (8002df4 <HAL_GPIO_Init+0x2ec>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d019      	beq.n	8002cfc <HAL_GPIO_Init+0x1f4>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a4b      	ldr	r2, [pc, #300]	@ (8002df8 <HAL_GPIO_Init+0x2f0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d013      	beq.n	8002cf8 <HAL_GPIO_Init+0x1f0>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a4a      	ldr	r2, [pc, #296]	@ (8002dfc <HAL_GPIO_Init+0x2f4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d00d      	beq.n	8002cf4 <HAL_GPIO_Init+0x1ec>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a49      	ldr	r2, [pc, #292]	@ (8002e00 <HAL_GPIO_Init+0x2f8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d007      	beq.n	8002cf0 <HAL_GPIO_Init+0x1e8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a48      	ldr	r2, [pc, #288]	@ (8002e04 <HAL_GPIO_Init+0x2fc>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d101      	bne.n	8002cec <HAL_GPIO_Init+0x1e4>
 8002ce8:	2305      	movs	r3, #5
 8002cea:	e00a      	b.n	8002d02 <HAL_GPIO_Init+0x1fa>
 8002cec:	2306      	movs	r3, #6
 8002cee:	e008      	b.n	8002d02 <HAL_GPIO_Init+0x1fa>
 8002cf0:	2304      	movs	r3, #4
 8002cf2:	e006      	b.n	8002d02 <HAL_GPIO_Init+0x1fa>
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e004      	b.n	8002d02 <HAL_GPIO_Init+0x1fa>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e002      	b.n	8002d02 <HAL_GPIO_Init+0x1fa>
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e000      	b.n	8002d02 <HAL_GPIO_Init+0x1fa>
 8002d00:	2300      	movs	r3, #0
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	f002 0203 	and.w	r2, r2, #3
 8002d08:	0092      	lsls	r2, r2, #2
 8002d0a:	4093      	lsls	r3, r2
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d12:	4937      	ldr	r1, [pc, #220]	@ (8002df0 <HAL_GPIO_Init+0x2e8>)
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	089b      	lsrs	r3, r3, #2
 8002d18:	3302      	adds	r3, #2
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d20:	4b39      	ldr	r3, [pc, #228]	@ (8002e08 <HAL_GPIO_Init+0x300>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d44:	4a30      	ldr	r2, [pc, #192]	@ (8002e08 <HAL_GPIO_Init+0x300>)
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d4a:	4b2f      	ldr	r3, [pc, #188]	@ (8002e08 <HAL_GPIO_Init+0x300>)
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	43db      	mvns	r3, r3
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4013      	ands	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d6e:	4a26      	ldr	r2, [pc, #152]	@ (8002e08 <HAL_GPIO_Init+0x300>)
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002d74:	4b24      	ldr	r3, [pc, #144]	@ (8002e08 <HAL_GPIO_Init+0x300>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4013      	ands	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d98:	4a1b      	ldr	r2, [pc, #108]	@ (8002e08 <HAL_GPIO_Init+0x300>)
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002e08 <HAL_GPIO_Init+0x300>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	43db      	mvns	r3, r3
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4013      	ands	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002dc2:	4a11      	ldr	r2, [pc, #68]	@ (8002e08 <HAL_GPIO_Init+0x300>)
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f47f ae9d 	bne.w	8002b18 <HAL_GPIO_Init+0x10>
  }
}
 8002dde:	bf00      	nop
 8002de0:	bf00      	nop
 8002de2:	371c      	adds	r7, #28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40010000 	.word	0x40010000
 8002df4:	48000400 	.word	0x48000400
 8002df8:	48000800 	.word	0x48000800
 8002dfc:	48000c00 	.word	0x48000c00
 8002e00:	48001000 	.word	0x48001000
 8002e04:	48001400 	.word	0x48001400
 8002e08:	40010400 	.word	0x40010400

08002e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	807b      	strh	r3, [r7, #2]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e1c:	787b      	ldrb	r3, [r7, #1]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e22:	887a      	ldrh	r2, [r7, #2]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e28:	e002      	b.n	8002e30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e2a:	887a      	ldrh	r2, [r7, #2]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e4e:	887a      	ldrh	r2, [r7, #2]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4013      	ands	r3, r2
 8002e54:	041a      	lsls	r2, r3, #16
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	43d9      	mvns	r1, r3
 8002e5a:	887b      	ldrh	r3, [r7, #2]
 8002e5c:	400b      	ands	r3, r1
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	619a      	str	r2, [r3, #24]
}
 8002e64:	bf00      	nop
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e08d      	b.n	8002f9e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7fd ff6e 	bl	8000d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2224      	movs	r2, #36	@ 0x24
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0201 	bic.w	r2, r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ec0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ed0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d107      	bne.n	8002eea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	e006      	b.n	8002ef8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002ef6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d108      	bne.n	8002f12 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f0e:	605a      	str	r2, [r3, #4]
 8002f10:	e007      	b.n	8002f22 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691a      	ldr	r2, [r3, #16]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69d9      	ldr	r1, [r3, #28]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1a      	ldr	r2, [r3, #32]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0201 	orr.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b20      	cmp	r3, #32
 8002fba:	d138      	bne.n	800302e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e032      	b.n	8003030 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2224      	movs	r2, #36	@ 0x24
 8002fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0201 	bic.w	r2, r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ff8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6819      	ldr	r1, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0201 	orr.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2220      	movs	r2, #32
 800301e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	e000      	b.n	8003030 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800302e:	2302      	movs	r3, #2
  }
}
 8003030:	4618      	mov	r0, r3
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b20      	cmp	r3, #32
 8003050:	d139      	bne.n	80030c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800305c:	2302      	movs	r3, #2
 800305e:	e033      	b.n	80030c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2224      	movs	r2, #36	@ 0x24
 800306c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800308e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	021b      	lsls	r3, r3, #8
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4313      	orrs	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0201 	orr.w	r2, r2, #1
 80030b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2220      	movs	r2, #32
 80030b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	e000      	b.n	80030c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030c6:	2302      	movs	r3, #2
  }
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d141      	bne.n	8003166 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80030e2:	4b4b      	ldr	r3, [pc, #300]	@ (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80030ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ee:	d131      	bne.n	8003154 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030f0:	4b47      	ldr	r3, [pc, #284]	@ (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030f6:	4a46      	ldr	r2, [pc, #280]	@ (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003100:	4b43      	ldr	r3, [pc, #268]	@ (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003108:	4a41      	ldr	r2, [pc, #260]	@ (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800310a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800310e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003110:	4b40      	ldr	r3, [pc, #256]	@ (8003214 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2232      	movs	r2, #50	@ 0x32
 8003116:	fb02 f303 	mul.w	r3, r2, r3
 800311a:	4a3f      	ldr	r2, [pc, #252]	@ (8003218 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800311c:	fba2 2303 	umull	r2, r3, r2, r3
 8003120:	0c9b      	lsrs	r3, r3, #18
 8003122:	3301      	adds	r3, #1
 8003124:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003126:	e002      	b.n	800312e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	3b01      	subs	r3, #1
 800312c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800312e:	4b38      	ldr	r3, [pc, #224]	@ (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800313a:	d102      	bne.n	8003142 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f2      	bne.n	8003128 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003142:	4b33      	ldr	r3, [pc, #204]	@ (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800314a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800314e:	d158      	bne.n	8003202 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e057      	b.n	8003204 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003154:	4b2e      	ldr	r3, [pc, #184]	@ (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800315a:	4a2d      	ldr	r2, [pc, #180]	@ (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800315c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003160:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003164:	e04d      	b.n	8003202 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800316c:	d141      	bne.n	80031f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800316e:	4b28      	ldr	r3, [pc, #160]	@ (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003176:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800317a:	d131      	bne.n	80031e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800317c:	4b24      	ldr	r3, [pc, #144]	@ (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800317e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003182:	4a23      	ldr	r2, [pc, #140]	@ (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003188:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800318c:	4b20      	ldr	r3, [pc, #128]	@ (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003194:	4a1e      	ldr	r2, [pc, #120]	@ (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003196:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800319a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800319c:	4b1d      	ldr	r3, [pc, #116]	@ (8003214 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2232      	movs	r2, #50	@ 0x32
 80031a2:	fb02 f303 	mul.w	r3, r2, r3
 80031a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003218 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031a8:	fba2 2303 	umull	r2, r3, r2, r3
 80031ac:	0c9b      	lsrs	r3, r3, #18
 80031ae:	3301      	adds	r3, #1
 80031b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031b2:	e002      	b.n	80031ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031ba:	4b15      	ldr	r3, [pc, #84]	@ (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031c6:	d102      	bne.n	80031ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f2      	bne.n	80031b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031ce:	4b10      	ldr	r3, [pc, #64]	@ (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031da:	d112      	bne.n	8003202 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e011      	b.n	8003204 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80031f0:	e007      	b.n	8003202 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80031f2:	4b07      	ldr	r3, [pc, #28]	@ (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031fa:	4a05      	ldr	r2, [pc, #20]	@ (8003210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003200:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	40007000 	.word	0x40007000
 8003214:	20000008 	.word	0x20000008
 8003218:	431bde83 	.word	0x431bde83

0800321c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003220:	4b05      	ldr	r3, [pc, #20]	@ (8003238 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	4a04      	ldr	r2, [pc, #16]	@ (8003238 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003226:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800322a:	6093      	str	r3, [r2, #8]
}
 800322c:	bf00      	nop
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40007000 	.word	0x40007000

0800323c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b088      	sub	sp, #32
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e2fe      	b.n	800384c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d075      	beq.n	8003346 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800325a:	4b97      	ldr	r3, [pc, #604]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 030c 	and.w	r3, r3, #12
 8003262:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003264:	4b94      	ldr	r3, [pc, #592]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	2b0c      	cmp	r3, #12
 8003272:	d102      	bne.n	800327a <HAL_RCC_OscConfig+0x3e>
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2b03      	cmp	r3, #3
 8003278:	d002      	beq.n	8003280 <HAL_RCC_OscConfig+0x44>
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	2b08      	cmp	r3, #8
 800327e:	d10b      	bne.n	8003298 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003280:	4b8d      	ldr	r3, [pc, #564]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d05b      	beq.n	8003344 <HAL_RCC_OscConfig+0x108>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d157      	bne.n	8003344 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e2d9      	b.n	800384c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032a0:	d106      	bne.n	80032b0 <HAL_RCC_OscConfig+0x74>
 80032a2:	4b85      	ldr	r3, [pc, #532]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a84      	ldr	r2, [pc, #528]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 80032a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	e01d      	b.n	80032ec <HAL_RCC_OscConfig+0xb0>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032b8:	d10c      	bne.n	80032d4 <HAL_RCC_OscConfig+0x98>
 80032ba:	4b7f      	ldr	r3, [pc, #508]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a7e      	ldr	r2, [pc, #504]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 80032c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	4b7c      	ldr	r3, [pc, #496]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a7b      	ldr	r2, [pc, #492]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 80032cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	e00b      	b.n	80032ec <HAL_RCC_OscConfig+0xb0>
 80032d4:	4b78      	ldr	r3, [pc, #480]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a77      	ldr	r2, [pc, #476]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 80032da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032de:	6013      	str	r3, [r2, #0]
 80032e0:	4b75      	ldr	r3, [pc, #468]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a74      	ldr	r2, [pc, #464]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 80032e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d013      	beq.n	800331c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f4:	f7fd ff50 	bl	8001198 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032fc:	f7fd ff4c 	bl	8001198 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b64      	cmp	r3, #100	@ 0x64
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e29e      	b.n	800384c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800330e:	4b6a      	ldr	r3, [pc, #424]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0xc0>
 800331a:	e014      	b.n	8003346 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fd ff3c 	bl	8001198 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003324:	f7fd ff38 	bl	8001198 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b64      	cmp	r3, #100	@ 0x64
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e28a      	b.n	800384c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003336:	4b60      	ldr	r3, [pc, #384]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1f0      	bne.n	8003324 <HAL_RCC_OscConfig+0xe8>
 8003342:	e000      	b.n	8003346 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d075      	beq.n	800343e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003352:	4b59      	ldr	r3, [pc, #356]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 030c 	and.w	r3, r3, #12
 800335a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800335c:	4b56      	ldr	r3, [pc, #344]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f003 0303 	and.w	r3, r3, #3
 8003364:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	2b0c      	cmp	r3, #12
 800336a:	d102      	bne.n	8003372 <HAL_RCC_OscConfig+0x136>
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d002      	beq.n	8003378 <HAL_RCC_OscConfig+0x13c>
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	2b04      	cmp	r3, #4
 8003376:	d11f      	bne.n	80033b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003378:	4b4f      	ldr	r3, [pc, #316]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <HAL_RCC_OscConfig+0x154>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e25d      	b.n	800384c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003390:	4b49      	ldr	r3, [pc, #292]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	061b      	lsls	r3, r3, #24
 800339e:	4946      	ldr	r1, [pc, #280]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033a4:	4b45      	ldr	r3, [pc, #276]	@ (80034bc <HAL_RCC_OscConfig+0x280>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fd fea9 	bl	8001100 <HAL_InitTick>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d043      	beq.n	800343c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e249      	b.n	800384c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d023      	beq.n	8003408 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c0:	4b3d      	ldr	r3, [pc, #244]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a3c      	ldr	r2, [pc, #240]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 80033c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7fd fee4 	bl	8001198 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d4:	f7fd fee0 	bl	8001198 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e232      	b.n	800384c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033e6:	4b34      	ldr	r3, [pc, #208]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f2:	4b31      	ldr	r3, [pc, #196]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	061b      	lsls	r3, r3, #24
 8003400:	492d      	ldr	r1, [pc, #180]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 8003402:	4313      	orrs	r3, r2
 8003404:	604b      	str	r3, [r1, #4]
 8003406:	e01a      	b.n	800343e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003408:	4b2b      	ldr	r3, [pc, #172]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a2a      	ldr	r2, [pc, #168]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 800340e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7fd fec0 	bl	8001198 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800341c:	f7fd febc 	bl	8001198 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e20e      	b.n	800384c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800342e:	4b22      	ldr	r3, [pc, #136]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0x1e0>
 800343a:	e000      	b.n	800343e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800343c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	2b00      	cmp	r3, #0
 8003448:	d041      	beq.n	80034ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d01c      	beq.n	800348c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003452:	4b19      	ldr	r3, [pc, #100]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 8003454:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003458:	4a17      	ldr	r2, [pc, #92]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003462:	f7fd fe99 	bl	8001198 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800346a:	f7fd fe95 	bl	8001198 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e1e7      	b.n	800384c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800347c:	4b0e      	ldr	r3, [pc, #56]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 800347e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0ef      	beq.n	800346a <HAL_RCC_OscConfig+0x22e>
 800348a:	e020      	b.n	80034ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800348c:	4b0a      	ldr	r3, [pc, #40]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 800348e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003492:	4a09      	ldr	r2, [pc, #36]	@ (80034b8 <HAL_RCC_OscConfig+0x27c>)
 8003494:	f023 0301 	bic.w	r3, r3, #1
 8003498:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349c:	f7fd fe7c 	bl	8001198 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034a2:	e00d      	b.n	80034c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a4:	f7fd fe78 	bl	8001198 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d906      	bls.n	80034c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e1ca      	b.n	800384c <HAL_RCC_OscConfig+0x610>
 80034b6:	bf00      	nop
 80034b8:	40021000 	.word	0x40021000
 80034bc:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034c0:	4b8c      	ldr	r3, [pc, #560]	@ (80036f4 <HAL_RCC_OscConfig+0x4b8>)
 80034c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1ea      	bne.n	80034a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 80a6 	beq.w	8003628 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034dc:	2300      	movs	r3, #0
 80034de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034e0:	4b84      	ldr	r3, [pc, #528]	@ (80036f4 <HAL_RCC_OscConfig+0x4b8>)
 80034e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_RCC_OscConfig+0x2b4>
 80034ec:	2301      	movs	r3, #1
 80034ee:	e000      	b.n	80034f2 <HAL_RCC_OscConfig+0x2b6>
 80034f0:	2300      	movs	r3, #0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00d      	beq.n	8003512 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034f6:	4b7f      	ldr	r3, [pc, #508]	@ (80036f4 <HAL_RCC_OscConfig+0x4b8>)
 80034f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034fa:	4a7e      	ldr	r2, [pc, #504]	@ (80036f4 <HAL_RCC_OscConfig+0x4b8>)
 80034fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003500:	6593      	str	r3, [r2, #88]	@ 0x58
 8003502:	4b7c      	ldr	r3, [pc, #496]	@ (80036f4 <HAL_RCC_OscConfig+0x4b8>)
 8003504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800350e:	2301      	movs	r3, #1
 8003510:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003512:	4b79      	ldr	r3, [pc, #484]	@ (80036f8 <HAL_RCC_OscConfig+0x4bc>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800351a:	2b00      	cmp	r3, #0
 800351c:	d118      	bne.n	8003550 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800351e:	4b76      	ldr	r3, [pc, #472]	@ (80036f8 <HAL_RCC_OscConfig+0x4bc>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a75      	ldr	r2, [pc, #468]	@ (80036f8 <HAL_RCC_OscConfig+0x4bc>)
 8003524:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800352a:	f7fd fe35 	bl	8001198 <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003530:	e008      	b.n	8003544 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003532:	f7fd fe31 	bl	8001198 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e183      	b.n	800384c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003544:	4b6c      	ldr	r3, [pc, #432]	@ (80036f8 <HAL_RCC_OscConfig+0x4bc>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0f0      	beq.n	8003532 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d108      	bne.n	800356a <HAL_RCC_OscConfig+0x32e>
 8003558:	4b66      	ldr	r3, [pc, #408]	@ (80036f4 <HAL_RCC_OscConfig+0x4b8>)
 800355a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800355e:	4a65      	ldr	r2, [pc, #404]	@ (80036f4 <HAL_RCC_OscConfig+0x4b8>)
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003568:	e024      	b.n	80035b4 <HAL_RCC_OscConfig+0x378>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	2b05      	cmp	r3, #5
 8003570:	d110      	bne.n	8003594 <HAL_RCC_OscConfig+0x358>
 8003572:	4b60      	ldr	r3, [pc, #384]	@ (80036f4 <HAL_RCC_OscConfig+0x4b8>)
 8003574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003578:	4a5e      	ldr	r2, [pc, #376]	@ (80036f4 <HAL_RCC_OscConfig+0x4b8>)
 800357a:	f043 0304 	orr.w	r3, r3, #4
 800357e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003582:	4b5c      	ldr	r3, [pc, #368]	@ (80036f4 <HAL_RCC_OscConfig+0x4b8>)
 8003584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003588:	4a5a      	ldr	r2, [pc, #360]	@ (80036f4 <HAL_RCC_OscConfig+0x4b8>)
 800358a:	f043 0301 	orr.w	r3, r3, #1
 800358e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003592:	e00f      	b.n	80035b4 <HAL_RCC_OscConfig+0x378>
 8003594:	4b57      	ldr	r3, [pc, #348]	@ (80036f4 <HAL_RCC_OscConfig+0x4b8>)
 8003596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800359a:	4a56      	ldr	r2, [pc, #344]	@ (80036f4 <HAL_RCC_OscConfig+0x4b8>)
 800359c:	f023 0301 	bic.w	r3, r3, #1
 80035a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80035a4:	4b53      	ldr	r3, [pc, #332]	@ (80036f4 <HAL_RCC_OscConfig+0x4b8>)
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035aa:	4a52      	ldr	r2, [pc, #328]	@ (80036f4 <HAL_RCC_OscConfig+0x4b8>)
 80035ac:	f023 0304 	bic.w	r3, r3, #4
 80035b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d016      	beq.n	80035ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035bc:	f7fd fdec 	bl	8001198 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035c2:	e00a      	b.n	80035da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c4:	f7fd fde8 	bl	8001198 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e138      	b.n	800384c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035da:	4b46      	ldr	r3, [pc, #280]	@ (80036f4 <HAL_RCC_OscConfig+0x4b8>)
 80035dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0ed      	beq.n	80035c4 <HAL_RCC_OscConfig+0x388>
 80035e8:	e015      	b.n	8003616 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ea:	f7fd fdd5 	bl	8001198 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035f0:	e00a      	b.n	8003608 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035f2:	f7fd fdd1 	bl	8001198 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003600:	4293      	cmp	r3, r2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e121      	b.n	800384c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003608:	4b3a      	ldr	r3, [pc, #232]	@ (80036f4 <HAL_RCC_OscConfig+0x4b8>)
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1ed      	bne.n	80035f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003616:	7ffb      	ldrb	r3, [r7, #31]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d105      	bne.n	8003628 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800361c:	4b35      	ldr	r3, [pc, #212]	@ (80036f4 <HAL_RCC_OscConfig+0x4b8>)
 800361e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003620:	4a34      	ldr	r2, [pc, #208]	@ (80036f4 <HAL_RCC_OscConfig+0x4b8>)
 8003622:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003626:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0320 	and.w	r3, r3, #32
 8003630:	2b00      	cmp	r3, #0
 8003632:	d03c      	beq.n	80036ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d01c      	beq.n	8003676 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800363c:	4b2d      	ldr	r3, [pc, #180]	@ (80036f4 <HAL_RCC_OscConfig+0x4b8>)
 800363e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003642:	4a2c      	ldr	r2, [pc, #176]	@ (80036f4 <HAL_RCC_OscConfig+0x4b8>)
 8003644:	f043 0301 	orr.w	r3, r3, #1
 8003648:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364c:	f7fd fda4 	bl	8001198 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003654:	f7fd fda0 	bl	8001198 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e0f2      	b.n	800384c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003666:	4b23      	ldr	r3, [pc, #140]	@ (80036f4 <HAL_RCC_OscConfig+0x4b8>)
 8003668:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0ef      	beq.n	8003654 <HAL_RCC_OscConfig+0x418>
 8003674:	e01b      	b.n	80036ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003676:	4b1f      	ldr	r3, [pc, #124]	@ (80036f4 <HAL_RCC_OscConfig+0x4b8>)
 8003678:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800367c:	4a1d      	ldr	r2, [pc, #116]	@ (80036f4 <HAL_RCC_OscConfig+0x4b8>)
 800367e:	f023 0301 	bic.w	r3, r3, #1
 8003682:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003686:	f7fd fd87 	bl	8001198 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800368e:	f7fd fd83 	bl	8001198 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e0d5      	b.n	800384c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036a0:	4b14      	ldr	r3, [pc, #80]	@ (80036f4 <HAL_RCC_OscConfig+0x4b8>)
 80036a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1ef      	bne.n	800368e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 80c9 	beq.w	800384a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036b8:	4b0e      	ldr	r3, [pc, #56]	@ (80036f4 <HAL_RCC_OscConfig+0x4b8>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 030c 	and.w	r3, r3, #12
 80036c0:	2b0c      	cmp	r3, #12
 80036c2:	f000 8083 	beq.w	80037cc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d15e      	bne.n	800378c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ce:	4b09      	ldr	r3, [pc, #36]	@ (80036f4 <HAL_RCC_OscConfig+0x4b8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a08      	ldr	r2, [pc, #32]	@ (80036f4 <HAL_RCC_OscConfig+0x4b8>)
 80036d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036da:	f7fd fd5d 	bl	8001198 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036e0:	e00c      	b.n	80036fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e2:	f7fd fd59 	bl	8001198 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d905      	bls.n	80036fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e0ab      	b.n	800384c <HAL_RCC_OscConfig+0x610>
 80036f4:	40021000 	.word	0x40021000
 80036f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036fc:	4b55      	ldr	r3, [pc, #340]	@ (8003854 <HAL_RCC_OscConfig+0x618>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1ec      	bne.n	80036e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003708:	4b52      	ldr	r3, [pc, #328]	@ (8003854 <HAL_RCC_OscConfig+0x618>)
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	4b52      	ldr	r3, [pc, #328]	@ (8003858 <HAL_RCC_OscConfig+0x61c>)
 800370e:	4013      	ands	r3, r2
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6a11      	ldr	r1, [r2, #32]
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003718:	3a01      	subs	r2, #1
 800371a:	0112      	lsls	r2, r2, #4
 800371c:	4311      	orrs	r1, r2
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003722:	0212      	lsls	r2, r2, #8
 8003724:	4311      	orrs	r1, r2
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800372a:	0852      	lsrs	r2, r2, #1
 800372c:	3a01      	subs	r2, #1
 800372e:	0552      	lsls	r2, r2, #21
 8003730:	4311      	orrs	r1, r2
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003736:	0852      	lsrs	r2, r2, #1
 8003738:	3a01      	subs	r2, #1
 800373a:	0652      	lsls	r2, r2, #25
 800373c:	4311      	orrs	r1, r2
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003742:	06d2      	lsls	r2, r2, #27
 8003744:	430a      	orrs	r2, r1
 8003746:	4943      	ldr	r1, [pc, #268]	@ (8003854 <HAL_RCC_OscConfig+0x618>)
 8003748:	4313      	orrs	r3, r2
 800374a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800374c:	4b41      	ldr	r3, [pc, #260]	@ (8003854 <HAL_RCC_OscConfig+0x618>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a40      	ldr	r2, [pc, #256]	@ (8003854 <HAL_RCC_OscConfig+0x618>)
 8003752:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003756:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003758:	4b3e      	ldr	r3, [pc, #248]	@ (8003854 <HAL_RCC_OscConfig+0x618>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	4a3d      	ldr	r2, [pc, #244]	@ (8003854 <HAL_RCC_OscConfig+0x618>)
 800375e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003762:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003764:	f7fd fd18 	bl	8001198 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376c:	f7fd fd14 	bl	8001198 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e066      	b.n	800384c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377e:	4b35      	ldr	r3, [pc, #212]	@ (8003854 <HAL_RCC_OscConfig+0x618>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0f0      	beq.n	800376c <HAL_RCC_OscConfig+0x530>
 800378a:	e05e      	b.n	800384a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800378c:	4b31      	ldr	r3, [pc, #196]	@ (8003854 <HAL_RCC_OscConfig+0x618>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a30      	ldr	r2, [pc, #192]	@ (8003854 <HAL_RCC_OscConfig+0x618>)
 8003792:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003798:	f7fd fcfe 	bl	8001198 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a0:	f7fd fcfa 	bl	8001198 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e04c      	b.n	800384c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037b2:	4b28      	ldr	r3, [pc, #160]	@ (8003854 <HAL_RCC_OscConfig+0x618>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80037be:	4b25      	ldr	r3, [pc, #148]	@ (8003854 <HAL_RCC_OscConfig+0x618>)
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	4924      	ldr	r1, [pc, #144]	@ (8003854 <HAL_RCC_OscConfig+0x618>)
 80037c4:	4b25      	ldr	r3, [pc, #148]	@ (800385c <HAL_RCC_OscConfig+0x620>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	60cb      	str	r3, [r1, #12]
 80037ca:	e03e      	b.n	800384a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d101      	bne.n	80037d8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e039      	b.n	800384c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80037d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003854 <HAL_RCC_OscConfig+0x618>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f003 0203 	and.w	r2, r3, #3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d12c      	bne.n	8003846 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f6:	3b01      	subs	r3, #1
 80037f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d123      	bne.n	8003846 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003808:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d11b      	bne.n	8003846 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003818:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800381a:	429a      	cmp	r2, r3
 800381c:	d113      	bne.n	8003846 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003828:	085b      	lsrs	r3, r3, #1
 800382a:	3b01      	subs	r3, #1
 800382c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800382e:	429a      	cmp	r2, r3
 8003830:	d109      	bne.n	8003846 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800383c:	085b      	lsrs	r3, r3, #1
 800383e:	3b01      	subs	r3, #1
 8003840:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003842:	429a      	cmp	r2, r3
 8003844:	d001      	beq.n	800384a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3720      	adds	r7, #32
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40021000 	.word	0x40021000
 8003858:	019f800c 	.word	0x019f800c
 800385c:	feeefffc 	.word	0xfeeefffc

08003860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800386a:	2300      	movs	r3, #0
 800386c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e11e      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003878:	4b91      	ldr	r3, [pc, #580]	@ (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d910      	bls.n	80038a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003886:	4b8e      	ldr	r3, [pc, #568]	@ (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f023 020f 	bic.w	r2, r3, #15
 800388e:	498c      	ldr	r1, [pc, #560]	@ (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	4313      	orrs	r3, r2
 8003894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003896:	4b8a      	ldr	r3, [pc, #552]	@ (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d001      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e106      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d073      	beq.n	800399c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b03      	cmp	r3, #3
 80038ba:	d129      	bne.n	8003910 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038bc:	4b81      	ldr	r3, [pc, #516]	@ (8003ac4 <HAL_RCC_ClockConfig+0x264>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0f4      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80038cc:	f000 f966 	bl	8003b9c <RCC_GetSysClockFreqFromPLLSource>
 80038d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4a7c      	ldr	r2, [pc, #496]	@ (8003ac8 <HAL_RCC_ClockConfig+0x268>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d93f      	bls.n	800395a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80038da:	4b7a      	ldr	r3, [pc, #488]	@ (8003ac4 <HAL_RCC_ClockConfig+0x264>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d009      	beq.n	80038fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d033      	beq.n	800395a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d12f      	bne.n	800395a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80038fa:	4b72      	ldr	r3, [pc, #456]	@ (8003ac4 <HAL_RCC_ClockConfig+0x264>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003902:	4a70      	ldr	r2, [pc, #448]	@ (8003ac4 <HAL_RCC_ClockConfig+0x264>)
 8003904:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003908:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800390a:	2380      	movs	r3, #128	@ 0x80
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	e024      	b.n	800395a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	2b02      	cmp	r3, #2
 8003916:	d107      	bne.n	8003928 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003918:	4b6a      	ldr	r3, [pc, #424]	@ (8003ac4 <HAL_RCC_ClockConfig+0x264>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d109      	bne.n	8003938 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e0c6      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003928:	4b66      	ldr	r3, [pc, #408]	@ (8003ac4 <HAL_RCC_ClockConfig+0x264>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e0be      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003938:	f000 f8ce 	bl	8003ad8 <HAL_RCC_GetSysClockFreq>
 800393c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4a61      	ldr	r2, [pc, #388]	@ (8003ac8 <HAL_RCC_ClockConfig+0x268>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d909      	bls.n	800395a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003946:	4b5f      	ldr	r3, [pc, #380]	@ (8003ac4 <HAL_RCC_ClockConfig+0x264>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800394e:	4a5d      	ldr	r2, [pc, #372]	@ (8003ac4 <HAL_RCC_ClockConfig+0x264>)
 8003950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003954:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003956:	2380      	movs	r3, #128	@ 0x80
 8003958:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800395a:	4b5a      	ldr	r3, [pc, #360]	@ (8003ac4 <HAL_RCC_ClockConfig+0x264>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f023 0203 	bic.w	r2, r3, #3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4957      	ldr	r1, [pc, #348]	@ (8003ac4 <HAL_RCC_ClockConfig+0x264>)
 8003968:	4313      	orrs	r3, r2
 800396a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800396c:	f7fd fc14 	bl	8001198 <HAL_GetTick>
 8003970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003972:	e00a      	b.n	800398a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003974:	f7fd fc10 	bl	8001198 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003982:	4293      	cmp	r3, r2
 8003984:	d901      	bls.n	800398a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e095      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398a:	4b4e      	ldr	r3, [pc, #312]	@ (8003ac4 <HAL_RCC_ClockConfig+0x264>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 020c 	and.w	r2, r3, #12
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	429a      	cmp	r2, r3
 800399a:	d1eb      	bne.n	8003974 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d023      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d005      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039b4:	4b43      	ldr	r3, [pc, #268]	@ (8003ac4 <HAL_RCC_ClockConfig+0x264>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	4a42      	ldr	r2, [pc, #264]	@ (8003ac4 <HAL_RCC_ClockConfig+0x264>)
 80039ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80039be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0308 	and.w	r3, r3, #8
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d007      	beq.n	80039dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80039cc:	4b3d      	ldr	r3, [pc, #244]	@ (8003ac4 <HAL_RCC_ClockConfig+0x264>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80039d4:	4a3b      	ldr	r2, [pc, #236]	@ (8003ac4 <HAL_RCC_ClockConfig+0x264>)
 80039d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80039da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039dc:	4b39      	ldr	r3, [pc, #228]	@ (8003ac4 <HAL_RCC_ClockConfig+0x264>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	4936      	ldr	r1, [pc, #216]	@ (8003ac4 <HAL_RCC_ClockConfig+0x264>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	608b      	str	r3, [r1, #8]
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	2b80      	cmp	r3, #128	@ 0x80
 80039f4:	d105      	bne.n	8003a02 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80039f6:	4b33      	ldr	r3, [pc, #204]	@ (8003ac4 <HAL_RCC_ClockConfig+0x264>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	4a32      	ldr	r2, [pc, #200]	@ (8003ac4 <HAL_RCC_ClockConfig+0x264>)
 80039fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a00:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a02:	4b2f      	ldr	r3, [pc, #188]	@ (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d21d      	bcs.n	8003a4c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a10:	4b2b      	ldr	r3, [pc, #172]	@ (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f023 020f 	bic.w	r2, r3, #15
 8003a18:	4929      	ldr	r1, [pc, #164]	@ (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a20:	f7fd fbba 	bl	8001198 <HAL_GetTick>
 8003a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a26:	e00a      	b.n	8003a3e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a28:	f7fd fbb6 	bl	8001198 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e03b      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3e:	4b20      	ldr	r3, [pc, #128]	@ (8003ac0 <HAL_RCC_ClockConfig+0x260>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d1ed      	bne.n	8003a28 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d008      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a58:	4b1a      	ldr	r3, [pc, #104]	@ (8003ac4 <HAL_RCC_ClockConfig+0x264>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	4917      	ldr	r1, [pc, #92]	@ (8003ac4 <HAL_RCC_ClockConfig+0x264>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d009      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a76:	4b13      	ldr	r3, [pc, #76]	@ (8003ac4 <HAL_RCC_ClockConfig+0x264>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	490f      	ldr	r1, [pc, #60]	@ (8003ac4 <HAL_RCC_ClockConfig+0x264>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a8a:	f000 f825 	bl	8003ad8 <HAL_RCC_GetSysClockFreq>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac4 <HAL_RCC_ClockConfig+0x264>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	091b      	lsrs	r3, r3, #4
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	490c      	ldr	r1, [pc, #48]	@ (8003acc <HAL_RCC_ClockConfig+0x26c>)
 8003a9c:	5ccb      	ldrb	r3, [r1, r3]
 8003a9e:	f003 031f 	and.w	r3, r3, #31
 8003aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad0 <HAL_RCC_ClockConfig+0x270>)
 8003aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <HAL_RCC_ClockConfig+0x274>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fd fb26 	bl	8001100 <HAL_InitTick>
 8003ab4:	4603      	mov	r3, r0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3718      	adds	r7, #24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	40022000 	.word	0x40022000
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	04c4b400 	.word	0x04c4b400
 8003acc:	0800683c 	.word	0x0800683c
 8003ad0:	20000008 	.word	0x20000008
 8003ad4:	2000000c 	.word	0x2000000c

08003ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003ade:	4b2c      	ldr	r3, [pc, #176]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 030c 	and.w	r3, r3, #12
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d102      	bne.n	8003af0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003aea:	4b2a      	ldr	r3, [pc, #168]	@ (8003b94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003aec:	613b      	str	r3, [r7, #16]
 8003aee:	e047      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003af0:	4b27      	ldr	r3, [pc, #156]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 030c 	and.w	r3, r3, #12
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d102      	bne.n	8003b02 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003afc:	4b26      	ldr	r3, [pc, #152]	@ (8003b98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	e03e      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003b02:	4b23      	ldr	r3, [pc, #140]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	2b0c      	cmp	r3, #12
 8003b0c:	d136      	bne.n	8003b7c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b0e:	4b20      	ldr	r3, [pc, #128]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	f003 0303 	and.w	r3, r3, #3
 8003b16:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b18:	4b1d      	ldr	r3, [pc, #116]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	091b      	lsrs	r3, r3, #4
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	3301      	adds	r3, #1
 8003b24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2b03      	cmp	r3, #3
 8003b2a:	d10c      	bne.n	8003b46 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b2c:	4a1a      	ldr	r2, [pc, #104]	@ (8003b98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b34:	4a16      	ldr	r2, [pc, #88]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b36:	68d2      	ldr	r2, [r2, #12]
 8003b38:	0a12      	lsrs	r2, r2, #8
 8003b3a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b3e:	fb02 f303 	mul.w	r3, r2, r3
 8003b42:	617b      	str	r3, [r7, #20]
      break;
 8003b44:	e00c      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b46:	4a13      	ldr	r2, [pc, #76]	@ (8003b94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4e:	4a10      	ldr	r2, [pc, #64]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b50:	68d2      	ldr	r2, [r2, #12]
 8003b52:	0a12      	lsrs	r2, r2, #8
 8003b54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b58:	fb02 f303 	mul.w	r3, r2, r3
 8003b5c:	617b      	str	r3, [r7, #20]
      break;
 8003b5e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b60:	4b0b      	ldr	r3, [pc, #44]	@ (8003b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	0e5b      	lsrs	r3, r3, #25
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b78:	613b      	str	r3, [r7, #16]
 8003b7a:	e001      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003b80:	693b      	ldr	r3, [r7, #16]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	371c      	adds	r7, #28
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40021000 	.word	0x40021000
 8003b94:	00f42400 	.word	0x00f42400
 8003b98:	007a1200 	.word	0x007a1200

08003b9c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8003c1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bac:	4b1b      	ldr	r3, [pc, #108]	@ (8003c1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	091b      	lsrs	r3, r3, #4
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	d10c      	bne.n	8003bda <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bc0:	4a17      	ldr	r2, [pc, #92]	@ (8003c20 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc8:	4a14      	ldr	r2, [pc, #80]	@ (8003c1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bca:	68d2      	ldr	r2, [r2, #12]
 8003bcc:	0a12      	lsrs	r2, r2, #8
 8003bce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003bd2:	fb02 f303 	mul.w	r3, r2, r3
 8003bd6:	617b      	str	r3, [r7, #20]
    break;
 8003bd8:	e00c      	b.n	8003bf4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bda:	4a12      	ldr	r2, [pc, #72]	@ (8003c24 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be2:	4a0e      	ldr	r2, [pc, #56]	@ (8003c1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003be4:	68d2      	ldr	r2, [r2, #12]
 8003be6:	0a12      	lsrs	r2, r2, #8
 8003be8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003bec:	fb02 f303 	mul.w	r3, r2, r3
 8003bf0:	617b      	str	r3, [r7, #20]
    break;
 8003bf2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bf4:	4b09      	ldr	r3, [pc, #36]	@ (8003c1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	0e5b      	lsrs	r3, r3, #25
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	3301      	adds	r3, #1
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003c0e:	687b      	ldr	r3, [r7, #4]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	371c      	adds	r7, #28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	007a1200 	.word	0x007a1200
 8003c24:	00f42400 	.word	0x00f42400

08003c28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c30:	2300      	movs	r3, #0
 8003c32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c34:	2300      	movs	r3, #0
 8003c36:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 8098 	beq.w	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c46:	2300      	movs	r3, #0
 8003c48:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c4a:	4b43      	ldr	r3, [pc, #268]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10d      	bne.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c56:	4b40      	ldr	r3, [pc, #256]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c5a:	4a3f      	ldr	r2, [pc, #252]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c60:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c62:	4b3d      	ldr	r3, [pc, #244]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c6a:	60bb      	str	r3, [r7, #8]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c72:	4b3a      	ldr	r3, [pc, #232]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a39      	ldr	r2, [pc, #228]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c7e:	f7fd fa8b 	bl	8001198 <HAL_GetTick>
 8003c82:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c84:	e009      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c86:	f7fd fa87 	bl	8001198 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d902      	bls.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	74fb      	strb	r3, [r7, #19]
        break;
 8003c98:	e005      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c9a:	4b30      	ldr	r3, [pc, #192]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0ef      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003ca6:	7cfb      	ldrb	r3, [r7, #19]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d159      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cac:	4b2a      	ldr	r3, [pc, #168]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cb6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d01e      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d019      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cc8:	4b23      	ldr	r3, [pc, #140]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cd4:	4b20      	ldr	r3, [pc, #128]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cda:	4a1f      	ldr	r2, [pc, #124]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ce0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cea:	4a1b      	ldr	r2, [pc, #108]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003cf4:	4a18      	ldr	r2, [pc, #96]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d016      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d06:	f7fd fa47 	bl	8001198 <HAL_GetTick>
 8003d0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d0c:	e00b      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d0e:	f7fd fa43 	bl	8001198 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d902      	bls.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	74fb      	strb	r3, [r7, #19]
            break;
 8003d24:	e006      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d26:	4b0c      	ldr	r3, [pc, #48]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0ec      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003d34:	7cfb      	ldrb	r3, [r7, #19]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10b      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d3a:	4b07      	ldr	r3, [pc, #28]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d48:	4903      	ldr	r1, [pc, #12]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003d50:	e008      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d52:	7cfb      	ldrb	r3, [r7, #19]
 8003d54:	74bb      	strb	r3, [r7, #18]
 8003d56:	e005      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d60:	7cfb      	ldrb	r3, [r7, #19]
 8003d62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d64:	7c7b      	ldrb	r3, [r7, #17]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d105      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d6a:	4ba6      	ldr	r3, [pc, #664]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6e:	4aa5      	ldr	r2, [pc, #660]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d74:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d82:	4ba0      	ldr	r3, [pc, #640]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d88:	f023 0203 	bic.w	r2, r3, #3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	499c      	ldr	r1, [pc, #624]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00a      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003da4:	4b97      	ldr	r3, [pc, #604]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003daa:	f023 020c 	bic.w	r2, r3, #12
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	4994      	ldr	r1, [pc, #592]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dc6:	4b8f      	ldr	r3, [pc, #572]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dcc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	498b      	ldr	r1, [pc, #556]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0308 	and.w	r3, r3, #8
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00a      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003de8:	4b86      	ldr	r3, [pc, #536]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	4983      	ldr	r1, [pc, #524]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0320 	and.w	r3, r3, #32
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e0a:	4b7e      	ldr	r3, [pc, #504]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e10:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	497a      	ldr	r1, [pc, #488]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00a      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e2c:	4b75      	ldr	r3, [pc, #468]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e32:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	4972      	ldr	r1, [pc, #456]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e4e:	4b6d      	ldr	r3, [pc, #436]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e54:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	69db      	ldr	r3, [r3, #28]
 8003e5c:	4969      	ldr	r1, [pc, #420]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e70:	4b64      	ldr	r3, [pc, #400]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e76:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	4961      	ldr	r1, [pc, #388]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e92:	4b5c      	ldr	r3, [pc, #368]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e98:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea0:	4958      	ldr	r1, [pc, #352]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d015      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003eb4:	4b53      	ldr	r3, [pc, #332]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec2:	4950      	ldr	r1, [pc, #320]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ece:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ed2:	d105      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ed4:	4b4b      	ldr	r3, [pc, #300]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	4a4a      	ldr	r2, [pc, #296]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ede:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d015      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003eec:	4b45      	ldr	r3, [pc, #276]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efa:	4942      	ldr	r1, [pc, #264]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f0a:	d105      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f0c:	4b3d      	ldr	r3, [pc, #244]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4a3c      	ldr	r2, [pc, #240]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f16:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d015      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f24:	4b37      	ldr	r3, [pc, #220]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f2a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f32:	4934      	ldr	r1, [pc, #208]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f42:	d105      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f44:	4b2f      	ldr	r3, [pc, #188]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	4a2e      	ldr	r2, [pc, #184]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f4e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d015      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f5c:	4b29      	ldr	r3, [pc, #164]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f62:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f6a:	4926      	ldr	r1, [pc, #152]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f7a:	d105      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f7c:	4b21      	ldr	r3, [pc, #132]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	4a20      	ldr	r2, [pc, #128]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f86:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d015      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f94:	4b1b      	ldr	r3, [pc, #108]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa2:	4918      	ldr	r1, [pc, #96]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fb2:	d105      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fb4:	4b13      	ldr	r3, [pc, #76]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	4a12      	ldr	r2, [pc, #72]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fbe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d015      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fda:	490a      	ldr	r1, [pc, #40]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fea:	d105      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003fec:	4b05      	ldr	r3, [pc, #20]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	4a04      	ldr	r2, [pc, #16]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ff2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ff6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003ff8:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	40021000 	.word	0x40021000

08004008 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e09d      	b.n	8004156 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401e:	2b00      	cmp	r3, #0
 8004020:	d108      	bne.n	8004034 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800402a:	d009      	beq.n	8004040 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	61da      	str	r2, [r3, #28]
 8004032:	e005      	b.n	8004040 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d106      	bne.n	8004060 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7fc fee4 	bl	8000e28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004076:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004080:	d902      	bls.n	8004088 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004082:	2300      	movs	r3, #0
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	e002      	b.n	800408e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004088:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800408c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004096:	d007      	beq.n	80040a8 <HAL_SPI_Init+0xa0>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80040a0:	d002      	beq.n	80040a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80040b8:	431a      	orrs	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	431a      	orrs	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	69db      	ldr	r3, [r3, #28]
 80040dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ea:	ea42 0103 	orr.w	r1, r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	0c1b      	lsrs	r3, r3, #16
 8004104:	f003 0204 	and.w	r2, r3, #4
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410c:	f003 0310 	and.w	r3, r3, #16
 8004110:	431a      	orrs	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004124:	ea42 0103 	orr.w	r1, r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	69da      	ldr	r2, [r3, #28]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004144:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b08a      	sub	sp, #40	@ 0x28
 8004162:	af00      	add	r7, sp, #0
 8004164:	60f8      	str	r0, [r7, #12]
 8004166:	60b9      	str	r1, [r7, #8]
 8004168:	607a      	str	r2, [r7, #4]
 800416a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800416c:	2301      	movs	r3, #1
 800416e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004170:	2300      	movs	r3, #0
 8004172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_SPI_TransmitReceive+0x26>
 8004180:	2302      	movs	r3, #2
 8004182:	e20a      	b.n	800459a <HAL_SPI_TransmitReceive+0x43c>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800418c:	f7fd f804 	bl	8001198 <HAL_GetTick>
 8004190:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004198:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80041a0:	887b      	ldrh	r3, [r7, #2]
 80041a2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80041a4:	887b      	ldrh	r3, [r7, #2]
 80041a6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041a8:	7efb      	ldrb	r3, [r7, #27]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d00e      	beq.n	80041cc <HAL_SPI_TransmitReceive+0x6e>
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041b4:	d106      	bne.n	80041c4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d102      	bne.n	80041c4 <HAL_SPI_TransmitReceive+0x66>
 80041be:	7efb      	ldrb	r3, [r7, #27]
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d003      	beq.n	80041cc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80041c4:	2302      	movs	r3, #2
 80041c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80041ca:	e1e0      	b.n	800458e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d005      	beq.n	80041de <HAL_SPI_TransmitReceive+0x80>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <HAL_SPI_TransmitReceive+0x80>
 80041d8:	887b      	ldrh	r3, [r7, #2]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d103      	bne.n	80041e6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80041e4:	e1d3      	b.n	800458e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d003      	beq.n	80041fa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2205      	movs	r2, #5
 80041f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	887a      	ldrh	r2, [r7, #2]
 800420a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	887a      	ldrh	r2, [r7, #2]
 8004212:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	887a      	ldrh	r2, [r7, #2]
 8004220:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	887a      	ldrh	r2, [r7, #2]
 8004226:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800423c:	d802      	bhi.n	8004244 <HAL_SPI_TransmitReceive+0xe6>
 800423e:	8a3b      	ldrh	r3, [r7, #16]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d908      	bls.n	8004256 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004252:	605a      	str	r2, [r3, #4]
 8004254:	e007      	b.n	8004266 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004264:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004270:	2b40      	cmp	r3, #64	@ 0x40
 8004272:	d007      	beq.n	8004284 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004282:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800428c:	f240 8081 	bls.w	8004392 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <HAL_SPI_TransmitReceive+0x140>
 8004298:	8a7b      	ldrh	r3, [r7, #18]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d16d      	bne.n	800437a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a2:	881a      	ldrh	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ae:	1c9a      	adds	r2, r3, #2
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042c2:	e05a      	b.n	800437a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d11b      	bne.n	800430a <HAL_SPI_TransmitReceive+0x1ac>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d016      	beq.n	800430a <HAL_SPI_TransmitReceive+0x1ac>
 80042dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d113      	bne.n	800430a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e6:	881a      	ldrh	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f2:	1c9a      	adds	r2, r3, #2
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004306:	2300      	movs	r3, #0
 8004308:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b01      	cmp	r3, #1
 8004316:	d11c      	bne.n	8004352 <HAL_SPI_TransmitReceive+0x1f4>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800431e:	b29b      	uxth	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d016      	beq.n	8004352 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432e:	b292      	uxth	r2, r2
 8004330:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004336:	1c9a      	adds	r2, r3, #2
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004342:	b29b      	uxth	r3, r3
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800434e:	2301      	movs	r3, #1
 8004350:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004352:	f7fc ff21 	bl	8001198 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800435e:	429a      	cmp	r2, r3
 8004360:	d80b      	bhi.n	800437a <HAL_SPI_TransmitReceive+0x21c>
 8004362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004364:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004368:	d007      	beq.n	800437a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004378:	e109      	b.n	800458e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800437e:	b29b      	uxth	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d19f      	bne.n	80042c4 <HAL_SPI_TransmitReceive+0x166>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800438a:	b29b      	uxth	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	d199      	bne.n	80042c4 <HAL_SPI_TransmitReceive+0x166>
 8004390:	e0e3      	b.n	800455a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_SPI_TransmitReceive+0x244>
 800439a:	8a7b      	ldrh	r3, [r7, #18]
 800439c:	2b01      	cmp	r3, #1
 800439e:	f040 80cf 	bne.w	8004540 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d912      	bls.n	80043d2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b0:	881a      	ldrh	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043bc:	1c9a      	adds	r2, r3, #2
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	3b02      	subs	r3, #2
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80043d0:	e0b6      	b.n	8004540 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	330c      	adds	r3, #12
 80043dc:	7812      	ldrb	r2, [r2, #0]
 80043de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043f8:	e0a2      	b.n	8004540 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b02      	cmp	r3, #2
 8004406:	d134      	bne.n	8004472 <HAL_SPI_TransmitReceive+0x314>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800440c:	b29b      	uxth	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d02f      	beq.n	8004472 <HAL_SPI_TransmitReceive+0x314>
 8004412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004414:	2b01      	cmp	r3, #1
 8004416:	d12c      	bne.n	8004472 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800441c:	b29b      	uxth	r3, r3
 800441e:	2b01      	cmp	r3, #1
 8004420:	d912      	bls.n	8004448 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004426:	881a      	ldrh	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004432:	1c9a      	adds	r2, r3, #2
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800443c:	b29b      	uxth	r3, r3
 800443e:	3b02      	subs	r3, #2
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004446:	e012      	b.n	800446e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	330c      	adds	r3, #12
 8004452:	7812      	ldrb	r2, [r2, #0]
 8004454:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800445a:	1c5a      	adds	r2, r3, #1
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004464:	b29b      	uxth	r3, r3
 8004466:	3b01      	subs	r3, #1
 8004468:	b29a      	uxth	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b01      	cmp	r3, #1
 800447e:	d148      	bne.n	8004512 <HAL_SPI_TransmitReceive+0x3b4>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d042      	beq.n	8004512 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004492:	b29b      	uxth	r3, r3
 8004494:	2b01      	cmp	r3, #1
 8004496:	d923      	bls.n	80044e0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68da      	ldr	r2, [r3, #12]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a2:	b292      	uxth	r2, r2
 80044a4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044aa:	1c9a      	adds	r2, r3, #2
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3b02      	subs	r3, #2
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d81f      	bhi.n	800450e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80044dc:	605a      	str	r2, [r3, #4]
 80044de:	e016      	b.n	800450e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f103 020c 	add.w	r2, r3, #12
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ec:	7812      	ldrb	r2, [r2, #0]
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800450e:	2301      	movs	r3, #1
 8004510:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004512:	f7fc fe41 	bl	8001198 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800451e:	429a      	cmp	r2, r3
 8004520:	d803      	bhi.n	800452a <HAL_SPI_TransmitReceive+0x3cc>
 8004522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004524:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004528:	d102      	bne.n	8004530 <HAL_SPI_TransmitReceive+0x3d2>
 800452a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452c:	2b00      	cmp	r3, #0
 800452e:	d107      	bne.n	8004540 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800453e:	e026      	b.n	800458e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004544:	b29b      	uxth	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	f47f af57 	bne.w	80043fa <HAL_SPI_TransmitReceive+0x29c>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004552:	b29b      	uxth	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	f47f af50 	bne.w	80043fa <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800455a:	69fa      	ldr	r2, [r7, #28]
 800455c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 f93e 	bl	80047e0 <SPI_EndRxTxTransaction>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d005      	beq.n	8004576 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2220      	movs	r2, #32
 8004574:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004584:	e003      	b.n	800458e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004596:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800459a:	4618      	mov	r0, r3
 800459c:	3728      	adds	r7, #40	@ 0x28
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b088      	sub	sp, #32
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	603b      	str	r3, [r7, #0]
 80045b0:	4613      	mov	r3, r2
 80045b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045b4:	f7fc fdf0 	bl	8001198 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045bc:	1a9b      	subs	r3, r3, r2
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	4413      	add	r3, r2
 80045c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045c4:	f7fc fde8 	bl	8001198 <HAL_GetTick>
 80045c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045ca:	4b39      	ldr	r3, [pc, #228]	@ (80046b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	015b      	lsls	r3, r3, #5
 80045d0:	0d1b      	lsrs	r3, r3, #20
 80045d2:	69fa      	ldr	r2, [r7, #28]
 80045d4:	fb02 f303 	mul.w	r3, r2, r3
 80045d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045da:	e054      	b.n	8004686 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045e2:	d050      	beq.n	8004686 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045e4:	f7fc fdd8 	bl	8001198 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	69fa      	ldr	r2, [r7, #28]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d902      	bls.n	80045fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d13d      	bne.n	8004676 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004608:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004612:	d111      	bne.n	8004638 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800461c:	d004      	beq.n	8004628 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004626:	d107      	bne.n	8004638 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004636:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800463c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004640:	d10f      	bne.n	8004662 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004660:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e017      	b.n	80046a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	3b01      	subs	r3, #1
 8004684:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	4013      	ands	r3, r2
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	429a      	cmp	r2, r3
 8004694:	bf0c      	ite	eq
 8004696:	2301      	moveq	r3, #1
 8004698:	2300      	movne	r3, #0
 800469a:	b2db      	uxtb	r3, r3
 800469c:	461a      	mov	r2, r3
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d19b      	bne.n	80045dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3720      	adds	r7, #32
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	20000008 	.word	0x20000008

080046b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b08a      	sub	sp, #40	@ 0x28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
 80046c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80046c2:	2300      	movs	r3, #0
 80046c4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80046c6:	f7fc fd67 	bl	8001198 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ce:	1a9b      	subs	r3, r3, r2
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	4413      	add	r3, r2
 80046d4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80046d6:	f7fc fd5f 	bl	8001198 <HAL_GetTick>
 80046da:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	330c      	adds	r3, #12
 80046e2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80046e4:	4b3d      	ldr	r3, [pc, #244]	@ (80047dc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	4613      	mov	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	00da      	lsls	r2, r3, #3
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	0d1b      	lsrs	r3, r3, #20
 80046f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046f6:	fb02 f303 	mul.w	r3, r2, r3
 80046fa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80046fc:	e060      	b.n	80047c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004704:	d107      	bne.n	8004716 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d104      	bne.n	8004716 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	b2db      	uxtb	r3, r3
 8004712:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004714:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800471c:	d050      	beq.n	80047c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800471e:	f7fc fd3b 	bl	8001198 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800472a:	429a      	cmp	r2, r3
 800472c:	d902      	bls.n	8004734 <SPI_WaitFifoStateUntilTimeout+0x80>
 800472e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004730:	2b00      	cmp	r3, #0
 8004732:	d13d      	bne.n	80047b0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004742:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800474c:	d111      	bne.n	8004772 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004756:	d004      	beq.n	8004762 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004760:	d107      	bne.n	8004772 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004770:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004776:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800477a:	d10f      	bne.n	800479c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800479a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e010      	b.n	80047d2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	3b01      	subs	r3, #1
 80047be:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689a      	ldr	r2, [r3, #8]
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	4013      	ands	r3, r2
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d196      	bne.n	80046fe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3728      	adds	r7, #40	@ 0x28
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	20000008 	.word	0x20000008

080047e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af02      	add	r7, sp, #8
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f7ff ff5b 	bl	80046b4 <SPI_WaitFifoStateUntilTimeout>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d007      	beq.n	8004814 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004808:	f043 0220 	orr.w	r2, r3, #32
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e027      	b.n	8004864 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2200      	movs	r2, #0
 800481c:	2180      	movs	r1, #128	@ 0x80
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f7ff fec0 	bl	80045a4 <SPI_WaitFlagStateUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d007      	beq.n	800483a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800482e:	f043 0220 	orr.w	r2, r3, #32
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e014      	b.n	8004864 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2200      	movs	r2, #0
 8004842:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f7ff ff34 	bl	80046b4 <SPI_WaitFifoStateUntilTimeout>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d007      	beq.n	8004862 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004856:	f043 0220 	orr.w	r2, r3, #32
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e000      	b.n	8004864 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e049      	b.n	8004912 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d106      	bne.n	8004898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7fc fb0c 	bl	8000eb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2202      	movs	r2, #2
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3304      	adds	r3, #4
 80048a8:	4619      	mov	r1, r3
 80048aa:	4610      	mov	r0, r2
 80048ac:	f000 faa4 	bl	8004df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b082      	sub	sp, #8
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e049      	b.n	80049c0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d106      	bne.n	8004946 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f841 	bl	80049c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2202      	movs	r2, #2
 800494a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	3304      	adds	r3, #4
 8004956:	4619      	mov	r1, r3
 8004958:	4610      	mov	r0, r2
 800495a:	f000 fa4d 	bl	8004df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049e8:	2300      	movs	r3, #0
 80049ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d101      	bne.n	80049fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049f6:	2302      	movs	r3, #2
 80049f8:	e0ff      	b.n	8004bfa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b14      	cmp	r3, #20
 8004a06:	f200 80f0 	bhi.w	8004bea <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a10:	08004a65 	.word	0x08004a65
 8004a14:	08004beb 	.word	0x08004beb
 8004a18:	08004beb 	.word	0x08004beb
 8004a1c:	08004beb 	.word	0x08004beb
 8004a20:	08004aa5 	.word	0x08004aa5
 8004a24:	08004beb 	.word	0x08004beb
 8004a28:	08004beb 	.word	0x08004beb
 8004a2c:	08004beb 	.word	0x08004beb
 8004a30:	08004ae7 	.word	0x08004ae7
 8004a34:	08004beb 	.word	0x08004beb
 8004a38:	08004beb 	.word	0x08004beb
 8004a3c:	08004beb 	.word	0x08004beb
 8004a40:	08004b27 	.word	0x08004b27
 8004a44:	08004beb 	.word	0x08004beb
 8004a48:	08004beb 	.word	0x08004beb
 8004a4c:	08004beb 	.word	0x08004beb
 8004a50:	08004b69 	.word	0x08004b69
 8004a54:	08004beb 	.word	0x08004beb
 8004a58:	08004beb 	.word	0x08004beb
 8004a5c:	08004beb 	.word	0x08004beb
 8004a60:	08004ba9 	.word	0x08004ba9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 fa60 	bl	8004f30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699a      	ldr	r2, [r3, #24]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0208 	orr.w	r2, r2, #8
 8004a7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699a      	ldr	r2, [r3, #24]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0204 	bic.w	r2, r2, #4
 8004a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6999      	ldr	r1, [r3, #24]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	691a      	ldr	r2, [r3, #16]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	619a      	str	r2, [r3, #24]
      break;
 8004aa2:	e0a5      	b.n	8004bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68b9      	ldr	r1, [r7, #8]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 fad0 	bl	8005050 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699a      	ldr	r2, [r3, #24]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004abe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699a      	ldr	r2, [r3, #24]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6999      	ldr	r1, [r3, #24]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	021a      	lsls	r2, r3, #8
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	619a      	str	r2, [r3, #24]
      break;
 8004ae4:	e084      	b.n	8004bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68b9      	ldr	r1, [r7, #8]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f000 fb39 	bl	8005164 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69da      	ldr	r2, [r3, #28]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f042 0208 	orr.w	r2, r2, #8
 8004b00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69da      	ldr	r2, [r3, #28]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0204 	bic.w	r2, r2, #4
 8004b10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	69d9      	ldr	r1, [r3, #28]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	691a      	ldr	r2, [r3, #16]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	61da      	str	r2, [r3, #28]
      break;
 8004b24:	e064      	b.n	8004bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68b9      	ldr	r1, [r7, #8]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f000 fba1 	bl	8005274 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69da      	ldr	r2, [r3, #28]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	69da      	ldr	r2, [r3, #28]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69d9      	ldr	r1, [r3, #28]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	021a      	lsls	r2, r3, #8
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	61da      	str	r2, [r3, #28]
      break;
 8004b66:	e043      	b.n	8004bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68b9      	ldr	r1, [r7, #8]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 fc0a 	bl	8005388 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0208 	orr.w	r2, r2, #8
 8004b82:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0204 	bic.w	r2, r2, #4
 8004b92:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	691a      	ldr	r2, [r3, #16]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004ba6:	e023      	b.n	8004bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68b9      	ldr	r1, [r7, #8]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 fc4e 	bl	8005450 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bc2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bd2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	021a      	lsls	r2, r3, #8
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004be8:	e002      	b.n	8004bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	75fb      	strb	r3, [r7, #23]
      break;
 8004bee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop

08004c04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <HAL_TIM_ConfigClockSource+0x1c>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e0de      	b.n	8004dde <HAL_TIM_ConfigClockSource+0x1da>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004c3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a63      	ldr	r2, [pc, #396]	@ (8004de8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	f000 80a9 	beq.w	8004db2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004c60:	4a61      	ldr	r2, [pc, #388]	@ (8004de8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	f200 80ae 	bhi.w	8004dc4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c68:	4a60      	ldr	r2, [pc, #384]	@ (8004dec <HAL_TIM_ConfigClockSource+0x1e8>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	f000 80a1 	beq.w	8004db2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004c70:	4a5e      	ldr	r2, [pc, #376]	@ (8004dec <HAL_TIM_ConfigClockSource+0x1e8>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	f200 80a6 	bhi.w	8004dc4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c78:	4a5d      	ldr	r2, [pc, #372]	@ (8004df0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	f000 8099 	beq.w	8004db2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004c80:	4a5b      	ldr	r2, [pc, #364]	@ (8004df0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	f200 809e 	bhi.w	8004dc4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c88:	4a5a      	ldr	r2, [pc, #360]	@ (8004df4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	f000 8091 	beq.w	8004db2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004c90:	4a58      	ldr	r2, [pc, #352]	@ (8004df4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	f200 8096 	bhi.w	8004dc4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004c98:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004c9c:	f000 8089 	beq.w	8004db2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004ca0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004ca4:	f200 808e 	bhi.w	8004dc4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ca8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cac:	d03e      	beq.n	8004d2c <HAL_TIM_ConfigClockSource+0x128>
 8004cae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cb2:	f200 8087 	bhi.w	8004dc4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004cb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cba:	f000 8086 	beq.w	8004dca <HAL_TIM_ConfigClockSource+0x1c6>
 8004cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cc2:	d87f      	bhi.n	8004dc4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004cc4:	2b70      	cmp	r3, #112	@ 0x70
 8004cc6:	d01a      	beq.n	8004cfe <HAL_TIM_ConfigClockSource+0xfa>
 8004cc8:	2b70      	cmp	r3, #112	@ 0x70
 8004cca:	d87b      	bhi.n	8004dc4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ccc:	2b60      	cmp	r3, #96	@ 0x60
 8004cce:	d050      	beq.n	8004d72 <HAL_TIM_ConfigClockSource+0x16e>
 8004cd0:	2b60      	cmp	r3, #96	@ 0x60
 8004cd2:	d877      	bhi.n	8004dc4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004cd4:	2b50      	cmp	r3, #80	@ 0x50
 8004cd6:	d03c      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0x14e>
 8004cd8:	2b50      	cmp	r3, #80	@ 0x50
 8004cda:	d873      	bhi.n	8004dc4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004cdc:	2b40      	cmp	r3, #64	@ 0x40
 8004cde:	d058      	beq.n	8004d92 <HAL_TIM_ConfigClockSource+0x18e>
 8004ce0:	2b40      	cmp	r3, #64	@ 0x40
 8004ce2:	d86f      	bhi.n	8004dc4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ce4:	2b30      	cmp	r3, #48	@ 0x30
 8004ce6:	d064      	beq.n	8004db2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004ce8:	2b30      	cmp	r3, #48	@ 0x30
 8004cea:	d86b      	bhi.n	8004dc4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004cec:	2b20      	cmp	r3, #32
 8004cee:	d060      	beq.n	8004db2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004cf0:	2b20      	cmp	r3, #32
 8004cf2:	d867      	bhi.n	8004dc4 <HAL_TIM_ConfigClockSource+0x1c0>
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d05c      	beq.n	8004db2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004cf8:	2b10      	cmp	r3, #16
 8004cfa:	d05a      	beq.n	8004db2 <HAL_TIM_ConfigClockSource+0x1ae>
 8004cfc:	e062      	b.n	8004dc4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d0e:	f000 fc81 	bl	8005614 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	609a      	str	r2, [r3, #8]
      break;
 8004d2a:	e04f      	b.n	8004dcc <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d3c:	f000 fc6a 	bl	8005614 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689a      	ldr	r2, [r3, #8]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d4e:	609a      	str	r2, [r3, #8]
      break;
 8004d50:	e03c      	b.n	8004dcc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f000 fbdc 	bl	800551c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2150      	movs	r1, #80	@ 0x50
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 fc35 	bl	80055da <TIM_ITRx_SetConfig>
      break;
 8004d70:	e02c      	b.n	8004dcc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d7e:	461a      	mov	r2, r3
 8004d80:	f000 fbfb 	bl	800557a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2160      	movs	r1, #96	@ 0x60
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 fc25 	bl	80055da <TIM_ITRx_SetConfig>
      break;
 8004d90:	e01c      	b.n	8004dcc <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d9e:	461a      	mov	r2, r3
 8004da0:	f000 fbbc 	bl	800551c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2140      	movs	r1, #64	@ 0x40
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 fc15 	bl	80055da <TIM_ITRx_SetConfig>
      break;
 8004db0:	e00c      	b.n	8004dcc <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	f000 fc0c 	bl	80055da <TIM_ITRx_SetConfig>
      break;
 8004dc2:	e003      	b.n	8004dcc <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8004dc8:	e000      	b.n	8004dcc <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004dca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	00100070 	.word	0x00100070
 8004dec:	00100040 	.word	0x00100040
 8004df0:	00100030 	.word	0x00100030
 8004df4:	00100020 	.word	0x00100020

08004df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a42      	ldr	r2, [pc, #264]	@ (8004f14 <TIM_Base_SetConfig+0x11c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d00f      	beq.n	8004e30 <TIM_Base_SetConfig+0x38>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e16:	d00b      	beq.n	8004e30 <TIM_Base_SetConfig+0x38>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a3f      	ldr	r2, [pc, #252]	@ (8004f18 <TIM_Base_SetConfig+0x120>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d007      	beq.n	8004e30 <TIM_Base_SetConfig+0x38>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a3e      	ldr	r2, [pc, #248]	@ (8004f1c <TIM_Base_SetConfig+0x124>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d003      	beq.n	8004e30 <TIM_Base_SetConfig+0x38>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a3d      	ldr	r2, [pc, #244]	@ (8004f20 <TIM_Base_SetConfig+0x128>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d108      	bne.n	8004e42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a33      	ldr	r2, [pc, #204]	@ (8004f14 <TIM_Base_SetConfig+0x11c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d01b      	beq.n	8004e82 <TIM_Base_SetConfig+0x8a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e50:	d017      	beq.n	8004e82 <TIM_Base_SetConfig+0x8a>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a30      	ldr	r2, [pc, #192]	@ (8004f18 <TIM_Base_SetConfig+0x120>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d013      	beq.n	8004e82 <TIM_Base_SetConfig+0x8a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a2f      	ldr	r2, [pc, #188]	@ (8004f1c <TIM_Base_SetConfig+0x124>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d00f      	beq.n	8004e82 <TIM_Base_SetConfig+0x8a>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a2e      	ldr	r2, [pc, #184]	@ (8004f20 <TIM_Base_SetConfig+0x128>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00b      	beq.n	8004e82 <TIM_Base_SetConfig+0x8a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a2d      	ldr	r2, [pc, #180]	@ (8004f24 <TIM_Base_SetConfig+0x12c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d007      	beq.n	8004e82 <TIM_Base_SetConfig+0x8a>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a2c      	ldr	r2, [pc, #176]	@ (8004f28 <TIM_Base_SetConfig+0x130>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d003      	beq.n	8004e82 <TIM_Base_SetConfig+0x8a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a2b      	ldr	r2, [pc, #172]	@ (8004f2c <TIM_Base_SetConfig+0x134>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d108      	bne.n	8004e94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a16      	ldr	r2, [pc, #88]	@ (8004f14 <TIM_Base_SetConfig+0x11c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d00f      	beq.n	8004ee0 <TIM_Base_SetConfig+0xe8>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a17      	ldr	r2, [pc, #92]	@ (8004f20 <TIM_Base_SetConfig+0x128>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d00b      	beq.n	8004ee0 <TIM_Base_SetConfig+0xe8>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a16      	ldr	r2, [pc, #88]	@ (8004f24 <TIM_Base_SetConfig+0x12c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d007      	beq.n	8004ee0 <TIM_Base_SetConfig+0xe8>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a15      	ldr	r2, [pc, #84]	@ (8004f28 <TIM_Base_SetConfig+0x130>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d003      	beq.n	8004ee0 <TIM_Base_SetConfig+0xe8>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a14      	ldr	r2, [pc, #80]	@ (8004f2c <TIM_Base_SetConfig+0x134>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d103      	bne.n	8004ee8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	691a      	ldr	r2, [r3, #16]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d105      	bne.n	8004f06 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f023 0201 	bic.w	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	611a      	str	r2, [r3, #16]
  }
}
 8004f06:	bf00      	nop
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	40012c00 	.word	0x40012c00
 8004f18:	40000400 	.word	0x40000400
 8004f1c:	40000800 	.word	0x40000800
 8004f20:	40013400 	.word	0x40013400
 8004f24:	40014000 	.word	0x40014000
 8004f28:	40014400 	.word	0x40014400
 8004f2c:	40014800 	.word	0x40014800

08004f30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	f023 0201 	bic.w	r2, r3, #1
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0303 	bic.w	r3, r3, #3
 8004f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f023 0302 	bic.w	r3, r3, #2
 8004f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a2c      	ldr	r2, [pc, #176]	@ (800503c <TIM_OC1_SetConfig+0x10c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00f      	beq.n	8004fb0 <TIM_OC1_SetConfig+0x80>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a2b      	ldr	r2, [pc, #172]	@ (8005040 <TIM_OC1_SetConfig+0x110>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d00b      	beq.n	8004fb0 <TIM_OC1_SetConfig+0x80>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a2a      	ldr	r2, [pc, #168]	@ (8005044 <TIM_OC1_SetConfig+0x114>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d007      	beq.n	8004fb0 <TIM_OC1_SetConfig+0x80>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a29      	ldr	r2, [pc, #164]	@ (8005048 <TIM_OC1_SetConfig+0x118>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d003      	beq.n	8004fb0 <TIM_OC1_SetConfig+0x80>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a28      	ldr	r2, [pc, #160]	@ (800504c <TIM_OC1_SetConfig+0x11c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d10c      	bne.n	8004fca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f023 0308 	bic.w	r3, r3, #8
 8004fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f023 0304 	bic.w	r3, r3, #4
 8004fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800503c <TIM_OC1_SetConfig+0x10c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00f      	beq.n	8004ff2 <TIM_OC1_SetConfig+0xc2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a1a      	ldr	r2, [pc, #104]	@ (8005040 <TIM_OC1_SetConfig+0x110>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00b      	beq.n	8004ff2 <TIM_OC1_SetConfig+0xc2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a19      	ldr	r2, [pc, #100]	@ (8005044 <TIM_OC1_SetConfig+0x114>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d007      	beq.n	8004ff2 <TIM_OC1_SetConfig+0xc2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a18      	ldr	r2, [pc, #96]	@ (8005048 <TIM_OC1_SetConfig+0x118>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d003      	beq.n	8004ff2 <TIM_OC1_SetConfig+0xc2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a17      	ldr	r2, [pc, #92]	@ (800504c <TIM_OC1_SetConfig+0x11c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d111      	bne.n	8005016 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4313      	orrs	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	4313      	orrs	r3, r2
 8005014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	621a      	str	r2, [r3, #32]
}
 8005030:	bf00      	nop
 8005032:	371c      	adds	r7, #28
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	40012c00 	.word	0x40012c00
 8005040:	40013400 	.word	0x40013400
 8005044:	40014000 	.word	0x40014000
 8005048:	40014400 	.word	0x40014400
 800504c:	40014800 	.word	0x40014800

08005050 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005050:	b480      	push	{r7}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	f023 0210 	bic.w	r2, r3, #16
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800507e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800508a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	021b      	lsls	r3, r3, #8
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4313      	orrs	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f023 0320 	bic.w	r3, r3, #32
 800509e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	011b      	lsls	r3, r3, #4
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a28      	ldr	r2, [pc, #160]	@ (8005150 <TIM_OC2_SetConfig+0x100>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d003      	beq.n	80050bc <TIM_OC2_SetConfig+0x6c>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a27      	ldr	r2, [pc, #156]	@ (8005154 <TIM_OC2_SetConfig+0x104>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d10d      	bne.n	80050d8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a1d      	ldr	r2, [pc, #116]	@ (8005150 <TIM_OC2_SetConfig+0x100>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00f      	beq.n	8005100 <TIM_OC2_SetConfig+0xb0>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a1c      	ldr	r2, [pc, #112]	@ (8005154 <TIM_OC2_SetConfig+0x104>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d00b      	beq.n	8005100 <TIM_OC2_SetConfig+0xb0>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005158 <TIM_OC2_SetConfig+0x108>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d007      	beq.n	8005100 <TIM_OC2_SetConfig+0xb0>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a1a      	ldr	r2, [pc, #104]	@ (800515c <TIM_OC2_SetConfig+0x10c>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d003      	beq.n	8005100 <TIM_OC2_SetConfig+0xb0>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a19      	ldr	r2, [pc, #100]	@ (8005160 <TIM_OC2_SetConfig+0x110>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d113      	bne.n	8005128 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005106:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800510e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	4313      	orrs	r3, r2
 800511a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	4313      	orrs	r3, r2
 8005126:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	621a      	str	r2, [r3, #32]
}
 8005142:	bf00      	nop
 8005144:	371c      	adds	r7, #28
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40012c00 	.word	0x40012c00
 8005154:	40013400 	.word	0x40013400
 8005158:	40014000 	.word	0x40014000
 800515c:	40014400 	.word	0x40014400
 8005160:	40014800 	.word	0x40014800

08005164 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0303 	bic.w	r3, r3, #3
 800519e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	021b      	lsls	r3, r3, #8
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a27      	ldr	r2, [pc, #156]	@ (8005260 <TIM_OC3_SetConfig+0xfc>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d003      	beq.n	80051ce <TIM_OC3_SetConfig+0x6a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a26      	ldr	r2, [pc, #152]	@ (8005264 <TIM_OC3_SetConfig+0x100>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d10d      	bne.n	80051ea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	021b      	lsls	r3, r3, #8
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a1c      	ldr	r2, [pc, #112]	@ (8005260 <TIM_OC3_SetConfig+0xfc>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d00f      	beq.n	8005212 <TIM_OC3_SetConfig+0xae>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005264 <TIM_OC3_SetConfig+0x100>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d00b      	beq.n	8005212 <TIM_OC3_SetConfig+0xae>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a1a      	ldr	r2, [pc, #104]	@ (8005268 <TIM_OC3_SetConfig+0x104>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d007      	beq.n	8005212 <TIM_OC3_SetConfig+0xae>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a19      	ldr	r2, [pc, #100]	@ (800526c <TIM_OC3_SetConfig+0x108>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d003      	beq.n	8005212 <TIM_OC3_SetConfig+0xae>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a18      	ldr	r2, [pc, #96]	@ (8005270 <TIM_OC3_SetConfig+0x10c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d113      	bne.n	800523a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	4313      	orrs	r3, r2
 800522c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	011b      	lsls	r3, r3, #4
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4313      	orrs	r3, r2
 8005238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	621a      	str	r2, [r3, #32]
}
 8005254:	bf00      	nop
 8005256:	371c      	adds	r7, #28
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	40012c00 	.word	0x40012c00
 8005264:	40013400 	.word	0x40013400
 8005268:	40014000 	.word	0x40014000
 800526c:	40014400 	.word	0x40014400
 8005270:	40014800 	.word	0x40014800

08005274 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	021b      	lsls	r3, r3, #8
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	031b      	lsls	r3, r3, #12
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a28      	ldr	r2, [pc, #160]	@ (8005374 <TIM_OC4_SetConfig+0x100>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d003      	beq.n	80052e0 <TIM_OC4_SetConfig+0x6c>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a27      	ldr	r2, [pc, #156]	@ (8005378 <TIM_OC4_SetConfig+0x104>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d10d      	bne.n	80052fc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80052e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	031b      	lsls	r3, r3, #12
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a1d      	ldr	r2, [pc, #116]	@ (8005374 <TIM_OC4_SetConfig+0x100>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d00f      	beq.n	8005324 <TIM_OC4_SetConfig+0xb0>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a1c      	ldr	r2, [pc, #112]	@ (8005378 <TIM_OC4_SetConfig+0x104>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d00b      	beq.n	8005324 <TIM_OC4_SetConfig+0xb0>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a1b      	ldr	r2, [pc, #108]	@ (800537c <TIM_OC4_SetConfig+0x108>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d007      	beq.n	8005324 <TIM_OC4_SetConfig+0xb0>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a1a      	ldr	r2, [pc, #104]	@ (8005380 <TIM_OC4_SetConfig+0x10c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d003      	beq.n	8005324 <TIM_OC4_SetConfig+0xb0>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a19      	ldr	r2, [pc, #100]	@ (8005384 <TIM_OC4_SetConfig+0x110>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d113      	bne.n	800534c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800532a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005332:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	019b      	lsls	r3, r3, #6
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	4313      	orrs	r3, r2
 800533e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	019b      	lsls	r3, r3, #6
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4313      	orrs	r3, r2
 800534a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	621a      	str	r2, [r3, #32]
}
 8005366:	bf00      	nop
 8005368:	371c      	adds	r7, #28
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40012c00 	.word	0x40012c00
 8005378:	40013400 	.word	0x40013400
 800537c:	40014000 	.word	0x40014000
 8005380:	40014400 	.word	0x40014400
 8005384:	40014800 	.word	0x40014800

08005388 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80053cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	041b      	lsls	r3, r3, #16
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a17      	ldr	r2, [pc, #92]	@ (800543c <TIM_OC5_SetConfig+0xb4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00f      	beq.n	8005402 <TIM_OC5_SetConfig+0x7a>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a16      	ldr	r2, [pc, #88]	@ (8005440 <TIM_OC5_SetConfig+0xb8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00b      	beq.n	8005402 <TIM_OC5_SetConfig+0x7a>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a15      	ldr	r2, [pc, #84]	@ (8005444 <TIM_OC5_SetConfig+0xbc>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d007      	beq.n	8005402 <TIM_OC5_SetConfig+0x7a>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a14      	ldr	r2, [pc, #80]	@ (8005448 <TIM_OC5_SetConfig+0xc0>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d003      	beq.n	8005402 <TIM_OC5_SetConfig+0x7a>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a13      	ldr	r2, [pc, #76]	@ (800544c <TIM_OC5_SetConfig+0xc4>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d109      	bne.n	8005416 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005408:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	021b      	lsls	r3, r3, #8
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	621a      	str	r2, [r3, #32]
}
 8005430:	bf00      	nop
 8005432:	371c      	adds	r7, #28
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	40012c00 	.word	0x40012c00
 8005440:	40013400 	.word	0x40013400
 8005444:	40014000 	.word	0x40014000
 8005448:	40014400 	.word	0x40014400
 800544c:	40014800 	.word	0x40014800

08005450 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800547e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	021b      	lsls	r3, r3, #8
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4313      	orrs	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	051b      	lsls	r3, r3, #20
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a18      	ldr	r2, [pc, #96]	@ (8005508 <TIM_OC6_SetConfig+0xb8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d00f      	beq.n	80054cc <TIM_OC6_SetConfig+0x7c>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a17      	ldr	r2, [pc, #92]	@ (800550c <TIM_OC6_SetConfig+0xbc>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d00b      	beq.n	80054cc <TIM_OC6_SetConfig+0x7c>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a16      	ldr	r2, [pc, #88]	@ (8005510 <TIM_OC6_SetConfig+0xc0>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d007      	beq.n	80054cc <TIM_OC6_SetConfig+0x7c>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a15      	ldr	r2, [pc, #84]	@ (8005514 <TIM_OC6_SetConfig+0xc4>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d003      	beq.n	80054cc <TIM_OC6_SetConfig+0x7c>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a14      	ldr	r2, [pc, #80]	@ (8005518 <TIM_OC6_SetConfig+0xc8>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d109      	bne.n	80054e0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	029b      	lsls	r3, r3, #10
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	4313      	orrs	r3, r2
 80054de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	621a      	str	r2, [r3, #32]
}
 80054fa:	bf00      	nop
 80054fc:	371c      	adds	r7, #28
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	40012c00 	.word	0x40012c00
 800550c:	40013400 	.word	0x40013400
 8005510:	40014000 	.word	0x40014000
 8005514:	40014400 	.word	0x40014400
 8005518:	40014800 	.word	0x40014800

0800551c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	f023 0201 	bic.w	r2, r3, #1
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	011b      	lsls	r3, r3, #4
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	4313      	orrs	r3, r2
 8005550:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f023 030a 	bic.w	r3, r3, #10
 8005558:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	4313      	orrs	r3, r2
 8005560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	621a      	str	r2, [r3, #32]
}
 800556e:	bf00      	nop
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800557a:	b480      	push	{r7}
 800557c:	b087      	sub	sp, #28
 800557e:	af00      	add	r7, sp, #0
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	f023 0210 	bic.w	r2, r3, #16
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	031b      	lsls	r3, r3, #12
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80055b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	011b      	lsls	r3, r3, #4
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	4313      	orrs	r3, r2
 80055c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	621a      	str	r2, [r3, #32]
}
 80055ce:	bf00      	nop
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055da:	b480      	push	{r7}
 80055dc:	b085      	sub	sp, #20
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80055f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f043 0307 	orr.w	r3, r3, #7
 8005600:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	609a      	str	r2, [r3, #8]
}
 8005608:	bf00      	nop
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800562e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	021a      	lsls	r2, r3, #8
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	431a      	orrs	r2, r3
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4313      	orrs	r3, r2
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	4313      	orrs	r3, r2
 8005640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	609a      	str	r2, [r3, #8]
}
 8005648:	bf00      	nop
 800564a:	371c      	adds	r7, #28
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005664:	2b01      	cmp	r3, #1
 8005666:	d101      	bne.n	800566c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005668:	2302      	movs	r3, #2
 800566a:	e065      	b.n	8005738 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a2c      	ldr	r2, [pc, #176]	@ (8005744 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d004      	beq.n	80056a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a2b      	ldr	r2, [pc, #172]	@ (8005748 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d108      	bne.n	80056b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80056a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80056b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a1b      	ldr	r2, [pc, #108]	@ (8005744 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d018      	beq.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056e2:	d013      	beq.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a18      	ldr	r2, [pc, #96]	@ (800574c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00e      	beq.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a17      	ldr	r2, [pc, #92]	@ (8005750 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d009      	beq.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a12      	ldr	r2, [pc, #72]	@ (8005748 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d004      	beq.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a13      	ldr	r2, [pc, #76]	@ (8005754 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d10c      	bne.n	8005726 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005712:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	4313      	orrs	r3, r2
 800571c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	40012c00 	.word	0x40012c00
 8005748:	40013400 	.word	0x40013400
 800574c:	40000400 	.word	0x40000400
 8005750:	40000800 	.word	0x40000800
 8005754:	40014000 	.word	0x40014000

08005758 <std>:
 8005758:	2300      	movs	r3, #0
 800575a:	b510      	push	{r4, lr}
 800575c:	4604      	mov	r4, r0
 800575e:	e9c0 3300 	strd	r3, r3, [r0]
 8005762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005766:	6083      	str	r3, [r0, #8]
 8005768:	8181      	strh	r1, [r0, #12]
 800576a:	6643      	str	r3, [r0, #100]	@ 0x64
 800576c:	81c2      	strh	r2, [r0, #14]
 800576e:	6183      	str	r3, [r0, #24]
 8005770:	4619      	mov	r1, r3
 8005772:	2208      	movs	r2, #8
 8005774:	305c      	adds	r0, #92	@ 0x5c
 8005776:	f000 f9f9 	bl	8005b6c <memset>
 800577a:	4b0d      	ldr	r3, [pc, #52]	@ (80057b0 <std+0x58>)
 800577c:	6263      	str	r3, [r4, #36]	@ 0x24
 800577e:	4b0d      	ldr	r3, [pc, #52]	@ (80057b4 <std+0x5c>)
 8005780:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005782:	4b0d      	ldr	r3, [pc, #52]	@ (80057b8 <std+0x60>)
 8005784:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005786:	4b0d      	ldr	r3, [pc, #52]	@ (80057bc <std+0x64>)
 8005788:	6323      	str	r3, [r4, #48]	@ 0x30
 800578a:	4b0d      	ldr	r3, [pc, #52]	@ (80057c0 <std+0x68>)
 800578c:	6224      	str	r4, [r4, #32]
 800578e:	429c      	cmp	r4, r3
 8005790:	d006      	beq.n	80057a0 <std+0x48>
 8005792:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005796:	4294      	cmp	r4, r2
 8005798:	d002      	beq.n	80057a0 <std+0x48>
 800579a:	33d0      	adds	r3, #208	@ 0xd0
 800579c:	429c      	cmp	r4, r3
 800579e:	d105      	bne.n	80057ac <std+0x54>
 80057a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80057a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057a8:	f000 ba58 	b.w	8005c5c <__retarget_lock_init_recursive>
 80057ac:	bd10      	pop	{r4, pc}
 80057ae:	bf00      	nop
 80057b0:	080059bd 	.word	0x080059bd
 80057b4:	080059df 	.word	0x080059df
 80057b8:	08005a17 	.word	0x08005a17
 80057bc:	08005a3b 	.word	0x08005a3b
 80057c0:	2000027c 	.word	0x2000027c

080057c4 <stdio_exit_handler>:
 80057c4:	4a02      	ldr	r2, [pc, #8]	@ (80057d0 <stdio_exit_handler+0xc>)
 80057c6:	4903      	ldr	r1, [pc, #12]	@ (80057d4 <stdio_exit_handler+0x10>)
 80057c8:	4803      	ldr	r0, [pc, #12]	@ (80057d8 <stdio_exit_handler+0x14>)
 80057ca:	f000 b869 	b.w	80058a0 <_fwalk_sglue>
 80057ce:	bf00      	nop
 80057d0:	20000014 	.word	0x20000014
 80057d4:	080064fd 	.word	0x080064fd
 80057d8:	20000024 	.word	0x20000024

080057dc <cleanup_stdio>:
 80057dc:	6841      	ldr	r1, [r0, #4]
 80057de:	4b0c      	ldr	r3, [pc, #48]	@ (8005810 <cleanup_stdio+0x34>)
 80057e0:	4299      	cmp	r1, r3
 80057e2:	b510      	push	{r4, lr}
 80057e4:	4604      	mov	r4, r0
 80057e6:	d001      	beq.n	80057ec <cleanup_stdio+0x10>
 80057e8:	f000 fe88 	bl	80064fc <_fflush_r>
 80057ec:	68a1      	ldr	r1, [r4, #8]
 80057ee:	4b09      	ldr	r3, [pc, #36]	@ (8005814 <cleanup_stdio+0x38>)
 80057f0:	4299      	cmp	r1, r3
 80057f2:	d002      	beq.n	80057fa <cleanup_stdio+0x1e>
 80057f4:	4620      	mov	r0, r4
 80057f6:	f000 fe81 	bl	80064fc <_fflush_r>
 80057fa:	68e1      	ldr	r1, [r4, #12]
 80057fc:	4b06      	ldr	r3, [pc, #24]	@ (8005818 <cleanup_stdio+0x3c>)
 80057fe:	4299      	cmp	r1, r3
 8005800:	d004      	beq.n	800580c <cleanup_stdio+0x30>
 8005802:	4620      	mov	r0, r4
 8005804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005808:	f000 be78 	b.w	80064fc <_fflush_r>
 800580c:	bd10      	pop	{r4, pc}
 800580e:	bf00      	nop
 8005810:	2000027c 	.word	0x2000027c
 8005814:	200002e4 	.word	0x200002e4
 8005818:	2000034c 	.word	0x2000034c

0800581c <global_stdio_init.part.0>:
 800581c:	b510      	push	{r4, lr}
 800581e:	4b0b      	ldr	r3, [pc, #44]	@ (800584c <global_stdio_init.part.0+0x30>)
 8005820:	4c0b      	ldr	r4, [pc, #44]	@ (8005850 <global_stdio_init.part.0+0x34>)
 8005822:	4a0c      	ldr	r2, [pc, #48]	@ (8005854 <global_stdio_init.part.0+0x38>)
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	4620      	mov	r0, r4
 8005828:	2200      	movs	r2, #0
 800582a:	2104      	movs	r1, #4
 800582c:	f7ff ff94 	bl	8005758 <std>
 8005830:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005834:	2201      	movs	r2, #1
 8005836:	2109      	movs	r1, #9
 8005838:	f7ff ff8e 	bl	8005758 <std>
 800583c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005840:	2202      	movs	r2, #2
 8005842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005846:	2112      	movs	r1, #18
 8005848:	f7ff bf86 	b.w	8005758 <std>
 800584c:	200003b4 	.word	0x200003b4
 8005850:	2000027c 	.word	0x2000027c
 8005854:	080057c5 	.word	0x080057c5

08005858 <__sfp_lock_acquire>:
 8005858:	4801      	ldr	r0, [pc, #4]	@ (8005860 <__sfp_lock_acquire+0x8>)
 800585a:	f000 ba00 	b.w	8005c5e <__retarget_lock_acquire_recursive>
 800585e:	bf00      	nop
 8005860:	200003bd 	.word	0x200003bd

08005864 <__sfp_lock_release>:
 8005864:	4801      	ldr	r0, [pc, #4]	@ (800586c <__sfp_lock_release+0x8>)
 8005866:	f000 b9fb 	b.w	8005c60 <__retarget_lock_release_recursive>
 800586a:	bf00      	nop
 800586c:	200003bd 	.word	0x200003bd

08005870 <__sinit>:
 8005870:	b510      	push	{r4, lr}
 8005872:	4604      	mov	r4, r0
 8005874:	f7ff fff0 	bl	8005858 <__sfp_lock_acquire>
 8005878:	6a23      	ldr	r3, [r4, #32]
 800587a:	b11b      	cbz	r3, 8005884 <__sinit+0x14>
 800587c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005880:	f7ff bff0 	b.w	8005864 <__sfp_lock_release>
 8005884:	4b04      	ldr	r3, [pc, #16]	@ (8005898 <__sinit+0x28>)
 8005886:	6223      	str	r3, [r4, #32]
 8005888:	4b04      	ldr	r3, [pc, #16]	@ (800589c <__sinit+0x2c>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1f5      	bne.n	800587c <__sinit+0xc>
 8005890:	f7ff ffc4 	bl	800581c <global_stdio_init.part.0>
 8005894:	e7f2      	b.n	800587c <__sinit+0xc>
 8005896:	bf00      	nop
 8005898:	080057dd 	.word	0x080057dd
 800589c:	200003b4 	.word	0x200003b4

080058a0 <_fwalk_sglue>:
 80058a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058a4:	4607      	mov	r7, r0
 80058a6:	4688      	mov	r8, r1
 80058a8:	4614      	mov	r4, r2
 80058aa:	2600      	movs	r6, #0
 80058ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058b0:	f1b9 0901 	subs.w	r9, r9, #1
 80058b4:	d505      	bpl.n	80058c2 <_fwalk_sglue+0x22>
 80058b6:	6824      	ldr	r4, [r4, #0]
 80058b8:	2c00      	cmp	r4, #0
 80058ba:	d1f7      	bne.n	80058ac <_fwalk_sglue+0xc>
 80058bc:	4630      	mov	r0, r6
 80058be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058c2:	89ab      	ldrh	r3, [r5, #12]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d907      	bls.n	80058d8 <_fwalk_sglue+0x38>
 80058c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058cc:	3301      	adds	r3, #1
 80058ce:	d003      	beq.n	80058d8 <_fwalk_sglue+0x38>
 80058d0:	4629      	mov	r1, r5
 80058d2:	4638      	mov	r0, r7
 80058d4:	47c0      	blx	r8
 80058d6:	4306      	orrs	r6, r0
 80058d8:	3568      	adds	r5, #104	@ 0x68
 80058da:	e7e9      	b.n	80058b0 <_fwalk_sglue+0x10>

080058dc <iprintf>:
 80058dc:	b40f      	push	{r0, r1, r2, r3}
 80058de:	b507      	push	{r0, r1, r2, lr}
 80058e0:	4906      	ldr	r1, [pc, #24]	@ (80058fc <iprintf+0x20>)
 80058e2:	ab04      	add	r3, sp, #16
 80058e4:	6808      	ldr	r0, [r1, #0]
 80058e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80058ea:	6881      	ldr	r1, [r0, #8]
 80058ec:	9301      	str	r3, [sp, #4]
 80058ee:	f000 fadb 	bl	8005ea8 <_vfiprintf_r>
 80058f2:	b003      	add	sp, #12
 80058f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80058f8:	b004      	add	sp, #16
 80058fa:	4770      	bx	lr
 80058fc:	20000020 	.word	0x20000020

08005900 <_puts_r>:
 8005900:	6a03      	ldr	r3, [r0, #32]
 8005902:	b570      	push	{r4, r5, r6, lr}
 8005904:	6884      	ldr	r4, [r0, #8]
 8005906:	4605      	mov	r5, r0
 8005908:	460e      	mov	r6, r1
 800590a:	b90b      	cbnz	r3, 8005910 <_puts_r+0x10>
 800590c:	f7ff ffb0 	bl	8005870 <__sinit>
 8005910:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005912:	07db      	lsls	r3, r3, #31
 8005914:	d405      	bmi.n	8005922 <_puts_r+0x22>
 8005916:	89a3      	ldrh	r3, [r4, #12]
 8005918:	0598      	lsls	r0, r3, #22
 800591a:	d402      	bmi.n	8005922 <_puts_r+0x22>
 800591c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800591e:	f000 f99e 	bl	8005c5e <__retarget_lock_acquire_recursive>
 8005922:	89a3      	ldrh	r3, [r4, #12]
 8005924:	0719      	lsls	r1, r3, #28
 8005926:	d502      	bpl.n	800592e <_puts_r+0x2e>
 8005928:	6923      	ldr	r3, [r4, #16]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d135      	bne.n	800599a <_puts_r+0x9a>
 800592e:	4621      	mov	r1, r4
 8005930:	4628      	mov	r0, r5
 8005932:	f000 f8c5 	bl	8005ac0 <__swsetup_r>
 8005936:	b380      	cbz	r0, 800599a <_puts_r+0x9a>
 8005938:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800593c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800593e:	07da      	lsls	r2, r3, #31
 8005940:	d405      	bmi.n	800594e <_puts_r+0x4e>
 8005942:	89a3      	ldrh	r3, [r4, #12]
 8005944:	059b      	lsls	r3, r3, #22
 8005946:	d402      	bmi.n	800594e <_puts_r+0x4e>
 8005948:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800594a:	f000 f989 	bl	8005c60 <__retarget_lock_release_recursive>
 800594e:	4628      	mov	r0, r5
 8005950:	bd70      	pop	{r4, r5, r6, pc}
 8005952:	2b00      	cmp	r3, #0
 8005954:	da04      	bge.n	8005960 <_puts_r+0x60>
 8005956:	69a2      	ldr	r2, [r4, #24]
 8005958:	429a      	cmp	r2, r3
 800595a:	dc17      	bgt.n	800598c <_puts_r+0x8c>
 800595c:	290a      	cmp	r1, #10
 800595e:	d015      	beq.n	800598c <_puts_r+0x8c>
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	6022      	str	r2, [r4, #0]
 8005966:	7019      	strb	r1, [r3, #0]
 8005968:	68a3      	ldr	r3, [r4, #8]
 800596a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800596e:	3b01      	subs	r3, #1
 8005970:	60a3      	str	r3, [r4, #8]
 8005972:	2900      	cmp	r1, #0
 8005974:	d1ed      	bne.n	8005952 <_puts_r+0x52>
 8005976:	2b00      	cmp	r3, #0
 8005978:	da11      	bge.n	800599e <_puts_r+0x9e>
 800597a:	4622      	mov	r2, r4
 800597c:	210a      	movs	r1, #10
 800597e:	4628      	mov	r0, r5
 8005980:	f000 f85f 	bl	8005a42 <__swbuf_r>
 8005984:	3001      	adds	r0, #1
 8005986:	d0d7      	beq.n	8005938 <_puts_r+0x38>
 8005988:	250a      	movs	r5, #10
 800598a:	e7d7      	b.n	800593c <_puts_r+0x3c>
 800598c:	4622      	mov	r2, r4
 800598e:	4628      	mov	r0, r5
 8005990:	f000 f857 	bl	8005a42 <__swbuf_r>
 8005994:	3001      	adds	r0, #1
 8005996:	d1e7      	bne.n	8005968 <_puts_r+0x68>
 8005998:	e7ce      	b.n	8005938 <_puts_r+0x38>
 800599a:	3e01      	subs	r6, #1
 800599c:	e7e4      	b.n	8005968 <_puts_r+0x68>
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	1c5a      	adds	r2, r3, #1
 80059a2:	6022      	str	r2, [r4, #0]
 80059a4:	220a      	movs	r2, #10
 80059a6:	701a      	strb	r2, [r3, #0]
 80059a8:	e7ee      	b.n	8005988 <_puts_r+0x88>
	...

080059ac <puts>:
 80059ac:	4b02      	ldr	r3, [pc, #8]	@ (80059b8 <puts+0xc>)
 80059ae:	4601      	mov	r1, r0
 80059b0:	6818      	ldr	r0, [r3, #0]
 80059b2:	f7ff bfa5 	b.w	8005900 <_puts_r>
 80059b6:	bf00      	nop
 80059b8:	20000020 	.word	0x20000020

080059bc <__sread>:
 80059bc:	b510      	push	{r4, lr}
 80059be:	460c      	mov	r4, r1
 80059c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059c4:	f000 f8fc 	bl	8005bc0 <_read_r>
 80059c8:	2800      	cmp	r0, #0
 80059ca:	bfab      	itete	ge
 80059cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80059ce:	89a3      	ldrhlt	r3, [r4, #12]
 80059d0:	181b      	addge	r3, r3, r0
 80059d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80059d6:	bfac      	ite	ge
 80059d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80059da:	81a3      	strhlt	r3, [r4, #12]
 80059dc:	bd10      	pop	{r4, pc}

080059de <__swrite>:
 80059de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059e2:	461f      	mov	r7, r3
 80059e4:	898b      	ldrh	r3, [r1, #12]
 80059e6:	05db      	lsls	r3, r3, #23
 80059e8:	4605      	mov	r5, r0
 80059ea:	460c      	mov	r4, r1
 80059ec:	4616      	mov	r6, r2
 80059ee:	d505      	bpl.n	80059fc <__swrite+0x1e>
 80059f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059f4:	2302      	movs	r3, #2
 80059f6:	2200      	movs	r2, #0
 80059f8:	f000 f8d0 	bl	8005b9c <_lseek_r>
 80059fc:	89a3      	ldrh	r3, [r4, #12]
 80059fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a06:	81a3      	strh	r3, [r4, #12]
 8005a08:	4632      	mov	r2, r6
 8005a0a:	463b      	mov	r3, r7
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a12:	f000 b8e7 	b.w	8005be4 <_write_r>

08005a16 <__sseek>:
 8005a16:	b510      	push	{r4, lr}
 8005a18:	460c      	mov	r4, r1
 8005a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a1e:	f000 f8bd 	bl	8005b9c <_lseek_r>
 8005a22:	1c43      	adds	r3, r0, #1
 8005a24:	89a3      	ldrh	r3, [r4, #12]
 8005a26:	bf15      	itete	ne
 8005a28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a32:	81a3      	strheq	r3, [r4, #12]
 8005a34:	bf18      	it	ne
 8005a36:	81a3      	strhne	r3, [r4, #12]
 8005a38:	bd10      	pop	{r4, pc}

08005a3a <__sclose>:
 8005a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a3e:	f000 b89d 	b.w	8005b7c <_close_r>

08005a42 <__swbuf_r>:
 8005a42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a44:	460e      	mov	r6, r1
 8005a46:	4614      	mov	r4, r2
 8005a48:	4605      	mov	r5, r0
 8005a4a:	b118      	cbz	r0, 8005a54 <__swbuf_r+0x12>
 8005a4c:	6a03      	ldr	r3, [r0, #32]
 8005a4e:	b90b      	cbnz	r3, 8005a54 <__swbuf_r+0x12>
 8005a50:	f7ff ff0e 	bl	8005870 <__sinit>
 8005a54:	69a3      	ldr	r3, [r4, #24]
 8005a56:	60a3      	str	r3, [r4, #8]
 8005a58:	89a3      	ldrh	r3, [r4, #12]
 8005a5a:	071a      	lsls	r2, r3, #28
 8005a5c:	d501      	bpl.n	8005a62 <__swbuf_r+0x20>
 8005a5e:	6923      	ldr	r3, [r4, #16]
 8005a60:	b943      	cbnz	r3, 8005a74 <__swbuf_r+0x32>
 8005a62:	4621      	mov	r1, r4
 8005a64:	4628      	mov	r0, r5
 8005a66:	f000 f82b 	bl	8005ac0 <__swsetup_r>
 8005a6a:	b118      	cbz	r0, 8005a74 <__swbuf_r+0x32>
 8005a6c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005a70:	4638      	mov	r0, r7
 8005a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a74:	6823      	ldr	r3, [r4, #0]
 8005a76:	6922      	ldr	r2, [r4, #16]
 8005a78:	1a98      	subs	r0, r3, r2
 8005a7a:	6963      	ldr	r3, [r4, #20]
 8005a7c:	b2f6      	uxtb	r6, r6
 8005a7e:	4283      	cmp	r3, r0
 8005a80:	4637      	mov	r7, r6
 8005a82:	dc05      	bgt.n	8005a90 <__swbuf_r+0x4e>
 8005a84:	4621      	mov	r1, r4
 8005a86:	4628      	mov	r0, r5
 8005a88:	f000 fd38 	bl	80064fc <_fflush_r>
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	d1ed      	bne.n	8005a6c <__swbuf_r+0x2a>
 8005a90:	68a3      	ldr	r3, [r4, #8]
 8005a92:	3b01      	subs	r3, #1
 8005a94:	60a3      	str	r3, [r4, #8]
 8005a96:	6823      	ldr	r3, [r4, #0]
 8005a98:	1c5a      	adds	r2, r3, #1
 8005a9a:	6022      	str	r2, [r4, #0]
 8005a9c:	701e      	strb	r6, [r3, #0]
 8005a9e:	6962      	ldr	r2, [r4, #20]
 8005aa0:	1c43      	adds	r3, r0, #1
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d004      	beq.n	8005ab0 <__swbuf_r+0x6e>
 8005aa6:	89a3      	ldrh	r3, [r4, #12]
 8005aa8:	07db      	lsls	r3, r3, #31
 8005aaa:	d5e1      	bpl.n	8005a70 <__swbuf_r+0x2e>
 8005aac:	2e0a      	cmp	r6, #10
 8005aae:	d1df      	bne.n	8005a70 <__swbuf_r+0x2e>
 8005ab0:	4621      	mov	r1, r4
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	f000 fd22 	bl	80064fc <_fflush_r>
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	d0d9      	beq.n	8005a70 <__swbuf_r+0x2e>
 8005abc:	e7d6      	b.n	8005a6c <__swbuf_r+0x2a>
	...

08005ac0 <__swsetup_r>:
 8005ac0:	b538      	push	{r3, r4, r5, lr}
 8005ac2:	4b29      	ldr	r3, [pc, #164]	@ (8005b68 <__swsetup_r+0xa8>)
 8005ac4:	4605      	mov	r5, r0
 8005ac6:	6818      	ldr	r0, [r3, #0]
 8005ac8:	460c      	mov	r4, r1
 8005aca:	b118      	cbz	r0, 8005ad4 <__swsetup_r+0x14>
 8005acc:	6a03      	ldr	r3, [r0, #32]
 8005ace:	b90b      	cbnz	r3, 8005ad4 <__swsetup_r+0x14>
 8005ad0:	f7ff fece 	bl	8005870 <__sinit>
 8005ad4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ad8:	0719      	lsls	r1, r3, #28
 8005ada:	d422      	bmi.n	8005b22 <__swsetup_r+0x62>
 8005adc:	06da      	lsls	r2, r3, #27
 8005ade:	d407      	bmi.n	8005af0 <__swsetup_r+0x30>
 8005ae0:	2209      	movs	r2, #9
 8005ae2:	602a      	str	r2, [r5, #0]
 8005ae4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ae8:	81a3      	strh	r3, [r4, #12]
 8005aea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005aee:	e033      	b.n	8005b58 <__swsetup_r+0x98>
 8005af0:	0758      	lsls	r0, r3, #29
 8005af2:	d512      	bpl.n	8005b1a <__swsetup_r+0x5a>
 8005af4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005af6:	b141      	cbz	r1, 8005b0a <__swsetup_r+0x4a>
 8005af8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005afc:	4299      	cmp	r1, r3
 8005afe:	d002      	beq.n	8005b06 <__swsetup_r+0x46>
 8005b00:	4628      	mov	r0, r5
 8005b02:	f000 f8af 	bl	8005c64 <_free_r>
 8005b06:	2300      	movs	r3, #0
 8005b08:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b0a:	89a3      	ldrh	r3, [r4, #12]
 8005b0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005b10:	81a3      	strh	r3, [r4, #12]
 8005b12:	2300      	movs	r3, #0
 8005b14:	6063      	str	r3, [r4, #4]
 8005b16:	6923      	ldr	r3, [r4, #16]
 8005b18:	6023      	str	r3, [r4, #0]
 8005b1a:	89a3      	ldrh	r3, [r4, #12]
 8005b1c:	f043 0308 	orr.w	r3, r3, #8
 8005b20:	81a3      	strh	r3, [r4, #12]
 8005b22:	6923      	ldr	r3, [r4, #16]
 8005b24:	b94b      	cbnz	r3, 8005b3a <__swsetup_r+0x7a>
 8005b26:	89a3      	ldrh	r3, [r4, #12]
 8005b28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005b2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b30:	d003      	beq.n	8005b3a <__swsetup_r+0x7a>
 8005b32:	4621      	mov	r1, r4
 8005b34:	4628      	mov	r0, r5
 8005b36:	f000 fd2f 	bl	8006598 <__smakebuf_r>
 8005b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b3e:	f013 0201 	ands.w	r2, r3, #1
 8005b42:	d00a      	beq.n	8005b5a <__swsetup_r+0x9a>
 8005b44:	2200      	movs	r2, #0
 8005b46:	60a2      	str	r2, [r4, #8]
 8005b48:	6962      	ldr	r2, [r4, #20]
 8005b4a:	4252      	negs	r2, r2
 8005b4c:	61a2      	str	r2, [r4, #24]
 8005b4e:	6922      	ldr	r2, [r4, #16]
 8005b50:	b942      	cbnz	r2, 8005b64 <__swsetup_r+0xa4>
 8005b52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005b56:	d1c5      	bne.n	8005ae4 <__swsetup_r+0x24>
 8005b58:	bd38      	pop	{r3, r4, r5, pc}
 8005b5a:	0799      	lsls	r1, r3, #30
 8005b5c:	bf58      	it	pl
 8005b5e:	6962      	ldrpl	r2, [r4, #20]
 8005b60:	60a2      	str	r2, [r4, #8]
 8005b62:	e7f4      	b.n	8005b4e <__swsetup_r+0x8e>
 8005b64:	2000      	movs	r0, #0
 8005b66:	e7f7      	b.n	8005b58 <__swsetup_r+0x98>
 8005b68:	20000020 	.word	0x20000020

08005b6c <memset>:
 8005b6c:	4402      	add	r2, r0
 8005b6e:	4603      	mov	r3, r0
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d100      	bne.n	8005b76 <memset+0xa>
 8005b74:	4770      	bx	lr
 8005b76:	f803 1b01 	strb.w	r1, [r3], #1
 8005b7a:	e7f9      	b.n	8005b70 <memset+0x4>

08005b7c <_close_r>:
 8005b7c:	b538      	push	{r3, r4, r5, lr}
 8005b7e:	4d06      	ldr	r5, [pc, #24]	@ (8005b98 <_close_r+0x1c>)
 8005b80:	2300      	movs	r3, #0
 8005b82:	4604      	mov	r4, r0
 8005b84:	4608      	mov	r0, r1
 8005b86:	602b      	str	r3, [r5, #0]
 8005b88:	f7fb f9fc 	bl	8000f84 <_close>
 8005b8c:	1c43      	adds	r3, r0, #1
 8005b8e:	d102      	bne.n	8005b96 <_close_r+0x1a>
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	b103      	cbz	r3, 8005b96 <_close_r+0x1a>
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	bd38      	pop	{r3, r4, r5, pc}
 8005b98:	200003b8 	.word	0x200003b8

08005b9c <_lseek_r>:
 8005b9c:	b538      	push	{r3, r4, r5, lr}
 8005b9e:	4d07      	ldr	r5, [pc, #28]	@ (8005bbc <_lseek_r+0x20>)
 8005ba0:	4604      	mov	r4, r0
 8005ba2:	4608      	mov	r0, r1
 8005ba4:	4611      	mov	r1, r2
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	602a      	str	r2, [r5, #0]
 8005baa:	461a      	mov	r2, r3
 8005bac:	f7fb fa11 	bl	8000fd2 <_lseek>
 8005bb0:	1c43      	adds	r3, r0, #1
 8005bb2:	d102      	bne.n	8005bba <_lseek_r+0x1e>
 8005bb4:	682b      	ldr	r3, [r5, #0]
 8005bb6:	b103      	cbz	r3, 8005bba <_lseek_r+0x1e>
 8005bb8:	6023      	str	r3, [r4, #0]
 8005bba:	bd38      	pop	{r3, r4, r5, pc}
 8005bbc:	200003b8 	.word	0x200003b8

08005bc0 <_read_r>:
 8005bc0:	b538      	push	{r3, r4, r5, lr}
 8005bc2:	4d07      	ldr	r5, [pc, #28]	@ (8005be0 <_read_r+0x20>)
 8005bc4:	4604      	mov	r4, r0
 8005bc6:	4608      	mov	r0, r1
 8005bc8:	4611      	mov	r1, r2
 8005bca:	2200      	movs	r2, #0
 8005bcc:	602a      	str	r2, [r5, #0]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	f7fb f9bb 	bl	8000f4a <_read>
 8005bd4:	1c43      	adds	r3, r0, #1
 8005bd6:	d102      	bne.n	8005bde <_read_r+0x1e>
 8005bd8:	682b      	ldr	r3, [r5, #0]
 8005bda:	b103      	cbz	r3, 8005bde <_read_r+0x1e>
 8005bdc:	6023      	str	r3, [r4, #0]
 8005bde:	bd38      	pop	{r3, r4, r5, pc}
 8005be0:	200003b8 	.word	0x200003b8

08005be4 <_write_r>:
 8005be4:	b538      	push	{r3, r4, r5, lr}
 8005be6:	4d07      	ldr	r5, [pc, #28]	@ (8005c04 <_write_r+0x20>)
 8005be8:	4604      	mov	r4, r0
 8005bea:	4608      	mov	r0, r1
 8005bec:	4611      	mov	r1, r2
 8005bee:	2200      	movs	r2, #0
 8005bf0:	602a      	str	r2, [r5, #0]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	f7fa ffd4 	bl	8000ba0 <_write>
 8005bf8:	1c43      	adds	r3, r0, #1
 8005bfa:	d102      	bne.n	8005c02 <_write_r+0x1e>
 8005bfc:	682b      	ldr	r3, [r5, #0]
 8005bfe:	b103      	cbz	r3, 8005c02 <_write_r+0x1e>
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	bd38      	pop	{r3, r4, r5, pc}
 8005c04:	200003b8 	.word	0x200003b8

08005c08 <__errno>:
 8005c08:	4b01      	ldr	r3, [pc, #4]	@ (8005c10 <__errno+0x8>)
 8005c0a:	6818      	ldr	r0, [r3, #0]
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	20000020 	.word	0x20000020

08005c14 <__libc_init_array>:
 8005c14:	b570      	push	{r4, r5, r6, lr}
 8005c16:	4d0d      	ldr	r5, [pc, #52]	@ (8005c4c <__libc_init_array+0x38>)
 8005c18:	4c0d      	ldr	r4, [pc, #52]	@ (8005c50 <__libc_init_array+0x3c>)
 8005c1a:	1b64      	subs	r4, r4, r5
 8005c1c:	10a4      	asrs	r4, r4, #2
 8005c1e:	2600      	movs	r6, #0
 8005c20:	42a6      	cmp	r6, r4
 8005c22:	d109      	bne.n	8005c38 <__libc_init_array+0x24>
 8005c24:	4d0b      	ldr	r5, [pc, #44]	@ (8005c54 <__libc_init_array+0x40>)
 8005c26:	4c0c      	ldr	r4, [pc, #48]	@ (8005c58 <__libc_init_array+0x44>)
 8005c28:	f000 fd24 	bl	8006674 <_init>
 8005c2c:	1b64      	subs	r4, r4, r5
 8005c2e:	10a4      	asrs	r4, r4, #2
 8005c30:	2600      	movs	r6, #0
 8005c32:	42a6      	cmp	r6, r4
 8005c34:	d105      	bne.n	8005c42 <__libc_init_array+0x2e>
 8005c36:	bd70      	pop	{r4, r5, r6, pc}
 8005c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c3c:	4798      	blx	r3
 8005c3e:	3601      	adds	r6, #1
 8005c40:	e7ee      	b.n	8005c20 <__libc_init_array+0xc>
 8005c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c46:	4798      	blx	r3
 8005c48:	3601      	adds	r6, #1
 8005c4a:	e7f2      	b.n	8005c32 <__libc_init_array+0x1e>
 8005c4c:	08006888 	.word	0x08006888
 8005c50:	08006888 	.word	0x08006888
 8005c54:	08006888 	.word	0x08006888
 8005c58:	0800688c 	.word	0x0800688c

08005c5c <__retarget_lock_init_recursive>:
 8005c5c:	4770      	bx	lr

08005c5e <__retarget_lock_acquire_recursive>:
 8005c5e:	4770      	bx	lr

08005c60 <__retarget_lock_release_recursive>:
 8005c60:	4770      	bx	lr
	...

08005c64 <_free_r>:
 8005c64:	b538      	push	{r3, r4, r5, lr}
 8005c66:	4605      	mov	r5, r0
 8005c68:	2900      	cmp	r1, #0
 8005c6a:	d041      	beq.n	8005cf0 <_free_r+0x8c>
 8005c6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c70:	1f0c      	subs	r4, r1, #4
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	bfb8      	it	lt
 8005c76:	18e4      	addlt	r4, r4, r3
 8005c78:	f000 f8e0 	bl	8005e3c <__malloc_lock>
 8005c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8005cf4 <_free_r+0x90>)
 8005c7e:	6813      	ldr	r3, [r2, #0]
 8005c80:	b933      	cbnz	r3, 8005c90 <_free_r+0x2c>
 8005c82:	6063      	str	r3, [r4, #4]
 8005c84:	6014      	str	r4, [r2, #0]
 8005c86:	4628      	mov	r0, r5
 8005c88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c8c:	f000 b8dc 	b.w	8005e48 <__malloc_unlock>
 8005c90:	42a3      	cmp	r3, r4
 8005c92:	d908      	bls.n	8005ca6 <_free_r+0x42>
 8005c94:	6820      	ldr	r0, [r4, #0]
 8005c96:	1821      	adds	r1, r4, r0
 8005c98:	428b      	cmp	r3, r1
 8005c9a:	bf01      	itttt	eq
 8005c9c:	6819      	ldreq	r1, [r3, #0]
 8005c9e:	685b      	ldreq	r3, [r3, #4]
 8005ca0:	1809      	addeq	r1, r1, r0
 8005ca2:	6021      	streq	r1, [r4, #0]
 8005ca4:	e7ed      	b.n	8005c82 <_free_r+0x1e>
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	b10b      	cbz	r3, 8005cb0 <_free_r+0x4c>
 8005cac:	42a3      	cmp	r3, r4
 8005cae:	d9fa      	bls.n	8005ca6 <_free_r+0x42>
 8005cb0:	6811      	ldr	r1, [r2, #0]
 8005cb2:	1850      	adds	r0, r2, r1
 8005cb4:	42a0      	cmp	r0, r4
 8005cb6:	d10b      	bne.n	8005cd0 <_free_r+0x6c>
 8005cb8:	6820      	ldr	r0, [r4, #0]
 8005cba:	4401      	add	r1, r0
 8005cbc:	1850      	adds	r0, r2, r1
 8005cbe:	4283      	cmp	r3, r0
 8005cc0:	6011      	str	r1, [r2, #0]
 8005cc2:	d1e0      	bne.n	8005c86 <_free_r+0x22>
 8005cc4:	6818      	ldr	r0, [r3, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	6053      	str	r3, [r2, #4]
 8005cca:	4408      	add	r0, r1
 8005ccc:	6010      	str	r0, [r2, #0]
 8005cce:	e7da      	b.n	8005c86 <_free_r+0x22>
 8005cd0:	d902      	bls.n	8005cd8 <_free_r+0x74>
 8005cd2:	230c      	movs	r3, #12
 8005cd4:	602b      	str	r3, [r5, #0]
 8005cd6:	e7d6      	b.n	8005c86 <_free_r+0x22>
 8005cd8:	6820      	ldr	r0, [r4, #0]
 8005cda:	1821      	adds	r1, r4, r0
 8005cdc:	428b      	cmp	r3, r1
 8005cde:	bf04      	itt	eq
 8005ce0:	6819      	ldreq	r1, [r3, #0]
 8005ce2:	685b      	ldreq	r3, [r3, #4]
 8005ce4:	6063      	str	r3, [r4, #4]
 8005ce6:	bf04      	itt	eq
 8005ce8:	1809      	addeq	r1, r1, r0
 8005cea:	6021      	streq	r1, [r4, #0]
 8005cec:	6054      	str	r4, [r2, #4]
 8005cee:	e7ca      	b.n	8005c86 <_free_r+0x22>
 8005cf0:	bd38      	pop	{r3, r4, r5, pc}
 8005cf2:	bf00      	nop
 8005cf4:	200003c4 	.word	0x200003c4

08005cf8 <sbrk_aligned>:
 8005cf8:	b570      	push	{r4, r5, r6, lr}
 8005cfa:	4e0f      	ldr	r6, [pc, #60]	@ (8005d38 <sbrk_aligned+0x40>)
 8005cfc:	460c      	mov	r4, r1
 8005cfe:	6831      	ldr	r1, [r6, #0]
 8005d00:	4605      	mov	r5, r0
 8005d02:	b911      	cbnz	r1, 8005d0a <sbrk_aligned+0x12>
 8005d04:	f000 fca6 	bl	8006654 <_sbrk_r>
 8005d08:	6030      	str	r0, [r6, #0]
 8005d0a:	4621      	mov	r1, r4
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	f000 fca1 	bl	8006654 <_sbrk_r>
 8005d12:	1c43      	adds	r3, r0, #1
 8005d14:	d103      	bne.n	8005d1e <sbrk_aligned+0x26>
 8005d16:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	bd70      	pop	{r4, r5, r6, pc}
 8005d1e:	1cc4      	adds	r4, r0, #3
 8005d20:	f024 0403 	bic.w	r4, r4, #3
 8005d24:	42a0      	cmp	r0, r4
 8005d26:	d0f8      	beq.n	8005d1a <sbrk_aligned+0x22>
 8005d28:	1a21      	subs	r1, r4, r0
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	f000 fc92 	bl	8006654 <_sbrk_r>
 8005d30:	3001      	adds	r0, #1
 8005d32:	d1f2      	bne.n	8005d1a <sbrk_aligned+0x22>
 8005d34:	e7ef      	b.n	8005d16 <sbrk_aligned+0x1e>
 8005d36:	bf00      	nop
 8005d38:	200003c0 	.word	0x200003c0

08005d3c <_malloc_r>:
 8005d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d40:	1ccd      	adds	r5, r1, #3
 8005d42:	f025 0503 	bic.w	r5, r5, #3
 8005d46:	3508      	adds	r5, #8
 8005d48:	2d0c      	cmp	r5, #12
 8005d4a:	bf38      	it	cc
 8005d4c:	250c      	movcc	r5, #12
 8005d4e:	2d00      	cmp	r5, #0
 8005d50:	4606      	mov	r6, r0
 8005d52:	db01      	blt.n	8005d58 <_malloc_r+0x1c>
 8005d54:	42a9      	cmp	r1, r5
 8005d56:	d904      	bls.n	8005d62 <_malloc_r+0x26>
 8005d58:	230c      	movs	r3, #12
 8005d5a:	6033      	str	r3, [r6, #0]
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e38 <_malloc_r+0xfc>
 8005d66:	f000 f869 	bl	8005e3c <__malloc_lock>
 8005d6a:	f8d8 3000 	ldr.w	r3, [r8]
 8005d6e:	461c      	mov	r4, r3
 8005d70:	bb44      	cbnz	r4, 8005dc4 <_malloc_r+0x88>
 8005d72:	4629      	mov	r1, r5
 8005d74:	4630      	mov	r0, r6
 8005d76:	f7ff ffbf 	bl	8005cf8 <sbrk_aligned>
 8005d7a:	1c43      	adds	r3, r0, #1
 8005d7c:	4604      	mov	r4, r0
 8005d7e:	d158      	bne.n	8005e32 <_malloc_r+0xf6>
 8005d80:	f8d8 4000 	ldr.w	r4, [r8]
 8005d84:	4627      	mov	r7, r4
 8005d86:	2f00      	cmp	r7, #0
 8005d88:	d143      	bne.n	8005e12 <_malloc_r+0xd6>
 8005d8a:	2c00      	cmp	r4, #0
 8005d8c:	d04b      	beq.n	8005e26 <_malloc_r+0xea>
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	4639      	mov	r1, r7
 8005d92:	4630      	mov	r0, r6
 8005d94:	eb04 0903 	add.w	r9, r4, r3
 8005d98:	f000 fc5c 	bl	8006654 <_sbrk_r>
 8005d9c:	4581      	cmp	r9, r0
 8005d9e:	d142      	bne.n	8005e26 <_malloc_r+0xea>
 8005da0:	6821      	ldr	r1, [r4, #0]
 8005da2:	1a6d      	subs	r5, r5, r1
 8005da4:	4629      	mov	r1, r5
 8005da6:	4630      	mov	r0, r6
 8005da8:	f7ff ffa6 	bl	8005cf8 <sbrk_aligned>
 8005dac:	3001      	adds	r0, #1
 8005dae:	d03a      	beq.n	8005e26 <_malloc_r+0xea>
 8005db0:	6823      	ldr	r3, [r4, #0]
 8005db2:	442b      	add	r3, r5
 8005db4:	6023      	str	r3, [r4, #0]
 8005db6:	f8d8 3000 	ldr.w	r3, [r8]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	bb62      	cbnz	r2, 8005e18 <_malloc_r+0xdc>
 8005dbe:	f8c8 7000 	str.w	r7, [r8]
 8005dc2:	e00f      	b.n	8005de4 <_malloc_r+0xa8>
 8005dc4:	6822      	ldr	r2, [r4, #0]
 8005dc6:	1b52      	subs	r2, r2, r5
 8005dc8:	d420      	bmi.n	8005e0c <_malloc_r+0xd0>
 8005dca:	2a0b      	cmp	r2, #11
 8005dcc:	d917      	bls.n	8005dfe <_malloc_r+0xc2>
 8005dce:	1961      	adds	r1, r4, r5
 8005dd0:	42a3      	cmp	r3, r4
 8005dd2:	6025      	str	r5, [r4, #0]
 8005dd4:	bf18      	it	ne
 8005dd6:	6059      	strne	r1, [r3, #4]
 8005dd8:	6863      	ldr	r3, [r4, #4]
 8005dda:	bf08      	it	eq
 8005ddc:	f8c8 1000 	streq.w	r1, [r8]
 8005de0:	5162      	str	r2, [r4, r5]
 8005de2:	604b      	str	r3, [r1, #4]
 8005de4:	4630      	mov	r0, r6
 8005de6:	f000 f82f 	bl	8005e48 <__malloc_unlock>
 8005dea:	f104 000b 	add.w	r0, r4, #11
 8005dee:	1d23      	adds	r3, r4, #4
 8005df0:	f020 0007 	bic.w	r0, r0, #7
 8005df4:	1ac2      	subs	r2, r0, r3
 8005df6:	bf1c      	itt	ne
 8005df8:	1a1b      	subne	r3, r3, r0
 8005dfa:	50a3      	strne	r3, [r4, r2]
 8005dfc:	e7af      	b.n	8005d5e <_malloc_r+0x22>
 8005dfe:	6862      	ldr	r2, [r4, #4]
 8005e00:	42a3      	cmp	r3, r4
 8005e02:	bf0c      	ite	eq
 8005e04:	f8c8 2000 	streq.w	r2, [r8]
 8005e08:	605a      	strne	r2, [r3, #4]
 8005e0a:	e7eb      	b.n	8005de4 <_malloc_r+0xa8>
 8005e0c:	4623      	mov	r3, r4
 8005e0e:	6864      	ldr	r4, [r4, #4]
 8005e10:	e7ae      	b.n	8005d70 <_malloc_r+0x34>
 8005e12:	463c      	mov	r4, r7
 8005e14:	687f      	ldr	r7, [r7, #4]
 8005e16:	e7b6      	b.n	8005d86 <_malloc_r+0x4a>
 8005e18:	461a      	mov	r2, r3
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	42a3      	cmp	r3, r4
 8005e1e:	d1fb      	bne.n	8005e18 <_malloc_r+0xdc>
 8005e20:	2300      	movs	r3, #0
 8005e22:	6053      	str	r3, [r2, #4]
 8005e24:	e7de      	b.n	8005de4 <_malloc_r+0xa8>
 8005e26:	230c      	movs	r3, #12
 8005e28:	6033      	str	r3, [r6, #0]
 8005e2a:	4630      	mov	r0, r6
 8005e2c:	f000 f80c 	bl	8005e48 <__malloc_unlock>
 8005e30:	e794      	b.n	8005d5c <_malloc_r+0x20>
 8005e32:	6005      	str	r5, [r0, #0]
 8005e34:	e7d6      	b.n	8005de4 <_malloc_r+0xa8>
 8005e36:	bf00      	nop
 8005e38:	200003c4 	.word	0x200003c4

08005e3c <__malloc_lock>:
 8005e3c:	4801      	ldr	r0, [pc, #4]	@ (8005e44 <__malloc_lock+0x8>)
 8005e3e:	f7ff bf0e 	b.w	8005c5e <__retarget_lock_acquire_recursive>
 8005e42:	bf00      	nop
 8005e44:	200003bc 	.word	0x200003bc

08005e48 <__malloc_unlock>:
 8005e48:	4801      	ldr	r0, [pc, #4]	@ (8005e50 <__malloc_unlock+0x8>)
 8005e4a:	f7ff bf09 	b.w	8005c60 <__retarget_lock_release_recursive>
 8005e4e:	bf00      	nop
 8005e50:	200003bc 	.word	0x200003bc

08005e54 <__sfputc_r>:
 8005e54:	6893      	ldr	r3, [r2, #8]
 8005e56:	3b01      	subs	r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	b410      	push	{r4}
 8005e5c:	6093      	str	r3, [r2, #8]
 8005e5e:	da08      	bge.n	8005e72 <__sfputc_r+0x1e>
 8005e60:	6994      	ldr	r4, [r2, #24]
 8005e62:	42a3      	cmp	r3, r4
 8005e64:	db01      	blt.n	8005e6a <__sfputc_r+0x16>
 8005e66:	290a      	cmp	r1, #10
 8005e68:	d103      	bne.n	8005e72 <__sfputc_r+0x1e>
 8005e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e6e:	f7ff bde8 	b.w	8005a42 <__swbuf_r>
 8005e72:	6813      	ldr	r3, [r2, #0]
 8005e74:	1c58      	adds	r0, r3, #1
 8005e76:	6010      	str	r0, [r2, #0]
 8005e78:	7019      	strb	r1, [r3, #0]
 8005e7a:	4608      	mov	r0, r1
 8005e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <__sfputs_r>:
 8005e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e84:	4606      	mov	r6, r0
 8005e86:	460f      	mov	r7, r1
 8005e88:	4614      	mov	r4, r2
 8005e8a:	18d5      	adds	r5, r2, r3
 8005e8c:	42ac      	cmp	r4, r5
 8005e8e:	d101      	bne.n	8005e94 <__sfputs_r+0x12>
 8005e90:	2000      	movs	r0, #0
 8005e92:	e007      	b.n	8005ea4 <__sfputs_r+0x22>
 8005e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e98:	463a      	mov	r2, r7
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	f7ff ffda 	bl	8005e54 <__sfputc_r>
 8005ea0:	1c43      	adds	r3, r0, #1
 8005ea2:	d1f3      	bne.n	8005e8c <__sfputs_r+0xa>
 8005ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ea8 <_vfiprintf_r>:
 8005ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eac:	460d      	mov	r5, r1
 8005eae:	b09d      	sub	sp, #116	@ 0x74
 8005eb0:	4614      	mov	r4, r2
 8005eb2:	4698      	mov	r8, r3
 8005eb4:	4606      	mov	r6, r0
 8005eb6:	b118      	cbz	r0, 8005ec0 <_vfiprintf_r+0x18>
 8005eb8:	6a03      	ldr	r3, [r0, #32]
 8005eba:	b90b      	cbnz	r3, 8005ec0 <_vfiprintf_r+0x18>
 8005ebc:	f7ff fcd8 	bl	8005870 <__sinit>
 8005ec0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ec2:	07d9      	lsls	r1, r3, #31
 8005ec4:	d405      	bmi.n	8005ed2 <_vfiprintf_r+0x2a>
 8005ec6:	89ab      	ldrh	r3, [r5, #12]
 8005ec8:	059a      	lsls	r2, r3, #22
 8005eca:	d402      	bmi.n	8005ed2 <_vfiprintf_r+0x2a>
 8005ecc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ece:	f7ff fec6 	bl	8005c5e <__retarget_lock_acquire_recursive>
 8005ed2:	89ab      	ldrh	r3, [r5, #12]
 8005ed4:	071b      	lsls	r3, r3, #28
 8005ed6:	d501      	bpl.n	8005edc <_vfiprintf_r+0x34>
 8005ed8:	692b      	ldr	r3, [r5, #16]
 8005eda:	b99b      	cbnz	r3, 8005f04 <_vfiprintf_r+0x5c>
 8005edc:	4629      	mov	r1, r5
 8005ede:	4630      	mov	r0, r6
 8005ee0:	f7ff fdee 	bl	8005ac0 <__swsetup_r>
 8005ee4:	b170      	cbz	r0, 8005f04 <_vfiprintf_r+0x5c>
 8005ee6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ee8:	07dc      	lsls	r4, r3, #31
 8005eea:	d504      	bpl.n	8005ef6 <_vfiprintf_r+0x4e>
 8005eec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ef0:	b01d      	add	sp, #116	@ 0x74
 8005ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ef6:	89ab      	ldrh	r3, [r5, #12]
 8005ef8:	0598      	lsls	r0, r3, #22
 8005efa:	d4f7      	bmi.n	8005eec <_vfiprintf_r+0x44>
 8005efc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005efe:	f7ff feaf 	bl	8005c60 <__retarget_lock_release_recursive>
 8005f02:	e7f3      	b.n	8005eec <_vfiprintf_r+0x44>
 8005f04:	2300      	movs	r3, #0
 8005f06:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f08:	2320      	movs	r3, #32
 8005f0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f12:	2330      	movs	r3, #48	@ 0x30
 8005f14:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80060c4 <_vfiprintf_r+0x21c>
 8005f18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f1c:	f04f 0901 	mov.w	r9, #1
 8005f20:	4623      	mov	r3, r4
 8005f22:	469a      	mov	sl, r3
 8005f24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f28:	b10a      	cbz	r2, 8005f2e <_vfiprintf_r+0x86>
 8005f2a:	2a25      	cmp	r2, #37	@ 0x25
 8005f2c:	d1f9      	bne.n	8005f22 <_vfiprintf_r+0x7a>
 8005f2e:	ebba 0b04 	subs.w	fp, sl, r4
 8005f32:	d00b      	beq.n	8005f4c <_vfiprintf_r+0xa4>
 8005f34:	465b      	mov	r3, fp
 8005f36:	4622      	mov	r2, r4
 8005f38:	4629      	mov	r1, r5
 8005f3a:	4630      	mov	r0, r6
 8005f3c:	f7ff ffa1 	bl	8005e82 <__sfputs_r>
 8005f40:	3001      	adds	r0, #1
 8005f42:	f000 80a7 	beq.w	8006094 <_vfiprintf_r+0x1ec>
 8005f46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f48:	445a      	add	r2, fp
 8005f4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 809f 	beq.w	8006094 <_vfiprintf_r+0x1ec>
 8005f56:	2300      	movs	r3, #0
 8005f58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f60:	f10a 0a01 	add.w	sl, sl, #1
 8005f64:	9304      	str	r3, [sp, #16]
 8005f66:	9307      	str	r3, [sp, #28]
 8005f68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f6e:	4654      	mov	r4, sl
 8005f70:	2205      	movs	r2, #5
 8005f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f76:	4853      	ldr	r0, [pc, #332]	@ (80060c4 <_vfiprintf_r+0x21c>)
 8005f78:	f7fa f952 	bl	8000220 <memchr>
 8005f7c:	9a04      	ldr	r2, [sp, #16]
 8005f7e:	b9d8      	cbnz	r0, 8005fb8 <_vfiprintf_r+0x110>
 8005f80:	06d1      	lsls	r1, r2, #27
 8005f82:	bf44      	itt	mi
 8005f84:	2320      	movmi	r3, #32
 8005f86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f8a:	0713      	lsls	r3, r2, #28
 8005f8c:	bf44      	itt	mi
 8005f8e:	232b      	movmi	r3, #43	@ 0x2b
 8005f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f94:	f89a 3000 	ldrb.w	r3, [sl]
 8005f98:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f9a:	d015      	beq.n	8005fc8 <_vfiprintf_r+0x120>
 8005f9c:	9a07      	ldr	r2, [sp, #28]
 8005f9e:	4654      	mov	r4, sl
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	f04f 0c0a 	mov.w	ip, #10
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fac:	3b30      	subs	r3, #48	@ 0x30
 8005fae:	2b09      	cmp	r3, #9
 8005fb0:	d94b      	bls.n	800604a <_vfiprintf_r+0x1a2>
 8005fb2:	b1b0      	cbz	r0, 8005fe2 <_vfiprintf_r+0x13a>
 8005fb4:	9207      	str	r2, [sp, #28]
 8005fb6:	e014      	b.n	8005fe2 <_vfiprintf_r+0x13a>
 8005fb8:	eba0 0308 	sub.w	r3, r0, r8
 8005fbc:	fa09 f303 	lsl.w	r3, r9, r3
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	9304      	str	r3, [sp, #16]
 8005fc4:	46a2      	mov	sl, r4
 8005fc6:	e7d2      	b.n	8005f6e <_vfiprintf_r+0xc6>
 8005fc8:	9b03      	ldr	r3, [sp, #12]
 8005fca:	1d19      	adds	r1, r3, #4
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	9103      	str	r1, [sp, #12]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	bfbb      	ittet	lt
 8005fd4:	425b      	neglt	r3, r3
 8005fd6:	f042 0202 	orrlt.w	r2, r2, #2
 8005fda:	9307      	strge	r3, [sp, #28]
 8005fdc:	9307      	strlt	r3, [sp, #28]
 8005fde:	bfb8      	it	lt
 8005fe0:	9204      	strlt	r2, [sp, #16]
 8005fe2:	7823      	ldrb	r3, [r4, #0]
 8005fe4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005fe6:	d10a      	bne.n	8005ffe <_vfiprintf_r+0x156>
 8005fe8:	7863      	ldrb	r3, [r4, #1]
 8005fea:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fec:	d132      	bne.n	8006054 <_vfiprintf_r+0x1ac>
 8005fee:	9b03      	ldr	r3, [sp, #12]
 8005ff0:	1d1a      	adds	r2, r3, #4
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	9203      	str	r2, [sp, #12]
 8005ff6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ffa:	3402      	adds	r4, #2
 8005ffc:	9305      	str	r3, [sp, #20]
 8005ffe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80060d4 <_vfiprintf_r+0x22c>
 8006002:	7821      	ldrb	r1, [r4, #0]
 8006004:	2203      	movs	r2, #3
 8006006:	4650      	mov	r0, sl
 8006008:	f7fa f90a 	bl	8000220 <memchr>
 800600c:	b138      	cbz	r0, 800601e <_vfiprintf_r+0x176>
 800600e:	9b04      	ldr	r3, [sp, #16]
 8006010:	eba0 000a 	sub.w	r0, r0, sl
 8006014:	2240      	movs	r2, #64	@ 0x40
 8006016:	4082      	lsls	r2, r0
 8006018:	4313      	orrs	r3, r2
 800601a:	3401      	adds	r4, #1
 800601c:	9304      	str	r3, [sp, #16]
 800601e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006022:	4829      	ldr	r0, [pc, #164]	@ (80060c8 <_vfiprintf_r+0x220>)
 8006024:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006028:	2206      	movs	r2, #6
 800602a:	f7fa f8f9 	bl	8000220 <memchr>
 800602e:	2800      	cmp	r0, #0
 8006030:	d03f      	beq.n	80060b2 <_vfiprintf_r+0x20a>
 8006032:	4b26      	ldr	r3, [pc, #152]	@ (80060cc <_vfiprintf_r+0x224>)
 8006034:	bb1b      	cbnz	r3, 800607e <_vfiprintf_r+0x1d6>
 8006036:	9b03      	ldr	r3, [sp, #12]
 8006038:	3307      	adds	r3, #7
 800603a:	f023 0307 	bic.w	r3, r3, #7
 800603e:	3308      	adds	r3, #8
 8006040:	9303      	str	r3, [sp, #12]
 8006042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006044:	443b      	add	r3, r7
 8006046:	9309      	str	r3, [sp, #36]	@ 0x24
 8006048:	e76a      	b.n	8005f20 <_vfiprintf_r+0x78>
 800604a:	fb0c 3202 	mla	r2, ip, r2, r3
 800604e:	460c      	mov	r4, r1
 8006050:	2001      	movs	r0, #1
 8006052:	e7a8      	b.n	8005fa6 <_vfiprintf_r+0xfe>
 8006054:	2300      	movs	r3, #0
 8006056:	3401      	adds	r4, #1
 8006058:	9305      	str	r3, [sp, #20]
 800605a:	4619      	mov	r1, r3
 800605c:	f04f 0c0a 	mov.w	ip, #10
 8006060:	4620      	mov	r0, r4
 8006062:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006066:	3a30      	subs	r2, #48	@ 0x30
 8006068:	2a09      	cmp	r2, #9
 800606a:	d903      	bls.n	8006074 <_vfiprintf_r+0x1cc>
 800606c:	2b00      	cmp	r3, #0
 800606e:	d0c6      	beq.n	8005ffe <_vfiprintf_r+0x156>
 8006070:	9105      	str	r1, [sp, #20]
 8006072:	e7c4      	b.n	8005ffe <_vfiprintf_r+0x156>
 8006074:	fb0c 2101 	mla	r1, ip, r1, r2
 8006078:	4604      	mov	r4, r0
 800607a:	2301      	movs	r3, #1
 800607c:	e7f0      	b.n	8006060 <_vfiprintf_r+0x1b8>
 800607e:	ab03      	add	r3, sp, #12
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	462a      	mov	r2, r5
 8006084:	4b12      	ldr	r3, [pc, #72]	@ (80060d0 <_vfiprintf_r+0x228>)
 8006086:	a904      	add	r1, sp, #16
 8006088:	4630      	mov	r0, r6
 800608a:	f3af 8000 	nop.w
 800608e:	4607      	mov	r7, r0
 8006090:	1c78      	adds	r0, r7, #1
 8006092:	d1d6      	bne.n	8006042 <_vfiprintf_r+0x19a>
 8006094:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006096:	07d9      	lsls	r1, r3, #31
 8006098:	d405      	bmi.n	80060a6 <_vfiprintf_r+0x1fe>
 800609a:	89ab      	ldrh	r3, [r5, #12]
 800609c:	059a      	lsls	r2, r3, #22
 800609e:	d402      	bmi.n	80060a6 <_vfiprintf_r+0x1fe>
 80060a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060a2:	f7ff fddd 	bl	8005c60 <__retarget_lock_release_recursive>
 80060a6:	89ab      	ldrh	r3, [r5, #12]
 80060a8:	065b      	lsls	r3, r3, #25
 80060aa:	f53f af1f 	bmi.w	8005eec <_vfiprintf_r+0x44>
 80060ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060b0:	e71e      	b.n	8005ef0 <_vfiprintf_r+0x48>
 80060b2:	ab03      	add	r3, sp, #12
 80060b4:	9300      	str	r3, [sp, #0]
 80060b6:	462a      	mov	r2, r5
 80060b8:	4b05      	ldr	r3, [pc, #20]	@ (80060d0 <_vfiprintf_r+0x228>)
 80060ba:	a904      	add	r1, sp, #16
 80060bc:	4630      	mov	r0, r6
 80060be:	f000 f879 	bl	80061b4 <_printf_i>
 80060c2:	e7e4      	b.n	800608e <_vfiprintf_r+0x1e6>
 80060c4:	0800684c 	.word	0x0800684c
 80060c8:	08006856 	.word	0x08006856
 80060cc:	00000000 	.word	0x00000000
 80060d0:	08005e83 	.word	0x08005e83
 80060d4:	08006852 	.word	0x08006852

080060d8 <_printf_common>:
 80060d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060dc:	4616      	mov	r6, r2
 80060de:	4698      	mov	r8, r3
 80060e0:	688a      	ldr	r2, [r1, #8]
 80060e2:	690b      	ldr	r3, [r1, #16]
 80060e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80060e8:	4293      	cmp	r3, r2
 80060ea:	bfb8      	it	lt
 80060ec:	4613      	movlt	r3, r2
 80060ee:	6033      	str	r3, [r6, #0]
 80060f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80060f4:	4607      	mov	r7, r0
 80060f6:	460c      	mov	r4, r1
 80060f8:	b10a      	cbz	r2, 80060fe <_printf_common+0x26>
 80060fa:	3301      	adds	r3, #1
 80060fc:	6033      	str	r3, [r6, #0]
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	0699      	lsls	r1, r3, #26
 8006102:	bf42      	ittt	mi
 8006104:	6833      	ldrmi	r3, [r6, #0]
 8006106:	3302      	addmi	r3, #2
 8006108:	6033      	strmi	r3, [r6, #0]
 800610a:	6825      	ldr	r5, [r4, #0]
 800610c:	f015 0506 	ands.w	r5, r5, #6
 8006110:	d106      	bne.n	8006120 <_printf_common+0x48>
 8006112:	f104 0a19 	add.w	sl, r4, #25
 8006116:	68e3      	ldr	r3, [r4, #12]
 8006118:	6832      	ldr	r2, [r6, #0]
 800611a:	1a9b      	subs	r3, r3, r2
 800611c:	42ab      	cmp	r3, r5
 800611e:	dc26      	bgt.n	800616e <_printf_common+0x96>
 8006120:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006124:	6822      	ldr	r2, [r4, #0]
 8006126:	3b00      	subs	r3, #0
 8006128:	bf18      	it	ne
 800612a:	2301      	movne	r3, #1
 800612c:	0692      	lsls	r2, r2, #26
 800612e:	d42b      	bmi.n	8006188 <_printf_common+0xb0>
 8006130:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006134:	4641      	mov	r1, r8
 8006136:	4638      	mov	r0, r7
 8006138:	47c8      	blx	r9
 800613a:	3001      	adds	r0, #1
 800613c:	d01e      	beq.n	800617c <_printf_common+0xa4>
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	6922      	ldr	r2, [r4, #16]
 8006142:	f003 0306 	and.w	r3, r3, #6
 8006146:	2b04      	cmp	r3, #4
 8006148:	bf02      	ittt	eq
 800614a:	68e5      	ldreq	r5, [r4, #12]
 800614c:	6833      	ldreq	r3, [r6, #0]
 800614e:	1aed      	subeq	r5, r5, r3
 8006150:	68a3      	ldr	r3, [r4, #8]
 8006152:	bf0c      	ite	eq
 8006154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006158:	2500      	movne	r5, #0
 800615a:	4293      	cmp	r3, r2
 800615c:	bfc4      	itt	gt
 800615e:	1a9b      	subgt	r3, r3, r2
 8006160:	18ed      	addgt	r5, r5, r3
 8006162:	2600      	movs	r6, #0
 8006164:	341a      	adds	r4, #26
 8006166:	42b5      	cmp	r5, r6
 8006168:	d11a      	bne.n	80061a0 <_printf_common+0xc8>
 800616a:	2000      	movs	r0, #0
 800616c:	e008      	b.n	8006180 <_printf_common+0xa8>
 800616e:	2301      	movs	r3, #1
 8006170:	4652      	mov	r2, sl
 8006172:	4641      	mov	r1, r8
 8006174:	4638      	mov	r0, r7
 8006176:	47c8      	blx	r9
 8006178:	3001      	adds	r0, #1
 800617a:	d103      	bne.n	8006184 <_printf_common+0xac>
 800617c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006184:	3501      	adds	r5, #1
 8006186:	e7c6      	b.n	8006116 <_printf_common+0x3e>
 8006188:	18e1      	adds	r1, r4, r3
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	2030      	movs	r0, #48	@ 0x30
 800618e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006192:	4422      	add	r2, r4
 8006194:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006198:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800619c:	3302      	adds	r3, #2
 800619e:	e7c7      	b.n	8006130 <_printf_common+0x58>
 80061a0:	2301      	movs	r3, #1
 80061a2:	4622      	mov	r2, r4
 80061a4:	4641      	mov	r1, r8
 80061a6:	4638      	mov	r0, r7
 80061a8:	47c8      	blx	r9
 80061aa:	3001      	adds	r0, #1
 80061ac:	d0e6      	beq.n	800617c <_printf_common+0xa4>
 80061ae:	3601      	adds	r6, #1
 80061b0:	e7d9      	b.n	8006166 <_printf_common+0x8e>
	...

080061b4 <_printf_i>:
 80061b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061b8:	7e0f      	ldrb	r7, [r1, #24]
 80061ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061bc:	2f78      	cmp	r7, #120	@ 0x78
 80061be:	4691      	mov	r9, r2
 80061c0:	4680      	mov	r8, r0
 80061c2:	460c      	mov	r4, r1
 80061c4:	469a      	mov	sl, r3
 80061c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80061ca:	d807      	bhi.n	80061dc <_printf_i+0x28>
 80061cc:	2f62      	cmp	r7, #98	@ 0x62
 80061ce:	d80a      	bhi.n	80061e6 <_printf_i+0x32>
 80061d0:	2f00      	cmp	r7, #0
 80061d2:	f000 80d2 	beq.w	800637a <_printf_i+0x1c6>
 80061d6:	2f58      	cmp	r7, #88	@ 0x58
 80061d8:	f000 80b9 	beq.w	800634e <_printf_i+0x19a>
 80061dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80061e4:	e03a      	b.n	800625c <_printf_i+0xa8>
 80061e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80061ea:	2b15      	cmp	r3, #21
 80061ec:	d8f6      	bhi.n	80061dc <_printf_i+0x28>
 80061ee:	a101      	add	r1, pc, #4	@ (adr r1, 80061f4 <_printf_i+0x40>)
 80061f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061f4:	0800624d 	.word	0x0800624d
 80061f8:	08006261 	.word	0x08006261
 80061fc:	080061dd 	.word	0x080061dd
 8006200:	080061dd 	.word	0x080061dd
 8006204:	080061dd 	.word	0x080061dd
 8006208:	080061dd 	.word	0x080061dd
 800620c:	08006261 	.word	0x08006261
 8006210:	080061dd 	.word	0x080061dd
 8006214:	080061dd 	.word	0x080061dd
 8006218:	080061dd 	.word	0x080061dd
 800621c:	080061dd 	.word	0x080061dd
 8006220:	08006361 	.word	0x08006361
 8006224:	0800628b 	.word	0x0800628b
 8006228:	0800631b 	.word	0x0800631b
 800622c:	080061dd 	.word	0x080061dd
 8006230:	080061dd 	.word	0x080061dd
 8006234:	08006383 	.word	0x08006383
 8006238:	080061dd 	.word	0x080061dd
 800623c:	0800628b 	.word	0x0800628b
 8006240:	080061dd 	.word	0x080061dd
 8006244:	080061dd 	.word	0x080061dd
 8006248:	08006323 	.word	0x08006323
 800624c:	6833      	ldr	r3, [r6, #0]
 800624e:	1d1a      	adds	r2, r3, #4
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6032      	str	r2, [r6, #0]
 8006254:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006258:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800625c:	2301      	movs	r3, #1
 800625e:	e09d      	b.n	800639c <_printf_i+0x1e8>
 8006260:	6833      	ldr	r3, [r6, #0]
 8006262:	6820      	ldr	r0, [r4, #0]
 8006264:	1d19      	adds	r1, r3, #4
 8006266:	6031      	str	r1, [r6, #0]
 8006268:	0606      	lsls	r6, r0, #24
 800626a:	d501      	bpl.n	8006270 <_printf_i+0xbc>
 800626c:	681d      	ldr	r5, [r3, #0]
 800626e:	e003      	b.n	8006278 <_printf_i+0xc4>
 8006270:	0645      	lsls	r5, r0, #25
 8006272:	d5fb      	bpl.n	800626c <_printf_i+0xb8>
 8006274:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006278:	2d00      	cmp	r5, #0
 800627a:	da03      	bge.n	8006284 <_printf_i+0xd0>
 800627c:	232d      	movs	r3, #45	@ 0x2d
 800627e:	426d      	negs	r5, r5
 8006280:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006284:	4859      	ldr	r0, [pc, #356]	@ (80063ec <_printf_i+0x238>)
 8006286:	230a      	movs	r3, #10
 8006288:	e011      	b.n	80062ae <_printf_i+0xfa>
 800628a:	6821      	ldr	r1, [r4, #0]
 800628c:	6833      	ldr	r3, [r6, #0]
 800628e:	0608      	lsls	r0, r1, #24
 8006290:	f853 5b04 	ldr.w	r5, [r3], #4
 8006294:	d402      	bmi.n	800629c <_printf_i+0xe8>
 8006296:	0649      	lsls	r1, r1, #25
 8006298:	bf48      	it	mi
 800629a:	b2ad      	uxthmi	r5, r5
 800629c:	2f6f      	cmp	r7, #111	@ 0x6f
 800629e:	4853      	ldr	r0, [pc, #332]	@ (80063ec <_printf_i+0x238>)
 80062a0:	6033      	str	r3, [r6, #0]
 80062a2:	bf14      	ite	ne
 80062a4:	230a      	movne	r3, #10
 80062a6:	2308      	moveq	r3, #8
 80062a8:	2100      	movs	r1, #0
 80062aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80062ae:	6866      	ldr	r6, [r4, #4]
 80062b0:	60a6      	str	r6, [r4, #8]
 80062b2:	2e00      	cmp	r6, #0
 80062b4:	bfa2      	ittt	ge
 80062b6:	6821      	ldrge	r1, [r4, #0]
 80062b8:	f021 0104 	bicge.w	r1, r1, #4
 80062bc:	6021      	strge	r1, [r4, #0]
 80062be:	b90d      	cbnz	r5, 80062c4 <_printf_i+0x110>
 80062c0:	2e00      	cmp	r6, #0
 80062c2:	d04b      	beq.n	800635c <_printf_i+0x1a8>
 80062c4:	4616      	mov	r6, r2
 80062c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80062ca:	fb03 5711 	mls	r7, r3, r1, r5
 80062ce:	5dc7      	ldrb	r7, [r0, r7]
 80062d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062d4:	462f      	mov	r7, r5
 80062d6:	42bb      	cmp	r3, r7
 80062d8:	460d      	mov	r5, r1
 80062da:	d9f4      	bls.n	80062c6 <_printf_i+0x112>
 80062dc:	2b08      	cmp	r3, #8
 80062de:	d10b      	bne.n	80062f8 <_printf_i+0x144>
 80062e0:	6823      	ldr	r3, [r4, #0]
 80062e2:	07df      	lsls	r7, r3, #31
 80062e4:	d508      	bpl.n	80062f8 <_printf_i+0x144>
 80062e6:	6923      	ldr	r3, [r4, #16]
 80062e8:	6861      	ldr	r1, [r4, #4]
 80062ea:	4299      	cmp	r1, r3
 80062ec:	bfde      	ittt	le
 80062ee:	2330      	movle	r3, #48	@ 0x30
 80062f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062f4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80062f8:	1b92      	subs	r2, r2, r6
 80062fa:	6122      	str	r2, [r4, #16]
 80062fc:	f8cd a000 	str.w	sl, [sp]
 8006300:	464b      	mov	r3, r9
 8006302:	aa03      	add	r2, sp, #12
 8006304:	4621      	mov	r1, r4
 8006306:	4640      	mov	r0, r8
 8006308:	f7ff fee6 	bl	80060d8 <_printf_common>
 800630c:	3001      	adds	r0, #1
 800630e:	d14a      	bne.n	80063a6 <_printf_i+0x1f2>
 8006310:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006314:	b004      	add	sp, #16
 8006316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	f043 0320 	orr.w	r3, r3, #32
 8006320:	6023      	str	r3, [r4, #0]
 8006322:	4833      	ldr	r0, [pc, #204]	@ (80063f0 <_printf_i+0x23c>)
 8006324:	2778      	movs	r7, #120	@ 0x78
 8006326:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	6831      	ldr	r1, [r6, #0]
 800632e:	061f      	lsls	r7, r3, #24
 8006330:	f851 5b04 	ldr.w	r5, [r1], #4
 8006334:	d402      	bmi.n	800633c <_printf_i+0x188>
 8006336:	065f      	lsls	r7, r3, #25
 8006338:	bf48      	it	mi
 800633a:	b2ad      	uxthmi	r5, r5
 800633c:	6031      	str	r1, [r6, #0]
 800633e:	07d9      	lsls	r1, r3, #31
 8006340:	bf44      	itt	mi
 8006342:	f043 0320 	orrmi.w	r3, r3, #32
 8006346:	6023      	strmi	r3, [r4, #0]
 8006348:	b11d      	cbz	r5, 8006352 <_printf_i+0x19e>
 800634a:	2310      	movs	r3, #16
 800634c:	e7ac      	b.n	80062a8 <_printf_i+0xf4>
 800634e:	4827      	ldr	r0, [pc, #156]	@ (80063ec <_printf_i+0x238>)
 8006350:	e7e9      	b.n	8006326 <_printf_i+0x172>
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	f023 0320 	bic.w	r3, r3, #32
 8006358:	6023      	str	r3, [r4, #0]
 800635a:	e7f6      	b.n	800634a <_printf_i+0x196>
 800635c:	4616      	mov	r6, r2
 800635e:	e7bd      	b.n	80062dc <_printf_i+0x128>
 8006360:	6833      	ldr	r3, [r6, #0]
 8006362:	6825      	ldr	r5, [r4, #0]
 8006364:	6961      	ldr	r1, [r4, #20]
 8006366:	1d18      	adds	r0, r3, #4
 8006368:	6030      	str	r0, [r6, #0]
 800636a:	062e      	lsls	r6, r5, #24
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	d501      	bpl.n	8006374 <_printf_i+0x1c0>
 8006370:	6019      	str	r1, [r3, #0]
 8006372:	e002      	b.n	800637a <_printf_i+0x1c6>
 8006374:	0668      	lsls	r0, r5, #25
 8006376:	d5fb      	bpl.n	8006370 <_printf_i+0x1bc>
 8006378:	8019      	strh	r1, [r3, #0]
 800637a:	2300      	movs	r3, #0
 800637c:	6123      	str	r3, [r4, #16]
 800637e:	4616      	mov	r6, r2
 8006380:	e7bc      	b.n	80062fc <_printf_i+0x148>
 8006382:	6833      	ldr	r3, [r6, #0]
 8006384:	1d1a      	adds	r2, r3, #4
 8006386:	6032      	str	r2, [r6, #0]
 8006388:	681e      	ldr	r6, [r3, #0]
 800638a:	6862      	ldr	r2, [r4, #4]
 800638c:	2100      	movs	r1, #0
 800638e:	4630      	mov	r0, r6
 8006390:	f7f9 ff46 	bl	8000220 <memchr>
 8006394:	b108      	cbz	r0, 800639a <_printf_i+0x1e6>
 8006396:	1b80      	subs	r0, r0, r6
 8006398:	6060      	str	r0, [r4, #4]
 800639a:	6863      	ldr	r3, [r4, #4]
 800639c:	6123      	str	r3, [r4, #16]
 800639e:	2300      	movs	r3, #0
 80063a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063a4:	e7aa      	b.n	80062fc <_printf_i+0x148>
 80063a6:	6923      	ldr	r3, [r4, #16]
 80063a8:	4632      	mov	r2, r6
 80063aa:	4649      	mov	r1, r9
 80063ac:	4640      	mov	r0, r8
 80063ae:	47d0      	blx	sl
 80063b0:	3001      	adds	r0, #1
 80063b2:	d0ad      	beq.n	8006310 <_printf_i+0x15c>
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	079b      	lsls	r3, r3, #30
 80063b8:	d413      	bmi.n	80063e2 <_printf_i+0x22e>
 80063ba:	68e0      	ldr	r0, [r4, #12]
 80063bc:	9b03      	ldr	r3, [sp, #12]
 80063be:	4298      	cmp	r0, r3
 80063c0:	bfb8      	it	lt
 80063c2:	4618      	movlt	r0, r3
 80063c4:	e7a6      	b.n	8006314 <_printf_i+0x160>
 80063c6:	2301      	movs	r3, #1
 80063c8:	4632      	mov	r2, r6
 80063ca:	4649      	mov	r1, r9
 80063cc:	4640      	mov	r0, r8
 80063ce:	47d0      	blx	sl
 80063d0:	3001      	adds	r0, #1
 80063d2:	d09d      	beq.n	8006310 <_printf_i+0x15c>
 80063d4:	3501      	adds	r5, #1
 80063d6:	68e3      	ldr	r3, [r4, #12]
 80063d8:	9903      	ldr	r1, [sp, #12]
 80063da:	1a5b      	subs	r3, r3, r1
 80063dc:	42ab      	cmp	r3, r5
 80063de:	dcf2      	bgt.n	80063c6 <_printf_i+0x212>
 80063e0:	e7eb      	b.n	80063ba <_printf_i+0x206>
 80063e2:	2500      	movs	r5, #0
 80063e4:	f104 0619 	add.w	r6, r4, #25
 80063e8:	e7f5      	b.n	80063d6 <_printf_i+0x222>
 80063ea:	bf00      	nop
 80063ec:	0800685d 	.word	0x0800685d
 80063f0:	0800686e 	.word	0x0800686e

080063f4 <__sflush_r>:
 80063f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80063f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063fc:	0716      	lsls	r6, r2, #28
 80063fe:	4605      	mov	r5, r0
 8006400:	460c      	mov	r4, r1
 8006402:	d454      	bmi.n	80064ae <__sflush_r+0xba>
 8006404:	684b      	ldr	r3, [r1, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	dc02      	bgt.n	8006410 <__sflush_r+0x1c>
 800640a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800640c:	2b00      	cmp	r3, #0
 800640e:	dd48      	ble.n	80064a2 <__sflush_r+0xae>
 8006410:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006412:	2e00      	cmp	r6, #0
 8006414:	d045      	beq.n	80064a2 <__sflush_r+0xae>
 8006416:	2300      	movs	r3, #0
 8006418:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800641c:	682f      	ldr	r7, [r5, #0]
 800641e:	6a21      	ldr	r1, [r4, #32]
 8006420:	602b      	str	r3, [r5, #0]
 8006422:	d030      	beq.n	8006486 <__sflush_r+0x92>
 8006424:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006426:	89a3      	ldrh	r3, [r4, #12]
 8006428:	0759      	lsls	r1, r3, #29
 800642a:	d505      	bpl.n	8006438 <__sflush_r+0x44>
 800642c:	6863      	ldr	r3, [r4, #4]
 800642e:	1ad2      	subs	r2, r2, r3
 8006430:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006432:	b10b      	cbz	r3, 8006438 <__sflush_r+0x44>
 8006434:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006436:	1ad2      	subs	r2, r2, r3
 8006438:	2300      	movs	r3, #0
 800643a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800643c:	6a21      	ldr	r1, [r4, #32]
 800643e:	4628      	mov	r0, r5
 8006440:	47b0      	blx	r6
 8006442:	1c43      	adds	r3, r0, #1
 8006444:	89a3      	ldrh	r3, [r4, #12]
 8006446:	d106      	bne.n	8006456 <__sflush_r+0x62>
 8006448:	6829      	ldr	r1, [r5, #0]
 800644a:	291d      	cmp	r1, #29
 800644c:	d82b      	bhi.n	80064a6 <__sflush_r+0xb2>
 800644e:	4a2a      	ldr	r2, [pc, #168]	@ (80064f8 <__sflush_r+0x104>)
 8006450:	410a      	asrs	r2, r1
 8006452:	07d6      	lsls	r6, r2, #31
 8006454:	d427      	bmi.n	80064a6 <__sflush_r+0xb2>
 8006456:	2200      	movs	r2, #0
 8006458:	6062      	str	r2, [r4, #4]
 800645a:	04d9      	lsls	r1, r3, #19
 800645c:	6922      	ldr	r2, [r4, #16]
 800645e:	6022      	str	r2, [r4, #0]
 8006460:	d504      	bpl.n	800646c <__sflush_r+0x78>
 8006462:	1c42      	adds	r2, r0, #1
 8006464:	d101      	bne.n	800646a <__sflush_r+0x76>
 8006466:	682b      	ldr	r3, [r5, #0]
 8006468:	b903      	cbnz	r3, 800646c <__sflush_r+0x78>
 800646a:	6560      	str	r0, [r4, #84]	@ 0x54
 800646c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800646e:	602f      	str	r7, [r5, #0]
 8006470:	b1b9      	cbz	r1, 80064a2 <__sflush_r+0xae>
 8006472:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006476:	4299      	cmp	r1, r3
 8006478:	d002      	beq.n	8006480 <__sflush_r+0x8c>
 800647a:	4628      	mov	r0, r5
 800647c:	f7ff fbf2 	bl	8005c64 <_free_r>
 8006480:	2300      	movs	r3, #0
 8006482:	6363      	str	r3, [r4, #52]	@ 0x34
 8006484:	e00d      	b.n	80064a2 <__sflush_r+0xae>
 8006486:	2301      	movs	r3, #1
 8006488:	4628      	mov	r0, r5
 800648a:	47b0      	blx	r6
 800648c:	4602      	mov	r2, r0
 800648e:	1c50      	adds	r0, r2, #1
 8006490:	d1c9      	bne.n	8006426 <__sflush_r+0x32>
 8006492:	682b      	ldr	r3, [r5, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d0c6      	beq.n	8006426 <__sflush_r+0x32>
 8006498:	2b1d      	cmp	r3, #29
 800649a:	d001      	beq.n	80064a0 <__sflush_r+0xac>
 800649c:	2b16      	cmp	r3, #22
 800649e:	d11e      	bne.n	80064de <__sflush_r+0xea>
 80064a0:	602f      	str	r7, [r5, #0]
 80064a2:	2000      	movs	r0, #0
 80064a4:	e022      	b.n	80064ec <__sflush_r+0xf8>
 80064a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064aa:	b21b      	sxth	r3, r3
 80064ac:	e01b      	b.n	80064e6 <__sflush_r+0xf2>
 80064ae:	690f      	ldr	r7, [r1, #16]
 80064b0:	2f00      	cmp	r7, #0
 80064b2:	d0f6      	beq.n	80064a2 <__sflush_r+0xae>
 80064b4:	0793      	lsls	r3, r2, #30
 80064b6:	680e      	ldr	r6, [r1, #0]
 80064b8:	bf08      	it	eq
 80064ba:	694b      	ldreq	r3, [r1, #20]
 80064bc:	600f      	str	r7, [r1, #0]
 80064be:	bf18      	it	ne
 80064c0:	2300      	movne	r3, #0
 80064c2:	eba6 0807 	sub.w	r8, r6, r7
 80064c6:	608b      	str	r3, [r1, #8]
 80064c8:	f1b8 0f00 	cmp.w	r8, #0
 80064cc:	dde9      	ble.n	80064a2 <__sflush_r+0xae>
 80064ce:	6a21      	ldr	r1, [r4, #32]
 80064d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80064d2:	4643      	mov	r3, r8
 80064d4:	463a      	mov	r2, r7
 80064d6:	4628      	mov	r0, r5
 80064d8:	47b0      	blx	r6
 80064da:	2800      	cmp	r0, #0
 80064dc:	dc08      	bgt.n	80064f0 <__sflush_r+0xfc>
 80064de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064e6:	81a3      	strh	r3, [r4, #12]
 80064e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80064ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064f0:	4407      	add	r7, r0
 80064f2:	eba8 0800 	sub.w	r8, r8, r0
 80064f6:	e7e7      	b.n	80064c8 <__sflush_r+0xd4>
 80064f8:	dfbffffe 	.word	0xdfbffffe

080064fc <_fflush_r>:
 80064fc:	b538      	push	{r3, r4, r5, lr}
 80064fe:	690b      	ldr	r3, [r1, #16]
 8006500:	4605      	mov	r5, r0
 8006502:	460c      	mov	r4, r1
 8006504:	b913      	cbnz	r3, 800650c <_fflush_r+0x10>
 8006506:	2500      	movs	r5, #0
 8006508:	4628      	mov	r0, r5
 800650a:	bd38      	pop	{r3, r4, r5, pc}
 800650c:	b118      	cbz	r0, 8006516 <_fflush_r+0x1a>
 800650e:	6a03      	ldr	r3, [r0, #32]
 8006510:	b90b      	cbnz	r3, 8006516 <_fflush_r+0x1a>
 8006512:	f7ff f9ad 	bl	8005870 <__sinit>
 8006516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d0f3      	beq.n	8006506 <_fflush_r+0xa>
 800651e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006520:	07d0      	lsls	r0, r2, #31
 8006522:	d404      	bmi.n	800652e <_fflush_r+0x32>
 8006524:	0599      	lsls	r1, r3, #22
 8006526:	d402      	bmi.n	800652e <_fflush_r+0x32>
 8006528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800652a:	f7ff fb98 	bl	8005c5e <__retarget_lock_acquire_recursive>
 800652e:	4628      	mov	r0, r5
 8006530:	4621      	mov	r1, r4
 8006532:	f7ff ff5f 	bl	80063f4 <__sflush_r>
 8006536:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006538:	07da      	lsls	r2, r3, #31
 800653a:	4605      	mov	r5, r0
 800653c:	d4e4      	bmi.n	8006508 <_fflush_r+0xc>
 800653e:	89a3      	ldrh	r3, [r4, #12]
 8006540:	059b      	lsls	r3, r3, #22
 8006542:	d4e1      	bmi.n	8006508 <_fflush_r+0xc>
 8006544:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006546:	f7ff fb8b 	bl	8005c60 <__retarget_lock_release_recursive>
 800654a:	e7dd      	b.n	8006508 <_fflush_r+0xc>

0800654c <__swhatbuf_r>:
 800654c:	b570      	push	{r4, r5, r6, lr}
 800654e:	460c      	mov	r4, r1
 8006550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006554:	2900      	cmp	r1, #0
 8006556:	b096      	sub	sp, #88	@ 0x58
 8006558:	4615      	mov	r5, r2
 800655a:	461e      	mov	r6, r3
 800655c:	da0d      	bge.n	800657a <__swhatbuf_r+0x2e>
 800655e:	89a3      	ldrh	r3, [r4, #12]
 8006560:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006564:	f04f 0100 	mov.w	r1, #0
 8006568:	bf14      	ite	ne
 800656a:	2340      	movne	r3, #64	@ 0x40
 800656c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006570:	2000      	movs	r0, #0
 8006572:	6031      	str	r1, [r6, #0]
 8006574:	602b      	str	r3, [r5, #0]
 8006576:	b016      	add	sp, #88	@ 0x58
 8006578:	bd70      	pop	{r4, r5, r6, pc}
 800657a:	466a      	mov	r2, sp
 800657c:	f000 f848 	bl	8006610 <_fstat_r>
 8006580:	2800      	cmp	r0, #0
 8006582:	dbec      	blt.n	800655e <__swhatbuf_r+0x12>
 8006584:	9901      	ldr	r1, [sp, #4]
 8006586:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800658a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800658e:	4259      	negs	r1, r3
 8006590:	4159      	adcs	r1, r3
 8006592:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006596:	e7eb      	b.n	8006570 <__swhatbuf_r+0x24>

08006598 <__smakebuf_r>:
 8006598:	898b      	ldrh	r3, [r1, #12]
 800659a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800659c:	079d      	lsls	r5, r3, #30
 800659e:	4606      	mov	r6, r0
 80065a0:	460c      	mov	r4, r1
 80065a2:	d507      	bpl.n	80065b4 <__smakebuf_r+0x1c>
 80065a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80065a8:	6023      	str	r3, [r4, #0]
 80065aa:	6123      	str	r3, [r4, #16]
 80065ac:	2301      	movs	r3, #1
 80065ae:	6163      	str	r3, [r4, #20]
 80065b0:	b003      	add	sp, #12
 80065b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065b4:	ab01      	add	r3, sp, #4
 80065b6:	466a      	mov	r2, sp
 80065b8:	f7ff ffc8 	bl	800654c <__swhatbuf_r>
 80065bc:	9f00      	ldr	r7, [sp, #0]
 80065be:	4605      	mov	r5, r0
 80065c0:	4639      	mov	r1, r7
 80065c2:	4630      	mov	r0, r6
 80065c4:	f7ff fbba 	bl	8005d3c <_malloc_r>
 80065c8:	b948      	cbnz	r0, 80065de <__smakebuf_r+0x46>
 80065ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065ce:	059a      	lsls	r2, r3, #22
 80065d0:	d4ee      	bmi.n	80065b0 <__smakebuf_r+0x18>
 80065d2:	f023 0303 	bic.w	r3, r3, #3
 80065d6:	f043 0302 	orr.w	r3, r3, #2
 80065da:	81a3      	strh	r3, [r4, #12]
 80065dc:	e7e2      	b.n	80065a4 <__smakebuf_r+0xc>
 80065de:	89a3      	ldrh	r3, [r4, #12]
 80065e0:	6020      	str	r0, [r4, #0]
 80065e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065e6:	81a3      	strh	r3, [r4, #12]
 80065e8:	9b01      	ldr	r3, [sp, #4]
 80065ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80065ee:	b15b      	cbz	r3, 8006608 <__smakebuf_r+0x70>
 80065f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065f4:	4630      	mov	r0, r6
 80065f6:	f000 f81d 	bl	8006634 <_isatty_r>
 80065fa:	b128      	cbz	r0, 8006608 <__smakebuf_r+0x70>
 80065fc:	89a3      	ldrh	r3, [r4, #12]
 80065fe:	f023 0303 	bic.w	r3, r3, #3
 8006602:	f043 0301 	orr.w	r3, r3, #1
 8006606:	81a3      	strh	r3, [r4, #12]
 8006608:	89a3      	ldrh	r3, [r4, #12]
 800660a:	431d      	orrs	r5, r3
 800660c:	81a5      	strh	r5, [r4, #12]
 800660e:	e7cf      	b.n	80065b0 <__smakebuf_r+0x18>

08006610 <_fstat_r>:
 8006610:	b538      	push	{r3, r4, r5, lr}
 8006612:	4d07      	ldr	r5, [pc, #28]	@ (8006630 <_fstat_r+0x20>)
 8006614:	2300      	movs	r3, #0
 8006616:	4604      	mov	r4, r0
 8006618:	4608      	mov	r0, r1
 800661a:	4611      	mov	r1, r2
 800661c:	602b      	str	r3, [r5, #0]
 800661e:	f7fa fcbd 	bl	8000f9c <_fstat>
 8006622:	1c43      	adds	r3, r0, #1
 8006624:	d102      	bne.n	800662c <_fstat_r+0x1c>
 8006626:	682b      	ldr	r3, [r5, #0]
 8006628:	b103      	cbz	r3, 800662c <_fstat_r+0x1c>
 800662a:	6023      	str	r3, [r4, #0]
 800662c:	bd38      	pop	{r3, r4, r5, pc}
 800662e:	bf00      	nop
 8006630:	200003b8 	.word	0x200003b8

08006634 <_isatty_r>:
 8006634:	b538      	push	{r3, r4, r5, lr}
 8006636:	4d06      	ldr	r5, [pc, #24]	@ (8006650 <_isatty_r+0x1c>)
 8006638:	2300      	movs	r3, #0
 800663a:	4604      	mov	r4, r0
 800663c:	4608      	mov	r0, r1
 800663e:	602b      	str	r3, [r5, #0]
 8006640:	f7fa fcbc 	bl	8000fbc <_isatty>
 8006644:	1c43      	adds	r3, r0, #1
 8006646:	d102      	bne.n	800664e <_isatty_r+0x1a>
 8006648:	682b      	ldr	r3, [r5, #0]
 800664a:	b103      	cbz	r3, 800664e <_isatty_r+0x1a>
 800664c:	6023      	str	r3, [r4, #0]
 800664e:	bd38      	pop	{r3, r4, r5, pc}
 8006650:	200003b8 	.word	0x200003b8

08006654 <_sbrk_r>:
 8006654:	b538      	push	{r3, r4, r5, lr}
 8006656:	4d06      	ldr	r5, [pc, #24]	@ (8006670 <_sbrk_r+0x1c>)
 8006658:	2300      	movs	r3, #0
 800665a:	4604      	mov	r4, r0
 800665c:	4608      	mov	r0, r1
 800665e:	602b      	str	r3, [r5, #0]
 8006660:	f7fa fcc4 	bl	8000fec <_sbrk>
 8006664:	1c43      	adds	r3, r0, #1
 8006666:	d102      	bne.n	800666e <_sbrk_r+0x1a>
 8006668:	682b      	ldr	r3, [r5, #0]
 800666a:	b103      	cbz	r3, 800666e <_sbrk_r+0x1a>
 800666c:	6023      	str	r3, [r4, #0]
 800666e:	bd38      	pop	{r3, r4, r5, pc}
 8006670:	200003b8 	.word	0x200003b8

08006674 <_init>:
 8006674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006676:	bf00      	nop
 8006678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800667a:	bc08      	pop	{r3}
 800667c:	469e      	mov	lr, r3
 800667e:	4770      	bx	lr

08006680 <_fini>:
 8006680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006682:	bf00      	nop
 8006684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006686:	bc08      	pop	{r3}
 8006688:	469e      	mov	lr, r3
 800668a:	4770      	bx	lr
