
STM32_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a24  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08006c04  08006c04  00007c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e18  08006e18  00008070  2**0
                  CONTENTS
  4 .ARM          00000008  08006e18  08006e18  00007e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e20  08006e20  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e20  08006e20  00007e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e24  08006e24  00007e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006e28  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000070  08006e98  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08006e98  00008374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001222b  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000262b  00000000  00000000  0001a2cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  0001c8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000efb  00000000  00000000  0001dc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020af3  00000000  00000000  0001eb63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013705  00000000  00000000  0003f656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9222  00000000  00000000  00052d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012bf7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c78  00000000  00000000  0012bfc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00131c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006bec 	.word	0x08006bec

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08006bec 	.word	0x08006bec

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b04:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b08:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d013      	beq.n	8000b3c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b14:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b18:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000b1c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d00b      	beq.n	8000b3c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b24:	e000      	b.n	8000b28 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b26:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b28:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d0f9      	beq.n	8000b26 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b32:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000b3c:	687b      	ldr	r3, [r7, #4]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	0000      	movs	r0, r0
 8000b4c:	0000      	movs	r0, r0
	...

08000b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	@ 0x28
 8000b54:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b56:	f000 fea8 	bl	80018aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b5a:	f000 fa27 	bl	8000fac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b5e:	f000 fc01 	bl	8001364 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000b62:	f000 fb4d 	bl	8001200 <MX_SPI2_Init>
  MX_ADC2_Init();
 8000b66:	f000 fae5 	bl	8001134 <MX_ADC2_Init>
  MX_ADC1_Init();
 8000b6a:	f000 fa6b 	bl	8001044 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000b6e:	f000 fb85 	bl	800127c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000b72:	2201      	movs	r2, #1
 8000b74:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b78:	48a9      	ldr	r0, [pc, #676]	@ (8000e20 <main+0x2d0>)
 8000b7a:	f002 fd35 	bl	80035e8 <HAL_GPIO_WritePin>
	printf("Requesting SPI Identifier from Pressure Sensor... \r\n");
 8000b7e:	48a9      	ldr	r0, [pc, #676]	@ (8000e24 <main+0x2d4>)
 8000b80:	f005 f9d0 	bl	8005f24 <puts>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b8a:	48a5      	ldr	r0, [pc, #660]	@ (8000e20 <main+0x2d0>)
 8000b8c:	f002 fd2c 	bl	80035e8 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) &request_identifier,
 8000b90:	1dba      	adds	r2, r7, #6
 8000b92:	2364      	movs	r3, #100	@ 0x64
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	2301      	movs	r3, #1
 8000b98:	49a3      	ldr	r1, [pc, #652]	@ (8000e28 <main+0x2d8>)
 8000b9a:	48a4      	ldr	r0, [pc, #656]	@ (8000e2c <main+0x2dc>)
 8000b9c:	f003 fd9b 	bl	80046d6 <HAL_SPI_TransmitReceive>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d002      	beq.n	8000bac <main+0x5c>
			(uint8_t*) &SPI_buffer, 1, 100) != HAL_OK) {
		printf("ERROR: SPI failed the HAL_OK check \r\n");
 8000ba6:	48a2      	ldr	r0, [pc, #648]	@ (8000e30 <main+0x2e0>)
 8000ba8:	f005 f9bc 	bl	8005f24 <puts>
	}
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bb2:	489b      	ldr	r0, [pc, #620]	@ (8000e20 <main+0x2d0>)
 8000bb4:	f002 fd18 	bl	80035e8 <HAL_GPIO_WritePin>
	// Check if received data is notifying about any errors
	// Check for communication error
	if (SPI_buffer == com_error_mask) {
 8000bb8:	88fb      	ldrh	r3, [r7, #6]
 8000bba:	2201      	movs	r2, #1
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d103      	bne.n	8000bc8 <main+0x78>
		printf("ERROR: Communication Error \r\n");
 8000bc0:	489c      	ldr	r0, [pc, #624]	@ (8000e34 <main+0x2e4>)
 8000bc2:	f005 f9af 	bl	8005f24 <puts>
 8000bc6:	e04b      	b.n	8000c60 <main+0x110>
	}
	// Check for FEC Error
	else if ((SPI_buffer & FEC_error_mask) != 0) {
 8000bc8:	88fb      	ldrh	r3, [r7, #6]
 8000bca:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000bce:	4013      	ands	r3, r2
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d003      	beq.n	8000bde <main+0x8e>
		printf("ERROR: FEC Error \r\n");
 8000bd6:	4898      	ldr	r0, [pc, #608]	@ (8000e38 <main+0x2e8>)
 8000bd8:	f005 f9a4 	bl	8005f24 <puts>
 8000bdc:	e040      	b.n	8000c60 <main+0x110>
	}
	// Check for Acquisition Chain Failure
	else if ((SPI_buffer & no_error_mask) == Diag1_mask) {
 8000bde:	88fb      	ldrh	r3, [r7, #6]
 8000be0:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000be4:	4013      	ands	r3, r2
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d103      	bne.n	8000bf8 <main+0xa8>
		printf("ERROR: Acquisition chain failure \r\n");
 8000bf0:	4892      	ldr	r0, [pc, #584]	@ (8000e3c <main+0x2ec>)
 8000bf2:	f005 f997 	bl	8005f24 <puts>
 8000bf6:	e033      	b.n	8000c60 <main+0x110>
	}
	// Check for Sensor Cell Failure
	else if ((SPI_buffer & Diag2_mask) != 0) {
 8000bf8:	88fb      	ldrh	r3, [r7, #6]
 8000bfa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bfe:	4013      	ands	r3, r2
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <main+0xbe>
		printf("ERROR: Sensor cell failure \r\n");
 8000c06:	488e      	ldr	r0, [pc, #568]	@ (8000e40 <main+0x2f0>)
 8000c08:	f005 f98c 	bl	8005f24 <puts>
 8000c0c:	e028      	b.n	8000c60 <main+0x110>
	}
	// Check if pressure is above measuring range maximum
	else if ((SPI_buffer & no_error_mask) == pressure_over_max_mask) {
 8000c0e:	88fb      	ldrh	r3, [r7, #6]
 8000c10:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000c14:	4013      	ands	r3, r2
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d103      	bne.n	8000c28 <main+0xd8>
		printf("ERROR: Pressure above measuring range maximum \r\n");
 8000c20:	4888      	ldr	r0, [pc, #544]	@ (8000e44 <main+0x2f4>)
 8000c22:	f005 f97f 	bl	8005f24 <puts>
 8000c26:	e01b      	b.n	8000c60 <main+0x110>
	}
	// Check if pressure is below measuring range minimum
	else if ((SPI_buffer & pressure_under_min_mask) != 0) {
 8000c28:	88fb      	ldrh	r3, [r7, #6]
 8000c2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c2e:	4013      	ands	r3, r2
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d003      	beq.n	8000c3e <main+0xee>
		printf("ERROR: Pressure below measuring range minimum \r\n");
 8000c36:	4884      	ldr	r0, [pc, #528]	@ (8000e48 <main+0x2f8>)
 8000c38:	f005 f974 	bl	8005f24 <puts>
 8000c3c:	e010      	b.n	8000c60 <main+0x110>
	}
	// Check if no errors were detected
	else if ((SPI_buffer & no_error_mask) == no_error_mask) {
 8000c3e:	88fb      	ldrh	r3, [r7, #6]
 8000c40:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000c44:	4013      	ands	r3, r2
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d107      	bne.n	8000c60 <main+0x110>
		printf("No errors detected \r\n");
 8000c50:	487e      	ldr	r0, [pc, #504]	@ (8000e4c <main+0x2fc>)
 8000c52:	f005 f967 	bl	8005f24 <puts>
		printf("Identifier: %u \r\n", SPI_buffer);
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	487d      	ldr	r0, [pc, #500]	@ (8000e50 <main+0x300>)
 8000c5c:	f005 f8fa 	bl	8005e54 <iprintf>
	}

	// Calibrate ADCs
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000c60:	217f      	movs	r1, #127	@ 0x7f
 8000c62:	487c      	ldr	r0, [pc, #496]	@ (8000e54 <main+0x304>)
 8000c64:	f002 f954 	bl	8002f10 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000c68:	217f      	movs	r1, #127	@ 0x7f
 8000c6a:	487b      	ldr	r0, [pc, #492]	@ (8000e58 <main+0x308>)
 8000c6c:	f002 f950 	bl	8002f10 <HAL_ADCEx_Calibration_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		// Toggle the LEDs
		HAL_GPIO_TogglePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin);
 8000c70:	2140      	movs	r1, #64	@ 0x40
 8000c72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c76:	f002 fccf 	bl	8003618 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000c7a:	2064      	movs	r0, #100	@ 0x64
 8000c7c:	f000 fe86 	bl	800198c <HAL_Delay>
		HAL_GPIO_TogglePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin);
 8000c80:	2140      	movs	r1, #64	@ 0x40
 8000c82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c86:	f002 fcc7 	bl	8003618 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, PRS_Ready_Pin);
 8000c8a:	2140      	movs	r1, #64	@ 0x40
 8000c8c:	4864      	ldr	r0, [pc, #400]	@ (8000e20 <main+0x2d0>)
 8000c8e:	f002 fcc3 	bl	8003618 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000c92:	2064      	movs	r0, #100	@ 0x64
 8000c94:	f000 fe7a 	bl	800198c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, PRS_Ready_Pin);
 8000c98:	2140      	movs	r1, #64	@ 0x40
 8000c9a:	4861      	ldr	r0, [pc, #388]	@ (8000e20 <main+0x2d0>)
 8000c9c:	f002 fcbc 	bl	8003618 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, System_Ready_Pin);
 8000ca0:	2180      	movs	r1, #128	@ 0x80
 8000ca2:	485f      	ldr	r0, [pc, #380]	@ (8000e20 <main+0x2d0>)
 8000ca4:	f002 fcb8 	bl	8003618 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000ca8:	2064      	movs	r0, #100	@ 0x64
 8000caa:	f000 fe6f 	bl	800198c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, System_Ready_Pin);
 8000cae:	2180      	movs	r1, #128	@ 0x80
 8000cb0:	485b      	ldr	r0, [pc, #364]	@ (8000e20 <main+0x2d0>)
 8000cb2:	f002 fcb1 	bl	8003618 <HAL_GPIO_TogglePin>

		// Measure Pod Pressure
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cbc:	4858      	ldr	r0, [pc, #352]	@ (8000e20 <main+0x2d0>)
 8000cbe:	f002 fc93 	bl	80035e8 <HAL_GPIO_WritePin>
		if (HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) &request_pressure,
 8000cc2:	1dba      	adds	r2, r7, #6
 8000cc4:	2364      	movs	r3, #100	@ 0x64
 8000cc6:	9300      	str	r3, [sp, #0]
 8000cc8:	2301      	movs	r3, #1
 8000cca:	4964      	ldr	r1, [pc, #400]	@ (8000e5c <main+0x30c>)
 8000ccc:	4857      	ldr	r0, [pc, #348]	@ (8000e2c <main+0x2dc>)
 8000cce:	f003 fd02 	bl	80046d6 <HAL_SPI_TransmitReceive>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d002      	beq.n	8000cde <main+0x18e>
				(uint8_t*) &SPI_buffer, 1, 100) != HAL_OK) {
			printf("ERROR: SPI failed the HAL_OK check \r\n");
 8000cd8:	4855      	ldr	r0, [pc, #340]	@ (8000e30 <main+0x2e0>)
 8000cda:	f005 f923 	bl	8005f24 <puts>
		}
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ce4:	484e      	ldr	r0, [pc, #312]	@ (8000e20 <main+0x2d0>)
 8000ce6:	f002 fc7f 	bl	80035e8 <HAL_GPIO_WritePin>
		// Check if received data is notifying about any errors
		// Check for communication error
		if (SPI_buffer == com_error_mask) {
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	2201      	movs	r2, #1
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d103      	bne.n	8000cfa <main+0x1aa>
			printf("ERROR: Communication Error \r\n");
 8000cf2:	4850      	ldr	r0, [pc, #320]	@ (8000e34 <main+0x2e4>)
 8000cf4:	f005 f916 	bl	8005f24 <puts>
 8000cf8:	e071      	b.n	8000dde <main+0x28e>
		}
		// Check for FEC Error
		else if ((SPI_buffer & FEC_error_mask) != 0) {
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d00:	4013      	ands	r3, r2
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d003      	beq.n	8000d10 <main+0x1c0>
			printf("ERROR: FEC Error \r\n");
 8000d08:	484b      	ldr	r0, [pc, #300]	@ (8000e38 <main+0x2e8>)
 8000d0a:	f005 f90b 	bl	8005f24 <puts>
 8000d0e:	e066      	b.n	8000dde <main+0x28e>
		}
		// Check for Acquisition Chain Failure
		else if ((SPI_buffer & no_error_mask) == Diag1_mask) {
 8000d10:	88fb      	ldrh	r3, [r7, #6]
 8000d12:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000d16:	4013      	ands	r3, r2
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d108      	bne.n	8000d34 <main+0x1e4>
			printf("ERROR: Acquisition chain failure \r\n");
 8000d22:	4846      	ldr	r0, [pc, #280]	@ (8000e3c <main+0x2ec>)
 8000d24:	f005 f8fe 	bl	8005f24 <puts>
			printf("Received bytes = %u", SPI_buffer);
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	484c      	ldr	r0, [pc, #304]	@ (8000e60 <main+0x310>)
 8000d2e:	f005 f891 	bl	8005e54 <iprintf>
 8000d32:	e054      	b.n	8000dde <main+0x28e>
		}
		// Check for Sensor Cell Failure
		else if ((SPI_buffer & Diag2_mask) != 0) {
 8000d34:	88fb      	ldrh	r3, [r7, #6]
 8000d36:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d003      	beq.n	8000d4a <main+0x1fa>
			printf("ERROR: Sensor cell failure \r\n");
 8000d42:	483f      	ldr	r0, [pc, #252]	@ (8000e40 <main+0x2f0>)
 8000d44:	f005 f8ee 	bl	8005f24 <puts>
 8000d48:	e049      	b.n	8000dde <main+0x28e>
		}
		// Check if pressure is above measuring range maximum
		else if ((SPI_buffer & no_error_mask) == pressure_over_max_mask) {
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000d50:	4013      	ands	r3, r2
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d103      	bne.n	8000d64 <main+0x214>
			printf("ERROR: Pressure above measuring range maximum \r\n");
 8000d5c:	4839      	ldr	r0, [pc, #228]	@ (8000e44 <main+0x2f4>)
 8000d5e:	f005 f8e1 	bl	8005f24 <puts>
 8000d62:	e03c      	b.n	8000dde <main+0x28e>
		}
		// Check if pressure is below measuring range minimum
		else if ((SPI_buffer & pressure_under_min_mask) != 0) {
 8000d64:	88fb      	ldrh	r3, [r7, #6]
 8000d66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d003      	beq.n	8000d7a <main+0x22a>
			printf("ERROR: Pressure below measuring range minimum \r\n");
 8000d72:	4835      	ldr	r0, [pc, #212]	@ (8000e48 <main+0x2f8>)
 8000d74:	f005 f8d6 	bl	8005f24 <puts>
 8000d78:	e031      	b.n	8000dde <main+0x28e>
		}
		// Check if no errors were detected
		else if ((SPI_buffer & no_error_mask) == no_error_mask) {
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000d80:	4013      	ands	r3, r2
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d128      	bne.n	8000dde <main+0x28e>
			printf("No errors detected \r\n");
 8000d8c:	482f      	ldr	r0, [pc, #188]	@ (8000e4c <main+0x2fc>)
 8000d8e:	f005 f8c9 	bl	8005f24 <puts>
			// Get the pressure data using a bit mask and right shift operator to get rid of parity bit
			pressure_LSB = (SPI_buffer & data_mask) >> 1;
 8000d92:	88fb      	ldrh	r3, [r7, #6]
 8000d94:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8000d98:	4013      	ands	r3, r2
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	085b      	lsrs	r3, r3, #1
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	4b30      	ldr	r3, [pc, #192]	@ (8000e64 <main+0x314>)
 8000da2:	801a      	strh	r2, [r3, #0]
			// Convert pressure from LSB to kPa using transfer function from data sheet
			pressure_Bar = ((float) pressure_LSB - offs_p) / S_p;
 8000da4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e64 <main+0x314>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	ee07 3a90 	vmov	s15, r3
 8000dac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000db0:	4b2d      	ldr	r3, [pc, #180]	@ (8000e68 <main+0x318>)
 8000db2:	edd3 7a00 	vldr	s15, [r3]
 8000db6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000dba:	4b2c      	ldr	r3, [pc, #176]	@ (8000e6c <main+0x31c>)
 8000dbc:	ed93 7a00 	vldr	s14, [r3]
 8000dc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dc4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e70 <main+0x320>)
 8000dc6:	edc3 7a00 	vstr	s15, [r3]
			// Convert pressure from Bar to kPa
			// pressure_Bar = pressure_Bar/100;
			// Print pressure value
			printf("Measured pressure: %i kPa \r\n", (int) pressure_Bar);
 8000dca:	4b29      	ldr	r3, [pc, #164]	@ (8000e70 <main+0x320>)
 8000dcc:	edd3 7a00 	vldr	s15, [r3]
 8000dd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dd4:	ee17 1a90 	vmov	r1, s15
 8000dd8:	4826      	ldr	r0, [pc, #152]	@ (8000e74 <main+0x324>)
 8000dda:	f005 f83b 	bl	8005e54 <iprintf>
		}

		// Start ADC1 Conversion
		HAL_ADC_Start(&hadc1);
 8000dde:	481d      	ldr	r0, [pc, #116]	@ (8000e54 <main+0x304>)
 8000de0:	f001 f9cc 	bl	800217c <HAL_ADC_Start>
		// Poll ADC1 Peripheral & TimeOut = 1mSec
		HAL_ADC_PollForConversion(&hadc1, 1);
 8000de4:	2101      	movs	r1, #1
 8000de6:	481b      	ldr	r0, [pc, #108]	@ (8000e54 <main+0x304>)
 8000de8:	f001 fa84 	bl	80022f4 <HAL_ADC_PollForConversion>
		// Read The ADC Conversion Result & Print it
		low_pressure_raw = HAL_ADC_GetValue(&hadc1);
 8000dec:	4819      	ldr	r0, [pc, #100]	@ (8000e54 <main+0x304>)
 8000dee:	f001 fb59 	bl	80024a4 <HAL_ADC_GetValue>
 8000df2:	4603      	mov	r3, r0
 8000df4:	82fb      	strh	r3, [r7, #22]
		low_pressure_voltage = (int)low_pressure_raw*3300/(4095); // mV
 8000df6:	8afb      	ldrh	r3, [r7, #22]
 8000df8:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000dfc:	fb02 f303 	mul.w	r3, r2, r3
 8000e00:	4a1d      	ldr	r2, [pc, #116]	@ (8000e78 <main+0x328>)
 8000e02:	fb82 1203 	smull	r1, r2, r2, r3
 8000e06:	441a      	add	r2, r3
 8000e08:	12d2      	asrs	r2, r2, #11
 8000e0a:	17db      	asrs	r3, r3, #31
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	613b      	str	r3, [r7, #16]
		if (low_pressure_voltage <= 120*0.004*1000) {
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000e16:	dc31      	bgt.n	8000e7c <main+0x32c>
			low_pressure = 0; // mBar
 8000e18:	f04f 0300 	mov.w	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
 8000e1e:	e055      	b.n	8000ecc <main+0x37c>
 8000e20:	48000400 	.word	0x48000400
 8000e24:	08006c04 	.word	0x08006c04
 8000e28:	08006dd0 	.word	0x08006dd0
 8000e2c:	20000164 	.word	0x20000164
 8000e30:	08006c38 	.word	0x08006c38
 8000e34:	08006c60 	.word	0x08006c60
 8000e38:	08006c80 	.word	0x08006c80
 8000e3c:	08006c94 	.word	0x08006c94
 8000e40:	08006cb8 	.word	0x08006cb8
 8000e44:	08006cd8 	.word	0x08006cd8
 8000e48:	08006d08 	.word	0x08006d08
 8000e4c:	08006d38 	.word	0x08006d38
 8000e50:	08006d50 	.word	0x08006d50
 8000e54:	2000008c 	.word	0x2000008c
 8000e58:	200000f8 	.word	0x200000f8
 8000e5c:	08006dce 	.word	0x08006dce
 8000e60:	08006d64 	.word	0x08006d64
 8000e64:	20000214 	.word	0x20000214
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	20000004 	.word	0x20000004
 8000e70:	20000218 	.word	0x20000218
 8000e74:	08006d78 	.word	0x08006d78
 8000e78:	80080081 	.word	0x80080081
		}
		else {
			low_pressure = ((float)low_pressure_voltage-120*0.004*1000)*10000/(120*(0.02-0.004)*1000); // mBar
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	ee07 3a90 	vmov	s15, r3
 8000e82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e86:	ee17 0a90 	vmov	r0, s15
 8000e8a:	f7ff fb7d 	bl	8000588 <__aeabi_f2d>
 8000e8e:	f04f 0200 	mov.w	r2, #0
 8000e92:	4b3f      	ldr	r3, [pc, #252]	@ (8000f90 <main+0x440>)
 8000e94:	f7ff fa18 	bl	80002c8 <__aeabi_dsub>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	a339      	add	r3, pc, #228	@ (adr r3, 8000f88 <main+0x438>)
 8000ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea6:	f7ff fbc7 	bl	8000638 <__aeabi_dmul>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	4610      	mov	r0, r2
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f04f 0200 	mov.w	r2, #0
 8000eb6:	4b37      	ldr	r3, [pc, #220]	@ (8000f94 <main+0x444>)
 8000eb8:	f7ff fce8 	bl	800088c <__aeabi_ddiv>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f7ff fdca 	bl	8000a5c <__aeabi_d2f>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	61fb      	str	r3, [r7, #28]
		}
		printf("Low Pressure = %i mBar\r\n", (int)low_pressure);
 8000ecc:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ed0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ed4:	ee17 1a90 	vmov	r1, s15
 8000ed8:	482f      	ldr	r0, [pc, #188]	@ (8000f98 <main+0x448>)
 8000eda:	f004 ffbb 	bl	8005e54 <iprintf>

		// Start ADC2 Conversion
		HAL_ADC_Start(&hadc2);
 8000ede:	482f      	ldr	r0, [pc, #188]	@ (8000f9c <main+0x44c>)
 8000ee0:	f001 f94c 	bl	800217c <HAL_ADC_Start>
		// Poll ADC2 Peripheral & TimeOut = 1mSec
		HAL_ADC_PollForConversion(&hadc2, 1);
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	482d      	ldr	r0, [pc, #180]	@ (8000f9c <main+0x44c>)
 8000ee8:	f001 fa04 	bl	80022f4 <HAL_ADC_PollForConversion>
		// Read The ADC Conversion Result & Print it
		high_pressure_raw = HAL_ADC_GetValue(&hadc2);
 8000eec:	482b      	ldr	r0, [pc, #172]	@ (8000f9c <main+0x44c>)
 8000eee:	f001 fad9 	bl	80024a4 <HAL_ADC_GetValue>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	81fb      	strh	r3, [r7, #14]
		high_pressure_voltage = (int)high_pressure_raw*3300/4095; // mV
 8000ef6:	89fb      	ldrh	r3, [r7, #14]
 8000ef8:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000efc:	fb02 f303 	mul.w	r3, r2, r3
 8000f00:	4a27      	ldr	r2, [pc, #156]	@ (8000fa0 <main+0x450>)
 8000f02:	fb82 1203 	smull	r1, r2, r2, r3
 8000f06:	441a      	add	r2, r3
 8000f08:	12d2      	asrs	r2, r2, #11
 8000f0a:	17db      	asrs	r3, r3, #31
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	60bb      	str	r3, [r7, #8]
		if (high_pressure_voltage <= 120*0.004*1000) {
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000f16:	dc03      	bgt.n	8000f20 <main+0x3d0>
			high_pressure = 0; // mBar
 8000f18:	f04f 0300 	mov.w	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
 8000f1e:	e027      	b.n	8000f70 <main+0x420>
		}
		else {
			high_pressure = ((float)high_pressure_voltage-120*0.004*1000)*250/(120*(0.02-0.004)*1000); // Bar
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	ee07 3a90 	vmov	s15, r3
 8000f26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f2a:	ee17 0a90 	vmov	r0, s15
 8000f2e:	f7ff fb2b 	bl	8000588 <__aeabi_f2d>
 8000f32:	f04f 0200 	mov.w	r2, #0
 8000f36:	4b16      	ldr	r3, [pc, #88]	@ (8000f90 <main+0x440>)
 8000f38:	f7ff f9c6 	bl	80002c8 <__aeabi_dsub>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	460b      	mov	r3, r1
 8000f40:	4610      	mov	r0, r2
 8000f42:	4619      	mov	r1, r3
 8000f44:	f04f 0200 	mov.w	r2, #0
 8000f48:	4b16      	ldr	r3, [pc, #88]	@ (8000fa4 <main+0x454>)
 8000f4a:	f7ff fb75 	bl	8000638 <__aeabi_dmul>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	4610      	mov	r0, r2
 8000f54:	4619      	mov	r1, r3
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <main+0x444>)
 8000f5c:	f7ff fc96 	bl	800088c <__aeabi_ddiv>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	4610      	mov	r0, r2
 8000f66:	4619      	mov	r1, r3
 8000f68:	f7ff fd78 	bl	8000a5c <__aeabi_d2f>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	61bb      	str	r3, [r7, #24]
		}
		printf("High Pressure = %i Bar\r\n", (int)high_pressure);
 8000f70:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f78:	ee17 1a90 	vmov	r1, s15
 8000f7c:	480a      	ldr	r0, [pc, #40]	@ (8000fa8 <main+0x458>)
 8000f7e:	f004 ff69 	bl	8005e54 <iprintf>
		HAL_GPIO_TogglePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin);
 8000f82:	e675      	b.n	8000c70 <main+0x120>
 8000f84:	f3af 8000 	nop.w
 8000f88:	00000000 	.word	0x00000000
 8000f8c:	40c38800 	.word	0x40c38800
 8000f90:	407e0000 	.word	0x407e0000
 8000f94:	409e0000 	.word	0x409e0000
 8000f98:	08006d98 	.word	0x08006d98
 8000f9c:	200000f8 	.word	0x200000f8
 8000fa0:	80080081 	.word	0x80080081
 8000fa4:	406f4000 	.word	0x406f4000
 8000fa8:	08006db4 	.word	0x08006db4

08000fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b094      	sub	sp, #80	@ 0x50
 8000fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb2:	f107 0318 	add.w	r3, r7, #24
 8000fb6:	2238      	movs	r2, #56	@ 0x38
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f005 f892 	bl	80060e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fd2:	f002 fb3b 	bl	800364c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fde:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe0:	2340      	movs	r3, #64	@ 0x40
 8000fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000fec:	2304      	movs	r3, #4
 8000fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000ff0:	234b      	movs	r3, #75	@ 0x4b
 8000ff2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001000:	f107 0318 	add.w	r3, r7, #24
 8001004:	4618      	mov	r0, r3
 8001006:	f002 fbd5 	bl	80037b4 <HAL_RCC_OscConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001010:	f000 fa28 	bl	8001464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001014:	230f      	movs	r3, #15
 8001016:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001018:	2303      	movs	r3, #3
 800101a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	2104      	movs	r1, #4
 800102c:	4618      	mov	r0, r3
 800102e:	f002 fed3 	bl	8003dd8 <HAL_RCC_ClockConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001038:	f000 fa14 	bl	8001464 <Error_Handler>
  }
}
 800103c:	bf00      	nop
 800103e:	3750      	adds	r7, #80	@ 0x50
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08c      	sub	sp, #48	@ 0x30
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800104a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	2220      	movs	r2, #32
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f005 f841 	bl	80060e4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001062:	4b32      	ldr	r3, [pc, #200]	@ (800112c <MX_ADC1_Init+0xe8>)
 8001064:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001068:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800106a:	4b30      	ldr	r3, [pc, #192]	@ (800112c <MX_ADC1_Init+0xe8>)
 800106c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001070:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001072:	4b2e      	ldr	r3, [pc, #184]	@ (800112c <MX_ADC1_Init+0xe8>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001078:	4b2c      	ldr	r3, [pc, #176]	@ (800112c <MX_ADC1_Init+0xe8>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800107e:	4b2b      	ldr	r3, [pc, #172]	@ (800112c <MX_ADC1_Init+0xe8>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001084:	4b29      	ldr	r3, [pc, #164]	@ (800112c <MX_ADC1_Init+0xe8>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800108a:	4b28      	ldr	r3, [pc, #160]	@ (800112c <MX_ADC1_Init+0xe8>)
 800108c:	2204      	movs	r2, #4
 800108e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001090:	4b26      	ldr	r3, [pc, #152]	@ (800112c <MX_ADC1_Init+0xe8>)
 8001092:	2200      	movs	r2, #0
 8001094:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001096:	4b25      	ldr	r3, [pc, #148]	@ (800112c <MX_ADC1_Init+0xe8>)
 8001098:	2200      	movs	r2, #0
 800109a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800109c:	4b23      	ldr	r3, [pc, #140]	@ (800112c <MX_ADC1_Init+0xe8>)
 800109e:	2201      	movs	r2, #1
 80010a0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a2:	4b22      	ldr	r3, [pc, #136]	@ (800112c <MX_ADC1_Init+0xe8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010aa:	4b20      	ldr	r3, [pc, #128]	@ (800112c <MX_ADC1_Init+0xe8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b0:	4b1e      	ldr	r3, [pc, #120]	@ (800112c <MX_ADC1_Init+0xe8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b6:	4b1d      	ldr	r3, [pc, #116]	@ (800112c <MX_ADC1_Init+0xe8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010be:	4b1b      	ldr	r3, [pc, #108]	@ (800112c <MX_ADC1_Init+0xe8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010c4:	4b19      	ldr	r3, [pc, #100]	@ (800112c <MX_ADC1_Init+0xe8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010cc:	4817      	ldr	r0, [pc, #92]	@ (800112c <MX_ADC1_Init+0xe8>)
 80010ce:	f000 fed1 	bl	8001e74 <HAL_ADC_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010d8:	f000 f9c4 	bl	8001464 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010dc:	2300      	movs	r3, #0
 80010de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e4:	4619      	mov	r1, r3
 80010e6:	4811      	ldr	r0, [pc, #68]	@ (800112c <MX_ADC1_Init+0xe8>)
 80010e8:	f001 ff74 	bl	8002fd4 <HAL_ADCEx_MultiModeConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010f2:	f000 f9b7 	bl	8001464 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <MX_ADC1_Init+0xec>)
 80010f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010fa:	2306      	movs	r3, #6
 80010fc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80010fe:	2304      	movs	r3, #4
 8001100:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001102:	237f      	movs	r3, #127	@ 0x7f
 8001104:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001106:	2304      	movs	r3, #4
 8001108:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	4619      	mov	r1, r3
 8001112:	4806      	ldr	r0, [pc, #24]	@ (800112c <MX_ADC1_Init+0xe8>)
 8001114:	f001 f9d4 	bl	80024c0 <HAL_ADC_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800111e:	f000 f9a1 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	3730      	adds	r7, #48	@ 0x30
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2000008c 	.word	0x2000008c
 8001130:	32601000 	.word	0x32601000

08001134 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800113a:	463b      	mov	r3, r7
 800113c:	2220      	movs	r2, #32
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f004 ffcf 	bl	80060e4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001146:	4b2b      	ldr	r3, [pc, #172]	@ (80011f4 <MX_ADC2_Init+0xc0>)
 8001148:	4a2b      	ldr	r2, [pc, #172]	@ (80011f8 <MX_ADC2_Init+0xc4>)
 800114a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800114c:	4b29      	ldr	r3, [pc, #164]	@ (80011f4 <MX_ADC2_Init+0xc0>)
 800114e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001152:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001154:	4b27      	ldr	r3, [pc, #156]	@ (80011f4 <MX_ADC2_Init+0xc0>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800115a:	4b26      	ldr	r3, [pc, #152]	@ (80011f4 <MX_ADC2_Init+0xc0>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001160:	4b24      	ldr	r3, [pc, #144]	@ (80011f4 <MX_ADC2_Init+0xc0>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001166:	4b23      	ldr	r3, [pc, #140]	@ (80011f4 <MX_ADC2_Init+0xc0>)
 8001168:	2200      	movs	r2, #0
 800116a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800116c:	4b21      	ldr	r3, [pc, #132]	@ (80011f4 <MX_ADC2_Init+0xc0>)
 800116e:	2204      	movs	r2, #4
 8001170:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001172:	4b20      	ldr	r3, [pc, #128]	@ (80011f4 <MX_ADC2_Init+0xc0>)
 8001174:	2200      	movs	r2, #0
 8001176:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001178:	4b1e      	ldr	r3, [pc, #120]	@ (80011f4 <MX_ADC2_Init+0xc0>)
 800117a:	2200      	movs	r2, #0
 800117c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800117e:	4b1d      	ldr	r3, [pc, #116]	@ (80011f4 <MX_ADC2_Init+0xc0>)
 8001180:	2201      	movs	r2, #1
 8001182:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001184:	4b1b      	ldr	r3, [pc, #108]	@ (80011f4 <MX_ADC2_Init+0xc0>)
 8001186:	2200      	movs	r2, #0
 8001188:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800118c:	4b19      	ldr	r3, [pc, #100]	@ (80011f4 <MX_ADC2_Init+0xc0>)
 800118e:	2200      	movs	r2, #0
 8001190:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001192:	4b18      	ldr	r3, [pc, #96]	@ (80011f4 <MX_ADC2_Init+0xc0>)
 8001194:	2200      	movs	r2, #0
 8001196:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001198:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <MX_ADC2_Init+0xc0>)
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011a0:	4b14      	ldr	r3, [pc, #80]	@ (80011f4 <MX_ADC2_Init+0xc0>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80011a6:	4b13      	ldr	r3, [pc, #76]	@ (80011f4 <MX_ADC2_Init+0xc0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011ae:	4811      	ldr	r0, [pc, #68]	@ (80011f4 <MX_ADC2_Init+0xc0>)
 80011b0:	f000 fe60 	bl	8001e74 <HAL_ADC_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80011ba:	f000 f953 	bl	8001464 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80011be:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <MX_ADC2_Init+0xc8>)
 80011c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011c2:	2306      	movs	r3, #6
 80011c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80011c6:	2304      	movs	r3, #4
 80011c8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ca:	237f      	movs	r3, #127	@ 0x7f
 80011cc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011ce:	2304      	movs	r3, #4
 80011d0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011d6:	463b      	mov	r3, r7
 80011d8:	4619      	mov	r1, r3
 80011da:	4806      	ldr	r0, [pc, #24]	@ (80011f4 <MX_ADC2_Init+0xc0>)
 80011dc:	f001 f970 	bl	80024c0 <HAL_ADC_ConfigChannel>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80011e6:	f000 f93d 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	3720      	adds	r7, #32
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200000f8 	.word	0x200000f8
 80011f8:	50000100 	.word	0x50000100
 80011fc:	36902000 	.word	0x36902000

08001200 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001204:	4b1b      	ldr	r3, [pc, #108]	@ (8001274 <MX_SPI2_Init+0x74>)
 8001206:	4a1c      	ldr	r2, [pc, #112]	@ (8001278 <MX_SPI2_Init+0x78>)
 8001208:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800120a:	4b1a      	ldr	r3, [pc, #104]	@ (8001274 <MX_SPI2_Init+0x74>)
 800120c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001210:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001212:	4b18      	ldr	r3, [pc, #96]	@ (8001274 <MX_SPI2_Init+0x74>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001218:	4b16      	ldr	r3, [pc, #88]	@ (8001274 <MX_SPI2_Init+0x74>)
 800121a:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 800121e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001220:	4b14      	ldr	r3, [pc, #80]	@ (8001274 <MX_SPI2_Init+0x74>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001226:	4b13      	ldr	r3, [pc, #76]	@ (8001274 <MX_SPI2_Init+0x74>)
 8001228:	2201      	movs	r2, #1
 800122a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800122c:	4b11      	ldr	r3, [pc, #68]	@ (8001274 <MX_SPI2_Init+0x74>)
 800122e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001232:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001234:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <MX_SPI2_Init+0x74>)
 8001236:	2220      	movs	r2, #32
 8001238:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800123a:	4b0e      	ldr	r3, [pc, #56]	@ (8001274 <MX_SPI2_Init+0x74>)
 800123c:	2200      	movs	r2, #0
 800123e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001240:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <MX_SPI2_Init+0x74>)
 8001242:	2200      	movs	r2, #0
 8001244:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001246:	4b0b      	ldr	r3, [pc, #44]	@ (8001274 <MX_SPI2_Init+0x74>)
 8001248:	2200      	movs	r2, #0
 800124a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800124c:	4b09      	ldr	r3, [pc, #36]	@ (8001274 <MX_SPI2_Init+0x74>)
 800124e:	2207      	movs	r2, #7
 8001250:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001252:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <MX_SPI2_Init+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001258:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <MX_SPI2_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800125e:	4805      	ldr	r0, [pc, #20]	@ (8001274 <MX_SPI2_Init+0x74>)
 8001260:	f003 f98e 	bl	8004580 <HAL_SPI_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800126a:	f000 f8fb 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000164 	.word	0x20000164
 8001278:	40003800 	.word	0x40003800

0800127c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08e      	sub	sp, #56	@ 0x38
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001282:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800129c:	463b      	mov	r3, r7
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]
 80012aa:	615a      	str	r2, [r3, #20]
 80012ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001360 <MX_TIM2_Init+0xe4>)
 80012b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000-1;
 80012b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001360 <MX_TIM2_Init+0xe4>)
 80012b8:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80012bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012be:	4b28      	ldr	r3, [pc, #160]	@ (8001360 <MX_TIM2_Init+0xe4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 80012c4:	4b26      	ldr	r3, [pc, #152]	@ (8001360 <MX_TIM2_Init+0xe4>)
 80012c6:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80012ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012cc:	4b24      	ldr	r3, [pc, #144]	@ (8001360 <MX_TIM2_Init+0xe4>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d2:	4b23      	ldr	r3, [pc, #140]	@ (8001360 <MX_TIM2_Init+0xe4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012d8:	4821      	ldr	r0, [pc, #132]	@ (8001360 <MX_TIM2_Init+0xe4>)
 80012da:	f003 fd83 	bl	8004de4 <HAL_TIM_Base_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80012e4:	f000 f8be 	bl	8001464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012f2:	4619      	mov	r1, r3
 80012f4:	481a      	ldr	r0, [pc, #104]	@ (8001360 <MX_TIM2_Init+0xe4>)
 80012f6:	f003 ff41 	bl	800517c <HAL_TIM_ConfigClockSource>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001300:	f000 f8b0 	bl	8001464 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001304:	4816      	ldr	r0, [pc, #88]	@ (8001360 <MX_TIM2_Init+0xe4>)
 8001306:	f003 fdc4 	bl	8004e92 <HAL_TIM_PWM_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001310:	f000 f8a8 	bl	8001464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001314:	2320      	movs	r3, #32
 8001316:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	480f      	ldr	r0, [pc, #60]	@ (8001360 <MX_TIM2_Init+0xe4>)
 8001324:	f004 fc52 	bl	8005bcc <HAL_TIMEx_MasterConfigSynchronization>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800132e:	f000 f899 	bl	8001464 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001332:	2360      	movs	r3, #96	@ 0x60
 8001334:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001342:	463b      	mov	r3, r7
 8001344:	2200      	movs	r2, #0
 8001346:	4619      	mov	r1, r3
 8001348:	4805      	ldr	r0, [pc, #20]	@ (8001360 <MX_TIM2_Init+0xe4>)
 800134a:	f003 fe03 	bl	8004f54 <HAL_TIM_PWM_ConfigChannel>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001354:	f000 f886 	bl	8001464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	3738      	adds	r7, #56	@ 0x38
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200001c8 	.word	0x200001c8

08001364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	4b2a      	ldr	r3, [pc, #168]	@ (8001424 <MX_GPIO_Init+0xc0>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	4a29      	ldr	r2, [pc, #164]	@ (8001424 <MX_GPIO_Init+0xc0>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001386:	4b27      	ldr	r3, [pc, #156]	@ (8001424 <MX_GPIO_Init+0xc0>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	4b24      	ldr	r3, [pc, #144]	@ (8001424 <MX_GPIO_Init+0xc0>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001396:	4a23      	ldr	r2, [pc, #140]	@ (8001424 <MX_GPIO_Init+0xc0>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800139e:	4b21      	ldr	r3, [pc, #132]	@ (8001424 <MX_GPIO_Init+0xc0>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin, GPIO_PIN_SET);
 80013aa:	2201      	movs	r2, #1
 80013ac:	2140      	movs	r1, #64	@ 0x40
 80013ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b2:	f002 f919 	bl	80035e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin|PRS_Ready_Pin|System_Ready_Pin, GPIO_PIN_SET);
 80013b6:	2201      	movs	r2, #1
 80013b8:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 80013bc:	481a      	ldr	r0, [pc, #104]	@ (8001428 <MX_GPIO_Init+0xc4>)
 80013be:	f002 f913 	bl	80035e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Valve_Enable_Pin */
  GPIO_InitStruct.Pin = Valve_Enable_Pin;
 80013c2:	2340      	movs	r3, #64	@ 0x40
 80013c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013ca:	2302      	movs	r3, #2
 80013cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Valve_Enable_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	4619      	mov	r1, r3
 80013d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013dc:	f001 ff82 	bl	80032e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 80013e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e6:	2301      	movs	r3, #1
 80013e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	4619      	mov	r1, r3
 80013f8:	480b      	ldr	r0, [pc, #44]	@ (8001428 <MX_GPIO_Init+0xc4>)
 80013fa:	f001 ff73 	bl	80032e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PRS_Ready_Pin System_Ready_Pin */
  GPIO_InitStruct.Pin = PRS_Ready_Pin|System_Ready_Pin;
 80013fe:	23c0      	movs	r3, #192	@ 0xc0
 8001400:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001402:	2301      	movs	r3, #1
 8001404:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001406:	2302      	movs	r3, #2
 8001408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	4619      	mov	r1, r3
 8001414:	4804      	ldr	r0, [pc, #16]	@ (8001428 <MX_GPIO_Init+0xc4>)
 8001416:	f001 ff65 	bl	80032e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800141a:	bf00      	nop
 800141c:	3720      	adds	r7, #32
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	48000400 	.word	0x48000400

0800142c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	e009      	b.n	8001452 <_write+0x26>
		ITM_SendChar(*ptr++);
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	1c5a      	adds	r2, r3, #1
 8001442:	60ba      	str	r2, [r7, #8]
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fb58 	bl	8000afc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	3301      	adds	r3, #1
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	429a      	cmp	r2, r3
 8001458:	dbf1      	blt.n	800143e <_write+0x12>
	}
	return len;
 800145a:	687b      	ldr	r3, [r7, #4]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001468:	b672      	cpsid	i
}
 800146a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <Error_Handler+0x8>

08001470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001476:	4b0f      	ldr	r3, [pc, #60]	@ (80014b4 <HAL_MspInit+0x44>)
 8001478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800147a:	4a0e      	ldr	r2, [pc, #56]	@ (80014b4 <HAL_MspInit+0x44>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6613      	str	r3, [r2, #96]	@ 0x60
 8001482:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <HAL_MspInit+0x44>)
 8001484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	4b09      	ldr	r3, [pc, #36]	@ (80014b4 <HAL_MspInit+0x44>)
 8001490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001492:	4a08      	ldr	r2, [pc, #32]	@ (80014b4 <HAL_MspInit+0x44>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001498:	6593      	str	r3, [r2, #88]	@ 0x58
 800149a:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <HAL_MspInit+0x44>)
 800149c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800149e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80014a6:	f002 f975 	bl	8003794 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40021000 	.word	0x40021000

080014b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b09c      	sub	sp, #112	@ 0x70
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d0:	f107 0318 	add.w	r3, r7, #24
 80014d4:	2244      	movs	r2, #68	@ 0x44
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f004 fe03 	bl	80060e4 <memset>
  if(hadc->Instance==ADC1)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014e6:	d13d      	bne.n	8001564 <HAL_ADC_MspInit+0xac>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80014e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80014ee:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80014f2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f4:	f107 0318 	add.w	r3, r7, #24
 80014f8:	4618      	mov	r0, r3
 80014fa:	f002 fe51 	bl	80041a0 <HAL_RCCEx_PeriphCLKConfig>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001504:	f7ff ffae 	bl	8001464 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001508:	4b3a      	ldr	r3, [pc, #232]	@ (80015f4 <HAL_ADC_MspInit+0x13c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	3301      	adds	r3, #1
 800150e:	4a39      	ldr	r2, [pc, #228]	@ (80015f4 <HAL_ADC_MspInit+0x13c>)
 8001510:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001512:	4b38      	ldr	r3, [pc, #224]	@ (80015f4 <HAL_ADC_MspInit+0x13c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d10b      	bne.n	8001532 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800151a:	4b37      	ldr	r3, [pc, #220]	@ (80015f8 <HAL_ADC_MspInit+0x140>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151e:	4a36      	ldr	r2, [pc, #216]	@ (80015f8 <HAL_ADC_MspInit+0x140>)
 8001520:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001524:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001526:	4b34      	ldr	r3, [pc, #208]	@ (80015f8 <HAL_ADC_MspInit+0x140>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001532:	4b31      	ldr	r3, [pc, #196]	@ (80015f8 <HAL_ADC_MspInit+0x140>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001536:	4a30      	ldr	r2, [pc, #192]	@ (80015f8 <HAL_ADC_MspInit+0x140>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153e:	4b2e      	ldr	r3, [pc, #184]	@ (80015f8 <HAL_ADC_MspInit+0x140>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Low_Pressure_ADC_Pin;
 800154a:	2302      	movs	r3, #2
 800154c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800154e:	2303      	movs	r3, #3
 8001550:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(Low_Pressure_ADC_GPIO_Port, &GPIO_InitStruct);
 8001556:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800155a:	4619      	mov	r1, r3
 800155c:	4827      	ldr	r0, [pc, #156]	@ (80015fc <HAL_ADC_MspInit+0x144>)
 800155e:	f001 fec1 	bl	80032e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001562:	e042      	b.n	80015ea <HAL_ADC_MspInit+0x132>
  else if(hadc->Instance==ADC2)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a25      	ldr	r2, [pc, #148]	@ (8001600 <HAL_ADC_MspInit+0x148>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d13d      	bne.n	80015ea <HAL_ADC_MspInit+0x132>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800156e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001572:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001574:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001578:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800157a:	f107 0318 	add.w	r3, r7, #24
 800157e:	4618      	mov	r0, r3
 8001580:	f002 fe0e 	bl	80041a0 <HAL_RCCEx_PeriphCLKConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_ADC_MspInit+0xd6>
      Error_Handler();
 800158a:	f7ff ff6b 	bl	8001464 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800158e:	4b19      	ldr	r3, [pc, #100]	@ (80015f4 <HAL_ADC_MspInit+0x13c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	3301      	adds	r3, #1
 8001594:	4a17      	ldr	r2, [pc, #92]	@ (80015f4 <HAL_ADC_MspInit+0x13c>)
 8001596:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001598:	4b16      	ldr	r3, [pc, #88]	@ (80015f4 <HAL_ADC_MspInit+0x13c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d10b      	bne.n	80015b8 <HAL_ADC_MspInit+0x100>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80015a0:	4b15      	ldr	r3, [pc, #84]	@ (80015f8 <HAL_ADC_MspInit+0x140>)
 80015a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a4:	4a14      	ldr	r2, [pc, #80]	@ (80015f8 <HAL_ADC_MspInit+0x140>)
 80015a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ac:	4b12      	ldr	r3, [pc, #72]	@ (80015f8 <HAL_ADC_MspInit+0x140>)
 80015ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b8:	4b0f      	ldr	r3, [pc, #60]	@ (80015f8 <HAL_ADC_MspInit+0x140>)
 80015ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015bc:	4a0e      	ldr	r2, [pc, #56]	@ (80015f8 <HAL_ADC_MspInit+0x140>)
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015c4:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <HAL_ADC_MspInit+0x140>)
 80015c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = High_Pressure_ADC_Pin;
 80015d0:	2320      	movs	r3, #32
 80015d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d4:	2303      	movs	r3, #3
 80015d6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(High_Pressure_ADC_GPIO_Port, &GPIO_InitStruct);
 80015dc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80015e0:	4619      	mov	r1, r3
 80015e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015e6:	f001 fe7d 	bl	80032e4 <HAL_GPIO_Init>
}
 80015ea:	bf00      	nop
 80015ec:	3770      	adds	r7, #112	@ 0x70
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	2000021c 	.word	0x2000021c
 80015f8:	40021000 	.word	0x40021000
 80015fc:	48000400 	.word	0x48000400
 8001600:	50000100 	.word	0x50000100

08001604 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	@ 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a17      	ldr	r2, [pc, #92]	@ (8001680 <HAL_SPI_MspInit+0x7c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d128      	bne.n	8001678 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001626:	4b17      	ldr	r3, [pc, #92]	@ (8001684 <HAL_SPI_MspInit+0x80>)
 8001628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800162a:	4a16      	ldr	r2, [pc, #88]	@ (8001684 <HAL_SPI_MspInit+0x80>)
 800162c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001630:	6593      	str	r3, [r2, #88]	@ 0x58
 8001632:	4b14      	ldr	r3, [pc, #80]	@ (8001684 <HAL_SPI_MspInit+0x80>)
 8001634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001636:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163e:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <HAL_SPI_MspInit+0x80>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001642:	4a10      	ldr	r2, [pc, #64]	@ (8001684 <HAL_SPI_MspInit+0x80>)
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800164a:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <HAL_SPI_MspInit+0x80>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001656:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800165a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001664:	2302      	movs	r3, #2
 8001666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001668:	2305      	movs	r3, #5
 800166a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4619      	mov	r1, r3
 8001672:	4805      	ldr	r0, [pc, #20]	@ (8001688 <HAL_SPI_MspInit+0x84>)
 8001674:	f001 fe36 	bl	80032e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001678:	bf00      	nop
 800167a:	3728      	adds	r7, #40	@ 0x28
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40003800 	.word	0x40003800
 8001684:	40021000 	.word	0x40021000
 8001688:	48000400 	.word	0x48000400

0800168c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800169c:	d10b      	bne.n	80016b6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800169e:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <HAL_TIM_Base_MspInit+0x38>)
 80016a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a2:	4a08      	ldr	r2, [pc, #32]	@ (80016c4 <HAL_TIM_Base_MspInit+0x38>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80016aa:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <HAL_TIM_Base_MspInit+0x38>)
 80016ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40021000 	.word	0x40021000

080016c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <NMI_Handler+0x4>

080016d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <HardFault_Handler+0x4>

080016d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <MemManage_Handler+0x4>

080016e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <BusFault_Handler+0x4>

080016e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <UsageFault_Handler+0x4>

080016f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800171e:	f000 f917 	bl	8001950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}

08001726 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b086      	sub	sp, #24
 800172a:	af00      	add	r7, sp, #0
 800172c:	60f8      	str	r0, [r7, #12]
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
 8001736:	e00a      	b.n	800174e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001738:	f3af 8000 	nop.w
 800173c:	4601      	mov	r1, r0
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	1c5a      	adds	r2, r3, #1
 8001742:	60ba      	str	r2, [r7, #8]
 8001744:	b2ca      	uxtb	r2, r1
 8001746:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	3301      	adds	r3, #1
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	429a      	cmp	r2, r3
 8001754:	dbf0      	blt.n	8001738 <_read+0x12>
  }

  return len;
 8001756:	687b      	ldr	r3, [r7, #4]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001768:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001788:	605a      	str	r2, [r3, #4]
  return 0;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <_isatty>:

int _isatty(int file)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017a0:	2301      	movs	r3, #1
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b085      	sub	sp, #20
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	60f8      	str	r0, [r7, #12]
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d0:	4a14      	ldr	r2, [pc, #80]	@ (8001824 <_sbrk+0x5c>)
 80017d2:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <_sbrk+0x60>)
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017dc:	4b13      	ldr	r3, [pc, #76]	@ (800182c <_sbrk+0x64>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d102      	bne.n	80017ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e4:	4b11      	ldr	r3, [pc, #68]	@ (800182c <_sbrk+0x64>)
 80017e6:	4a12      	ldr	r2, [pc, #72]	@ (8001830 <_sbrk+0x68>)
 80017e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ea:	4b10      	ldr	r3, [pc, #64]	@ (800182c <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d207      	bcs.n	8001808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f8:	f004 fcc2 	bl	8006180 <__errno>
 80017fc:	4603      	mov	r3, r0
 80017fe:	220c      	movs	r2, #12
 8001800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001802:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001806:	e009      	b.n	800181c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001808:	4b08      	ldr	r3, [pc, #32]	@ (800182c <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180e:	4b07      	ldr	r3, [pc, #28]	@ (800182c <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	4a05      	ldr	r2, [pc, #20]	@ (800182c <_sbrk+0x64>)
 8001818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800181a:	68fb      	ldr	r3, [r7, #12]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20008000 	.word	0x20008000
 8001828:	00000400 	.word	0x00000400
 800182c:	20000220 	.word	0x20000220
 8001830:	20000378 	.word	0x20000378

08001834 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001838:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <SystemInit+0x20>)
 800183a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800183e:	4a05      	ldr	r2, [pc, #20]	@ (8001854 <SystemInit+0x20>)
 8001840:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001844:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001858:	480d      	ldr	r0, [pc, #52]	@ (8001890 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800185a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800185c:	f7ff ffea 	bl	8001834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001860:	480c      	ldr	r0, [pc, #48]	@ (8001894 <LoopForever+0x6>)
  ldr r1, =_edata
 8001862:	490d      	ldr	r1, [pc, #52]	@ (8001898 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001864:	4a0d      	ldr	r2, [pc, #52]	@ (800189c <LoopForever+0xe>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001868:	e002      	b.n	8001870 <LoopCopyDataInit>

0800186a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800186c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186e:	3304      	adds	r3, #4

08001870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001874:	d3f9      	bcc.n	800186a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001876:	4a0a      	ldr	r2, [pc, #40]	@ (80018a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001878:	4c0a      	ldr	r4, [pc, #40]	@ (80018a4 <LoopForever+0x16>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800187c:	e001      	b.n	8001882 <LoopFillZerobss>

0800187e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001880:	3204      	adds	r2, #4

08001882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001884:	d3fb      	bcc.n	800187e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001886:	f004 fc81 	bl	800618c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800188a:	f7ff f961 	bl	8000b50 <main>

0800188e <LoopForever>:

LoopForever:
    b LoopForever
 800188e:	e7fe      	b.n	800188e <LoopForever>
  ldr   r0, =_estack
 8001890:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001898:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800189c:	08006e28 	.word	0x08006e28
  ldr r2, =_sbss
 80018a0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80018a4:	20000374 	.word	0x20000374

080018a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018a8:	e7fe      	b.n	80018a8 <ADC1_2_IRQHandler>

080018aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b4:	2003      	movs	r0, #3
 80018b6:	f001 fce3 	bl	8003280 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ba:	200f      	movs	r0, #15
 80018bc:	f000 f80e 	bl	80018dc <HAL_InitTick>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d002      	beq.n	80018cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	71fb      	strb	r3, [r7, #7]
 80018ca:	e001      	b.n	80018d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018cc:	f7ff fdd0 	bl	8001470 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018d0:	79fb      	ldrb	r3, [r7, #7]

}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80018e8:	4b16      	ldr	r3, [pc, #88]	@ (8001944 <HAL_InitTick+0x68>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d022      	beq.n	8001936 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80018f0:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <HAL_InitTick+0x6c>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b13      	ldr	r3, [pc, #76]	@ (8001944 <HAL_InitTick+0x68>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80018fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001900:	fbb2 f3f3 	udiv	r3, r2, r3
 8001904:	4618      	mov	r0, r3
 8001906:	f001 fce0 	bl	80032ca <HAL_SYSTICK_Config>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d10f      	bne.n	8001930 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b0f      	cmp	r3, #15
 8001914:	d809      	bhi.n	800192a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001916:	2200      	movs	r2, #0
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800191e:	f001 fcba 	bl	8003296 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001922:	4a0a      	ldr	r2, [pc, #40]	@ (800194c <HAL_InitTick+0x70>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	e007      	b.n	800193a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	73fb      	strb	r3, [r7, #15]
 800192e:	e004      	b.n	800193a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	73fb      	strb	r3, [r7, #15]
 8001934:	e001      	b.n	800193a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800193a:	7bfb      	ldrb	r3, [r7, #15]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000010 	.word	0x20000010
 8001948:	20000008 	.word	0x20000008
 800194c:	2000000c 	.word	0x2000000c

08001950 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001954:	4b05      	ldr	r3, [pc, #20]	@ (800196c <HAL_IncTick+0x1c>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <HAL_IncTick+0x20>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4413      	add	r3, r2
 800195e:	4a03      	ldr	r2, [pc, #12]	@ (800196c <HAL_IncTick+0x1c>)
 8001960:	6013      	str	r3, [r2, #0]
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	20000224 	.word	0x20000224
 8001970:	20000010 	.word	0x20000010

08001974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return uwTick;
 8001978:	4b03      	ldr	r3, [pc, #12]	@ (8001988 <HAL_GetTick+0x14>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000224 	.word	0x20000224

0800198c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001994:	f7ff ffee 	bl	8001974 <HAL_GetTick>
 8001998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019a4:	d004      	beq.n	80019b0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80019a6:	4b09      	ldr	r3, [pc, #36]	@ (80019cc <HAL_Delay+0x40>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	4413      	add	r3, r2
 80019ae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019b0:	bf00      	nop
 80019b2:	f7ff ffdf 	bl	8001974 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d8f7      	bhi.n	80019b2 <HAL_Delay+0x26>
  {
  }
}
 80019c2:	bf00      	nop
 80019c4:	bf00      	nop
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000010 	.word	0x20000010

080019d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	431a      	orrs	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	609a      	str	r2, [r3, #8]
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
 8001a44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	3360      	adds	r3, #96	@ 0x60
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b08      	ldr	r3, [pc, #32]	@ (8001a7c <LL_ADC_SetOffset+0x44>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	4313      	orrs	r3, r2
 8001a68:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a70:	bf00      	nop
 8001a72:	371c      	adds	r7, #28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	03fff000 	.word	0x03fff000

08001a80 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3360      	adds	r3, #96	@ 0x60
 8001a8e:	461a      	mov	r2, r3
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	3360      	adds	r3, #96	@ 0x60
 8001abc:	461a      	mov	r2, r3
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ad6:	bf00      	nop
 8001ad8:	371c      	adds	r7, #28
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b087      	sub	sp, #28
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	3360      	adds	r3, #96	@ 0x60
 8001af2:	461a      	mov	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	431a      	orrs	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001b0c:	bf00      	nop
 8001b0e:	371c      	adds	r7, #28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b087      	sub	sp, #28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	3360      	adds	r3, #96	@ 0x60
 8001b28:	461a      	mov	r2, r3
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001b42:	bf00      	nop
 8001b44:	371c      	adds	r7, #28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	695b      	ldr	r3, [r3, #20]
 8001b5c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	615a      	str	r2, [r3, #20]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e000      	b.n	8001b8e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b087      	sub	sp, #28
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	3330      	adds	r3, #48	@ 0x30
 8001baa:	461a      	mov	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	0a1b      	lsrs	r3, r3, #8
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	4413      	add	r3, r2
 8001bb8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	f003 031f 	and.w	r3, r3, #31
 8001bc4:	211f      	movs	r1, #31
 8001bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	401a      	ands	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	0e9b      	lsrs	r3, r3, #26
 8001bd2:	f003 011f 	and.w	r1, r3, #31
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	f003 031f 	and.w	r3, r3, #31
 8001bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001be0:	431a      	orrs	r2, r3
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001be6:	bf00      	nop
 8001be8:	371c      	adds	r7, #28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b087      	sub	sp, #28
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	60f8      	str	r0, [r7, #12]
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	3314      	adds	r3, #20
 8001c02:	461a      	mov	r2, r3
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	0e5b      	lsrs	r3, r3, #25
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	4413      	add	r3, r2
 8001c10:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	0d1b      	lsrs	r3, r3, #20
 8001c1a:	f003 031f 	and.w	r3, r3, #31
 8001c1e:	2107      	movs	r1, #7
 8001c20:	fa01 f303 	lsl.w	r3, r1, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	401a      	ands	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	0d1b      	lsrs	r3, r3, #20
 8001c2c:	f003 031f 	and.w	r3, r3, #31
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	fa01 f303 	lsl.w	r3, r1, r3
 8001c36:	431a      	orrs	r2, r3
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c3c:	bf00      	nop
 8001c3e:	371c      	adds	r7, #28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c60:	43db      	mvns	r3, r3
 8001c62:	401a      	ands	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f003 0318 	and.w	r3, r3, #24
 8001c6a:	4908      	ldr	r1, [pc, #32]	@ (8001c8c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c6c:	40d9      	lsrs	r1, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	400b      	ands	r3, r1
 8001c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c76:	431a      	orrs	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c7e:	bf00      	nop
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	0007ffff 	.word	0x0007ffff

08001c90 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 031f 	and.w	r3, r3, #31
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001cd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6093      	str	r3, [r2, #8]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d00:	d101      	bne.n	8001d06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001d24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d28:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d50:	d101      	bne.n	8001d56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d78:	f043 0201 	orr.w	r2, r3, #1
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001da0:	f043 0202 	orr.w	r2, r3, #2
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <LL_ADC_IsEnabled+0x18>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <LL_ADC_IsEnabled+0x1a>
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d101      	bne.n	8001df2 <LL_ADC_IsDisableOngoing+0x18>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <LL_ADC_IsDisableOngoing+0x1a>
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e14:	f043 0204 	orr.w	r2, r3, #4
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d101      	bne.n	8001e40 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d101      	bne.n	8001e66 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b089      	sub	sp, #36	@ 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e167      	b.n	800215e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d109      	bne.n	8001eb0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff fb0b 	bl	80014b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff19 	bl	8001cec <LL_ADC_IsDeepPowerDownEnabled>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d004      	beq.n	8001eca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff feff 	bl	8001cc8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff ff34 	bl	8001d3c <LL_ADC_IsInternalRegulatorEnabled>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d115      	bne.n	8001f06 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff ff18 	bl	8001d14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ee4:	4ba0      	ldr	r3, [pc, #640]	@ (8002168 <HAL_ADC_Init+0x2f4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	099b      	lsrs	r3, r3, #6
 8001eea:	4aa0      	ldr	r2, [pc, #640]	@ (800216c <HAL_ADC_Init+0x2f8>)
 8001eec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef0:	099b      	lsrs	r3, r3, #6
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ef8:	e002      	b.n	8001f00 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f9      	bne.n	8001efa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff ff16 	bl	8001d3c <LL_ADC_IsInternalRegulatorEnabled>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10d      	bne.n	8001f32 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f1a:	f043 0210 	orr.w	r2, r3, #16
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f26:	f043 0201 	orr.w	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ff76 	bl	8001e28 <LL_ADC_REG_IsConversionOngoing>
 8001f3c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f42:	f003 0310 	and.w	r3, r3, #16
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f040 8100 	bne.w	800214c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f040 80fc 	bne.w	800214c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f58:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f5c:	f043 0202 	orr.w	r2, r3, #2
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff23 	bl	8001db4 <LL_ADC_IsEnabled>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d111      	bne.n	8001f98 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f74:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001f78:	f7ff ff1c 	bl	8001db4 <LL_ADC_IsEnabled>
 8001f7c:	4604      	mov	r4, r0
 8001f7e:	487c      	ldr	r0, [pc, #496]	@ (8002170 <HAL_ADC_Init+0x2fc>)
 8001f80:	f7ff ff18 	bl	8001db4 <LL_ADC_IsEnabled>
 8001f84:	4603      	mov	r3, r0
 8001f86:	4323      	orrs	r3, r4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d105      	bne.n	8001f98 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	4619      	mov	r1, r3
 8001f92:	4878      	ldr	r0, [pc, #480]	@ (8002174 <HAL_ADC_Init+0x300>)
 8001f94:	f7ff fd1c 	bl	80019d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	7f5b      	ldrb	r3, [r3, #29]
 8001f9c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fa2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001fa8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001fae:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001fb6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d106      	bne.n	8001fd4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	045b      	lsls	r3, r3, #17
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d009      	beq.n	8001ff0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	4b60      	ldr	r3, [pc, #384]	@ (8002178 <HAL_ADC_Init+0x304>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6812      	ldr	r2, [r2, #0]
 8001ffe:	69b9      	ldr	r1, [r7, #24]
 8002000:	430b      	orrs	r3, r1
 8002002:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff ff15 	bl	8001e4e <LL_ADC_INJ_IsConversionOngoing>
 8002024:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d16d      	bne.n	8002108 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d16a      	bne.n	8002108 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002036:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800203e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002040:	4313      	orrs	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800204e:	f023 0302 	bic.w	r3, r3, #2
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	69b9      	ldr	r1, [r7, #24]
 8002058:	430b      	orrs	r3, r1
 800205a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d017      	beq.n	8002094 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691a      	ldr	r2, [r3, #16]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002072:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800207c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002080:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6911      	ldr	r1, [r2, #16]
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	430b      	orrs	r3, r1
 800208e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002092:	e013      	b.n	80020bc <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691a      	ldr	r2, [r3, #16]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80020a2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80020b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020b8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d118      	bne.n	80020f8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80020d0:	f023 0304 	bic.w	r3, r3, #4
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80020dc:	4311      	orrs	r1, r2
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80020e2:	4311      	orrs	r1, r2
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80020e8:	430a      	orrs	r2, r1
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 0201 	orr.w	r2, r2, #1
 80020f4:	611a      	str	r2, [r3, #16]
 80020f6:	e007      	b.n	8002108 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691a      	ldr	r2, [r3, #16]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0201 	bic.w	r2, r2, #1
 8002106:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d10c      	bne.n	800212a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	f023 010f 	bic.w	r1, r3, #15
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	1e5a      	subs	r2, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	631a      	str	r2, [r3, #48]	@ 0x30
 8002128:	e007      	b.n	800213a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 020f 	bic.w	r2, r2, #15
 8002138:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800213e:	f023 0303 	bic.w	r3, r3, #3
 8002142:	f043 0201 	orr.w	r2, r3, #1
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	65da      	str	r2, [r3, #92]	@ 0x5c
 800214a:	e007      	b.n	800215c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002150:	f043 0210 	orr.w	r2, r3, #16
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800215c:	7ffb      	ldrb	r3, [r7, #31]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3724      	adds	r7, #36	@ 0x24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd90      	pop	{r4, r7, pc}
 8002166:	bf00      	nop
 8002168:	20000008 	.word	0x20000008
 800216c:	053e2d63 	.word	0x053e2d63
 8002170:	50000100 	.word	0x50000100
 8002174:	50000300 	.word	0x50000300
 8002178:	fff04007 	.word	0xfff04007

0800217c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002184:	4859      	ldr	r0, [pc, #356]	@ (80022ec <HAL_ADC_Start+0x170>)
 8002186:	f7ff fd83 	bl	8001c90 <LL_ADC_GetMultimode>
 800218a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fe49 	bl	8001e28 <LL_ADC_REG_IsConversionOngoing>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	f040 809f 	bne.w	80022dc <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_ADC_Start+0x30>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e09a      	b.n	80022e2 <HAL_ADC_Start+0x166>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 fd73 	bl	8002ca0 <ADC_Enable>
 80021ba:	4603      	mov	r3, r0
 80021bc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80021be:	7dfb      	ldrb	r3, [r7, #23]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f040 8086 	bne.w	80022d2 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ca:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80021ce:	f023 0301 	bic.w	r3, r3, #1
 80021d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a44      	ldr	r2, [pc, #272]	@ (80022f0 <HAL_ADC_Start+0x174>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d002      	beq.n	80021ea <HAL_ADC_Start+0x6e>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	e001      	b.n	80021ee <HAL_ADC_Start+0x72>
 80021ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d002      	beq.n	80021fc <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d105      	bne.n	8002208 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002200:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800220c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002210:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002214:	d106      	bne.n	8002224 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800221a:	f023 0206 	bic.w	r2, r3, #6
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	661a      	str	r2, [r3, #96]	@ 0x60
 8002222:	e002      	b.n	800222a <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	221c      	movs	r2, #28
 8002230:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a2c      	ldr	r2, [pc, #176]	@ (80022f0 <HAL_ADC_Start+0x174>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d002      	beq.n	800224a <HAL_ADC_Start+0xce>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	e001      	b.n	800224e <HAL_ADC_Start+0xd2>
 800224a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6812      	ldr	r2, [r2, #0]
 8002252:	4293      	cmp	r3, r2
 8002254:	d008      	beq.n	8002268 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	2b05      	cmp	r3, #5
 8002260:	d002      	beq.n	8002268 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	2b09      	cmp	r3, #9
 8002266:	d114      	bne.n	8002292 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d007      	beq.n	8002286 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800227e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fdb8 	bl	8001e00 <LL_ADC_REG_StartConversion>
 8002290:	e026      	b.n	80022e0 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002296:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a13      	ldr	r2, [pc, #76]	@ (80022f0 <HAL_ADC_Start+0x174>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d002      	beq.n	80022ae <HAL_ADC_Start+0x132>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	e001      	b.n	80022b2 <HAL_ADC_Start+0x136>
 80022ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80022b2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00f      	beq.n	80022e0 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022c8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022d0:	e006      	b.n	80022e0 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80022da:	e001      	b.n	80022e0 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022dc:	2302      	movs	r3, #2
 80022de:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80022e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	50000300 	.word	0x50000300
 80022f0:	50000100 	.word	0x50000100

080022f4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022fe:	4867      	ldr	r0, [pc, #412]	@ (800249c <HAL_ADC_PollForConversion+0x1a8>)
 8002300:	f7ff fcc6 	bl	8001c90 <LL_ADC_GetMultimode>
 8002304:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	2b08      	cmp	r3, #8
 800230c:	d102      	bne.n	8002314 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800230e:	2308      	movs	r3, #8
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	e02a      	b.n	800236a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d005      	beq.n	8002326 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	2b05      	cmp	r3, #5
 800231e:	d002      	beq.n	8002326 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2b09      	cmp	r3, #9
 8002324:	d111      	bne.n	800234a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d007      	beq.n	8002344 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002338:	f043 0220 	orr.w	r2, r3, #32
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0a6      	b.n	8002492 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002344:	2304      	movs	r3, #4
 8002346:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002348:	e00f      	b.n	800236a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800234a:	4854      	ldr	r0, [pc, #336]	@ (800249c <HAL_ADC_PollForConversion+0x1a8>)
 800234c:	f7ff fcae 	bl	8001cac <LL_ADC_GetMultiDMATransfer>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d007      	beq.n	8002366 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235a:	f043 0220 	orr.w	r2, r3, #32
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e095      	b.n	8002492 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002366:	2304      	movs	r3, #4
 8002368:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800236a:	f7ff fb03 	bl	8001974 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002370:	e021      	b.n	80023b6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002378:	d01d      	beq.n	80023b6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800237a:	f7ff fafb 	bl	8001974 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d302      	bcc.n	8002390 <HAL_ADC_PollForConversion+0x9c>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d112      	bne.n	80023b6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	4013      	ands	r3, r2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10b      	bne.n	80023b6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a2:	f043 0204 	orr.w	r2, r3, #4
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e06d      	b.n	8002492 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0d6      	beq.n	8002372 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fbcd 	bl	8001b74 <LL_ADC_REG_IsTriggerSourceSWStart>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d01c      	beq.n	800241a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	7f5b      	ldrb	r3, [r3, #29]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d118      	bne.n	800241a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d111      	bne.n	800241a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002406:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d105      	bne.n	800241a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002412:	f043 0201 	orr.w	r2, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a20      	ldr	r2, [pc, #128]	@ (80024a0 <HAL_ADC_PollForConversion+0x1ac>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d002      	beq.n	800242a <HAL_ADC_PollForConversion+0x136>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	e001      	b.n	800242e <HAL_ADC_PollForConversion+0x13a>
 800242a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6812      	ldr	r2, [r2, #0]
 8002432:	4293      	cmp	r3, r2
 8002434:	d008      	beq.n	8002448 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	2b05      	cmp	r3, #5
 8002440:	d002      	beq.n	8002448 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2b09      	cmp	r3, #9
 8002446:	d104      	bne.n	8002452 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	61bb      	str	r3, [r7, #24]
 8002450:	e00d      	b.n	800246e <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a12      	ldr	r2, [pc, #72]	@ (80024a0 <HAL_ADC_PollForConversion+0x1ac>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d002      	beq.n	8002462 <HAL_ADC_PollForConversion+0x16e>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	e001      	b.n	8002466 <HAL_ADC_PollForConversion+0x172>
 8002462:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002466:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	2b08      	cmp	r3, #8
 8002472:	d104      	bne.n	800247e <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2208      	movs	r2, #8
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	e008      	b.n	8002490 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d103      	bne.n	8002490 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	220c      	movs	r2, #12
 800248e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3720      	adds	r7, #32
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	50000300 	.word	0x50000300
 80024a0:	50000100 	.word	0x50000100

080024a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
	...

080024c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b0b6      	sub	sp, #216	@ 0xd8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x22>
 80024de:	2302      	movs	r3, #2
 80024e0:	e3c8      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x7b4>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fc9a 	bl	8001e28 <LL_ADC_REG_IsConversionOngoing>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f040 83ad 	bne.w	8002c56 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	6859      	ldr	r1, [r3, #4]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	461a      	mov	r2, r3
 800250a:	f7ff fb46 	bl	8001b9a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fc88 	bl	8001e28 <LL_ADC_REG_IsConversionOngoing>
 8002518:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fc94 	bl	8001e4e <LL_ADC_INJ_IsConversionOngoing>
 8002526:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800252a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800252e:	2b00      	cmp	r3, #0
 8002530:	f040 81d9 	bne.w	80028e6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002534:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002538:	2b00      	cmp	r3, #0
 800253a:	f040 81d4 	bne.w	80028e6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002546:	d10f      	bne.n	8002568 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2200      	movs	r2, #0
 8002552:	4619      	mov	r1, r3
 8002554:	f7ff fb4d 	bl	8001bf2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff faf4 	bl	8001b4e <LL_ADC_SetSamplingTimeCommonConfig>
 8002566:	e00e      	b.n	8002586 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	6819      	ldr	r1, [r3, #0]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	461a      	mov	r2, r3
 8002576:	f7ff fb3c 	bl	8001bf2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2100      	movs	r1, #0
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff fae4 	bl	8001b4e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	695a      	ldr	r2, [r3, #20]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	08db      	lsrs	r3, r3, #3
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d022      	beq.n	80025ee <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	6919      	ldr	r1, [r3, #16]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025b8:	f7ff fa3e 	bl	8001a38 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	6919      	ldr	r1, [r3, #16]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	461a      	mov	r2, r3
 80025ca:	f7ff fa8a 	bl	8001ae2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d102      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x124>
 80025de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025e2:	e000      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x126>
 80025e4:	2300      	movs	r3, #0
 80025e6:	461a      	mov	r2, r3
 80025e8:	f7ff fa96 	bl	8001b18 <LL_ADC_SetOffsetSaturation>
 80025ec:	e17b      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2100      	movs	r1, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fa43 	bl	8001a80 <LL_ADC_GetOffsetChannel>
 80025fa:	4603      	mov	r3, r0
 80025fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10a      	bne.n	800261a <HAL_ADC_ConfigChannel+0x15a>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2100      	movs	r1, #0
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff fa38 	bl	8001a80 <LL_ADC_GetOffsetChannel>
 8002610:	4603      	mov	r3, r0
 8002612:	0e9b      	lsrs	r3, r3, #26
 8002614:	f003 021f 	and.w	r2, r3, #31
 8002618:	e01e      	b.n	8002658 <HAL_ADC_ConfigChannel+0x198>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2100      	movs	r1, #0
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fa2d 	bl	8001a80 <LL_ADC_GetOffsetChannel>
 8002626:	4603      	mov	r3, r0
 8002628:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002630:	fa93 f3a3 	rbit	r3, r3
 8002634:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002638:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800263c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002640:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002648:	2320      	movs	r3, #32
 800264a:	e004      	b.n	8002656 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800264c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002650:	fab3 f383 	clz	r3, r3
 8002654:	b2db      	uxtb	r3, r3
 8002656:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002660:	2b00      	cmp	r3, #0
 8002662:	d105      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x1b0>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	0e9b      	lsrs	r3, r3, #26
 800266a:	f003 031f 	and.w	r3, r3, #31
 800266e:	e018      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x1e2>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002678:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800267c:	fa93 f3a3 	rbit	r3, r3
 8002680:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002684:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002688:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800268c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002694:	2320      	movs	r3, #32
 8002696:	e004      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002698:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800269c:	fab3 f383 	clz	r3, r3
 80026a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d106      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2200      	movs	r2, #0
 80026ac:	2100      	movs	r1, #0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff f9fc 	bl	8001aac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2101      	movs	r1, #1
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff f9e0 	bl	8001a80 <LL_ADC_GetOffsetChannel>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10a      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x220>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2101      	movs	r1, #1
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff f9d5 	bl	8001a80 <LL_ADC_GetOffsetChannel>
 80026d6:	4603      	mov	r3, r0
 80026d8:	0e9b      	lsrs	r3, r3, #26
 80026da:	f003 021f 	and.w	r2, r3, #31
 80026de:	e01e      	b.n	800271e <HAL_ADC_ConfigChannel+0x25e>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2101      	movs	r1, #1
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff f9ca 	bl	8001a80 <LL_ADC_GetOffsetChannel>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026f6:	fa93 f3a3 	rbit	r3, r3
 80026fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80026fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002702:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002706:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800270e:	2320      	movs	r3, #32
 8002710:	e004      	b.n	800271c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002712:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002716:	fab3 f383 	clz	r3, r3
 800271a:	b2db      	uxtb	r3, r3
 800271c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002726:	2b00      	cmp	r3, #0
 8002728:	d105      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x276>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	0e9b      	lsrs	r3, r3, #26
 8002730:	f003 031f 	and.w	r3, r3, #31
 8002734:	e018      	b.n	8002768 <HAL_ADC_ConfigChannel+0x2a8>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800274a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800274e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002752:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800275a:	2320      	movs	r3, #32
 800275c:	e004      	b.n	8002768 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800275e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002768:	429a      	cmp	r2, r3
 800276a:	d106      	bne.n	800277a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2200      	movs	r2, #0
 8002772:	2101      	movs	r1, #1
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff f999 	bl	8001aac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2102      	movs	r1, #2
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff f97d 	bl	8001a80 <LL_ADC_GetOffsetChannel>
 8002786:	4603      	mov	r3, r0
 8002788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10a      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x2e6>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2102      	movs	r1, #2
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff f972 	bl	8001a80 <LL_ADC_GetOffsetChannel>
 800279c:	4603      	mov	r3, r0
 800279e:	0e9b      	lsrs	r3, r3, #26
 80027a0:	f003 021f 	and.w	r2, r3, #31
 80027a4:	e01e      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x324>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2102      	movs	r1, #2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff f967 	bl	8001a80 <LL_ADC_GetOffsetChannel>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027bc:	fa93 f3a3 	rbit	r3, r3
 80027c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80027c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80027cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80027d4:	2320      	movs	r3, #32
 80027d6:	e004      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80027d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80027dc:	fab3 f383 	clz	r3, r3
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d105      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x33c>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	0e9b      	lsrs	r3, r3, #26
 80027f6:	f003 031f 	and.w	r3, r3, #31
 80027fa:	e016      	b.n	800282a <HAL_ADC_ConfigChannel+0x36a>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002804:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002808:	fa93 f3a3 	rbit	r3, r3
 800280c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800280e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002810:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002814:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800281c:	2320      	movs	r3, #32
 800281e:	e004      	b.n	800282a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002820:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002824:	fab3 f383 	clz	r3, r3
 8002828:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800282a:	429a      	cmp	r2, r3
 800282c:	d106      	bne.n	800283c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2200      	movs	r2, #0
 8002834:	2102      	movs	r1, #2
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff f938 	bl	8001aac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2103      	movs	r1, #3
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff f91c 	bl	8001a80 <LL_ADC_GetOffsetChannel>
 8002848:	4603      	mov	r3, r0
 800284a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10a      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x3a8>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2103      	movs	r1, #3
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff f911 	bl	8001a80 <LL_ADC_GetOffsetChannel>
 800285e:	4603      	mov	r3, r0
 8002860:	0e9b      	lsrs	r3, r3, #26
 8002862:	f003 021f 	and.w	r2, r3, #31
 8002866:	e017      	b.n	8002898 <HAL_ADC_ConfigChannel+0x3d8>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2103      	movs	r1, #3
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff f906 	bl	8001a80 <LL_ADC_GetOffsetChannel>
 8002874:	4603      	mov	r3, r0
 8002876:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800287a:	fa93 f3a3 	rbit	r3, r3
 800287e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002880:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002882:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002884:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800288a:	2320      	movs	r3, #32
 800288c:	e003      	b.n	8002896 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800288e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002890:	fab3 f383 	clz	r3, r3
 8002894:	b2db      	uxtb	r3, r3
 8002896:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d105      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x3f0>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	0e9b      	lsrs	r3, r3, #26
 80028aa:	f003 031f 	and.w	r3, r3, #31
 80028ae:	e011      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x414>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028b8:	fa93 f3a3 	rbit	r3, r3
 80028bc:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80028be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80028c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80028c8:	2320      	movs	r3, #32
 80028ca:	e003      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80028cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028ce:	fab3 f383 	clz	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d106      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2200      	movs	r2, #0
 80028de:	2103      	movs	r1, #3
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff f8e3 	bl	8001aac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff fa62 	bl	8001db4 <LL_ADC_IsEnabled>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f040 8140 	bne.w	8002b78 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	6819      	ldr	r1, [r3, #0]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	461a      	mov	r2, r3
 8002906:	f7ff f99f 	bl	8001c48 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	4a8f      	ldr	r2, [pc, #572]	@ (8002b4c <HAL_ADC_ConfigChannel+0x68c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	f040 8131 	bne.w	8002b78 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10b      	bne.n	800293e <HAL_ADC_ConfigChannel+0x47e>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	0e9b      	lsrs	r3, r3, #26
 800292c:	3301      	adds	r3, #1
 800292e:	f003 031f 	and.w	r3, r3, #31
 8002932:	2b09      	cmp	r3, #9
 8002934:	bf94      	ite	ls
 8002936:	2301      	movls	r3, #1
 8002938:	2300      	movhi	r3, #0
 800293a:	b2db      	uxtb	r3, r3
 800293c:	e019      	b.n	8002972 <HAL_ADC_ConfigChannel+0x4b2>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002944:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800294c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800294e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002950:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002956:	2320      	movs	r3, #32
 8002958:	e003      	b.n	8002962 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800295a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800295c:	fab3 f383 	clz	r3, r3
 8002960:	b2db      	uxtb	r3, r3
 8002962:	3301      	adds	r3, #1
 8002964:	f003 031f 	and.w	r3, r3, #31
 8002968:	2b09      	cmp	r3, #9
 800296a:	bf94      	ite	ls
 800296c:	2301      	movls	r3, #1
 800296e:	2300      	movhi	r3, #0
 8002970:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002972:	2b00      	cmp	r3, #0
 8002974:	d079      	beq.n	8002a6a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297e:	2b00      	cmp	r3, #0
 8002980:	d107      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x4d2>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	0e9b      	lsrs	r3, r3, #26
 8002988:	3301      	adds	r3, #1
 800298a:	069b      	lsls	r3, r3, #26
 800298c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002990:	e015      	b.n	80029be <HAL_ADC_ConfigChannel+0x4fe>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800299a:	fa93 f3a3 	rbit	r3, r3
 800299e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80029a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029a2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80029a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80029aa:	2320      	movs	r3, #32
 80029ac:	e003      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80029ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029b0:	fab3 f383 	clz	r3, r3
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	3301      	adds	r3, #1
 80029b8:	069b      	lsls	r3, r3, #26
 80029ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d109      	bne.n	80029de <HAL_ADC_ConfigChannel+0x51e>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	0e9b      	lsrs	r3, r3, #26
 80029d0:	3301      	adds	r3, #1
 80029d2:	f003 031f 	and.w	r3, r3, #31
 80029d6:	2101      	movs	r1, #1
 80029d8:	fa01 f303 	lsl.w	r3, r1, r3
 80029dc:	e017      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x54e>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029e6:	fa93 f3a3 	rbit	r3, r3
 80029ea:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80029ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80029f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80029f6:	2320      	movs	r3, #32
 80029f8:	e003      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80029fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029fc:	fab3 f383 	clz	r3, r3
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	3301      	adds	r3, #1
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	2101      	movs	r1, #1
 8002a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0e:	ea42 0103 	orr.w	r1, r2, r3
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10a      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x574>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	0e9b      	lsrs	r3, r3, #26
 8002a24:	3301      	adds	r3, #1
 8002a26:	f003 021f 	and.w	r2, r3, #31
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	4413      	add	r3, r2
 8002a30:	051b      	lsls	r3, r3, #20
 8002a32:	e018      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x5a6>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a3c:	fa93 f3a3 	rbit	r3, r3
 8002a40:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002a46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002a4c:	2320      	movs	r3, #32
 8002a4e:	e003      	b.n	8002a58 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002a50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a52:	fab3 f383 	clz	r3, r3
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	3301      	adds	r3, #1
 8002a5a:	f003 021f 	and.w	r2, r3, #31
 8002a5e:	4613      	mov	r3, r2
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	4413      	add	r3, r2
 8002a64:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a66:	430b      	orrs	r3, r1
 8002a68:	e081      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d107      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x5c6>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	0e9b      	lsrs	r3, r3, #26
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	069b      	lsls	r3, r3, #26
 8002a80:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a84:	e015      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x5f2>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a96:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002a9e:	2320      	movs	r3, #32
 8002aa0:	e003      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa4:	fab3 f383 	clz	r3, r3
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	3301      	adds	r3, #1
 8002aac:	069b      	lsls	r3, r3, #26
 8002aae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d109      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x612>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	0e9b      	lsrs	r3, r3, #26
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	f003 031f 	and.w	r3, r3, #31
 8002aca:	2101      	movs	r1, #1
 8002acc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad0:	e017      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x642>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	fa93 f3a3 	rbit	r3, r3
 8002ade:	61fb      	str	r3, [r7, #28]
  return result;
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002aea:	2320      	movs	r3, #32
 8002aec:	e003      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	fab3 f383 	clz	r3, r3
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	3301      	adds	r3, #1
 8002af8:	f003 031f 	and.w	r3, r3, #31
 8002afc:	2101      	movs	r1, #1
 8002afe:	fa01 f303 	lsl.w	r3, r1, r3
 8002b02:	ea42 0103 	orr.w	r1, r2, r3
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10d      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x66e>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	0e9b      	lsrs	r3, r3, #26
 8002b18:	3301      	adds	r3, #1
 8002b1a:	f003 021f 	and.w	r2, r3, #31
 8002b1e:	4613      	mov	r3, r2
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	4413      	add	r3, r2
 8002b24:	3b1e      	subs	r3, #30
 8002b26:	051b      	lsls	r3, r3, #20
 8002b28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b2c:	e01e      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x6ac>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	fa93 f3a3 	rbit	r3, r3
 8002b3a:	613b      	str	r3, [r7, #16]
  return result;
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d104      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002b46:	2320      	movs	r3, #32
 8002b48:	e006      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x698>
 8002b4a:	bf00      	nop
 8002b4c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	3301      	adds	r3, #1
 8002b5a:	f003 021f 	and.w	r2, r3, #31
 8002b5e:	4613      	mov	r3, r2
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	4413      	add	r3, r2
 8002b64:	3b1e      	subs	r3, #30
 8002b66:	051b      	lsls	r3, r3, #20
 8002b68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b6c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b72:	4619      	mov	r1, r3
 8002b74:	f7ff f83d 	bl	8001bf2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	4b3f      	ldr	r3, [pc, #252]	@ (8002c7c <HAL_ADC_ConfigChannel+0x7bc>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d071      	beq.n	8002c68 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b84:	483e      	ldr	r0, [pc, #248]	@ (8002c80 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b86:	f7fe ff49 	bl	8001a1c <LL_ADC_GetCommonPathInternalCh>
 8002b8a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a3c      	ldr	r2, [pc, #240]	@ (8002c84 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d004      	beq.n	8002ba2 <HAL_ADC_ConfigChannel+0x6e2>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a3a      	ldr	r2, [pc, #232]	@ (8002c88 <HAL_ADC_ConfigChannel+0x7c8>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d127      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ba2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ba6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d121      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bb6:	d157      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002bbc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	482f      	ldr	r0, [pc, #188]	@ (8002c80 <HAL_ADC_ConfigChannel+0x7c0>)
 8002bc4:	f7fe ff17 	bl	80019f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bc8:	4b30      	ldr	r3, [pc, #192]	@ (8002c8c <HAL_ADC_ConfigChannel+0x7cc>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	099b      	lsrs	r3, r3, #6
 8002bce:	4a30      	ldr	r2, [pc, #192]	@ (8002c90 <HAL_ADC_ConfigChannel+0x7d0>)
 8002bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd4:	099b      	lsrs	r3, r3, #6
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	4613      	mov	r3, r2
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002be2:	e002      	b.n	8002bea <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1f9      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bf0:	e03a      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a27      	ldr	r2, [pc, #156]	@ (8002c94 <HAL_ADC_ConfigChannel+0x7d4>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d113      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10d      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a22      	ldr	r2, [pc, #136]	@ (8002c98 <HAL_ADC_ConfigChannel+0x7d8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d02a      	beq.n	8002c68 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4818      	ldr	r0, [pc, #96]	@ (8002c80 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c1e:	f7fe feea 	bl	80019f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c22:	e021      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a1c      	ldr	r2, [pc, #112]	@ (8002c9c <HAL_ADC_ConfigChannel+0x7dc>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d11c      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d116      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a16      	ldr	r2, [pc, #88]	@ (8002c98 <HAL_ADC_ConfigChannel+0x7d8>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d011      	beq.n	8002c68 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c48:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	480c      	ldr	r0, [pc, #48]	@ (8002c80 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c50:	f7fe fed1 	bl	80019f6 <LL_ADC_SetCommonPathInternalCh>
 8002c54:	e008      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c5a:	f043 0220 	orr.w	r2, r3, #32
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c70:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	37d8      	adds	r7, #216	@ 0xd8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	80080000 	.word	0x80080000
 8002c80:	50000300 	.word	0x50000300
 8002c84:	c3210000 	.word	0xc3210000
 8002c88:	90c00010 	.word	0x90c00010
 8002c8c:	20000008 	.word	0x20000008
 8002c90:	053e2d63 	.word	0x053e2d63
 8002c94:	c7520000 	.word	0xc7520000
 8002c98:	50000100 	.word	0x50000100
 8002c9c:	cb840000 	.word	0xcb840000

08002ca0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff f87f 	bl	8001db4 <LL_ADC_IsEnabled>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d169      	bne.n	8002d90 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	4b36      	ldr	r3, [pc, #216]	@ (8002d9c <ADC_Enable+0xfc>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00d      	beq.n	8002ce6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cce:	f043 0210 	orr.w	r2, r3, #16
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cda:	f043 0201 	orr.w	r2, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e055      	b.n	8002d92 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff f83a 	bl	8001d64 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002cf0:	482b      	ldr	r0, [pc, #172]	@ (8002da0 <ADC_Enable+0x100>)
 8002cf2:	f7fe fe93 	bl	8001a1c <LL_ADC_GetCommonPathInternalCh>
 8002cf6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002cf8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d013      	beq.n	8002d28 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d00:	4b28      	ldr	r3, [pc, #160]	@ (8002da4 <ADC_Enable+0x104>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	099b      	lsrs	r3, r3, #6
 8002d06:	4a28      	ldr	r2, [pc, #160]	@ (8002da8 <ADC_Enable+0x108>)
 8002d08:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0c:	099b      	lsrs	r3, r3, #6
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	4613      	mov	r3, r2
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d1a:	e002      	b.n	8002d22 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1f9      	bne.n	8002d1c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002d28:	f7fe fe24 	bl	8001974 <HAL_GetTick>
 8002d2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d2e:	e028      	b.n	8002d82 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff f83d 	bl	8001db4 <LL_ADC_IsEnabled>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d104      	bne.n	8002d4a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff f80d 	bl	8001d64 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d4a:	f7fe fe13 	bl	8001974 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d914      	bls.n	8002d82 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d00d      	beq.n	8002d82 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d6a:	f043 0210 	orr.w	r2, r3, #16
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d76:	f043 0201 	orr.w	r2, r3, #1
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e007      	b.n	8002d92 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d1cf      	bne.n	8002d30 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	8000003f 	.word	0x8000003f
 8002da0:	50000300 	.word	0x50000300
 8002da4:	20000008 	.word	0x20000008
 8002da8:	053e2d63 	.word	0x053e2d63

08002dac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff f80e 	bl	8001dda <LL_ADC_IsDisableOngoing>
 8002dbe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fe fff5 	bl	8001db4 <LL_ADC_IsEnabled>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d047      	beq.n	8002e60 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d144      	bne.n	8002e60 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 030d 	and.w	r3, r3, #13
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d10c      	bne.n	8002dfe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fe ffcf 	bl	8001d8c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2203      	movs	r2, #3
 8002df4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002df6:	f7fe fdbd 	bl	8001974 <HAL_GetTick>
 8002dfa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dfc:	e029      	b.n	8002e52 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e02:	f043 0210 	orr.w	r2, r3, #16
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e0e:	f043 0201 	orr.w	r2, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e023      	b.n	8002e62 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e1a:	f7fe fdab 	bl	8001974 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d914      	bls.n	8002e52 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00d      	beq.n	8002e52 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e3a:	f043 0210 	orr.w	r2, r3, #16
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e46:	f043 0201 	orr.w	r2, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e007      	b.n	8002e62 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1dc      	bne.n	8002e1a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <LL_ADC_IsEnabled>:
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <LL_ADC_IsEnabled+0x18>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <LL_ADC_IsEnabled+0x1a>
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <LL_ADC_StartCalibration>:
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002ea2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002eac:	4313      	orrs	r3, r2
 8002eae:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	609a      	str	r2, [r3, #8]
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <LL_ADC_IsCalibrationOnGoing>:
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ed2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ed6:	d101      	bne.n	8002edc <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e000      	b.n	8002ede <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <LL_ADC_REG_IsConversionOngoing>:
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d101      	bne.n	8002f02 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_ADCEx_Calibration_Start+0x1c>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e04d      	b.n	8002fc8 <HAL_ADCEx_Calibration_Start+0xb8>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff ff39 	bl	8002dac <ADC_Disable>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d136      	bne.n	8002fb2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f48:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f4c:	f023 0302 	bic.w	r3, r3, #2
 8002f50:	f043 0202 	orr.w	r2, r3, #2
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6839      	ldr	r1, [r7, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff ff96 	bl	8002e90 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002f64:	e014      	b.n	8002f90 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	4a18      	ldr	r2, [pc, #96]	@ (8002fd0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d90d      	bls.n	8002f90 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f78:	f023 0312 	bic.w	r3, r3, #18
 8002f7c:	f043 0210 	orr.w	r2, r3, #16
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e01b      	b.n	8002fc8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff ff94 	bl	8002ec2 <LL_ADC_IsCalibrationOnGoing>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1e2      	bne.n	8002f66 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa4:	f023 0303 	bic.w	r3, r3, #3
 8002fa8:	f043 0201 	orr.w	r2, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002fb0:	e005      	b.n	8002fbe <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb6:	f043 0210 	orr.w	r2, r3, #16
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	0004de01 	.word	0x0004de01

08002fd4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002fd4:	b590      	push	{r4, r7, lr}
 8002fd6:	b0a1      	sub	sp, #132	@ 0x84
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e08b      	b.n	800310a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002ffe:	2300      	movs	r3, #0
 8003000:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800300a:	d102      	bne.n	8003012 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800300c:	4b41      	ldr	r3, [pc, #260]	@ (8003114 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	e001      	b.n	8003016 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003012:	2300      	movs	r3, #0
 8003014:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10b      	bne.n	8003034 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003020:	f043 0220 	orr.w	r2, r3, #32
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e06a      	b.n	800310a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff ff57 	bl	8002eea <LL_ADC_REG_IsConversionOngoing>
 800303c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff ff51 	bl	8002eea <LL_ADC_REG_IsConversionOngoing>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d14c      	bne.n	80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800304e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003050:	2b00      	cmp	r3, #0
 8003052:	d149      	bne.n	80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003054:	4b30      	ldr	r3, [pc, #192]	@ (8003118 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003056:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d028      	beq.n	80030b2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003060:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	6859      	ldr	r1, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003072:	035b      	lsls	r3, r3, #13
 8003074:	430b      	orrs	r3, r1
 8003076:	431a      	orrs	r2, r3
 8003078:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800307a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800307c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003080:	f7ff fef3 	bl	8002e6a <LL_ADC_IsEnabled>
 8003084:	4604      	mov	r4, r0
 8003086:	4823      	ldr	r0, [pc, #140]	@ (8003114 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003088:	f7ff feef 	bl	8002e6a <LL_ADC_IsEnabled>
 800308c:	4603      	mov	r3, r0
 800308e:	4323      	orrs	r3, r4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d133      	bne.n	80030fc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003094:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800309c:	f023 030f 	bic.w	r3, r3, #15
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	6811      	ldr	r1, [r2, #0]
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	6892      	ldr	r2, [r2, #8]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	431a      	orrs	r2, r3
 80030ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030ae:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030b0:	e024      	b.n	80030fc <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80030b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030bc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030be:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80030c2:	f7ff fed2 	bl	8002e6a <LL_ADC_IsEnabled>
 80030c6:	4604      	mov	r4, r0
 80030c8:	4812      	ldr	r0, [pc, #72]	@ (8003114 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80030ca:	f7ff fece 	bl	8002e6a <LL_ADC_IsEnabled>
 80030ce:	4603      	mov	r3, r0
 80030d0:	4323      	orrs	r3, r4
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d112      	bne.n	80030fc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80030d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80030de:	f023 030f 	bic.w	r3, r3, #15
 80030e2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80030e4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030e6:	e009      	b.n	80030fc <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ec:	f043 0220 	orr.w	r2, r3, #32
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80030fa:	e000      	b.n	80030fe <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003106:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800310a:	4618      	mov	r0, r3
 800310c:	3784      	adds	r7, #132	@ 0x84
 800310e:	46bd      	mov	sp, r7
 8003110:	bd90      	pop	{r4, r7, pc}
 8003112:	bf00      	nop
 8003114:	50000100 	.word	0x50000100
 8003118:	50000300 	.word	0x50000300

0800311c <__NVIC_SetPriorityGrouping>:
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800312c:	4b0c      	ldr	r3, [pc, #48]	@ (8003160 <__NVIC_SetPriorityGrouping+0x44>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003138:	4013      	ands	r3, r2
 800313a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003144:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800314c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800314e:	4a04      	ldr	r2, [pc, #16]	@ (8003160 <__NVIC_SetPriorityGrouping+0x44>)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	60d3      	str	r3, [r2, #12]
}
 8003154:	bf00      	nop
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <__NVIC_GetPriorityGrouping>:
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003168:	4b04      	ldr	r3, [pc, #16]	@ (800317c <__NVIC_GetPriorityGrouping+0x18>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	0a1b      	lsrs	r3, r3, #8
 800316e:	f003 0307 	and.w	r3, r3, #7
}
 8003172:	4618      	mov	r0, r3
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	e000ed00 	.word	0xe000ed00

08003180 <__NVIC_SetPriority>:
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	6039      	str	r1, [r7, #0]
 800318a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800318c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003190:	2b00      	cmp	r3, #0
 8003192:	db0a      	blt.n	80031aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	b2da      	uxtb	r2, r3
 8003198:	490c      	ldr	r1, [pc, #48]	@ (80031cc <__NVIC_SetPriority+0x4c>)
 800319a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319e:	0112      	lsls	r2, r2, #4
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	440b      	add	r3, r1
 80031a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80031a8:	e00a      	b.n	80031c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	4908      	ldr	r1, [pc, #32]	@ (80031d0 <__NVIC_SetPriority+0x50>)
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	3b04      	subs	r3, #4
 80031b8:	0112      	lsls	r2, r2, #4
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	440b      	add	r3, r1
 80031be:	761a      	strb	r2, [r3, #24]
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	e000e100 	.word	0xe000e100
 80031d0:	e000ed00 	.word	0xe000ed00

080031d4 <NVIC_EncodePriority>:
{
 80031d4:	b480      	push	{r7}
 80031d6:	b089      	sub	sp, #36	@ 0x24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f1c3 0307 	rsb	r3, r3, #7
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	bf28      	it	cs
 80031f2:	2304      	movcs	r3, #4
 80031f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	3304      	adds	r3, #4
 80031fa:	2b06      	cmp	r3, #6
 80031fc:	d902      	bls.n	8003204 <NVIC_EncodePriority+0x30>
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	3b03      	subs	r3, #3
 8003202:	e000      	b.n	8003206 <NVIC_EncodePriority+0x32>
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003208:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43da      	mvns	r2, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	401a      	ands	r2, r3
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800321c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	fa01 f303 	lsl.w	r3, r1, r3
 8003226:	43d9      	mvns	r1, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800322c:	4313      	orrs	r3, r2
}
 800322e:	4618      	mov	r0, r3
 8003230:	3724      	adds	r7, #36	@ 0x24
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
	...

0800323c <SysTick_Config>:
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3b01      	subs	r3, #1
 8003248:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800324c:	d301      	bcc.n	8003252 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800324e:	2301      	movs	r3, #1
 8003250:	e00f      	b.n	8003272 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003252:	4a0a      	ldr	r2, [pc, #40]	@ (800327c <SysTick_Config+0x40>)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3b01      	subs	r3, #1
 8003258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800325a:	210f      	movs	r1, #15
 800325c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003260:	f7ff ff8e 	bl	8003180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003264:	4b05      	ldr	r3, [pc, #20]	@ (800327c <SysTick_Config+0x40>)
 8003266:	2200      	movs	r2, #0
 8003268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800326a:	4b04      	ldr	r3, [pc, #16]	@ (800327c <SysTick_Config+0x40>)
 800326c:	2207      	movs	r2, #7
 800326e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	e000e010 	.word	0xe000e010

08003280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7ff ff47 	bl	800311c <__NVIC_SetPriorityGrouping>
}
 800328e:	bf00      	nop
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b086      	sub	sp, #24
 800329a:	af00      	add	r7, sp, #0
 800329c:	4603      	mov	r3, r0
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
 80032a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032a4:	f7ff ff5e 	bl	8003164 <__NVIC_GetPriorityGrouping>
 80032a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	6978      	ldr	r0, [r7, #20]
 80032b0:	f7ff ff90 	bl	80031d4 <NVIC_EncodePriority>
 80032b4:	4602      	mov	r2, r0
 80032b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ba:	4611      	mov	r1, r2
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff ff5f 	bl	8003180 <__NVIC_SetPriority>
}
 80032c2:	bf00      	nop
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b082      	sub	sp, #8
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff ffb2 	bl	800323c <SysTick_Config>
 80032d8:	4603      	mov	r3, r0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032f2:	e15a      	b.n	80035aa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	2101      	movs	r1, #1
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003300:	4013      	ands	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 814c 	beq.w	80035a4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 0303 	and.w	r3, r3, #3
 8003314:	2b01      	cmp	r3, #1
 8003316:	d005      	beq.n	8003324 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003320:	2b02      	cmp	r3, #2
 8003322:	d130      	bne.n	8003386 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	2203      	movs	r2, #3
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4013      	ands	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800335a:	2201      	movs	r2, #1
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43db      	mvns	r3, r3
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4013      	ands	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	091b      	lsrs	r3, r3, #4
 8003370:	f003 0201 	and.w	r2, r3, #1
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	2b03      	cmp	r3, #3
 8003390:	d017      	beq.n	80033c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	2203      	movs	r2, #3
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4013      	ands	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d123      	bne.n	8003416 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	08da      	lsrs	r2, r3, #3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3208      	adds	r2, #8
 80033d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	220f      	movs	r2, #15
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43db      	mvns	r3, r3
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4013      	ands	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	691a      	ldr	r2, [r3, #16]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	08da      	lsrs	r2, r3, #3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3208      	adds	r2, #8
 8003410:	6939      	ldr	r1, [r7, #16]
 8003412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	2203      	movs	r2, #3
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4013      	ands	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 0203 	and.w	r2, r3, #3
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 80a6 	beq.w	80035a4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003458:	4b5b      	ldr	r3, [pc, #364]	@ (80035c8 <HAL_GPIO_Init+0x2e4>)
 800345a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800345c:	4a5a      	ldr	r2, [pc, #360]	@ (80035c8 <HAL_GPIO_Init+0x2e4>)
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	6613      	str	r3, [r2, #96]	@ 0x60
 8003464:	4b58      	ldr	r3, [pc, #352]	@ (80035c8 <HAL_GPIO_Init+0x2e4>)
 8003466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	60bb      	str	r3, [r7, #8]
 800346e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003470:	4a56      	ldr	r2, [pc, #344]	@ (80035cc <HAL_GPIO_Init+0x2e8>)
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	089b      	lsrs	r3, r3, #2
 8003476:	3302      	adds	r3, #2
 8003478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f003 0303 	and.w	r3, r3, #3
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	220f      	movs	r2, #15
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	43db      	mvns	r3, r3
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	4013      	ands	r3, r2
 8003492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800349a:	d01f      	beq.n	80034dc <HAL_GPIO_Init+0x1f8>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a4c      	ldr	r2, [pc, #304]	@ (80035d0 <HAL_GPIO_Init+0x2ec>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d019      	beq.n	80034d8 <HAL_GPIO_Init+0x1f4>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a4b      	ldr	r2, [pc, #300]	@ (80035d4 <HAL_GPIO_Init+0x2f0>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d013      	beq.n	80034d4 <HAL_GPIO_Init+0x1f0>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a4a      	ldr	r2, [pc, #296]	@ (80035d8 <HAL_GPIO_Init+0x2f4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d00d      	beq.n	80034d0 <HAL_GPIO_Init+0x1ec>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a49      	ldr	r2, [pc, #292]	@ (80035dc <HAL_GPIO_Init+0x2f8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d007      	beq.n	80034cc <HAL_GPIO_Init+0x1e8>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a48      	ldr	r2, [pc, #288]	@ (80035e0 <HAL_GPIO_Init+0x2fc>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d101      	bne.n	80034c8 <HAL_GPIO_Init+0x1e4>
 80034c4:	2305      	movs	r3, #5
 80034c6:	e00a      	b.n	80034de <HAL_GPIO_Init+0x1fa>
 80034c8:	2306      	movs	r3, #6
 80034ca:	e008      	b.n	80034de <HAL_GPIO_Init+0x1fa>
 80034cc:	2304      	movs	r3, #4
 80034ce:	e006      	b.n	80034de <HAL_GPIO_Init+0x1fa>
 80034d0:	2303      	movs	r3, #3
 80034d2:	e004      	b.n	80034de <HAL_GPIO_Init+0x1fa>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e002      	b.n	80034de <HAL_GPIO_Init+0x1fa>
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <HAL_GPIO_Init+0x1fa>
 80034dc:	2300      	movs	r3, #0
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	f002 0203 	and.w	r2, r2, #3
 80034e4:	0092      	lsls	r2, r2, #2
 80034e6:	4093      	lsls	r3, r2
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034ee:	4937      	ldr	r1, [pc, #220]	@ (80035cc <HAL_GPIO_Init+0x2e8>)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	089b      	lsrs	r3, r3, #2
 80034f4:	3302      	adds	r3, #2
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034fc:	4b39      	ldr	r3, [pc, #228]	@ (80035e4 <HAL_GPIO_Init+0x300>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	43db      	mvns	r3, r3
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	4013      	ands	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	4313      	orrs	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003520:	4a30      	ldr	r2, [pc, #192]	@ (80035e4 <HAL_GPIO_Init+0x300>)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003526:	4b2f      	ldr	r3, [pc, #188]	@ (80035e4 <HAL_GPIO_Init+0x300>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	43db      	mvns	r3, r3
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	4013      	ands	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4313      	orrs	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800354a:	4a26      	ldr	r2, [pc, #152]	@ (80035e4 <HAL_GPIO_Init+0x300>)
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003550:	4b24      	ldr	r3, [pc, #144]	@ (80035e4 <HAL_GPIO_Init+0x300>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	43db      	mvns	r3, r3
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4013      	ands	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4313      	orrs	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003574:	4a1b      	ldr	r2, [pc, #108]	@ (80035e4 <HAL_GPIO_Init+0x300>)
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800357a:	4b1a      	ldr	r3, [pc, #104]	@ (80035e4 <HAL_GPIO_Init+0x300>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	43db      	mvns	r3, r3
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4013      	ands	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800359e:	4a11      	ldr	r2, [pc, #68]	@ (80035e4 <HAL_GPIO_Init+0x300>)
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	3301      	adds	r3, #1
 80035a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	fa22 f303 	lsr.w	r3, r2, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f47f ae9d 	bne.w	80032f4 <HAL_GPIO_Init+0x10>
  }
}
 80035ba:	bf00      	nop
 80035bc:	bf00      	nop
 80035be:	371c      	adds	r7, #28
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	40021000 	.word	0x40021000
 80035cc:	40010000 	.word	0x40010000
 80035d0:	48000400 	.word	0x48000400
 80035d4:	48000800 	.word	0x48000800
 80035d8:	48000c00 	.word	0x48000c00
 80035dc:	48001000 	.word	0x48001000
 80035e0:	48001400 	.word	0x48001400
 80035e4:	40010400 	.word	0x40010400

080035e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	460b      	mov	r3, r1
 80035f2:	807b      	strh	r3, [r7, #2]
 80035f4:	4613      	mov	r3, r2
 80035f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035f8:	787b      	ldrb	r3, [r7, #1]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035fe:	887a      	ldrh	r2, [r7, #2]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003604:	e002      	b.n	800360c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003606:	887a      	ldrh	r2, [r7, #2]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	460b      	mov	r3, r1
 8003622:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800362a:	887a      	ldrh	r2, [r7, #2]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4013      	ands	r3, r2
 8003630:	041a      	lsls	r2, r3, #16
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	43d9      	mvns	r1, r3
 8003636:	887b      	ldrh	r3, [r7, #2]
 8003638:	400b      	ands	r3, r1
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	619a      	str	r2, [r3, #24]
}
 8003640:	bf00      	nop
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d141      	bne.n	80036de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800365a:	4b4b      	ldr	r3, [pc, #300]	@ (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003666:	d131      	bne.n	80036cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003668:	4b47      	ldr	r3, [pc, #284]	@ (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800366a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800366e:	4a46      	ldr	r2, [pc, #280]	@ (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003670:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003674:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003678:	4b43      	ldr	r3, [pc, #268]	@ (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003680:	4a41      	ldr	r2, [pc, #260]	@ (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003682:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003686:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003688:	4b40      	ldr	r3, [pc, #256]	@ (800378c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2232      	movs	r2, #50	@ 0x32
 800368e:	fb02 f303 	mul.w	r3, r2, r3
 8003692:	4a3f      	ldr	r2, [pc, #252]	@ (8003790 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003694:	fba2 2303 	umull	r2, r3, r2, r3
 8003698:	0c9b      	lsrs	r3, r3, #18
 800369a:	3301      	adds	r3, #1
 800369c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800369e:	e002      	b.n	80036a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036a6:	4b38      	ldr	r3, [pc, #224]	@ (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036b2:	d102      	bne.n	80036ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f2      	bne.n	80036a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036ba:	4b33      	ldr	r3, [pc, #204]	@ (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036c6:	d158      	bne.n	800377a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e057      	b.n	800377c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036d2:	4a2d      	ldr	r2, [pc, #180]	@ (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80036dc:	e04d      	b.n	800377a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036e4:	d141      	bne.n	800376a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036e6:	4b28      	ldr	r3, [pc, #160]	@ (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80036ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036f2:	d131      	bne.n	8003758 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036f4:	4b24      	ldr	r3, [pc, #144]	@ (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036fa:	4a23      	ldr	r2, [pc, #140]	@ (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003700:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003704:	4b20      	ldr	r3, [pc, #128]	@ (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800370c:	4a1e      	ldr	r2, [pc, #120]	@ (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800370e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003712:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003714:	4b1d      	ldr	r3, [pc, #116]	@ (800378c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2232      	movs	r2, #50	@ 0x32
 800371a:	fb02 f303 	mul.w	r3, r2, r3
 800371e:	4a1c      	ldr	r2, [pc, #112]	@ (8003790 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003720:	fba2 2303 	umull	r2, r3, r2, r3
 8003724:	0c9b      	lsrs	r3, r3, #18
 8003726:	3301      	adds	r3, #1
 8003728:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800372a:	e002      	b.n	8003732 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	3b01      	subs	r3, #1
 8003730:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003732:	4b15      	ldr	r3, [pc, #84]	@ (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800373a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800373e:	d102      	bne.n	8003746 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f2      	bne.n	800372c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003746:	4b10      	ldr	r3, [pc, #64]	@ (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800374e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003752:	d112      	bne.n	800377a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e011      	b.n	800377c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003758:	4b0b      	ldr	r3, [pc, #44]	@ (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800375a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800375e:	4a0a      	ldr	r2, [pc, #40]	@ (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003764:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003768:	e007      	b.n	800377a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800376a:	4b07      	ldr	r3, [pc, #28]	@ (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003772:	4a05      	ldr	r2, [pc, #20]	@ (8003788 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003774:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003778:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	40007000 	.word	0x40007000
 800378c:	20000008 	.word	0x20000008
 8003790:	431bde83 	.word	0x431bde83

08003794 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003798:	4b05      	ldr	r3, [pc, #20]	@ (80037b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	4a04      	ldr	r2, [pc, #16]	@ (80037b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800379e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037a2:	6093      	str	r3, [r2, #8]
}
 80037a4:	bf00      	nop
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40007000 	.word	0x40007000

080037b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e2fe      	b.n	8003dc4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d075      	beq.n	80038be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037d2:	4b97      	ldr	r3, [pc, #604]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 030c 	and.w	r3, r3, #12
 80037da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037dc:	4b94      	ldr	r3, [pc, #592]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f003 0303 	and.w	r3, r3, #3
 80037e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	2b0c      	cmp	r3, #12
 80037ea:	d102      	bne.n	80037f2 <HAL_RCC_OscConfig+0x3e>
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2b03      	cmp	r3, #3
 80037f0:	d002      	beq.n	80037f8 <HAL_RCC_OscConfig+0x44>
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	d10b      	bne.n	8003810 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f8:	4b8d      	ldr	r3, [pc, #564]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d05b      	beq.n	80038bc <HAL_RCC_OscConfig+0x108>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d157      	bne.n	80038bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e2d9      	b.n	8003dc4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003818:	d106      	bne.n	8003828 <HAL_RCC_OscConfig+0x74>
 800381a:	4b85      	ldr	r3, [pc, #532]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a84      	ldr	r2, [pc, #528]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 8003820:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	e01d      	b.n	8003864 <HAL_RCC_OscConfig+0xb0>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003830:	d10c      	bne.n	800384c <HAL_RCC_OscConfig+0x98>
 8003832:	4b7f      	ldr	r3, [pc, #508]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a7e      	ldr	r2, [pc, #504]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 8003838:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	4b7c      	ldr	r3, [pc, #496]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a7b      	ldr	r2, [pc, #492]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 8003844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	e00b      	b.n	8003864 <HAL_RCC_OscConfig+0xb0>
 800384c:	4b78      	ldr	r3, [pc, #480]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a77      	ldr	r2, [pc, #476]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 8003852:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003856:	6013      	str	r3, [r2, #0]
 8003858:	4b75      	ldr	r3, [pc, #468]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a74      	ldr	r2, [pc, #464]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 800385e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d013      	beq.n	8003894 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386c:	f7fe f882 	bl	8001974 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003874:	f7fe f87e 	bl	8001974 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b64      	cmp	r3, #100	@ 0x64
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e29e      	b.n	8003dc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003886:	4b6a      	ldr	r3, [pc, #424]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0f0      	beq.n	8003874 <HAL_RCC_OscConfig+0xc0>
 8003892:	e014      	b.n	80038be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003894:	f7fe f86e 	bl	8001974 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800389c:	f7fe f86a 	bl	8001974 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b64      	cmp	r3, #100	@ 0x64
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e28a      	b.n	8003dc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038ae:	4b60      	ldr	r3, [pc, #384]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f0      	bne.n	800389c <HAL_RCC_OscConfig+0xe8>
 80038ba:	e000      	b.n	80038be <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d075      	beq.n	80039b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ca:	4b59      	ldr	r3, [pc, #356]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
 80038d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038d4:	4b56      	ldr	r3, [pc, #344]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	2b0c      	cmp	r3, #12
 80038e2:	d102      	bne.n	80038ea <HAL_RCC_OscConfig+0x136>
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d002      	beq.n	80038f0 <HAL_RCC_OscConfig+0x13c>
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d11f      	bne.n	8003930 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038f0:	4b4f      	ldr	r3, [pc, #316]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <HAL_RCC_OscConfig+0x154>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e25d      	b.n	8003dc4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003908:	4b49      	ldr	r3, [pc, #292]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	061b      	lsls	r3, r3, #24
 8003916:	4946      	ldr	r1, [pc, #280]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 8003918:	4313      	orrs	r3, r2
 800391a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800391c:	4b45      	ldr	r3, [pc, #276]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f7fd ffdb 	bl	80018dc <HAL_InitTick>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d043      	beq.n	80039b4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e249      	b.n	8003dc4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d023      	beq.n	8003980 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003938:	4b3d      	ldr	r3, [pc, #244]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a3c      	ldr	r2, [pc, #240]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 800393e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003944:	f7fe f816 	bl	8001974 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800394c:	f7fe f812 	bl	8001974 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e232      	b.n	8003dc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800395e:	4b34      	ldr	r3, [pc, #208]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0f0      	beq.n	800394c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800396a:	4b31      	ldr	r3, [pc, #196]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	061b      	lsls	r3, r3, #24
 8003978:	492d      	ldr	r1, [pc, #180]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 800397a:	4313      	orrs	r3, r2
 800397c:	604b      	str	r3, [r1, #4]
 800397e:	e01a      	b.n	80039b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003980:	4b2b      	ldr	r3, [pc, #172]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a2a      	ldr	r2, [pc, #168]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 8003986:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800398a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398c:	f7fd fff2 	bl	8001974 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003994:	f7fd ffee 	bl	8001974 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e20e      	b.n	8003dc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039a6:	4b22      	ldr	r3, [pc, #136]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f0      	bne.n	8003994 <HAL_RCC_OscConfig+0x1e0>
 80039b2:	e000      	b.n	80039b6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d041      	beq.n	8003a46 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d01c      	beq.n	8003a04 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ca:	4b19      	ldr	r3, [pc, #100]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 80039cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039d0:	4a17      	ldr	r2, [pc, #92]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 80039d2:	f043 0301 	orr.w	r3, r3, #1
 80039d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039da:	f7fd ffcb 	bl	8001974 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e2:	f7fd ffc7 	bl	8001974 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e1e7      	b.n	8003dc4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 80039f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0ef      	beq.n	80039e2 <HAL_RCC_OscConfig+0x22e>
 8003a02:	e020      	b.n	8003a46 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a04:	4b0a      	ldr	r3, [pc, #40]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 8003a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a0a:	4a09      	ldr	r2, [pc, #36]	@ (8003a30 <HAL_RCC_OscConfig+0x27c>)
 8003a0c:	f023 0301 	bic.w	r3, r3, #1
 8003a10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a14:	f7fd ffae 	bl	8001974 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a1a:	e00d      	b.n	8003a38 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a1c:	f7fd ffaa 	bl	8001974 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d906      	bls.n	8003a38 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e1ca      	b.n	8003dc4 <HAL_RCC_OscConfig+0x610>
 8003a2e:	bf00      	nop
 8003a30:	40021000 	.word	0x40021000
 8003a34:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a38:	4b8c      	ldr	r3, [pc, #560]	@ (8003c6c <HAL_RCC_OscConfig+0x4b8>)
 8003a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1ea      	bne.n	8003a1c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0304 	and.w	r3, r3, #4
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 80a6 	beq.w	8003ba0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a54:	2300      	movs	r3, #0
 8003a56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a58:	4b84      	ldr	r3, [pc, #528]	@ (8003c6c <HAL_RCC_OscConfig+0x4b8>)
 8003a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_RCC_OscConfig+0x2b4>
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <HAL_RCC_OscConfig+0x2b6>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00d      	beq.n	8003a8a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a6e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c6c <HAL_RCC_OscConfig+0x4b8>)
 8003a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a72:	4a7e      	ldr	r2, [pc, #504]	@ (8003c6c <HAL_RCC_OscConfig+0x4b8>)
 8003a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a78:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a7a:	4b7c      	ldr	r3, [pc, #496]	@ (8003c6c <HAL_RCC_OscConfig+0x4b8>)
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a86:	2301      	movs	r3, #1
 8003a88:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a8a:	4b79      	ldr	r3, [pc, #484]	@ (8003c70 <HAL_RCC_OscConfig+0x4bc>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d118      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a96:	4b76      	ldr	r3, [pc, #472]	@ (8003c70 <HAL_RCC_OscConfig+0x4bc>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a75      	ldr	r2, [pc, #468]	@ (8003c70 <HAL_RCC_OscConfig+0x4bc>)
 8003a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aa2:	f7fd ff67 	bl	8001974 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aaa:	f7fd ff63 	bl	8001974 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e183      	b.n	8003dc4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003abc:	4b6c      	ldr	r3, [pc, #432]	@ (8003c70 <HAL_RCC_OscConfig+0x4bc>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0f0      	beq.n	8003aaa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d108      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x32e>
 8003ad0:	4b66      	ldr	r3, [pc, #408]	@ (8003c6c <HAL_RCC_OscConfig+0x4b8>)
 8003ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ad6:	4a65      	ldr	r2, [pc, #404]	@ (8003c6c <HAL_RCC_OscConfig+0x4b8>)
 8003ad8:	f043 0301 	orr.w	r3, r3, #1
 8003adc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ae0:	e024      	b.n	8003b2c <HAL_RCC_OscConfig+0x378>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	2b05      	cmp	r3, #5
 8003ae8:	d110      	bne.n	8003b0c <HAL_RCC_OscConfig+0x358>
 8003aea:	4b60      	ldr	r3, [pc, #384]	@ (8003c6c <HAL_RCC_OscConfig+0x4b8>)
 8003aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af0:	4a5e      	ldr	r2, [pc, #376]	@ (8003c6c <HAL_RCC_OscConfig+0x4b8>)
 8003af2:	f043 0304 	orr.w	r3, r3, #4
 8003af6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003afa:	4b5c      	ldr	r3, [pc, #368]	@ (8003c6c <HAL_RCC_OscConfig+0x4b8>)
 8003afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b00:	4a5a      	ldr	r2, [pc, #360]	@ (8003c6c <HAL_RCC_OscConfig+0x4b8>)
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b0a:	e00f      	b.n	8003b2c <HAL_RCC_OscConfig+0x378>
 8003b0c:	4b57      	ldr	r3, [pc, #348]	@ (8003c6c <HAL_RCC_OscConfig+0x4b8>)
 8003b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b12:	4a56      	ldr	r2, [pc, #344]	@ (8003c6c <HAL_RCC_OscConfig+0x4b8>)
 8003b14:	f023 0301 	bic.w	r3, r3, #1
 8003b18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b1c:	4b53      	ldr	r3, [pc, #332]	@ (8003c6c <HAL_RCC_OscConfig+0x4b8>)
 8003b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b22:	4a52      	ldr	r2, [pc, #328]	@ (8003c6c <HAL_RCC_OscConfig+0x4b8>)
 8003b24:	f023 0304 	bic.w	r3, r3, #4
 8003b28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d016      	beq.n	8003b62 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b34:	f7fd ff1e 	bl	8001974 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b3a:	e00a      	b.n	8003b52 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b3c:	f7fd ff1a 	bl	8001974 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e138      	b.n	8003dc4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b52:	4b46      	ldr	r3, [pc, #280]	@ (8003c6c <HAL_RCC_OscConfig+0x4b8>)
 8003b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0ed      	beq.n	8003b3c <HAL_RCC_OscConfig+0x388>
 8003b60:	e015      	b.n	8003b8e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b62:	f7fd ff07 	bl	8001974 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b68:	e00a      	b.n	8003b80 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6a:	f7fd ff03 	bl	8001974 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e121      	b.n	8003dc4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b80:	4b3a      	ldr	r3, [pc, #232]	@ (8003c6c <HAL_RCC_OscConfig+0x4b8>)
 8003b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1ed      	bne.n	8003b6a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b8e:	7ffb      	ldrb	r3, [r7, #31]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d105      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b94:	4b35      	ldr	r3, [pc, #212]	@ (8003c6c <HAL_RCC_OscConfig+0x4b8>)
 8003b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b98:	4a34      	ldr	r2, [pc, #208]	@ (8003c6c <HAL_RCC_OscConfig+0x4b8>)
 8003b9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b9e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d03c      	beq.n	8003c26 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d01c      	beq.n	8003bee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003bb4:	4b2d      	ldr	r3, [pc, #180]	@ (8003c6c <HAL_RCC_OscConfig+0x4b8>)
 8003bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bba:	4a2c      	ldr	r2, [pc, #176]	@ (8003c6c <HAL_RCC_OscConfig+0x4b8>)
 8003bbc:	f043 0301 	orr.w	r3, r3, #1
 8003bc0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc4:	f7fd fed6 	bl	8001974 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bcc:	f7fd fed2 	bl	8001974 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e0f2      	b.n	8003dc4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bde:	4b23      	ldr	r3, [pc, #140]	@ (8003c6c <HAL_RCC_OscConfig+0x4b8>)
 8003be0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0ef      	beq.n	8003bcc <HAL_RCC_OscConfig+0x418>
 8003bec:	e01b      	b.n	8003c26 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bee:	4b1f      	ldr	r3, [pc, #124]	@ (8003c6c <HAL_RCC_OscConfig+0x4b8>)
 8003bf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8003c6c <HAL_RCC_OscConfig+0x4b8>)
 8003bf6:	f023 0301 	bic.w	r3, r3, #1
 8003bfa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfe:	f7fd feb9 	bl	8001974 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c06:	f7fd feb5 	bl	8001974 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e0d5      	b.n	8003dc4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c18:	4b14      	ldr	r3, [pc, #80]	@ (8003c6c <HAL_RCC_OscConfig+0x4b8>)
 8003c1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1ef      	bne.n	8003c06 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 80c9 	beq.w	8003dc2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c30:	4b0e      	ldr	r3, [pc, #56]	@ (8003c6c <HAL_RCC_OscConfig+0x4b8>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 030c 	and.w	r3, r3, #12
 8003c38:	2b0c      	cmp	r3, #12
 8003c3a:	f000 8083 	beq.w	8003d44 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d15e      	bne.n	8003d04 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c46:	4b09      	ldr	r3, [pc, #36]	@ (8003c6c <HAL_RCC_OscConfig+0x4b8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a08      	ldr	r2, [pc, #32]	@ (8003c6c <HAL_RCC_OscConfig+0x4b8>)
 8003c4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c52:	f7fd fe8f 	bl	8001974 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c58:	e00c      	b.n	8003c74 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5a:	f7fd fe8b 	bl	8001974 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d905      	bls.n	8003c74 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e0ab      	b.n	8003dc4 <HAL_RCC_OscConfig+0x610>
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c74:	4b55      	ldr	r3, [pc, #340]	@ (8003dcc <HAL_RCC_OscConfig+0x618>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1ec      	bne.n	8003c5a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c80:	4b52      	ldr	r3, [pc, #328]	@ (8003dcc <HAL_RCC_OscConfig+0x618>)
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	4b52      	ldr	r3, [pc, #328]	@ (8003dd0 <HAL_RCC_OscConfig+0x61c>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6a11      	ldr	r1, [r2, #32]
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c90:	3a01      	subs	r2, #1
 8003c92:	0112      	lsls	r2, r2, #4
 8003c94:	4311      	orrs	r1, r2
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003c9a:	0212      	lsls	r2, r2, #8
 8003c9c:	4311      	orrs	r1, r2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003ca2:	0852      	lsrs	r2, r2, #1
 8003ca4:	3a01      	subs	r2, #1
 8003ca6:	0552      	lsls	r2, r2, #21
 8003ca8:	4311      	orrs	r1, r2
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003cae:	0852      	lsrs	r2, r2, #1
 8003cb0:	3a01      	subs	r2, #1
 8003cb2:	0652      	lsls	r2, r2, #25
 8003cb4:	4311      	orrs	r1, r2
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003cba:	06d2      	lsls	r2, r2, #27
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	4943      	ldr	r1, [pc, #268]	@ (8003dcc <HAL_RCC_OscConfig+0x618>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cc4:	4b41      	ldr	r3, [pc, #260]	@ (8003dcc <HAL_RCC_OscConfig+0x618>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a40      	ldr	r2, [pc, #256]	@ (8003dcc <HAL_RCC_OscConfig+0x618>)
 8003cca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cd0:	4b3e      	ldr	r3, [pc, #248]	@ (8003dcc <HAL_RCC_OscConfig+0x618>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	4a3d      	ldr	r2, [pc, #244]	@ (8003dcc <HAL_RCC_OscConfig+0x618>)
 8003cd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cda:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cdc:	f7fd fe4a 	bl	8001974 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce4:	f7fd fe46 	bl	8001974 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e066      	b.n	8003dc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cf6:	4b35      	ldr	r3, [pc, #212]	@ (8003dcc <HAL_RCC_OscConfig+0x618>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0f0      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x530>
 8003d02:	e05e      	b.n	8003dc2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d04:	4b31      	ldr	r3, [pc, #196]	@ (8003dcc <HAL_RCC_OscConfig+0x618>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a30      	ldr	r2, [pc, #192]	@ (8003dcc <HAL_RCC_OscConfig+0x618>)
 8003d0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d10:	f7fd fe30 	bl	8001974 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d18:	f7fd fe2c 	bl	8001974 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e04c      	b.n	8003dc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d2a:	4b28      	ldr	r3, [pc, #160]	@ (8003dcc <HAL_RCC_OscConfig+0x618>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003d36:	4b25      	ldr	r3, [pc, #148]	@ (8003dcc <HAL_RCC_OscConfig+0x618>)
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	4924      	ldr	r1, [pc, #144]	@ (8003dcc <HAL_RCC_OscConfig+0x618>)
 8003d3c:	4b25      	ldr	r3, [pc, #148]	@ (8003dd4 <HAL_RCC_OscConfig+0x620>)
 8003d3e:	4013      	ands	r3, r2
 8003d40:	60cb      	str	r3, [r1, #12]
 8003d42:	e03e      	b.n	8003dc2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e039      	b.n	8003dc4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003d50:	4b1e      	ldr	r3, [pc, #120]	@ (8003dcc <HAL_RCC_OscConfig+0x618>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f003 0203 	and.w	r2, r3, #3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d12c      	bne.n	8003dbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d123      	bne.n	8003dbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d80:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d11b      	bne.n	8003dbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d90:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d113      	bne.n	8003dbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da0:	085b      	lsrs	r3, r3, #1
 8003da2:	3b01      	subs	r3, #1
 8003da4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d109      	bne.n	8003dbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003db4:	085b      	lsrs	r3, r3, #1
 8003db6:	3b01      	subs	r3, #1
 8003db8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d001      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3720      	adds	r7, #32
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	019f800c 	.word	0x019f800c
 8003dd4:	feeefffc 	.word	0xfeeefffc

08003dd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003de2:	2300      	movs	r3, #0
 8003de4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e11e      	b.n	800402e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003df0:	4b91      	ldr	r3, [pc, #580]	@ (8004038 <HAL_RCC_ClockConfig+0x260>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d910      	bls.n	8003e20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dfe:	4b8e      	ldr	r3, [pc, #568]	@ (8004038 <HAL_RCC_ClockConfig+0x260>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f023 020f 	bic.w	r2, r3, #15
 8003e06:	498c      	ldr	r1, [pc, #560]	@ (8004038 <HAL_RCC_ClockConfig+0x260>)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0e:	4b8a      	ldr	r3, [pc, #552]	@ (8004038 <HAL_RCC_ClockConfig+0x260>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d001      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e106      	b.n	800402e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d073      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b03      	cmp	r3, #3
 8003e32:	d129      	bne.n	8003e88 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e34:	4b81      	ldr	r3, [pc, #516]	@ (800403c <HAL_RCC_ClockConfig+0x264>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e0f4      	b.n	800402e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e44:	f000 f966 	bl	8004114 <RCC_GetSysClockFreqFromPLLSource>
 8003e48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	4a7c      	ldr	r2, [pc, #496]	@ (8004040 <HAL_RCC_ClockConfig+0x268>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d93f      	bls.n	8003ed2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e52:	4b7a      	ldr	r3, [pc, #488]	@ (800403c <HAL_RCC_ClockConfig+0x264>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d009      	beq.n	8003e72 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d033      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d12f      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e72:	4b72      	ldr	r3, [pc, #456]	@ (800403c <HAL_RCC_ClockConfig+0x264>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e7a:	4a70      	ldr	r2, [pc, #448]	@ (800403c <HAL_RCC_ClockConfig+0x264>)
 8003e7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e80:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e82:	2380      	movs	r3, #128	@ 0x80
 8003e84:	617b      	str	r3, [r7, #20]
 8003e86:	e024      	b.n	8003ed2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d107      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e90:	4b6a      	ldr	r3, [pc, #424]	@ (800403c <HAL_RCC_ClockConfig+0x264>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d109      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0c6      	b.n	800402e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ea0:	4b66      	ldr	r3, [pc, #408]	@ (800403c <HAL_RCC_ClockConfig+0x264>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e0be      	b.n	800402e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003eb0:	f000 f8ce 	bl	8004050 <HAL_RCC_GetSysClockFreq>
 8003eb4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	4a61      	ldr	r2, [pc, #388]	@ (8004040 <HAL_RCC_ClockConfig+0x268>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d909      	bls.n	8003ed2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ebe:	4b5f      	ldr	r3, [pc, #380]	@ (800403c <HAL_RCC_ClockConfig+0x264>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ec6:	4a5d      	ldr	r2, [pc, #372]	@ (800403c <HAL_RCC_ClockConfig+0x264>)
 8003ec8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ecc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003ece:	2380      	movs	r3, #128	@ 0x80
 8003ed0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ed2:	4b5a      	ldr	r3, [pc, #360]	@ (800403c <HAL_RCC_ClockConfig+0x264>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f023 0203 	bic.w	r2, r3, #3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	4957      	ldr	r1, [pc, #348]	@ (800403c <HAL_RCC_ClockConfig+0x264>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ee4:	f7fd fd46 	bl	8001974 <HAL_GetTick>
 8003ee8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eea:	e00a      	b.n	8003f02 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eec:	f7fd fd42 	bl	8001974 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e095      	b.n	800402e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f02:	4b4e      	ldr	r3, [pc, #312]	@ (800403c <HAL_RCC_ClockConfig+0x264>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 020c 	and.w	r2, r3, #12
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d1eb      	bne.n	8003eec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d023      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f2c:	4b43      	ldr	r3, [pc, #268]	@ (800403c <HAL_RCC_ClockConfig+0x264>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	4a42      	ldr	r2, [pc, #264]	@ (800403c <HAL_RCC_ClockConfig+0x264>)
 8003f32:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f36:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0308 	and.w	r3, r3, #8
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d007      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f44:	4b3d      	ldr	r3, [pc, #244]	@ (800403c <HAL_RCC_ClockConfig+0x264>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003f4c:	4a3b      	ldr	r2, [pc, #236]	@ (800403c <HAL_RCC_ClockConfig+0x264>)
 8003f4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f54:	4b39      	ldr	r3, [pc, #228]	@ (800403c <HAL_RCC_ClockConfig+0x264>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	4936      	ldr	r1, [pc, #216]	@ (800403c <HAL_RCC_ClockConfig+0x264>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	608b      	str	r3, [r1, #8]
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	2b80      	cmp	r3, #128	@ 0x80
 8003f6c:	d105      	bne.n	8003f7a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f6e:	4b33      	ldr	r3, [pc, #204]	@ (800403c <HAL_RCC_ClockConfig+0x264>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	4a32      	ldr	r2, [pc, #200]	@ (800403c <HAL_RCC_ClockConfig+0x264>)
 8003f74:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f78:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f7a:	4b2f      	ldr	r3, [pc, #188]	@ (8004038 <HAL_RCC_ClockConfig+0x260>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d21d      	bcs.n	8003fc4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f88:	4b2b      	ldr	r3, [pc, #172]	@ (8004038 <HAL_RCC_ClockConfig+0x260>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f023 020f 	bic.w	r2, r3, #15
 8003f90:	4929      	ldr	r1, [pc, #164]	@ (8004038 <HAL_RCC_ClockConfig+0x260>)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f98:	f7fd fcec 	bl	8001974 <HAL_GetTick>
 8003f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9e:	e00a      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa0:	f7fd fce8 	bl	8001974 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e03b      	b.n	800402e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb6:	4b20      	ldr	r3, [pc, #128]	@ (8004038 <HAL_RCC_ClockConfig+0x260>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d1ed      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d008      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800403c <HAL_RCC_ClockConfig+0x264>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	4917      	ldr	r1, [pc, #92]	@ (800403c <HAL_RCC_ClockConfig+0x264>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d009      	beq.n	8004002 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fee:	4b13      	ldr	r3, [pc, #76]	@ (800403c <HAL_RCC_ClockConfig+0x264>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	490f      	ldr	r1, [pc, #60]	@ (800403c <HAL_RCC_ClockConfig+0x264>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004002:	f000 f825 	bl	8004050 <HAL_RCC_GetSysClockFreq>
 8004006:	4602      	mov	r2, r0
 8004008:	4b0c      	ldr	r3, [pc, #48]	@ (800403c <HAL_RCC_ClockConfig+0x264>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	091b      	lsrs	r3, r3, #4
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	490c      	ldr	r1, [pc, #48]	@ (8004044 <HAL_RCC_ClockConfig+0x26c>)
 8004014:	5ccb      	ldrb	r3, [r1, r3]
 8004016:	f003 031f 	and.w	r3, r3, #31
 800401a:	fa22 f303 	lsr.w	r3, r2, r3
 800401e:	4a0a      	ldr	r2, [pc, #40]	@ (8004048 <HAL_RCC_ClockConfig+0x270>)
 8004020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004022:	4b0a      	ldr	r3, [pc, #40]	@ (800404c <HAL_RCC_ClockConfig+0x274>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f7fd fc58 	bl	80018dc <HAL_InitTick>
 800402c:	4603      	mov	r3, r0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40022000 	.word	0x40022000
 800403c:	40021000 	.word	0x40021000
 8004040:	04c4b400 	.word	0x04c4b400
 8004044:	08006dd4 	.word	0x08006dd4
 8004048:	20000008 	.word	0x20000008
 800404c:	2000000c 	.word	0x2000000c

08004050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004056:	4b2c      	ldr	r3, [pc, #176]	@ (8004108 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 030c 	and.w	r3, r3, #12
 800405e:	2b04      	cmp	r3, #4
 8004060:	d102      	bne.n	8004068 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004062:	4b2a      	ldr	r3, [pc, #168]	@ (800410c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004064:	613b      	str	r3, [r7, #16]
 8004066:	e047      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004068:	4b27      	ldr	r3, [pc, #156]	@ (8004108 <HAL_RCC_GetSysClockFreq+0xb8>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f003 030c 	and.w	r3, r3, #12
 8004070:	2b08      	cmp	r3, #8
 8004072:	d102      	bne.n	800407a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004074:	4b26      	ldr	r3, [pc, #152]	@ (8004110 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	e03e      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800407a:	4b23      	ldr	r3, [pc, #140]	@ (8004108 <HAL_RCC_GetSysClockFreq+0xb8>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
 8004082:	2b0c      	cmp	r3, #12
 8004084:	d136      	bne.n	80040f4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004086:	4b20      	ldr	r3, [pc, #128]	@ (8004108 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004090:	4b1d      	ldr	r3, [pc, #116]	@ (8004108 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	091b      	lsrs	r3, r3, #4
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	3301      	adds	r3, #1
 800409c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2b03      	cmp	r3, #3
 80040a2:	d10c      	bne.n	80040be <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040a4:	4a1a      	ldr	r2, [pc, #104]	@ (8004110 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ac:	4a16      	ldr	r2, [pc, #88]	@ (8004108 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040ae:	68d2      	ldr	r2, [r2, #12]
 80040b0:	0a12      	lsrs	r2, r2, #8
 80040b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040b6:	fb02 f303 	mul.w	r3, r2, r3
 80040ba:	617b      	str	r3, [r7, #20]
      break;
 80040bc:	e00c      	b.n	80040d8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040be:	4a13      	ldr	r2, [pc, #76]	@ (800410c <HAL_RCC_GetSysClockFreq+0xbc>)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c6:	4a10      	ldr	r2, [pc, #64]	@ (8004108 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040c8:	68d2      	ldr	r2, [r2, #12]
 80040ca:	0a12      	lsrs	r2, r2, #8
 80040cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040d0:	fb02 f303 	mul.w	r3, r2, r3
 80040d4:	617b      	str	r3, [r7, #20]
      break;
 80040d6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004108 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	0e5b      	lsrs	r3, r3, #25
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	3301      	adds	r3, #1
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	e001      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80040f8:	693b      	ldr	r3, [r7, #16]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	371c      	adds	r7, #28
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40021000 	.word	0x40021000
 800410c:	00f42400 	.word	0x00f42400
 8004110:	007a1200 	.word	0x007a1200

08004114 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800411a:	4b1e      	ldr	r3, [pc, #120]	@ (8004194 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004124:	4b1b      	ldr	r3, [pc, #108]	@ (8004194 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	091b      	lsrs	r3, r3, #4
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	3301      	adds	r3, #1
 8004130:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	2b03      	cmp	r3, #3
 8004136:	d10c      	bne.n	8004152 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004138:	4a17      	ldr	r2, [pc, #92]	@ (8004198 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004140:	4a14      	ldr	r2, [pc, #80]	@ (8004194 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004142:	68d2      	ldr	r2, [r2, #12]
 8004144:	0a12      	lsrs	r2, r2, #8
 8004146:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800414a:	fb02 f303 	mul.w	r3, r2, r3
 800414e:	617b      	str	r3, [r7, #20]
    break;
 8004150:	e00c      	b.n	800416c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004152:	4a12      	ldr	r2, [pc, #72]	@ (800419c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	fbb2 f3f3 	udiv	r3, r2, r3
 800415a:	4a0e      	ldr	r2, [pc, #56]	@ (8004194 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800415c:	68d2      	ldr	r2, [r2, #12]
 800415e:	0a12      	lsrs	r2, r2, #8
 8004160:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004164:	fb02 f303 	mul.w	r3, r2, r3
 8004168:	617b      	str	r3, [r7, #20]
    break;
 800416a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800416c:	4b09      	ldr	r3, [pc, #36]	@ (8004194 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	0e5b      	lsrs	r3, r3, #25
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	3301      	adds	r3, #1
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	fbb2 f3f3 	udiv	r3, r2, r3
 8004184:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004186:	687b      	ldr	r3, [r7, #4]
}
 8004188:	4618      	mov	r0, r3
 800418a:	371c      	adds	r7, #28
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	40021000 	.word	0x40021000
 8004198:	007a1200 	.word	0x007a1200
 800419c:	00f42400 	.word	0x00f42400

080041a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041a8:	2300      	movs	r3, #0
 80041aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041ac:	2300      	movs	r3, #0
 80041ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 8098 	beq.w	80042ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041be:	2300      	movs	r3, #0
 80041c0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041c2:	4b43      	ldr	r3, [pc, #268]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10d      	bne.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ce:	4b40      	ldr	r3, [pc, #256]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d2:	4a3f      	ldr	r2, [pc, #252]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80041da:	4b3d      	ldr	r3, [pc, #244]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041e2:	60bb      	str	r3, [r7, #8]
 80041e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041e6:	2301      	movs	r3, #1
 80041e8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041ea:	4b3a      	ldr	r3, [pc, #232]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a39      	ldr	r2, [pc, #228]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041f6:	f7fd fbbd 	bl	8001974 <HAL_GetTick>
 80041fa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041fc:	e009      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041fe:	f7fd fbb9 	bl	8001974 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d902      	bls.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	74fb      	strb	r3, [r7, #19]
        break;
 8004210:	e005      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004212:	4b30      	ldr	r3, [pc, #192]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0ef      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800421e:	7cfb      	ldrb	r3, [r7, #19]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d159      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004224:	4b2a      	ldr	r3, [pc, #168]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800422a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800422e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d01e      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	429a      	cmp	r2, r3
 800423e:	d019      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004240:	4b23      	ldr	r3, [pc, #140]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004246:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800424a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800424c:	4b20      	ldr	r3, [pc, #128]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004252:	4a1f      	ldr	r2, [pc, #124]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004258:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800425c:	4b1c      	ldr	r3, [pc, #112]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800425e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004262:	4a1b      	ldr	r2, [pc, #108]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004264:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004268:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800426c:	4a18      	ldr	r2, [pc, #96]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d016      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427e:	f7fd fb79 	bl	8001974 <HAL_GetTick>
 8004282:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004284:	e00b      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004286:	f7fd fb75 	bl	8001974 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004294:	4293      	cmp	r3, r2
 8004296:	d902      	bls.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	74fb      	strb	r3, [r7, #19]
            break;
 800429c:	e006      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800429e:	4b0c      	ldr	r3, [pc, #48]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0ec      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80042ac:	7cfb      	ldrb	r3, [r7, #19]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10b      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042b2:	4b07      	ldr	r3, [pc, #28]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c0:	4903      	ldr	r1, [pc, #12]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80042c8:	e008      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042ca:	7cfb      	ldrb	r3, [r7, #19]
 80042cc:	74bb      	strb	r3, [r7, #18]
 80042ce:	e005      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80042d0:	40021000 	.word	0x40021000
 80042d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d8:	7cfb      	ldrb	r3, [r7, #19]
 80042da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042dc:	7c7b      	ldrb	r3, [r7, #17]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d105      	bne.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e2:	4ba6      	ldr	r3, [pc, #664]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042e6:	4aa5      	ldr	r2, [pc, #660]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042ec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042fa:	4ba0      	ldr	r3, [pc, #640]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004300:	f023 0203 	bic.w	r2, r3, #3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	499c      	ldr	r1, [pc, #624]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800431c:	4b97      	ldr	r3, [pc, #604]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004322:	f023 020c 	bic.w	r2, r3, #12
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	4994      	ldr	r1, [pc, #592]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0304 	and.w	r3, r3, #4
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800433e:	4b8f      	ldr	r3, [pc, #572]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004344:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	498b      	ldr	r1, [pc, #556]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004360:	4b86      	ldr	r3, [pc, #536]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004366:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	4983      	ldr	r1, [pc, #524]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004382:	4b7e      	ldr	r3, [pc, #504]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004388:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	497a      	ldr	r1, [pc, #488]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043a4:	4b75      	ldr	r3, [pc, #468]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043aa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	4972      	ldr	r1, [pc, #456]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043c6:	4b6d      	ldr	r3, [pc, #436]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	4969      	ldr	r1, [pc, #420]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043e8:	4b64      	ldr	r3, [pc, #400]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	4961      	ldr	r1, [pc, #388]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800440a:	4b5c      	ldr	r3, [pc, #368]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800440c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004410:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004418:	4958      	ldr	r1, [pc, #352]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004428:	2b00      	cmp	r3, #0
 800442a:	d015      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800442c:	4b53      	ldr	r3, [pc, #332]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004432:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800443a:	4950      	ldr	r1, [pc, #320]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004446:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800444a:	d105      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800444c:	4b4b      	ldr	r3, [pc, #300]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	4a4a      	ldr	r2, [pc, #296]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004452:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004456:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004460:	2b00      	cmp	r3, #0
 8004462:	d015      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004464:	4b45      	ldr	r3, [pc, #276]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004472:	4942      	ldr	r1, [pc, #264]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004482:	d105      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004484:	4b3d      	ldr	r3, [pc, #244]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	4a3c      	ldr	r2, [pc, #240]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800448a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800448e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d015      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800449c:	4b37      	ldr	r3, [pc, #220]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044aa:	4934      	ldr	r1, [pc, #208]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044ba:	d105      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044bc:	4b2f      	ldr	r3, [pc, #188]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	4a2e      	ldr	r2, [pc, #184]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044c6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d015      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044d4:	4b29      	ldr	r3, [pc, #164]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044e2:	4926      	ldr	r1, [pc, #152]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044f2:	d105      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044f4:	4b21      	ldr	r3, [pc, #132]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	4a20      	ldr	r2, [pc, #128]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044fe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d015      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800450c:	4b1b      	ldr	r3, [pc, #108]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004512:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451a:	4918      	ldr	r1, [pc, #96]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004526:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800452a:	d105      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800452c:	4b13      	ldr	r3, [pc, #76]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	4a12      	ldr	r2, [pc, #72]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004532:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004536:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d015      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004544:	4b0d      	ldr	r3, [pc, #52]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800454a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004552:	490a      	ldr	r1, [pc, #40]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004554:	4313      	orrs	r3, r2
 8004556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800455e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004562:	d105      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004564:	4b05      	ldr	r3, [pc, #20]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	4a04      	ldr	r2, [pc, #16]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800456a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800456e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004570:	7cbb      	ldrb	r3, [r7, #18]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	40021000 	.word	0x40021000

08004580 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e09d      	b.n	80046ce <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004596:	2b00      	cmp	r3, #0
 8004598:	d108      	bne.n	80045ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045a2:	d009      	beq.n	80045b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	61da      	str	r2, [r3, #28]
 80045aa:	e005      	b.n	80045b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d106      	bne.n	80045d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7fd f816 	bl	8001604 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80045f8:	d902      	bls.n	8004600 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	e002      	b.n	8004606 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004600:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004604:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800460e:	d007      	beq.n	8004620 <HAL_SPI_Init+0xa0>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004618:	d002      	beq.n	8004620 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004662:	ea42 0103 	orr.w	r1, r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	0c1b      	lsrs	r3, r3, #16
 800467c:	f003 0204 	and.w	r2, r3, #4
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004684:	f003 0310 	and.w	r3, r3, #16
 8004688:	431a      	orrs	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800469c:	ea42 0103 	orr.w	r1, r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	69da      	ldr	r2, [r3, #28]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b08a      	sub	sp, #40	@ 0x28
 80046da:	af00      	add	r7, sp, #0
 80046dc:	60f8      	str	r0, [r7, #12]
 80046de:	60b9      	str	r1, [r7, #8]
 80046e0:	607a      	str	r2, [r7, #4]
 80046e2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80046e4:	2301      	movs	r3, #1
 80046e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80046e8:	2300      	movs	r3, #0
 80046ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d101      	bne.n	80046fc <HAL_SPI_TransmitReceive+0x26>
 80046f8:	2302      	movs	r3, #2
 80046fa:	e20a      	b.n	8004b12 <HAL_SPI_TransmitReceive+0x43c>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004704:	f7fd f936 	bl	8001974 <HAL_GetTick>
 8004708:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004710:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004718:	887b      	ldrh	r3, [r7, #2]
 800471a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800471c:	887b      	ldrh	r3, [r7, #2]
 800471e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004720:	7efb      	ldrb	r3, [r7, #27]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d00e      	beq.n	8004744 <HAL_SPI_TransmitReceive+0x6e>
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800472c:	d106      	bne.n	800473c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d102      	bne.n	800473c <HAL_SPI_TransmitReceive+0x66>
 8004736:	7efb      	ldrb	r3, [r7, #27]
 8004738:	2b04      	cmp	r3, #4
 800473a:	d003      	beq.n	8004744 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800473c:	2302      	movs	r3, #2
 800473e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8004742:	e1e0      	b.n	8004b06 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d005      	beq.n	8004756 <HAL_SPI_TransmitReceive+0x80>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <HAL_SPI_TransmitReceive+0x80>
 8004750:	887b      	ldrh	r3, [r7, #2]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d103      	bne.n	800475e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800475c:	e1d3      	b.n	8004b06 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b04      	cmp	r3, #4
 8004768:	d003      	beq.n	8004772 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2205      	movs	r2, #5
 800476e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	887a      	ldrh	r2, [r7, #2]
 8004782:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	887a      	ldrh	r2, [r7, #2]
 800478a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	887a      	ldrh	r2, [r7, #2]
 8004798:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	887a      	ldrh	r2, [r7, #2]
 800479e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80047b4:	d802      	bhi.n	80047bc <HAL_SPI_TransmitReceive+0xe6>
 80047b6:	8a3b      	ldrh	r3, [r7, #16]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d908      	bls.n	80047ce <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80047ca:	605a      	str	r2, [r3, #4]
 80047cc:	e007      	b.n	80047de <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80047dc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e8:	2b40      	cmp	r3, #64	@ 0x40
 80047ea:	d007      	beq.n	80047fc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004804:	f240 8081 	bls.w	800490a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <HAL_SPI_TransmitReceive+0x140>
 8004810:	8a7b      	ldrh	r3, [r7, #18]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d16d      	bne.n	80048f2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800481a:	881a      	ldrh	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004826:	1c9a      	adds	r2, r3, #2
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004830:	b29b      	uxth	r3, r3
 8004832:	3b01      	subs	r3, #1
 8004834:	b29a      	uxth	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800483a:	e05a      	b.n	80048f2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b02      	cmp	r3, #2
 8004848:	d11b      	bne.n	8004882 <HAL_SPI_TransmitReceive+0x1ac>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800484e:	b29b      	uxth	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d016      	beq.n	8004882 <HAL_SPI_TransmitReceive+0x1ac>
 8004854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004856:	2b01      	cmp	r3, #1
 8004858:	d113      	bne.n	8004882 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485e:	881a      	ldrh	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486a:	1c9a      	adds	r2, r3, #2
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004874:	b29b      	uxth	r3, r3
 8004876:	3b01      	subs	r3, #1
 8004878:	b29a      	uxth	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b01      	cmp	r3, #1
 800488e:	d11c      	bne.n	80048ca <HAL_SPI_TransmitReceive+0x1f4>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004896:	b29b      	uxth	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d016      	beq.n	80048ca <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a6:	b292      	uxth	r2, r2
 80048a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ae:	1c9a      	adds	r2, r3, #2
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	3b01      	subs	r3, #1
 80048be:	b29a      	uxth	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048c6:	2301      	movs	r3, #1
 80048c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048ca:	f7fd f853 	bl	8001974 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d80b      	bhi.n	80048f2 <HAL_SPI_TransmitReceive+0x21c>
 80048da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048e0:	d007      	beq.n	80048f2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80048f0:	e109      	b.n	8004b06 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d19f      	bne.n	800483c <HAL_SPI_TransmitReceive+0x166>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004902:	b29b      	uxth	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d199      	bne.n	800483c <HAL_SPI_TransmitReceive+0x166>
 8004908:	e0e3      	b.n	8004ad2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <HAL_SPI_TransmitReceive+0x244>
 8004912:	8a7b      	ldrh	r3, [r7, #18]
 8004914:	2b01      	cmp	r3, #1
 8004916:	f040 80cf 	bne.w	8004ab8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800491e:	b29b      	uxth	r3, r3
 8004920:	2b01      	cmp	r3, #1
 8004922:	d912      	bls.n	800494a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004928:	881a      	ldrh	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004934:	1c9a      	adds	r2, r3, #2
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800493e:	b29b      	uxth	r3, r3
 8004940:	3b02      	subs	r3, #2
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004948:	e0b6      	b.n	8004ab8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	330c      	adds	r3, #12
 8004954:	7812      	ldrb	r2, [r2, #0]
 8004956:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004966:	b29b      	uxth	r3, r3
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004970:	e0a2      	b.n	8004ab8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b02      	cmp	r3, #2
 800497e:	d134      	bne.n	80049ea <HAL_SPI_TransmitReceive+0x314>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004984:	b29b      	uxth	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d02f      	beq.n	80049ea <HAL_SPI_TransmitReceive+0x314>
 800498a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498c:	2b01      	cmp	r3, #1
 800498e:	d12c      	bne.n	80049ea <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004994:	b29b      	uxth	r3, r3
 8004996:	2b01      	cmp	r3, #1
 8004998:	d912      	bls.n	80049c0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800499e:	881a      	ldrh	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049aa:	1c9a      	adds	r2, r3, #2
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	3b02      	subs	r3, #2
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049be:	e012      	b.n	80049e6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	330c      	adds	r3, #12
 80049ca:	7812      	ldrb	r2, [r2, #0]
 80049cc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d148      	bne.n	8004a8a <HAL_SPI_TransmitReceive+0x3b4>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d042      	beq.n	8004a8a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d923      	bls.n	8004a58 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1a:	b292      	uxth	r2, r2
 8004a1c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a22:	1c9a      	adds	r2, r3, #2
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	3b02      	subs	r3, #2
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d81f      	bhi.n	8004a86 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004a54:	605a      	str	r2, [r3, #4]
 8004a56:	e016      	b.n	8004a86 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f103 020c 	add.w	r2, r3, #12
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a64:	7812      	ldrb	r2, [r2, #0]
 8004a66:	b2d2      	uxtb	r2, r2
 8004a68:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a86:	2301      	movs	r3, #1
 8004a88:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a8a:	f7fc ff73 	bl	8001974 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d803      	bhi.n	8004aa2 <HAL_SPI_TransmitReceive+0x3cc>
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004aa0:	d102      	bne.n	8004aa8 <HAL_SPI_TransmitReceive+0x3d2>
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d107      	bne.n	8004ab8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004ab6:	e026      	b.n	8004b06 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f47f af57 	bne.w	8004972 <HAL_SPI_TransmitReceive+0x29c>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f47f af50 	bne.w	8004972 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ad2:	69fa      	ldr	r2, [r7, #28]
 8004ad4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 f93e 	bl	8004d58 <SPI_EndRxTxTransaction>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2220      	movs	r2, #32
 8004aec:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004afc:	e003      	b.n	8004b06 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004b0e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3728      	adds	r7, #40	@ 0x28
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	603b      	str	r3, [r7, #0]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b2c:	f7fc ff22 	bl	8001974 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b34:	1a9b      	subs	r3, r3, r2
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	4413      	add	r3, r2
 8004b3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b3c:	f7fc ff1a 	bl	8001974 <HAL_GetTick>
 8004b40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b42:	4b39      	ldr	r3, [pc, #228]	@ (8004c28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	015b      	lsls	r3, r3, #5
 8004b48:	0d1b      	lsrs	r3, r3, #20
 8004b4a:	69fa      	ldr	r2, [r7, #28]
 8004b4c:	fb02 f303 	mul.w	r3, r2, r3
 8004b50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b52:	e054      	b.n	8004bfe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b5a:	d050      	beq.n	8004bfe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b5c:	f7fc ff0a 	bl	8001974 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	69fa      	ldr	r2, [r7, #28]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d902      	bls.n	8004b72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d13d      	bne.n	8004bee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004b80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b8a:	d111      	bne.n	8004bb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b94:	d004      	beq.n	8004ba0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b9e:	d107      	bne.n	8004bb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bb8:	d10f      	bne.n	8004bda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e017      	b.n	8004c1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	4013      	ands	r3, r2
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	bf0c      	ite	eq
 8004c0e:	2301      	moveq	r3, #1
 8004c10:	2300      	movne	r3, #0
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	461a      	mov	r2, r3
 8004c16:	79fb      	ldrb	r3, [r7, #7]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d19b      	bne.n	8004b54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3720      	adds	r7, #32
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	20000008 	.word	0x20000008

08004c2c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b08a      	sub	sp, #40	@ 0x28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
 8004c38:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004c3e:	f7fc fe99 	bl	8001974 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c46:	1a9b      	subs	r3, r3, r2
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004c4e:	f7fc fe91 	bl	8001974 <HAL_GetTick>
 8004c52:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	330c      	adds	r3, #12
 8004c5a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004c5c:	4b3d      	ldr	r3, [pc, #244]	@ (8004d54 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	4613      	mov	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4413      	add	r3, r2
 8004c66:	00da      	lsls	r2, r3, #3
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	0d1b      	lsrs	r3, r3, #20
 8004c6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c6e:	fb02 f303 	mul.w	r3, r2, r3
 8004c72:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004c74:	e060      	b.n	8004d38 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004c7c:	d107      	bne.n	8004c8e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d104      	bne.n	8004c8e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004c8c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c94:	d050      	beq.n	8004d38 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c96:	f7fc fe6d 	bl	8001974 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d902      	bls.n	8004cac <SPI_WaitFifoStateUntilTimeout+0x80>
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d13d      	bne.n	8004d28 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004cba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cc4:	d111      	bne.n	8004cea <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cce:	d004      	beq.n	8004cda <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cd8:	d107      	bne.n	8004cea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ce8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cf2:	d10f      	bne.n	8004d14 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d12:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e010      	b.n	8004d4a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	3b01      	subs	r3, #1
 8004d36:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	4013      	ands	r3, r2
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d196      	bne.n	8004c76 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3728      	adds	r7, #40	@ 0x28
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	20000008 	.word	0x20000008

08004d58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af02      	add	r7, sp, #8
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f7ff ff5b 	bl	8004c2c <SPI_WaitFifoStateUntilTimeout>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d007      	beq.n	8004d8c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d80:	f043 0220 	orr.w	r2, r3, #32
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e027      	b.n	8004ddc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2200      	movs	r2, #0
 8004d94:	2180      	movs	r1, #128	@ 0x80
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f7ff fec0 	bl	8004b1c <SPI_WaitFlagStateUntilTimeout>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d007      	beq.n	8004db2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004da6:	f043 0220 	orr.w	r2, r3, #32
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e014      	b.n	8004ddc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f7ff ff34 	bl	8004c2c <SPI_WaitFifoStateUntilTimeout>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d007      	beq.n	8004dda <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dce:	f043 0220 	orr.w	r2, r3, #32
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e000      	b.n	8004ddc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e049      	b.n	8004e8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d106      	bne.n	8004e10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7fc fc3e 	bl	800168c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3304      	adds	r3, #4
 8004e20:	4619      	mov	r1, r3
 8004e22:	4610      	mov	r0, r2
 8004e24:	f000 faa4 	bl	8005370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b082      	sub	sp, #8
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e049      	b.n	8004f38 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d106      	bne.n	8004ebe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f841 	bl	8004f40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	3304      	adds	r3, #4
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	f000 fa4d 	bl	8005370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d101      	bne.n	8004f72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f6e:	2302      	movs	r3, #2
 8004f70:	e0ff      	b.n	8005172 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b14      	cmp	r3, #20
 8004f7e:	f200 80f0 	bhi.w	8005162 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f82:	a201      	add	r2, pc, #4	@ (adr r2, 8004f88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f88:	08004fdd 	.word	0x08004fdd
 8004f8c:	08005163 	.word	0x08005163
 8004f90:	08005163 	.word	0x08005163
 8004f94:	08005163 	.word	0x08005163
 8004f98:	0800501d 	.word	0x0800501d
 8004f9c:	08005163 	.word	0x08005163
 8004fa0:	08005163 	.word	0x08005163
 8004fa4:	08005163 	.word	0x08005163
 8004fa8:	0800505f 	.word	0x0800505f
 8004fac:	08005163 	.word	0x08005163
 8004fb0:	08005163 	.word	0x08005163
 8004fb4:	08005163 	.word	0x08005163
 8004fb8:	0800509f 	.word	0x0800509f
 8004fbc:	08005163 	.word	0x08005163
 8004fc0:	08005163 	.word	0x08005163
 8004fc4:	08005163 	.word	0x08005163
 8004fc8:	080050e1 	.word	0x080050e1
 8004fcc:	08005163 	.word	0x08005163
 8004fd0:	08005163 	.word	0x08005163
 8004fd4:	08005163 	.word	0x08005163
 8004fd8:	08005121 	.word	0x08005121
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68b9      	ldr	r1, [r7, #8]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 fa60 	bl	80054a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699a      	ldr	r2, [r3, #24]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0208 	orr.w	r2, r2, #8
 8004ff6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	699a      	ldr	r2, [r3, #24]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0204 	bic.w	r2, r2, #4
 8005006:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6999      	ldr	r1, [r3, #24]
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	691a      	ldr	r2, [r3, #16]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	619a      	str	r2, [r3, #24]
      break;
 800501a:	e0a5      	b.n	8005168 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68b9      	ldr	r1, [r7, #8]
 8005022:	4618      	mov	r0, r3
 8005024:	f000 fad0 	bl	80055c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	699a      	ldr	r2, [r3, #24]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005036:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	699a      	ldr	r2, [r3, #24]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005046:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6999      	ldr	r1, [r3, #24]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	021a      	lsls	r2, r3, #8
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	619a      	str	r2, [r3, #24]
      break;
 800505c:	e084      	b.n	8005168 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68b9      	ldr	r1, [r7, #8]
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fb39 	bl	80056dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	69da      	ldr	r2, [r3, #28]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f042 0208 	orr.w	r2, r2, #8
 8005078:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	69da      	ldr	r2, [r3, #28]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0204 	bic.w	r2, r2, #4
 8005088:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	69d9      	ldr	r1, [r3, #28]
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	691a      	ldr	r2, [r3, #16]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	61da      	str	r2, [r3, #28]
      break;
 800509c:	e064      	b.n	8005168 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68b9      	ldr	r1, [r7, #8]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 fba1 	bl	80057ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	69da      	ldr	r2, [r3, #28]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	69da      	ldr	r2, [r3, #28]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69d9      	ldr	r1, [r3, #28]
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	021a      	lsls	r2, r3, #8
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	61da      	str	r2, [r3, #28]
      break;
 80050de:	e043      	b.n	8005168 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68b9      	ldr	r1, [r7, #8]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 fc0a 	bl	8005900 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0208 	orr.w	r2, r2, #8
 80050fa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0204 	bic.w	r2, r2, #4
 800510a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	691a      	ldr	r2, [r3, #16]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800511e:	e023      	b.n	8005168 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68b9      	ldr	r1, [r7, #8]
 8005126:	4618      	mov	r0, r3
 8005128:	f000 fc4e 	bl	80059c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800513a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800514a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	021a      	lsls	r2, r3, #8
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	430a      	orrs	r2, r1
 800515e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005160:	e002      	b.n	8005168 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	75fb      	strb	r3, [r7, #23]
      break;
 8005166:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005170:	7dfb      	ldrb	r3, [r7, #23]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop

0800517c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005190:	2b01      	cmp	r3, #1
 8005192:	d101      	bne.n	8005198 <HAL_TIM_ConfigClockSource+0x1c>
 8005194:	2302      	movs	r3, #2
 8005196:	e0de      	b.n	8005356 <HAL_TIM_ConfigClockSource+0x1da>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80051b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80051ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a63      	ldr	r2, [pc, #396]	@ (8005360 <HAL_TIM_ConfigClockSource+0x1e4>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	f000 80a9 	beq.w	800532a <HAL_TIM_ConfigClockSource+0x1ae>
 80051d8:	4a61      	ldr	r2, [pc, #388]	@ (8005360 <HAL_TIM_ConfigClockSource+0x1e4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	f200 80ae 	bhi.w	800533c <HAL_TIM_ConfigClockSource+0x1c0>
 80051e0:	4a60      	ldr	r2, [pc, #384]	@ (8005364 <HAL_TIM_ConfigClockSource+0x1e8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	f000 80a1 	beq.w	800532a <HAL_TIM_ConfigClockSource+0x1ae>
 80051e8:	4a5e      	ldr	r2, [pc, #376]	@ (8005364 <HAL_TIM_ConfigClockSource+0x1e8>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	f200 80a6 	bhi.w	800533c <HAL_TIM_ConfigClockSource+0x1c0>
 80051f0:	4a5d      	ldr	r2, [pc, #372]	@ (8005368 <HAL_TIM_ConfigClockSource+0x1ec>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	f000 8099 	beq.w	800532a <HAL_TIM_ConfigClockSource+0x1ae>
 80051f8:	4a5b      	ldr	r2, [pc, #364]	@ (8005368 <HAL_TIM_ConfigClockSource+0x1ec>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	f200 809e 	bhi.w	800533c <HAL_TIM_ConfigClockSource+0x1c0>
 8005200:	4a5a      	ldr	r2, [pc, #360]	@ (800536c <HAL_TIM_ConfigClockSource+0x1f0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	f000 8091 	beq.w	800532a <HAL_TIM_ConfigClockSource+0x1ae>
 8005208:	4a58      	ldr	r2, [pc, #352]	@ (800536c <HAL_TIM_ConfigClockSource+0x1f0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	f200 8096 	bhi.w	800533c <HAL_TIM_ConfigClockSource+0x1c0>
 8005210:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005214:	f000 8089 	beq.w	800532a <HAL_TIM_ConfigClockSource+0x1ae>
 8005218:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800521c:	f200 808e 	bhi.w	800533c <HAL_TIM_ConfigClockSource+0x1c0>
 8005220:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005224:	d03e      	beq.n	80052a4 <HAL_TIM_ConfigClockSource+0x128>
 8005226:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800522a:	f200 8087 	bhi.w	800533c <HAL_TIM_ConfigClockSource+0x1c0>
 800522e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005232:	f000 8086 	beq.w	8005342 <HAL_TIM_ConfigClockSource+0x1c6>
 8005236:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800523a:	d87f      	bhi.n	800533c <HAL_TIM_ConfigClockSource+0x1c0>
 800523c:	2b70      	cmp	r3, #112	@ 0x70
 800523e:	d01a      	beq.n	8005276 <HAL_TIM_ConfigClockSource+0xfa>
 8005240:	2b70      	cmp	r3, #112	@ 0x70
 8005242:	d87b      	bhi.n	800533c <HAL_TIM_ConfigClockSource+0x1c0>
 8005244:	2b60      	cmp	r3, #96	@ 0x60
 8005246:	d050      	beq.n	80052ea <HAL_TIM_ConfigClockSource+0x16e>
 8005248:	2b60      	cmp	r3, #96	@ 0x60
 800524a:	d877      	bhi.n	800533c <HAL_TIM_ConfigClockSource+0x1c0>
 800524c:	2b50      	cmp	r3, #80	@ 0x50
 800524e:	d03c      	beq.n	80052ca <HAL_TIM_ConfigClockSource+0x14e>
 8005250:	2b50      	cmp	r3, #80	@ 0x50
 8005252:	d873      	bhi.n	800533c <HAL_TIM_ConfigClockSource+0x1c0>
 8005254:	2b40      	cmp	r3, #64	@ 0x40
 8005256:	d058      	beq.n	800530a <HAL_TIM_ConfigClockSource+0x18e>
 8005258:	2b40      	cmp	r3, #64	@ 0x40
 800525a:	d86f      	bhi.n	800533c <HAL_TIM_ConfigClockSource+0x1c0>
 800525c:	2b30      	cmp	r3, #48	@ 0x30
 800525e:	d064      	beq.n	800532a <HAL_TIM_ConfigClockSource+0x1ae>
 8005260:	2b30      	cmp	r3, #48	@ 0x30
 8005262:	d86b      	bhi.n	800533c <HAL_TIM_ConfigClockSource+0x1c0>
 8005264:	2b20      	cmp	r3, #32
 8005266:	d060      	beq.n	800532a <HAL_TIM_ConfigClockSource+0x1ae>
 8005268:	2b20      	cmp	r3, #32
 800526a:	d867      	bhi.n	800533c <HAL_TIM_ConfigClockSource+0x1c0>
 800526c:	2b00      	cmp	r3, #0
 800526e:	d05c      	beq.n	800532a <HAL_TIM_ConfigClockSource+0x1ae>
 8005270:	2b10      	cmp	r3, #16
 8005272:	d05a      	beq.n	800532a <HAL_TIM_ConfigClockSource+0x1ae>
 8005274:	e062      	b.n	800533c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005286:	f000 fc81 	bl	8005b8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005298:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	609a      	str	r2, [r3, #8]
      break;
 80052a2:	e04f      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052b4:	f000 fc6a 	bl	8005b8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689a      	ldr	r2, [r3, #8]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052c6:	609a      	str	r2, [r3, #8]
      break;
 80052c8:	e03c      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052d6:	461a      	mov	r2, r3
 80052d8:	f000 fbdc 	bl	8005a94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2150      	movs	r1, #80	@ 0x50
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 fc35 	bl	8005b52 <TIM_ITRx_SetConfig>
      break;
 80052e8:	e02c      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052f6:	461a      	mov	r2, r3
 80052f8:	f000 fbfb 	bl	8005af2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2160      	movs	r1, #96	@ 0x60
 8005302:	4618      	mov	r0, r3
 8005304:	f000 fc25 	bl	8005b52 <TIM_ITRx_SetConfig>
      break;
 8005308:	e01c      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005316:	461a      	mov	r2, r3
 8005318:	f000 fbbc 	bl	8005a94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2140      	movs	r1, #64	@ 0x40
 8005322:	4618      	mov	r0, r3
 8005324:	f000 fc15 	bl	8005b52 <TIM_ITRx_SetConfig>
      break;
 8005328:	e00c      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4619      	mov	r1, r3
 8005334:	4610      	mov	r0, r2
 8005336:	f000 fc0c 	bl	8005b52 <TIM_ITRx_SetConfig>
      break;
 800533a:	e003      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	73fb      	strb	r3, [r7, #15]
      break;
 8005340:	e000      	b.n	8005344 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005342:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005354:	7bfb      	ldrb	r3, [r7, #15]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	00100070 	.word	0x00100070
 8005364:	00100040 	.word	0x00100040
 8005368:	00100030 	.word	0x00100030
 800536c:	00100020 	.word	0x00100020

08005370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a42      	ldr	r2, [pc, #264]	@ (800548c <TIM_Base_SetConfig+0x11c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d00f      	beq.n	80053a8 <TIM_Base_SetConfig+0x38>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800538e:	d00b      	beq.n	80053a8 <TIM_Base_SetConfig+0x38>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a3f      	ldr	r2, [pc, #252]	@ (8005490 <TIM_Base_SetConfig+0x120>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d007      	beq.n	80053a8 <TIM_Base_SetConfig+0x38>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a3e      	ldr	r2, [pc, #248]	@ (8005494 <TIM_Base_SetConfig+0x124>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d003      	beq.n	80053a8 <TIM_Base_SetConfig+0x38>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a3d      	ldr	r2, [pc, #244]	@ (8005498 <TIM_Base_SetConfig+0x128>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d108      	bne.n	80053ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a33      	ldr	r2, [pc, #204]	@ (800548c <TIM_Base_SetConfig+0x11c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d01b      	beq.n	80053fa <TIM_Base_SetConfig+0x8a>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053c8:	d017      	beq.n	80053fa <TIM_Base_SetConfig+0x8a>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a30      	ldr	r2, [pc, #192]	@ (8005490 <TIM_Base_SetConfig+0x120>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d013      	beq.n	80053fa <TIM_Base_SetConfig+0x8a>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a2f      	ldr	r2, [pc, #188]	@ (8005494 <TIM_Base_SetConfig+0x124>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d00f      	beq.n	80053fa <TIM_Base_SetConfig+0x8a>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a2e      	ldr	r2, [pc, #184]	@ (8005498 <TIM_Base_SetConfig+0x128>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00b      	beq.n	80053fa <TIM_Base_SetConfig+0x8a>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a2d      	ldr	r2, [pc, #180]	@ (800549c <TIM_Base_SetConfig+0x12c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d007      	beq.n	80053fa <TIM_Base_SetConfig+0x8a>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a2c      	ldr	r2, [pc, #176]	@ (80054a0 <TIM_Base_SetConfig+0x130>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d003      	beq.n	80053fa <TIM_Base_SetConfig+0x8a>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a2b      	ldr	r2, [pc, #172]	@ (80054a4 <TIM_Base_SetConfig+0x134>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d108      	bne.n	800540c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	4313      	orrs	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a16      	ldr	r2, [pc, #88]	@ (800548c <TIM_Base_SetConfig+0x11c>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d00f      	beq.n	8005458 <TIM_Base_SetConfig+0xe8>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a17      	ldr	r2, [pc, #92]	@ (8005498 <TIM_Base_SetConfig+0x128>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d00b      	beq.n	8005458 <TIM_Base_SetConfig+0xe8>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a16      	ldr	r2, [pc, #88]	@ (800549c <TIM_Base_SetConfig+0x12c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d007      	beq.n	8005458 <TIM_Base_SetConfig+0xe8>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a15      	ldr	r2, [pc, #84]	@ (80054a0 <TIM_Base_SetConfig+0x130>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d003      	beq.n	8005458 <TIM_Base_SetConfig+0xe8>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a14      	ldr	r2, [pc, #80]	@ (80054a4 <TIM_Base_SetConfig+0x134>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d103      	bne.n	8005460 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	691a      	ldr	r2, [r3, #16]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b01      	cmp	r3, #1
 8005470:	d105      	bne.n	800547e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	f023 0201 	bic.w	r2, r3, #1
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	611a      	str	r2, [r3, #16]
  }
}
 800547e:	bf00      	nop
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	40012c00 	.word	0x40012c00
 8005490:	40000400 	.word	0x40000400
 8005494:	40000800 	.word	0x40000800
 8005498:	40013400 	.word	0x40013400
 800549c:	40014000 	.word	0x40014000
 80054a0:	40014400 	.word	0x40014400
 80054a4:	40014800 	.word	0x40014800

080054a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	f023 0201 	bic.w	r2, r3, #1
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 0303 	bic.w	r3, r3, #3
 80054e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f023 0302 	bic.w	r3, r3, #2
 80054f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a2c      	ldr	r2, [pc, #176]	@ (80055b4 <TIM_OC1_SetConfig+0x10c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00f      	beq.n	8005528 <TIM_OC1_SetConfig+0x80>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a2b      	ldr	r2, [pc, #172]	@ (80055b8 <TIM_OC1_SetConfig+0x110>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00b      	beq.n	8005528 <TIM_OC1_SetConfig+0x80>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a2a      	ldr	r2, [pc, #168]	@ (80055bc <TIM_OC1_SetConfig+0x114>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d007      	beq.n	8005528 <TIM_OC1_SetConfig+0x80>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a29      	ldr	r2, [pc, #164]	@ (80055c0 <TIM_OC1_SetConfig+0x118>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d003      	beq.n	8005528 <TIM_OC1_SetConfig+0x80>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a28      	ldr	r2, [pc, #160]	@ (80055c4 <TIM_OC1_SetConfig+0x11c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d10c      	bne.n	8005542 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f023 0308 	bic.w	r3, r3, #8
 800552e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	4313      	orrs	r3, r2
 8005538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f023 0304 	bic.w	r3, r3, #4
 8005540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a1b      	ldr	r2, [pc, #108]	@ (80055b4 <TIM_OC1_SetConfig+0x10c>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d00f      	beq.n	800556a <TIM_OC1_SetConfig+0xc2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a1a      	ldr	r2, [pc, #104]	@ (80055b8 <TIM_OC1_SetConfig+0x110>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d00b      	beq.n	800556a <TIM_OC1_SetConfig+0xc2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a19      	ldr	r2, [pc, #100]	@ (80055bc <TIM_OC1_SetConfig+0x114>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d007      	beq.n	800556a <TIM_OC1_SetConfig+0xc2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a18      	ldr	r2, [pc, #96]	@ (80055c0 <TIM_OC1_SetConfig+0x118>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d003      	beq.n	800556a <TIM_OC1_SetConfig+0xc2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a17      	ldr	r2, [pc, #92]	@ (80055c4 <TIM_OC1_SetConfig+0x11c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d111      	bne.n	800558e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4313      	orrs	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	4313      	orrs	r3, r2
 800558c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	621a      	str	r2, [r3, #32]
}
 80055a8:	bf00      	nop
 80055aa:	371c      	adds	r7, #28
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	40012c00 	.word	0x40012c00
 80055b8:	40013400 	.word	0x40013400
 80055bc:	40014000 	.word	0x40014000
 80055c0:	40014400 	.word	0x40014400
 80055c4:	40014800 	.word	0x40014800

080055c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	f023 0210 	bic.w	r2, r3, #16
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	021b      	lsls	r3, r3, #8
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	4313      	orrs	r3, r2
 800560e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f023 0320 	bic.w	r3, r3, #32
 8005616:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	011b      	lsls	r3, r3, #4
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	4313      	orrs	r3, r2
 8005622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a28      	ldr	r2, [pc, #160]	@ (80056c8 <TIM_OC2_SetConfig+0x100>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d003      	beq.n	8005634 <TIM_OC2_SetConfig+0x6c>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a27      	ldr	r2, [pc, #156]	@ (80056cc <TIM_OC2_SetConfig+0x104>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d10d      	bne.n	8005650 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800563a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	011b      	lsls	r3, r3, #4
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	4313      	orrs	r3, r2
 8005646:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800564e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a1d      	ldr	r2, [pc, #116]	@ (80056c8 <TIM_OC2_SetConfig+0x100>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d00f      	beq.n	8005678 <TIM_OC2_SetConfig+0xb0>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a1c      	ldr	r2, [pc, #112]	@ (80056cc <TIM_OC2_SetConfig+0x104>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d00b      	beq.n	8005678 <TIM_OC2_SetConfig+0xb0>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a1b      	ldr	r2, [pc, #108]	@ (80056d0 <TIM_OC2_SetConfig+0x108>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d007      	beq.n	8005678 <TIM_OC2_SetConfig+0xb0>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a1a      	ldr	r2, [pc, #104]	@ (80056d4 <TIM_OC2_SetConfig+0x10c>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d003      	beq.n	8005678 <TIM_OC2_SetConfig+0xb0>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a19      	ldr	r2, [pc, #100]	@ (80056d8 <TIM_OC2_SetConfig+0x110>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d113      	bne.n	80056a0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800567e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005686:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	4313      	orrs	r3, r2
 8005692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	4313      	orrs	r3, r2
 800569e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	621a      	str	r2, [r3, #32]
}
 80056ba:	bf00      	nop
 80056bc:	371c      	adds	r7, #28
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	40012c00 	.word	0x40012c00
 80056cc:	40013400 	.word	0x40013400
 80056d0:	40014000 	.word	0x40014000
 80056d4:	40014400 	.word	0x40014400
 80056d8:	40014800 	.word	0x40014800

080056dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800570a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800570e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 0303 	bic.w	r3, r3, #3
 8005716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4313      	orrs	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	021b      	lsls	r3, r3, #8
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	4313      	orrs	r3, r2
 8005734:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a27      	ldr	r2, [pc, #156]	@ (80057d8 <TIM_OC3_SetConfig+0xfc>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d003      	beq.n	8005746 <TIM_OC3_SetConfig+0x6a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a26      	ldr	r2, [pc, #152]	@ (80057dc <TIM_OC3_SetConfig+0x100>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d10d      	bne.n	8005762 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800574c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	021b      	lsls	r3, r3, #8
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	4313      	orrs	r3, r2
 8005758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a1c      	ldr	r2, [pc, #112]	@ (80057d8 <TIM_OC3_SetConfig+0xfc>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d00f      	beq.n	800578a <TIM_OC3_SetConfig+0xae>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a1b      	ldr	r2, [pc, #108]	@ (80057dc <TIM_OC3_SetConfig+0x100>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d00b      	beq.n	800578a <TIM_OC3_SetConfig+0xae>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a1a      	ldr	r2, [pc, #104]	@ (80057e0 <TIM_OC3_SetConfig+0x104>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d007      	beq.n	800578a <TIM_OC3_SetConfig+0xae>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a19      	ldr	r2, [pc, #100]	@ (80057e4 <TIM_OC3_SetConfig+0x108>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d003      	beq.n	800578a <TIM_OC3_SetConfig+0xae>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a18      	ldr	r2, [pc, #96]	@ (80057e8 <TIM_OC3_SetConfig+0x10c>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d113      	bne.n	80057b2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005790:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005798:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	011b      	lsls	r3, r3, #4
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	011b      	lsls	r3, r3, #4
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	621a      	str	r2, [r3, #32]
}
 80057cc:	bf00      	nop
 80057ce:	371c      	adds	r7, #28
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr
 80057d8:	40012c00 	.word	0x40012c00
 80057dc:	40013400 	.word	0x40013400
 80057e0:	40014000 	.word	0x40014000
 80057e4:	40014400 	.word	0x40014400
 80057e8:	40014800 	.word	0x40014800

080057ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800581a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800581e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	021b      	lsls	r3, r3, #8
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	4313      	orrs	r3, r2
 8005832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800583a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	031b      	lsls	r3, r3, #12
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	4313      	orrs	r3, r2
 8005846:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a28      	ldr	r2, [pc, #160]	@ (80058ec <TIM_OC4_SetConfig+0x100>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d003      	beq.n	8005858 <TIM_OC4_SetConfig+0x6c>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a27      	ldr	r2, [pc, #156]	@ (80058f0 <TIM_OC4_SetConfig+0x104>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d10d      	bne.n	8005874 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800585e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	031b      	lsls	r3, r3, #12
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	4313      	orrs	r3, r2
 800586a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005872:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a1d      	ldr	r2, [pc, #116]	@ (80058ec <TIM_OC4_SetConfig+0x100>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d00f      	beq.n	800589c <TIM_OC4_SetConfig+0xb0>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a1c      	ldr	r2, [pc, #112]	@ (80058f0 <TIM_OC4_SetConfig+0x104>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d00b      	beq.n	800589c <TIM_OC4_SetConfig+0xb0>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a1b      	ldr	r2, [pc, #108]	@ (80058f4 <TIM_OC4_SetConfig+0x108>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d007      	beq.n	800589c <TIM_OC4_SetConfig+0xb0>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a1a      	ldr	r2, [pc, #104]	@ (80058f8 <TIM_OC4_SetConfig+0x10c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d003      	beq.n	800589c <TIM_OC4_SetConfig+0xb0>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a19      	ldr	r2, [pc, #100]	@ (80058fc <TIM_OC4_SetConfig+0x110>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d113      	bne.n	80058c4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058a2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80058aa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	019b      	lsls	r3, r3, #6
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	019b      	lsls	r3, r3, #6
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	621a      	str	r2, [r3, #32]
}
 80058de:	bf00      	nop
 80058e0:	371c      	adds	r7, #28
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	40012c00 	.word	0x40012c00
 80058f0:	40013400 	.word	0x40013400
 80058f4:	40014000 	.word	0x40014000
 80058f8:	40014400 	.word	0x40014400
 80058fc:	40014800 	.word	0x40014800

08005900 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800592e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005944:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	041b      	lsls	r3, r3, #16
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	4313      	orrs	r3, r2
 8005950:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a17      	ldr	r2, [pc, #92]	@ (80059b4 <TIM_OC5_SetConfig+0xb4>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d00f      	beq.n	800597a <TIM_OC5_SetConfig+0x7a>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a16      	ldr	r2, [pc, #88]	@ (80059b8 <TIM_OC5_SetConfig+0xb8>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d00b      	beq.n	800597a <TIM_OC5_SetConfig+0x7a>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a15      	ldr	r2, [pc, #84]	@ (80059bc <TIM_OC5_SetConfig+0xbc>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d007      	beq.n	800597a <TIM_OC5_SetConfig+0x7a>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a14      	ldr	r2, [pc, #80]	@ (80059c0 <TIM_OC5_SetConfig+0xc0>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d003      	beq.n	800597a <TIM_OC5_SetConfig+0x7a>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a13      	ldr	r2, [pc, #76]	@ (80059c4 <TIM_OC5_SetConfig+0xc4>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d109      	bne.n	800598e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005980:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	021b      	lsls	r3, r3, #8
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	4313      	orrs	r3, r2
 800598c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	621a      	str	r2, [r3, #32]
}
 80059a8:	bf00      	nop
 80059aa:	371c      	adds	r7, #28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	40012c00 	.word	0x40012c00
 80059b8:	40013400 	.word	0x40013400
 80059bc:	40014000 	.word	0x40014000
 80059c0:	40014400 	.word	0x40014400
 80059c4:	40014800 	.word	0x40014800

080059c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	021b      	lsls	r3, r3, #8
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	051b      	lsls	r3, r3, #20
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a18      	ldr	r2, [pc, #96]	@ (8005a80 <TIM_OC6_SetConfig+0xb8>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d00f      	beq.n	8005a44 <TIM_OC6_SetConfig+0x7c>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a17      	ldr	r2, [pc, #92]	@ (8005a84 <TIM_OC6_SetConfig+0xbc>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d00b      	beq.n	8005a44 <TIM_OC6_SetConfig+0x7c>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a16      	ldr	r2, [pc, #88]	@ (8005a88 <TIM_OC6_SetConfig+0xc0>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d007      	beq.n	8005a44 <TIM_OC6_SetConfig+0x7c>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a15      	ldr	r2, [pc, #84]	@ (8005a8c <TIM_OC6_SetConfig+0xc4>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d003      	beq.n	8005a44 <TIM_OC6_SetConfig+0x7c>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a14      	ldr	r2, [pc, #80]	@ (8005a90 <TIM_OC6_SetConfig+0xc8>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d109      	bne.n	8005a58 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	029b      	lsls	r3, r3, #10
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	621a      	str	r2, [r3, #32]
}
 8005a72:	bf00      	nop
 8005a74:	371c      	adds	r7, #28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	40012c00 	.word	0x40012c00
 8005a84:	40013400 	.word	0x40013400
 8005a88:	40014000 	.word	0x40014000
 8005a8c:	40014400 	.word	0x40014400
 8005a90:	40014800 	.word	0x40014800

08005a94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b087      	sub	sp, #28
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	f023 0201 	bic.w	r2, r3, #1
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005abe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f023 030a 	bic.w	r3, r3, #10
 8005ad0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	621a      	str	r2, [r3, #32]
}
 8005ae6:	bf00      	nop
 8005ae8:	371c      	adds	r7, #28
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b087      	sub	sp, #28
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	60f8      	str	r0, [r7, #12]
 8005afa:	60b9      	str	r1, [r7, #8]
 8005afc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6a1b      	ldr	r3, [r3, #32]
 8005b08:	f023 0210 	bic.w	r2, r3, #16
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	031b      	lsls	r3, r3, #12
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005b2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	621a      	str	r2, [r3, #32]
}
 8005b46:	bf00      	nop
 8005b48:	371c      	adds	r7, #28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b085      	sub	sp, #20
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005b68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	f043 0307 	orr.w	r3, r3, #7
 8005b78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	609a      	str	r2, [r3, #8]
}
 8005b80:	bf00      	nop
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
 8005b98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ba6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	021a      	lsls	r2, r3, #8
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	609a      	str	r2, [r3, #8]
}
 8005bc0:	bf00      	nop
 8005bc2:	371c      	adds	r7, #28
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d101      	bne.n	8005be4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005be0:	2302      	movs	r3, #2
 8005be2:	e065      	b.n	8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a2c      	ldr	r2, [pc, #176]	@ (8005cbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d004      	beq.n	8005c18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a2b      	ldr	r2, [pc, #172]	@ (8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d108      	bne.n	8005c2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005c1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005c30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8005cbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d018      	beq.n	8005c84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c5a:	d013      	beq.n	8005c84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a18      	ldr	r2, [pc, #96]	@ (8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d00e      	beq.n	8005c84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a17      	ldr	r2, [pc, #92]	@ (8005cc8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d009      	beq.n	8005c84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a12      	ldr	r2, [pc, #72]	@ (8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d004      	beq.n	8005c84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a13      	ldr	r2, [pc, #76]	@ (8005ccc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d10c      	bne.n	8005c9e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	40012c00 	.word	0x40012c00
 8005cc0:	40013400 	.word	0x40013400
 8005cc4:	40000400 	.word	0x40000400
 8005cc8:	40000800 	.word	0x40000800
 8005ccc:	40014000 	.word	0x40014000

08005cd0 <std>:
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	b510      	push	{r4, lr}
 8005cd4:	4604      	mov	r4, r0
 8005cd6:	e9c0 3300 	strd	r3, r3, [r0]
 8005cda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cde:	6083      	str	r3, [r0, #8]
 8005ce0:	8181      	strh	r1, [r0, #12]
 8005ce2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ce4:	81c2      	strh	r2, [r0, #14]
 8005ce6:	6183      	str	r3, [r0, #24]
 8005ce8:	4619      	mov	r1, r3
 8005cea:	2208      	movs	r2, #8
 8005cec:	305c      	adds	r0, #92	@ 0x5c
 8005cee:	f000 f9f9 	bl	80060e4 <memset>
 8005cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8005d28 <std+0x58>)
 8005cf4:	6263      	str	r3, [r4, #36]	@ 0x24
 8005cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8005d2c <std+0x5c>)
 8005cf8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8005d30 <std+0x60>)
 8005cfc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8005d34 <std+0x64>)
 8005d00:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d02:	4b0d      	ldr	r3, [pc, #52]	@ (8005d38 <std+0x68>)
 8005d04:	6224      	str	r4, [r4, #32]
 8005d06:	429c      	cmp	r4, r3
 8005d08:	d006      	beq.n	8005d18 <std+0x48>
 8005d0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d0e:	4294      	cmp	r4, r2
 8005d10:	d002      	beq.n	8005d18 <std+0x48>
 8005d12:	33d0      	adds	r3, #208	@ 0xd0
 8005d14:	429c      	cmp	r4, r3
 8005d16:	d105      	bne.n	8005d24 <std+0x54>
 8005d18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d20:	f000 ba58 	b.w	80061d4 <__retarget_lock_init_recursive>
 8005d24:	bd10      	pop	{r4, pc}
 8005d26:	bf00      	nop
 8005d28:	08005f35 	.word	0x08005f35
 8005d2c:	08005f57 	.word	0x08005f57
 8005d30:	08005f8f 	.word	0x08005f8f
 8005d34:	08005fb3 	.word	0x08005fb3
 8005d38:	20000228 	.word	0x20000228

08005d3c <stdio_exit_handler>:
 8005d3c:	4a02      	ldr	r2, [pc, #8]	@ (8005d48 <stdio_exit_handler+0xc>)
 8005d3e:	4903      	ldr	r1, [pc, #12]	@ (8005d4c <stdio_exit_handler+0x10>)
 8005d40:	4803      	ldr	r0, [pc, #12]	@ (8005d50 <stdio_exit_handler+0x14>)
 8005d42:	f000 b869 	b.w	8005e18 <_fwalk_sglue>
 8005d46:	bf00      	nop
 8005d48:	20000014 	.word	0x20000014
 8005d4c:	08006a75 	.word	0x08006a75
 8005d50:	20000024 	.word	0x20000024

08005d54 <cleanup_stdio>:
 8005d54:	6841      	ldr	r1, [r0, #4]
 8005d56:	4b0c      	ldr	r3, [pc, #48]	@ (8005d88 <cleanup_stdio+0x34>)
 8005d58:	4299      	cmp	r1, r3
 8005d5a:	b510      	push	{r4, lr}
 8005d5c:	4604      	mov	r4, r0
 8005d5e:	d001      	beq.n	8005d64 <cleanup_stdio+0x10>
 8005d60:	f000 fe88 	bl	8006a74 <_fflush_r>
 8005d64:	68a1      	ldr	r1, [r4, #8]
 8005d66:	4b09      	ldr	r3, [pc, #36]	@ (8005d8c <cleanup_stdio+0x38>)
 8005d68:	4299      	cmp	r1, r3
 8005d6a:	d002      	beq.n	8005d72 <cleanup_stdio+0x1e>
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	f000 fe81 	bl	8006a74 <_fflush_r>
 8005d72:	68e1      	ldr	r1, [r4, #12]
 8005d74:	4b06      	ldr	r3, [pc, #24]	@ (8005d90 <cleanup_stdio+0x3c>)
 8005d76:	4299      	cmp	r1, r3
 8005d78:	d004      	beq.n	8005d84 <cleanup_stdio+0x30>
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d80:	f000 be78 	b.w	8006a74 <_fflush_r>
 8005d84:	bd10      	pop	{r4, pc}
 8005d86:	bf00      	nop
 8005d88:	20000228 	.word	0x20000228
 8005d8c:	20000290 	.word	0x20000290
 8005d90:	200002f8 	.word	0x200002f8

08005d94 <global_stdio_init.part.0>:
 8005d94:	b510      	push	{r4, lr}
 8005d96:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc4 <global_stdio_init.part.0+0x30>)
 8005d98:	4c0b      	ldr	r4, [pc, #44]	@ (8005dc8 <global_stdio_init.part.0+0x34>)
 8005d9a:	4a0c      	ldr	r2, [pc, #48]	@ (8005dcc <global_stdio_init.part.0+0x38>)
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	4620      	mov	r0, r4
 8005da0:	2200      	movs	r2, #0
 8005da2:	2104      	movs	r1, #4
 8005da4:	f7ff ff94 	bl	8005cd0 <std>
 8005da8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005dac:	2201      	movs	r2, #1
 8005dae:	2109      	movs	r1, #9
 8005db0:	f7ff ff8e 	bl	8005cd0 <std>
 8005db4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005db8:	2202      	movs	r2, #2
 8005dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dbe:	2112      	movs	r1, #18
 8005dc0:	f7ff bf86 	b.w	8005cd0 <std>
 8005dc4:	20000360 	.word	0x20000360
 8005dc8:	20000228 	.word	0x20000228
 8005dcc:	08005d3d 	.word	0x08005d3d

08005dd0 <__sfp_lock_acquire>:
 8005dd0:	4801      	ldr	r0, [pc, #4]	@ (8005dd8 <__sfp_lock_acquire+0x8>)
 8005dd2:	f000 ba00 	b.w	80061d6 <__retarget_lock_acquire_recursive>
 8005dd6:	bf00      	nop
 8005dd8:	20000369 	.word	0x20000369

08005ddc <__sfp_lock_release>:
 8005ddc:	4801      	ldr	r0, [pc, #4]	@ (8005de4 <__sfp_lock_release+0x8>)
 8005dde:	f000 b9fb 	b.w	80061d8 <__retarget_lock_release_recursive>
 8005de2:	bf00      	nop
 8005de4:	20000369 	.word	0x20000369

08005de8 <__sinit>:
 8005de8:	b510      	push	{r4, lr}
 8005dea:	4604      	mov	r4, r0
 8005dec:	f7ff fff0 	bl	8005dd0 <__sfp_lock_acquire>
 8005df0:	6a23      	ldr	r3, [r4, #32]
 8005df2:	b11b      	cbz	r3, 8005dfc <__sinit+0x14>
 8005df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005df8:	f7ff bff0 	b.w	8005ddc <__sfp_lock_release>
 8005dfc:	4b04      	ldr	r3, [pc, #16]	@ (8005e10 <__sinit+0x28>)
 8005dfe:	6223      	str	r3, [r4, #32]
 8005e00:	4b04      	ldr	r3, [pc, #16]	@ (8005e14 <__sinit+0x2c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1f5      	bne.n	8005df4 <__sinit+0xc>
 8005e08:	f7ff ffc4 	bl	8005d94 <global_stdio_init.part.0>
 8005e0c:	e7f2      	b.n	8005df4 <__sinit+0xc>
 8005e0e:	bf00      	nop
 8005e10:	08005d55 	.word	0x08005d55
 8005e14:	20000360 	.word	0x20000360

08005e18 <_fwalk_sglue>:
 8005e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e1c:	4607      	mov	r7, r0
 8005e1e:	4688      	mov	r8, r1
 8005e20:	4614      	mov	r4, r2
 8005e22:	2600      	movs	r6, #0
 8005e24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e28:	f1b9 0901 	subs.w	r9, r9, #1
 8005e2c:	d505      	bpl.n	8005e3a <_fwalk_sglue+0x22>
 8005e2e:	6824      	ldr	r4, [r4, #0]
 8005e30:	2c00      	cmp	r4, #0
 8005e32:	d1f7      	bne.n	8005e24 <_fwalk_sglue+0xc>
 8005e34:	4630      	mov	r0, r6
 8005e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e3a:	89ab      	ldrh	r3, [r5, #12]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d907      	bls.n	8005e50 <_fwalk_sglue+0x38>
 8005e40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e44:	3301      	adds	r3, #1
 8005e46:	d003      	beq.n	8005e50 <_fwalk_sglue+0x38>
 8005e48:	4629      	mov	r1, r5
 8005e4a:	4638      	mov	r0, r7
 8005e4c:	47c0      	blx	r8
 8005e4e:	4306      	orrs	r6, r0
 8005e50:	3568      	adds	r5, #104	@ 0x68
 8005e52:	e7e9      	b.n	8005e28 <_fwalk_sglue+0x10>

08005e54 <iprintf>:
 8005e54:	b40f      	push	{r0, r1, r2, r3}
 8005e56:	b507      	push	{r0, r1, r2, lr}
 8005e58:	4906      	ldr	r1, [pc, #24]	@ (8005e74 <iprintf+0x20>)
 8005e5a:	ab04      	add	r3, sp, #16
 8005e5c:	6808      	ldr	r0, [r1, #0]
 8005e5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e62:	6881      	ldr	r1, [r0, #8]
 8005e64:	9301      	str	r3, [sp, #4]
 8005e66:	f000 fadb 	bl	8006420 <_vfiprintf_r>
 8005e6a:	b003      	add	sp, #12
 8005e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e70:	b004      	add	sp, #16
 8005e72:	4770      	bx	lr
 8005e74:	20000020 	.word	0x20000020

08005e78 <_puts_r>:
 8005e78:	6a03      	ldr	r3, [r0, #32]
 8005e7a:	b570      	push	{r4, r5, r6, lr}
 8005e7c:	6884      	ldr	r4, [r0, #8]
 8005e7e:	4605      	mov	r5, r0
 8005e80:	460e      	mov	r6, r1
 8005e82:	b90b      	cbnz	r3, 8005e88 <_puts_r+0x10>
 8005e84:	f7ff ffb0 	bl	8005de8 <__sinit>
 8005e88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e8a:	07db      	lsls	r3, r3, #31
 8005e8c:	d405      	bmi.n	8005e9a <_puts_r+0x22>
 8005e8e:	89a3      	ldrh	r3, [r4, #12]
 8005e90:	0598      	lsls	r0, r3, #22
 8005e92:	d402      	bmi.n	8005e9a <_puts_r+0x22>
 8005e94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e96:	f000 f99e 	bl	80061d6 <__retarget_lock_acquire_recursive>
 8005e9a:	89a3      	ldrh	r3, [r4, #12]
 8005e9c:	0719      	lsls	r1, r3, #28
 8005e9e:	d502      	bpl.n	8005ea6 <_puts_r+0x2e>
 8005ea0:	6923      	ldr	r3, [r4, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d135      	bne.n	8005f12 <_puts_r+0x9a>
 8005ea6:	4621      	mov	r1, r4
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	f000 f8c5 	bl	8006038 <__swsetup_r>
 8005eae:	b380      	cbz	r0, 8005f12 <_puts_r+0x9a>
 8005eb0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005eb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005eb6:	07da      	lsls	r2, r3, #31
 8005eb8:	d405      	bmi.n	8005ec6 <_puts_r+0x4e>
 8005eba:	89a3      	ldrh	r3, [r4, #12]
 8005ebc:	059b      	lsls	r3, r3, #22
 8005ebe:	d402      	bmi.n	8005ec6 <_puts_r+0x4e>
 8005ec0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ec2:	f000 f989 	bl	80061d8 <__retarget_lock_release_recursive>
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	bd70      	pop	{r4, r5, r6, pc}
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	da04      	bge.n	8005ed8 <_puts_r+0x60>
 8005ece:	69a2      	ldr	r2, [r4, #24]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	dc17      	bgt.n	8005f04 <_puts_r+0x8c>
 8005ed4:	290a      	cmp	r1, #10
 8005ed6:	d015      	beq.n	8005f04 <_puts_r+0x8c>
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	1c5a      	adds	r2, r3, #1
 8005edc:	6022      	str	r2, [r4, #0]
 8005ede:	7019      	strb	r1, [r3, #0]
 8005ee0:	68a3      	ldr	r3, [r4, #8]
 8005ee2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	60a3      	str	r3, [r4, #8]
 8005eea:	2900      	cmp	r1, #0
 8005eec:	d1ed      	bne.n	8005eca <_puts_r+0x52>
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	da11      	bge.n	8005f16 <_puts_r+0x9e>
 8005ef2:	4622      	mov	r2, r4
 8005ef4:	210a      	movs	r1, #10
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	f000 f85f 	bl	8005fba <__swbuf_r>
 8005efc:	3001      	adds	r0, #1
 8005efe:	d0d7      	beq.n	8005eb0 <_puts_r+0x38>
 8005f00:	250a      	movs	r5, #10
 8005f02:	e7d7      	b.n	8005eb4 <_puts_r+0x3c>
 8005f04:	4622      	mov	r2, r4
 8005f06:	4628      	mov	r0, r5
 8005f08:	f000 f857 	bl	8005fba <__swbuf_r>
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	d1e7      	bne.n	8005ee0 <_puts_r+0x68>
 8005f10:	e7ce      	b.n	8005eb0 <_puts_r+0x38>
 8005f12:	3e01      	subs	r6, #1
 8005f14:	e7e4      	b.n	8005ee0 <_puts_r+0x68>
 8005f16:	6823      	ldr	r3, [r4, #0]
 8005f18:	1c5a      	adds	r2, r3, #1
 8005f1a:	6022      	str	r2, [r4, #0]
 8005f1c:	220a      	movs	r2, #10
 8005f1e:	701a      	strb	r2, [r3, #0]
 8005f20:	e7ee      	b.n	8005f00 <_puts_r+0x88>
	...

08005f24 <puts>:
 8005f24:	4b02      	ldr	r3, [pc, #8]	@ (8005f30 <puts+0xc>)
 8005f26:	4601      	mov	r1, r0
 8005f28:	6818      	ldr	r0, [r3, #0]
 8005f2a:	f7ff bfa5 	b.w	8005e78 <_puts_r>
 8005f2e:	bf00      	nop
 8005f30:	20000020 	.word	0x20000020

08005f34 <__sread>:
 8005f34:	b510      	push	{r4, lr}
 8005f36:	460c      	mov	r4, r1
 8005f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f3c:	f000 f8fc 	bl	8006138 <_read_r>
 8005f40:	2800      	cmp	r0, #0
 8005f42:	bfab      	itete	ge
 8005f44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f46:	89a3      	ldrhlt	r3, [r4, #12]
 8005f48:	181b      	addge	r3, r3, r0
 8005f4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f4e:	bfac      	ite	ge
 8005f50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f52:	81a3      	strhlt	r3, [r4, #12]
 8005f54:	bd10      	pop	{r4, pc}

08005f56 <__swrite>:
 8005f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f5a:	461f      	mov	r7, r3
 8005f5c:	898b      	ldrh	r3, [r1, #12]
 8005f5e:	05db      	lsls	r3, r3, #23
 8005f60:	4605      	mov	r5, r0
 8005f62:	460c      	mov	r4, r1
 8005f64:	4616      	mov	r6, r2
 8005f66:	d505      	bpl.n	8005f74 <__swrite+0x1e>
 8005f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f000 f8d0 	bl	8006114 <_lseek_r>
 8005f74:	89a3      	ldrh	r3, [r4, #12]
 8005f76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f7e:	81a3      	strh	r3, [r4, #12]
 8005f80:	4632      	mov	r2, r6
 8005f82:	463b      	mov	r3, r7
 8005f84:	4628      	mov	r0, r5
 8005f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f8a:	f000 b8e7 	b.w	800615c <_write_r>

08005f8e <__sseek>:
 8005f8e:	b510      	push	{r4, lr}
 8005f90:	460c      	mov	r4, r1
 8005f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f96:	f000 f8bd 	bl	8006114 <_lseek_r>
 8005f9a:	1c43      	adds	r3, r0, #1
 8005f9c:	89a3      	ldrh	r3, [r4, #12]
 8005f9e:	bf15      	itete	ne
 8005fa0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005fa2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005fa6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005faa:	81a3      	strheq	r3, [r4, #12]
 8005fac:	bf18      	it	ne
 8005fae:	81a3      	strhne	r3, [r4, #12]
 8005fb0:	bd10      	pop	{r4, pc}

08005fb2 <__sclose>:
 8005fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fb6:	f000 b89d 	b.w	80060f4 <_close_r>

08005fba <__swbuf_r>:
 8005fba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fbc:	460e      	mov	r6, r1
 8005fbe:	4614      	mov	r4, r2
 8005fc0:	4605      	mov	r5, r0
 8005fc2:	b118      	cbz	r0, 8005fcc <__swbuf_r+0x12>
 8005fc4:	6a03      	ldr	r3, [r0, #32]
 8005fc6:	b90b      	cbnz	r3, 8005fcc <__swbuf_r+0x12>
 8005fc8:	f7ff ff0e 	bl	8005de8 <__sinit>
 8005fcc:	69a3      	ldr	r3, [r4, #24]
 8005fce:	60a3      	str	r3, [r4, #8]
 8005fd0:	89a3      	ldrh	r3, [r4, #12]
 8005fd2:	071a      	lsls	r2, r3, #28
 8005fd4:	d501      	bpl.n	8005fda <__swbuf_r+0x20>
 8005fd6:	6923      	ldr	r3, [r4, #16]
 8005fd8:	b943      	cbnz	r3, 8005fec <__swbuf_r+0x32>
 8005fda:	4621      	mov	r1, r4
 8005fdc:	4628      	mov	r0, r5
 8005fde:	f000 f82b 	bl	8006038 <__swsetup_r>
 8005fe2:	b118      	cbz	r0, 8005fec <__swbuf_r+0x32>
 8005fe4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005fe8:	4638      	mov	r0, r7
 8005fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fec:	6823      	ldr	r3, [r4, #0]
 8005fee:	6922      	ldr	r2, [r4, #16]
 8005ff0:	1a98      	subs	r0, r3, r2
 8005ff2:	6963      	ldr	r3, [r4, #20]
 8005ff4:	b2f6      	uxtb	r6, r6
 8005ff6:	4283      	cmp	r3, r0
 8005ff8:	4637      	mov	r7, r6
 8005ffa:	dc05      	bgt.n	8006008 <__swbuf_r+0x4e>
 8005ffc:	4621      	mov	r1, r4
 8005ffe:	4628      	mov	r0, r5
 8006000:	f000 fd38 	bl	8006a74 <_fflush_r>
 8006004:	2800      	cmp	r0, #0
 8006006:	d1ed      	bne.n	8005fe4 <__swbuf_r+0x2a>
 8006008:	68a3      	ldr	r3, [r4, #8]
 800600a:	3b01      	subs	r3, #1
 800600c:	60a3      	str	r3, [r4, #8]
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	1c5a      	adds	r2, r3, #1
 8006012:	6022      	str	r2, [r4, #0]
 8006014:	701e      	strb	r6, [r3, #0]
 8006016:	6962      	ldr	r2, [r4, #20]
 8006018:	1c43      	adds	r3, r0, #1
 800601a:	429a      	cmp	r2, r3
 800601c:	d004      	beq.n	8006028 <__swbuf_r+0x6e>
 800601e:	89a3      	ldrh	r3, [r4, #12]
 8006020:	07db      	lsls	r3, r3, #31
 8006022:	d5e1      	bpl.n	8005fe8 <__swbuf_r+0x2e>
 8006024:	2e0a      	cmp	r6, #10
 8006026:	d1df      	bne.n	8005fe8 <__swbuf_r+0x2e>
 8006028:	4621      	mov	r1, r4
 800602a:	4628      	mov	r0, r5
 800602c:	f000 fd22 	bl	8006a74 <_fflush_r>
 8006030:	2800      	cmp	r0, #0
 8006032:	d0d9      	beq.n	8005fe8 <__swbuf_r+0x2e>
 8006034:	e7d6      	b.n	8005fe4 <__swbuf_r+0x2a>
	...

08006038 <__swsetup_r>:
 8006038:	b538      	push	{r3, r4, r5, lr}
 800603a:	4b29      	ldr	r3, [pc, #164]	@ (80060e0 <__swsetup_r+0xa8>)
 800603c:	4605      	mov	r5, r0
 800603e:	6818      	ldr	r0, [r3, #0]
 8006040:	460c      	mov	r4, r1
 8006042:	b118      	cbz	r0, 800604c <__swsetup_r+0x14>
 8006044:	6a03      	ldr	r3, [r0, #32]
 8006046:	b90b      	cbnz	r3, 800604c <__swsetup_r+0x14>
 8006048:	f7ff fece 	bl	8005de8 <__sinit>
 800604c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006050:	0719      	lsls	r1, r3, #28
 8006052:	d422      	bmi.n	800609a <__swsetup_r+0x62>
 8006054:	06da      	lsls	r2, r3, #27
 8006056:	d407      	bmi.n	8006068 <__swsetup_r+0x30>
 8006058:	2209      	movs	r2, #9
 800605a:	602a      	str	r2, [r5, #0]
 800605c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006060:	81a3      	strh	r3, [r4, #12]
 8006062:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006066:	e033      	b.n	80060d0 <__swsetup_r+0x98>
 8006068:	0758      	lsls	r0, r3, #29
 800606a:	d512      	bpl.n	8006092 <__swsetup_r+0x5a>
 800606c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800606e:	b141      	cbz	r1, 8006082 <__swsetup_r+0x4a>
 8006070:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006074:	4299      	cmp	r1, r3
 8006076:	d002      	beq.n	800607e <__swsetup_r+0x46>
 8006078:	4628      	mov	r0, r5
 800607a:	f000 f8af 	bl	80061dc <_free_r>
 800607e:	2300      	movs	r3, #0
 8006080:	6363      	str	r3, [r4, #52]	@ 0x34
 8006082:	89a3      	ldrh	r3, [r4, #12]
 8006084:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006088:	81a3      	strh	r3, [r4, #12]
 800608a:	2300      	movs	r3, #0
 800608c:	6063      	str	r3, [r4, #4]
 800608e:	6923      	ldr	r3, [r4, #16]
 8006090:	6023      	str	r3, [r4, #0]
 8006092:	89a3      	ldrh	r3, [r4, #12]
 8006094:	f043 0308 	orr.w	r3, r3, #8
 8006098:	81a3      	strh	r3, [r4, #12]
 800609a:	6923      	ldr	r3, [r4, #16]
 800609c:	b94b      	cbnz	r3, 80060b2 <__swsetup_r+0x7a>
 800609e:	89a3      	ldrh	r3, [r4, #12]
 80060a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80060a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060a8:	d003      	beq.n	80060b2 <__swsetup_r+0x7a>
 80060aa:	4621      	mov	r1, r4
 80060ac:	4628      	mov	r0, r5
 80060ae:	f000 fd2f 	bl	8006b10 <__smakebuf_r>
 80060b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060b6:	f013 0201 	ands.w	r2, r3, #1
 80060ba:	d00a      	beq.n	80060d2 <__swsetup_r+0x9a>
 80060bc:	2200      	movs	r2, #0
 80060be:	60a2      	str	r2, [r4, #8]
 80060c0:	6962      	ldr	r2, [r4, #20]
 80060c2:	4252      	negs	r2, r2
 80060c4:	61a2      	str	r2, [r4, #24]
 80060c6:	6922      	ldr	r2, [r4, #16]
 80060c8:	b942      	cbnz	r2, 80060dc <__swsetup_r+0xa4>
 80060ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80060ce:	d1c5      	bne.n	800605c <__swsetup_r+0x24>
 80060d0:	bd38      	pop	{r3, r4, r5, pc}
 80060d2:	0799      	lsls	r1, r3, #30
 80060d4:	bf58      	it	pl
 80060d6:	6962      	ldrpl	r2, [r4, #20]
 80060d8:	60a2      	str	r2, [r4, #8]
 80060da:	e7f4      	b.n	80060c6 <__swsetup_r+0x8e>
 80060dc:	2000      	movs	r0, #0
 80060de:	e7f7      	b.n	80060d0 <__swsetup_r+0x98>
 80060e0:	20000020 	.word	0x20000020

080060e4 <memset>:
 80060e4:	4402      	add	r2, r0
 80060e6:	4603      	mov	r3, r0
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d100      	bne.n	80060ee <memset+0xa>
 80060ec:	4770      	bx	lr
 80060ee:	f803 1b01 	strb.w	r1, [r3], #1
 80060f2:	e7f9      	b.n	80060e8 <memset+0x4>

080060f4 <_close_r>:
 80060f4:	b538      	push	{r3, r4, r5, lr}
 80060f6:	4d06      	ldr	r5, [pc, #24]	@ (8006110 <_close_r+0x1c>)
 80060f8:	2300      	movs	r3, #0
 80060fa:	4604      	mov	r4, r0
 80060fc:	4608      	mov	r0, r1
 80060fe:	602b      	str	r3, [r5, #0]
 8006100:	f7fb fb2e 	bl	8001760 <_close>
 8006104:	1c43      	adds	r3, r0, #1
 8006106:	d102      	bne.n	800610e <_close_r+0x1a>
 8006108:	682b      	ldr	r3, [r5, #0]
 800610a:	b103      	cbz	r3, 800610e <_close_r+0x1a>
 800610c:	6023      	str	r3, [r4, #0]
 800610e:	bd38      	pop	{r3, r4, r5, pc}
 8006110:	20000364 	.word	0x20000364

08006114 <_lseek_r>:
 8006114:	b538      	push	{r3, r4, r5, lr}
 8006116:	4d07      	ldr	r5, [pc, #28]	@ (8006134 <_lseek_r+0x20>)
 8006118:	4604      	mov	r4, r0
 800611a:	4608      	mov	r0, r1
 800611c:	4611      	mov	r1, r2
 800611e:	2200      	movs	r2, #0
 8006120:	602a      	str	r2, [r5, #0]
 8006122:	461a      	mov	r2, r3
 8006124:	f7fb fb43 	bl	80017ae <_lseek>
 8006128:	1c43      	adds	r3, r0, #1
 800612a:	d102      	bne.n	8006132 <_lseek_r+0x1e>
 800612c:	682b      	ldr	r3, [r5, #0]
 800612e:	b103      	cbz	r3, 8006132 <_lseek_r+0x1e>
 8006130:	6023      	str	r3, [r4, #0]
 8006132:	bd38      	pop	{r3, r4, r5, pc}
 8006134:	20000364 	.word	0x20000364

08006138 <_read_r>:
 8006138:	b538      	push	{r3, r4, r5, lr}
 800613a:	4d07      	ldr	r5, [pc, #28]	@ (8006158 <_read_r+0x20>)
 800613c:	4604      	mov	r4, r0
 800613e:	4608      	mov	r0, r1
 8006140:	4611      	mov	r1, r2
 8006142:	2200      	movs	r2, #0
 8006144:	602a      	str	r2, [r5, #0]
 8006146:	461a      	mov	r2, r3
 8006148:	f7fb faed 	bl	8001726 <_read>
 800614c:	1c43      	adds	r3, r0, #1
 800614e:	d102      	bne.n	8006156 <_read_r+0x1e>
 8006150:	682b      	ldr	r3, [r5, #0]
 8006152:	b103      	cbz	r3, 8006156 <_read_r+0x1e>
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	bd38      	pop	{r3, r4, r5, pc}
 8006158:	20000364 	.word	0x20000364

0800615c <_write_r>:
 800615c:	b538      	push	{r3, r4, r5, lr}
 800615e:	4d07      	ldr	r5, [pc, #28]	@ (800617c <_write_r+0x20>)
 8006160:	4604      	mov	r4, r0
 8006162:	4608      	mov	r0, r1
 8006164:	4611      	mov	r1, r2
 8006166:	2200      	movs	r2, #0
 8006168:	602a      	str	r2, [r5, #0]
 800616a:	461a      	mov	r2, r3
 800616c:	f7fb f95e 	bl	800142c <_write>
 8006170:	1c43      	adds	r3, r0, #1
 8006172:	d102      	bne.n	800617a <_write_r+0x1e>
 8006174:	682b      	ldr	r3, [r5, #0]
 8006176:	b103      	cbz	r3, 800617a <_write_r+0x1e>
 8006178:	6023      	str	r3, [r4, #0]
 800617a:	bd38      	pop	{r3, r4, r5, pc}
 800617c:	20000364 	.word	0x20000364

08006180 <__errno>:
 8006180:	4b01      	ldr	r3, [pc, #4]	@ (8006188 <__errno+0x8>)
 8006182:	6818      	ldr	r0, [r3, #0]
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	20000020 	.word	0x20000020

0800618c <__libc_init_array>:
 800618c:	b570      	push	{r4, r5, r6, lr}
 800618e:	4d0d      	ldr	r5, [pc, #52]	@ (80061c4 <__libc_init_array+0x38>)
 8006190:	4c0d      	ldr	r4, [pc, #52]	@ (80061c8 <__libc_init_array+0x3c>)
 8006192:	1b64      	subs	r4, r4, r5
 8006194:	10a4      	asrs	r4, r4, #2
 8006196:	2600      	movs	r6, #0
 8006198:	42a6      	cmp	r6, r4
 800619a:	d109      	bne.n	80061b0 <__libc_init_array+0x24>
 800619c:	4d0b      	ldr	r5, [pc, #44]	@ (80061cc <__libc_init_array+0x40>)
 800619e:	4c0c      	ldr	r4, [pc, #48]	@ (80061d0 <__libc_init_array+0x44>)
 80061a0:	f000 fd24 	bl	8006bec <_init>
 80061a4:	1b64      	subs	r4, r4, r5
 80061a6:	10a4      	asrs	r4, r4, #2
 80061a8:	2600      	movs	r6, #0
 80061aa:	42a6      	cmp	r6, r4
 80061ac:	d105      	bne.n	80061ba <__libc_init_array+0x2e>
 80061ae:	bd70      	pop	{r4, r5, r6, pc}
 80061b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061b4:	4798      	blx	r3
 80061b6:	3601      	adds	r6, #1
 80061b8:	e7ee      	b.n	8006198 <__libc_init_array+0xc>
 80061ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80061be:	4798      	blx	r3
 80061c0:	3601      	adds	r6, #1
 80061c2:	e7f2      	b.n	80061aa <__libc_init_array+0x1e>
 80061c4:	08006e20 	.word	0x08006e20
 80061c8:	08006e20 	.word	0x08006e20
 80061cc:	08006e20 	.word	0x08006e20
 80061d0:	08006e24 	.word	0x08006e24

080061d4 <__retarget_lock_init_recursive>:
 80061d4:	4770      	bx	lr

080061d6 <__retarget_lock_acquire_recursive>:
 80061d6:	4770      	bx	lr

080061d8 <__retarget_lock_release_recursive>:
 80061d8:	4770      	bx	lr
	...

080061dc <_free_r>:
 80061dc:	b538      	push	{r3, r4, r5, lr}
 80061de:	4605      	mov	r5, r0
 80061e0:	2900      	cmp	r1, #0
 80061e2:	d041      	beq.n	8006268 <_free_r+0x8c>
 80061e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061e8:	1f0c      	subs	r4, r1, #4
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	bfb8      	it	lt
 80061ee:	18e4      	addlt	r4, r4, r3
 80061f0:	f000 f8e0 	bl	80063b4 <__malloc_lock>
 80061f4:	4a1d      	ldr	r2, [pc, #116]	@ (800626c <_free_r+0x90>)
 80061f6:	6813      	ldr	r3, [r2, #0]
 80061f8:	b933      	cbnz	r3, 8006208 <_free_r+0x2c>
 80061fa:	6063      	str	r3, [r4, #4]
 80061fc:	6014      	str	r4, [r2, #0]
 80061fe:	4628      	mov	r0, r5
 8006200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006204:	f000 b8dc 	b.w	80063c0 <__malloc_unlock>
 8006208:	42a3      	cmp	r3, r4
 800620a:	d908      	bls.n	800621e <_free_r+0x42>
 800620c:	6820      	ldr	r0, [r4, #0]
 800620e:	1821      	adds	r1, r4, r0
 8006210:	428b      	cmp	r3, r1
 8006212:	bf01      	itttt	eq
 8006214:	6819      	ldreq	r1, [r3, #0]
 8006216:	685b      	ldreq	r3, [r3, #4]
 8006218:	1809      	addeq	r1, r1, r0
 800621a:	6021      	streq	r1, [r4, #0]
 800621c:	e7ed      	b.n	80061fa <_free_r+0x1e>
 800621e:	461a      	mov	r2, r3
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	b10b      	cbz	r3, 8006228 <_free_r+0x4c>
 8006224:	42a3      	cmp	r3, r4
 8006226:	d9fa      	bls.n	800621e <_free_r+0x42>
 8006228:	6811      	ldr	r1, [r2, #0]
 800622a:	1850      	adds	r0, r2, r1
 800622c:	42a0      	cmp	r0, r4
 800622e:	d10b      	bne.n	8006248 <_free_r+0x6c>
 8006230:	6820      	ldr	r0, [r4, #0]
 8006232:	4401      	add	r1, r0
 8006234:	1850      	adds	r0, r2, r1
 8006236:	4283      	cmp	r3, r0
 8006238:	6011      	str	r1, [r2, #0]
 800623a:	d1e0      	bne.n	80061fe <_free_r+0x22>
 800623c:	6818      	ldr	r0, [r3, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	6053      	str	r3, [r2, #4]
 8006242:	4408      	add	r0, r1
 8006244:	6010      	str	r0, [r2, #0]
 8006246:	e7da      	b.n	80061fe <_free_r+0x22>
 8006248:	d902      	bls.n	8006250 <_free_r+0x74>
 800624a:	230c      	movs	r3, #12
 800624c:	602b      	str	r3, [r5, #0]
 800624e:	e7d6      	b.n	80061fe <_free_r+0x22>
 8006250:	6820      	ldr	r0, [r4, #0]
 8006252:	1821      	adds	r1, r4, r0
 8006254:	428b      	cmp	r3, r1
 8006256:	bf04      	itt	eq
 8006258:	6819      	ldreq	r1, [r3, #0]
 800625a:	685b      	ldreq	r3, [r3, #4]
 800625c:	6063      	str	r3, [r4, #4]
 800625e:	bf04      	itt	eq
 8006260:	1809      	addeq	r1, r1, r0
 8006262:	6021      	streq	r1, [r4, #0]
 8006264:	6054      	str	r4, [r2, #4]
 8006266:	e7ca      	b.n	80061fe <_free_r+0x22>
 8006268:	bd38      	pop	{r3, r4, r5, pc}
 800626a:	bf00      	nop
 800626c:	20000370 	.word	0x20000370

08006270 <sbrk_aligned>:
 8006270:	b570      	push	{r4, r5, r6, lr}
 8006272:	4e0f      	ldr	r6, [pc, #60]	@ (80062b0 <sbrk_aligned+0x40>)
 8006274:	460c      	mov	r4, r1
 8006276:	6831      	ldr	r1, [r6, #0]
 8006278:	4605      	mov	r5, r0
 800627a:	b911      	cbnz	r1, 8006282 <sbrk_aligned+0x12>
 800627c:	f000 fca6 	bl	8006bcc <_sbrk_r>
 8006280:	6030      	str	r0, [r6, #0]
 8006282:	4621      	mov	r1, r4
 8006284:	4628      	mov	r0, r5
 8006286:	f000 fca1 	bl	8006bcc <_sbrk_r>
 800628a:	1c43      	adds	r3, r0, #1
 800628c:	d103      	bne.n	8006296 <sbrk_aligned+0x26>
 800628e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006292:	4620      	mov	r0, r4
 8006294:	bd70      	pop	{r4, r5, r6, pc}
 8006296:	1cc4      	adds	r4, r0, #3
 8006298:	f024 0403 	bic.w	r4, r4, #3
 800629c:	42a0      	cmp	r0, r4
 800629e:	d0f8      	beq.n	8006292 <sbrk_aligned+0x22>
 80062a0:	1a21      	subs	r1, r4, r0
 80062a2:	4628      	mov	r0, r5
 80062a4:	f000 fc92 	bl	8006bcc <_sbrk_r>
 80062a8:	3001      	adds	r0, #1
 80062aa:	d1f2      	bne.n	8006292 <sbrk_aligned+0x22>
 80062ac:	e7ef      	b.n	800628e <sbrk_aligned+0x1e>
 80062ae:	bf00      	nop
 80062b0:	2000036c 	.word	0x2000036c

080062b4 <_malloc_r>:
 80062b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062b8:	1ccd      	adds	r5, r1, #3
 80062ba:	f025 0503 	bic.w	r5, r5, #3
 80062be:	3508      	adds	r5, #8
 80062c0:	2d0c      	cmp	r5, #12
 80062c2:	bf38      	it	cc
 80062c4:	250c      	movcc	r5, #12
 80062c6:	2d00      	cmp	r5, #0
 80062c8:	4606      	mov	r6, r0
 80062ca:	db01      	blt.n	80062d0 <_malloc_r+0x1c>
 80062cc:	42a9      	cmp	r1, r5
 80062ce:	d904      	bls.n	80062da <_malloc_r+0x26>
 80062d0:	230c      	movs	r3, #12
 80062d2:	6033      	str	r3, [r6, #0]
 80062d4:	2000      	movs	r0, #0
 80062d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80063b0 <_malloc_r+0xfc>
 80062de:	f000 f869 	bl	80063b4 <__malloc_lock>
 80062e2:	f8d8 3000 	ldr.w	r3, [r8]
 80062e6:	461c      	mov	r4, r3
 80062e8:	bb44      	cbnz	r4, 800633c <_malloc_r+0x88>
 80062ea:	4629      	mov	r1, r5
 80062ec:	4630      	mov	r0, r6
 80062ee:	f7ff ffbf 	bl	8006270 <sbrk_aligned>
 80062f2:	1c43      	adds	r3, r0, #1
 80062f4:	4604      	mov	r4, r0
 80062f6:	d158      	bne.n	80063aa <_malloc_r+0xf6>
 80062f8:	f8d8 4000 	ldr.w	r4, [r8]
 80062fc:	4627      	mov	r7, r4
 80062fe:	2f00      	cmp	r7, #0
 8006300:	d143      	bne.n	800638a <_malloc_r+0xd6>
 8006302:	2c00      	cmp	r4, #0
 8006304:	d04b      	beq.n	800639e <_malloc_r+0xea>
 8006306:	6823      	ldr	r3, [r4, #0]
 8006308:	4639      	mov	r1, r7
 800630a:	4630      	mov	r0, r6
 800630c:	eb04 0903 	add.w	r9, r4, r3
 8006310:	f000 fc5c 	bl	8006bcc <_sbrk_r>
 8006314:	4581      	cmp	r9, r0
 8006316:	d142      	bne.n	800639e <_malloc_r+0xea>
 8006318:	6821      	ldr	r1, [r4, #0]
 800631a:	1a6d      	subs	r5, r5, r1
 800631c:	4629      	mov	r1, r5
 800631e:	4630      	mov	r0, r6
 8006320:	f7ff ffa6 	bl	8006270 <sbrk_aligned>
 8006324:	3001      	adds	r0, #1
 8006326:	d03a      	beq.n	800639e <_malloc_r+0xea>
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	442b      	add	r3, r5
 800632c:	6023      	str	r3, [r4, #0]
 800632e:	f8d8 3000 	ldr.w	r3, [r8]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	bb62      	cbnz	r2, 8006390 <_malloc_r+0xdc>
 8006336:	f8c8 7000 	str.w	r7, [r8]
 800633a:	e00f      	b.n	800635c <_malloc_r+0xa8>
 800633c:	6822      	ldr	r2, [r4, #0]
 800633e:	1b52      	subs	r2, r2, r5
 8006340:	d420      	bmi.n	8006384 <_malloc_r+0xd0>
 8006342:	2a0b      	cmp	r2, #11
 8006344:	d917      	bls.n	8006376 <_malloc_r+0xc2>
 8006346:	1961      	adds	r1, r4, r5
 8006348:	42a3      	cmp	r3, r4
 800634a:	6025      	str	r5, [r4, #0]
 800634c:	bf18      	it	ne
 800634e:	6059      	strne	r1, [r3, #4]
 8006350:	6863      	ldr	r3, [r4, #4]
 8006352:	bf08      	it	eq
 8006354:	f8c8 1000 	streq.w	r1, [r8]
 8006358:	5162      	str	r2, [r4, r5]
 800635a:	604b      	str	r3, [r1, #4]
 800635c:	4630      	mov	r0, r6
 800635e:	f000 f82f 	bl	80063c0 <__malloc_unlock>
 8006362:	f104 000b 	add.w	r0, r4, #11
 8006366:	1d23      	adds	r3, r4, #4
 8006368:	f020 0007 	bic.w	r0, r0, #7
 800636c:	1ac2      	subs	r2, r0, r3
 800636e:	bf1c      	itt	ne
 8006370:	1a1b      	subne	r3, r3, r0
 8006372:	50a3      	strne	r3, [r4, r2]
 8006374:	e7af      	b.n	80062d6 <_malloc_r+0x22>
 8006376:	6862      	ldr	r2, [r4, #4]
 8006378:	42a3      	cmp	r3, r4
 800637a:	bf0c      	ite	eq
 800637c:	f8c8 2000 	streq.w	r2, [r8]
 8006380:	605a      	strne	r2, [r3, #4]
 8006382:	e7eb      	b.n	800635c <_malloc_r+0xa8>
 8006384:	4623      	mov	r3, r4
 8006386:	6864      	ldr	r4, [r4, #4]
 8006388:	e7ae      	b.n	80062e8 <_malloc_r+0x34>
 800638a:	463c      	mov	r4, r7
 800638c:	687f      	ldr	r7, [r7, #4]
 800638e:	e7b6      	b.n	80062fe <_malloc_r+0x4a>
 8006390:	461a      	mov	r2, r3
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	42a3      	cmp	r3, r4
 8006396:	d1fb      	bne.n	8006390 <_malloc_r+0xdc>
 8006398:	2300      	movs	r3, #0
 800639a:	6053      	str	r3, [r2, #4]
 800639c:	e7de      	b.n	800635c <_malloc_r+0xa8>
 800639e:	230c      	movs	r3, #12
 80063a0:	6033      	str	r3, [r6, #0]
 80063a2:	4630      	mov	r0, r6
 80063a4:	f000 f80c 	bl	80063c0 <__malloc_unlock>
 80063a8:	e794      	b.n	80062d4 <_malloc_r+0x20>
 80063aa:	6005      	str	r5, [r0, #0]
 80063ac:	e7d6      	b.n	800635c <_malloc_r+0xa8>
 80063ae:	bf00      	nop
 80063b0:	20000370 	.word	0x20000370

080063b4 <__malloc_lock>:
 80063b4:	4801      	ldr	r0, [pc, #4]	@ (80063bc <__malloc_lock+0x8>)
 80063b6:	f7ff bf0e 	b.w	80061d6 <__retarget_lock_acquire_recursive>
 80063ba:	bf00      	nop
 80063bc:	20000368 	.word	0x20000368

080063c0 <__malloc_unlock>:
 80063c0:	4801      	ldr	r0, [pc, #4]	@ (80063c8 <__malloc_unlock+0x8>)
 80063c2:	f7ff bf09 	b.w	80061d8 <__retarget_lock_release_recursive>
 80063c6:	bf00      	nop
 80063c8:	20000368 	.word	0x20000368

080063cc <__sfputc_r>:
 80063cc:	6893      	ldr	r3, [r2, #8]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	b410      	push	{r4}
 80063d4:	6093      	str	r3, [r2, #8]
 80063d6:	da08      	bge.n	80063ea <__sfputc_r+0x1e>
 80063d8:	6994      	ldr	r4, [r2, #24]
 80063da:	42a3      	cmp	r3, r4
 80063dc:	db01      	blt.n	80063e2 <__sfputc_r+0x16>
 80063de:	290a      	cmp	r1, #10
 80063e0:	d103      	bne.n	80063ea <__sfputc_r+0x1e>
 80063e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063e6:	f7ff bde8 	b.w	8005fba <__swbuf_r>
 80063ea:	6813      	ldr	r3, [r2, #0]
 80063ec:	1c58      	adds	r0, r3, #1
 80063ee:	6010      	str	r0, [r2, #0]
 80063f0:	7019      	strb	r1, [r3, #0]
 80063f2:	4608      	mov	r0, r1
 80063f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <__sfputs_r>:
 80063fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063fc:	4606      	mov	r6, r0
 80063fe:	460f      	mov	r7, r1
 8006400:	4614      	mov	r4, r2
 8006402:	18d5      	adds	r5, r2, r3
 8006404:	42ac      	cmp	r4, r5
 8006406:	d101      	bne.n	800640c <__sfputs_r+0x12>
 8006408:	2000      	movs	r0, #0
 800640a:	e007      	b.n	800641c <__sfputs_r+0x22>
 800640c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006410:	463a      	mov	r2, r7
 8006412:	4630      	mov	r0, r6
 8006414:	f7ff ffda 	bl	80063cc <__sfputc_r>
 8006418:	1c43      	adds	r3, r0, #1
 800641a:	d1f3      	bne.n	8006404 <__sfputs_r+0xa>
 800641c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006420 <_vfiprintf_r>:
 8006420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006424:	460d      	mov	r5, r1
 8006426:	b09d      	sub	sp, #116	@ 0x74
 8006428:	4614      	mov	r4, r2
 800642a:	4698      	mov	r8, r3
 800642c:	4606      	mov	r6, r0
 800642e:	b118      	cbz	r0, 8006438 <_vfiprintf_r+0x18>
 8006430:	6a03      	ldr	r3, [r0, #32]
 8006432:	b90b      	cbnz	r3, 8006438 <_vfiprintf_r+0x18>
 8006434:	f7ff fcd8 	bl	8005de8 <__sinit>
 8006438:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800643a:	07d9      	lsls	r1, r3, #31
 800643c:	d405      	bmi.n	800644a <_vfiprintf_r+0x2a>
 800643e:	89ab      	ldrh	r3, [r5, #12]
 8006440:	059a      	lsls	r2, r3, #22
 8006442:	d402      	bmi.n	800644a <_vfiprintf_r+0x2a>
 8006444:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006446:	f7ff fec6 	bl	80061d6 <__retarget_lock_acquire_recursive>
 800644a:	89ab      	ldrh	r3, [r5, #12]
 800644c:	071b      	lsls	r3, r3, #28
 800644e:	d501      	bpl.n	8006454 <_vfiprintf_r+0x34>
 8006450:	692b      	ldr	r3, [r5, #16]
 8006452:	b99b      	cbnz	r3, 800647c <_vfiprintf_r+0x5c>
 8006454:	4629      	mov	r1, r5
 8006456:	4630      	mov	r0, r6
 8006458:	f7ff fdee 	bl	8006038 <__swsetup_r>
 800645c:	b170      	cbz	r0, 800647c <_vfiprintf_r+0x5c>
 800645e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006460:	07dc      	lsls	r4, r3, #31
 8006462:	d504      	bpl.n	800646e <_vfiprintf_r+0x4e>
 8006464:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006468:	b01d      	add	sp, #116	@ 0x74
 800646a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800646e:	89ab      	ldrh	r3, [r5, #12]
 8006470:	0598      	lsls	r0, r3, #22
 8006472:	d4f7      	bmi.n	8006464 <_vfiprintf_r+0x44>
 8006474:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006476:	f7ff feaf 	bl	80061d8 <__retarget_lock_release_recursive>
 800647a:	e7f3      	b.n	8006464 <_vfiprintf_r+0x44>
 800647c:	2300      	movs	r3, #0
 800647e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006480:	2320      	movs	r3, #32
 8006482:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006486:	f8cd 800c 	str.w	r8, [sp, #12]
 800648a:	2330      	movs	r3, #48	@ 0x30
 800648c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800663c <_vfiprintf_r+0x21c>
 8006490:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006494:	f04f 0901 	mov.w	r9, #1
 8006498:	4623      	mov	r3, r4
 800649a:	469a      	mov	sl, r3
 800649c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064a0:	b10a      	cbz	r2, 80064a6 <_vfiprintf_r+0x86>
 80064a2:	2a25      	cmp	r2, #37	@ 0x25
 80064a4:	d1f9      	bne.n	800649a <_vfiprintf_r+0x7a>
 80064a6:	ebba 0b04 	subs.w	fp, sl, r4
 80064aa:	d00b      	beq.n	80064c4 <_vfiprintf_r+0xa4>
 80064ac:	465b      	mov	r3, fp
 80064ae:	4622      	mov	r2, r4
 80064b0:	4629      	mov	r1, r5
 80064b2:	4630      	mov	r0, r6
 80064b4:	f7ff ffa1 	bl	80063fa <__sfputs_r>
 80064b8:	3001      	adds	r0, #1
 80064ba:	f000 80a7 	beq.w	800660c <_vfiprintf_r+0x1ec>
 80064be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064c0:	445a      	add	r2, fp
 80064c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80064c4:	f89a 3000 	ldrb.w	r3, [sl]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 809f 	beq.w	800660c <_vfiprintf_r+0x1ec>
 80064ce:	2300      	movs	r3, #0
 80064d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80064d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064d8:	f10a 0a01 	add.w	sl, sl, #1
 80064dc:	9304      	str	r3, [sp, #16]
 80064de:	9307      	str	r3, [sp, #28]
 80064e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80064e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80064e6:	4654      	mov	r4, sl
 80064e8:	2205      	movs	r2, #5
 80064ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064ee:	4853      	ldr	r0, [pc, #332]	@ (800663c <_vfiprintf_r+0x21c>)
 80064f0:	f7f9 fe96 	bl	8000220 <memchr>
 80064f4:	9a04      	ldr	r2, [sp, #16]
 80064f6:	b9d8      	cbnz	r0, 8006530 <_vfiprintf_r+0x110>
 80064f8:	06d1      	lsls	r1, r2, #27
 80064fa:	bf44      	itt	mi
 80064fc:	2320      	movmi	r3, #32
 80064fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006502:	0713      	lsls	r3, r2, #28
 8006504:	bf44      	itt	mi
 8006506:	232b      	movmi	r3, #43	@ 0x2b
 8006508:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800650c:	f89a 3000 	ldrb.w	r3, [sl]
 8006510:	2b2a      	cmp	r3, #42	@ 0x2a
 8006512:	d015      	beq.n	8006540 <_vfiprintf_r+0x120>
 8006514:	9a07      	ldr	r2, [sp, #28]
 8006516:	4654      	mov	r4, sl
 8006518:	2000      	movs	r0, #0
 800651a:	f04f 0c0a 	mov.w	ip, #10
 800651e:	4621      	mov	r1, r4
 8006520:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006524:	3b30      	subs	r3, #48	@ 0x30
 8006526:	2b09      	cmp	r3, #9
 8006528:	d94b      	bls.n	80065c2 <_vfiprintf_r+0x1a2>
 800652a:	b1b0      	cbz	r0, 800655a <_vfiprintf_r+0x13a>
 800652c:	9207      	str	r2, [sp, #28]
 800652e:	e014      	b.n	800655a <_vfiprintf_r+0x13a>
 8006530:	eba0 0308 	sub.w	r3, r0, r8
 8006534:	fa09 f303 	lsl.w	r3, r9, r3
 8006538:	4313      	orrs	r3, r2
 800653a:	9304      	str	r3, [sp, #16]
 800653c:	46a2      	mov	sl, r4
 800653e:	e7d2      	b.n	80064e6 <_vfiprintf_r+0xc6>
 8006540:	9b03      	ldr	r3, [sp, #12]
 8006542:	1d19      	adds	r1, r3, #4
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	9103      	str	r1, [sp, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	bfbb      	ittet	lt
 800654c:	425b      	neglt	r3, r3
 800654e:	f042 0202 	orrlt.w	r2, r2, #2
 8006552:	9307      	strge	r3, [sp, #28]
 8006554:	9307      	strlt	r3, [sp, #28]
 8006556:	bfb8      	it	lt
 8006558:	9204      	strlt	r2, [sp, #16]
 800655a:	7823      	ldrb	r3, [r4, #0]
 800655c:	2b2e      	cmp	r3, #46	@ 0x2e
 800655e:	d10a      	bne.n	8006576 <_vfiprintf_r+0x156>
 8006560:	7863      	ldrb	r3, [r4, #1]
 8006562:	2b2a      	cmp	r3, #42	@ 0x2a
 8006564:	d132      	bne.n	80065cc <_vfiprintf_r+0x1ac>
 8006566:	9b03      	ldr	r3, [sp, #12]
 8006568:	1d1a      	adds	r2, r3, #4
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	9203      	str	r2, [sp, #12]
 800656e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006572:	3402      	adds	r4, #2
 8006574:	9305      	str	r3, [sp, #20]
 8006576:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800664c <_vfiprintf_r+0x22c>
 800657a:	7821      	ldrb	r1, [r4, #0]
 800657c:	2203      	movs	r2, #3
 800657e:	4650      	mov	r0, sl
 8006580:	f7f9 fe4e 	bl	8000220 <memchr>
 8006584:	b138      	cbz	r0, 8006596 <_vfiprintf_r+0x176>
 8006586:	9b04      	ldr	r3, [sp, #16]
 8006588:	eba0 000a 	sub.w	r0, r0, sl
 800658c:	2240      	movs	r2, #64	@ 0x40
 800658e:	4082      	lsls	r2, r0
 8006590:	4313      	orrs	r3, r2
 8006592:	3401      	adds	r4, #1
 8006594:	9304      	str	r3, [sp, #16]
 8006596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800659a:	4829      	ldr	r0, [pc, #164]	@ (8006640 <_vfiprintf_r+0x220>)
 800659c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80065a0:	2206      	movs	r2, #6
 80065a2:	f7f9 fe3d 	bl	8000220 <memchr>
 80065a6:	2800      	cmp	r0, #0
 80065a8:	d03f      	beq.n	800662a <_vfiprintf_r+0x20a>
 80065aa:	4b26      	ldr	r3, [pc, #152]	@ (8006644 <_vfiprintf_r+0x224>)
 80065ac:	bb1b      	cbnz	r3, 80065f6 <_vfiprintf_r+0x1d6>
 80065ae:	9b03      	ldr	r3, [sp, #12]
 80065b0:	3307      	adds	r3, #7
 80065b2:	f023 0307 	bic.w	r3, r3, #7
 80065b6:	3308      	adds	r3, #8
 80065b8:	9303      	str	r3, [sp, #12]
 80065ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065bc:	443b      	add	r3, r7
 80065be:	9309      	str	r3, [sp, #36]	@ 0x24
 80065c0:	e76a      	b.n	8006498 <_vfiprintf_r+0x78>
 80065c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80065c6:	460c      	mov	r4, r1
 80065c8:	2001      	movs	r0, #1
 80065ca:	e7a8      	b.n	800651e <_vfiprintf_r+0xfe>
 80065cc:	2300      	movs	r3, #0
 80065ce:	3401      	adds	r4, #1
 80065d0:	9305      	str	r3, [sp, #20]
 80065d2:	4619      	mov	r1, r3
 80065d4:	f04f 0c0a 	mov.w	ip, #10
 80065d8:	4620      	mov	r0, r4
 80065da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065de:	3a30      	subs	r2, #48	@ 0x30
 80065e0:	2a09      	cmp	r2, #9
 80065e2:	d903      	bls.n	80065ec <_vfiprintf_r+0x1cc>
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d0c6      	beq.n	8006576 <_vfiprintf_r+0x156>
 80065e8:	9105      	str	r1, [sp, #20]
 80065ea:	e7c4      	b.n	8006576 <_vfiprintf_r+0x156>
 80065ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80065f0:	4604      	mov	r4, r0
 80065f2:	2301      	movs	r3, #1
 80065f4:	e7f0      	b.n	80065d8 <_vfiprintf_r+0x1b8>
 80065f6:	ab03      	add	r3, sp, #12
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	462a      	mov	r2, r5
 80065fc:	4b12      	ldr	r3, [pc, #72]	@ (8006648 <_vfiprintf_r+0x228>)
 80065fe:	a904      	add	r1, sp, #16
 8006600:	4630      	mov	r0, r6
 8006602:	f3af 8000 	nop.w
 8006606:	4607      	mov	r7, r0
 8006608:	1c78      	adds	r0, r7, #1
 800660a:	d1d6      	bne.n	80065ba <_vfiprintf_r+0x19a>
 800660c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800660e:	07d9      	lsls	r1, r3, #31
 8006610:	d405      	bmi.n	800661e <_vfiprintf_r+0x1fe>
 8006612:	89ab      	ldrh	r3, [r5, #12]
 8006614:	059a      	lsls	r2, r3, #22
 8006616:	d402      	bmi.n	800661e <_vfiprintf_r+0x1fe>
 8006618:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800661a:	f7ff fddd 	bl	80061d8 <__retarget_lock_release_recursive>
 800661e:	89ab      	ldrh	r3, [r5, #12]
 8006620:	065b      	lsls	r3, r3, #25
 8006622:	f53f af1f 	bmi.w	8006464 <_vfiprintf_r+0x44>
 8006626:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006628:	e71e      	b.n	8006468 <_vfiprintf_r+0x48>
 800662a:	ab03      	add	r3, sp, #12
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	462a      	mov	r2, r5
 8006630:	4b05      	ldr	r3, [pc, #20]	@ (8006648 <_vfiprintf_r+0x228>)
 8006632:	a904      	add	r1, sp, #16
 8006634:	4630      	mov	r0, r6
 8006636:	f000 f879 	bl	800672c <_printf_i>
 800663a:	e7e4      	b.n	8006606 <_vfiprintf_r+0x1e6>
 800663c:	08006de4 	.word	0x08006de4
 8006640:	08006dee 	.word	0x08006dee
 8006644:	00000000 	.word	0x00000000
 8006648:	080063fb 	.word	0x080063fb
 800664c:	08006dea 	.word	0x08006dea

08006650 <_printf_common>:
 8006650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006654:	4616      	mov	r6, r2
 8006656:	4698      	mov	r8, r3
 8006658:	688a      	ldr	r2, [r1, #8]
 800665a:	690b      	ldr	r3, [r1, #16]
 800665c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006660:	4293      	cmp	r3, r2
 8006662:	bfb8      	it	lt
 8006664:	4613      	movlt	r3, r2
 8006666:	6033      	str	r3, [r6, #0]
 8006668:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800666c:	4607      	mov	r7, r0
 800666e:	460c      	mov	r4, r1
 8006670:	b10a      	cbz	r2, 8006676 <_printf_common+0x26>
 8006672:	3301      	adds	r3, #1
 8006674:	6033      	str	r3, [r6, #0]
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	0699      	lsls	r1, r3, #26
 800667a:	bf42      	ittt	mi
 800667c:	6833      	ldrmi	r3, [r6, #0]
 800667e:	3302      	addmi	r3, #2
 8006680:	6033      	strmi	r3, [r6, #0]
 8006682:	6825      	ldr	r5, [r4, #0]
 8006684:	f015 0506 	ands.w	r5, r5, #6
 8006688:	d106      	bne.n	8006698 <_printf_common+0x48>
 800668a:	f104 0a19 	add.w	sl, r4, #25
 800668e:	68e3      	ldr	r3, [r4, #12]
 8006690:	6832      	ldr	r2, [r6, #0]
 8006692:	1a9b      	subs	r3, r3, r2
 8006694:	42ab      	cmp	r3, r5
 8006696:	dc26      	bgt.n	80066e6 <_printf_common+0x96>
 8006698:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800669c:	6822      	ldr	r2, [r4, #0]
 800669e:	3b00      	subs	r3, #0
 80066a0:	bf18      	it	ne
 80066a2:	2301      	movne	r3, #1
 80066a4:	0692      	lsls	r2, r2, #26
 80066a6:	d42b      	bmi.n	8006700 <_printf_common+0xb0>
 80066a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80066ac:	4641      	mov	r1, r8
 80066ae:	4638      	mov	r0, r7
 80066b0:	47c8      	blx	r9
 80066b2:	3001      	adds	r0, #1
 80066b4:	d01e      	beq.n	80066f4 <_printf_common+0xa4>
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	6922      	ldr	r2, [r4, #16]
 80066ba:	f003 0306 	and.w	r3, r3, #6
 80066be:	2b04      	cmp	r3, #4
 80066c0:	bf02      	ittt	eq
 80066c2:	68e5      	ldreq	r5, [r4, #12]
 80066c4:	6833      	ldreq	r3, [r6, #0]
 80066c6:	1aed      	subeq	r5, r5, r3
 80066c8:	68a3      	ldr	r3, [r4, #8]
 80066ca:	bf0c      	ite	eq
 80066cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066d0:	2500      	movne	r5, #0
 80066d2:	4293      	cmp	r3, r2
 80066d4:	bfc4      	itt	gt
 80066d6:	1a9b      	subgt	r3, r3, r2
 80066d8:	18ed      	addgt	r5, r5, r3
 80066da:	2600      	movs	r6, #0
 80066dc:	341a      	adds	r4, #26
 80066de:	42b5      	cmp	r5, r6
 80066e0:	d11a      	bne.n	8006718 <_printf_common+0xc8>
 80066e2:	2000      	movs	r0, #0
 80066e4:	e008      	b.n	80066f8 <_printf_common+0xa8>
 80066e6:	2301      	movs	r3, #1
 80066e8:	4652      	mov	r2, sl
 80066ea:	4641      	mov	r1, r8
 80066ec:	4638      	mov	r0, r7
 80066ee:	47c8      	blx	r9
 80066f0:	3001      	adds	r0, #1
 80066f2:	d103      	bne.n	80066fc <_printf_common+0xac>
 80066f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066fc:	3501      	adds	r5, #1
 80066fe:	e7c6      	b.n	800668e <_printf_common+0x3e>
 8006700:	18e1      	adds	r1, r4, r3
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	2030      	movs	r0, #48	@ 0x30
 8006706:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800670a:	4422      	add	r2, r4
 800670c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006710:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006714:	3302      	adds	r3, #2
 8006716:	e7c7      	b.n	80066a8 <_printf_common+0x58>
 8006718:	2301      	movs	r3, #1
 800671a:	4622      	mov	r2, r4
 800671c:	4641      	mov	r1, r8
 800671e:	4638      	mov	r0, r7
 8006720:	47c8      	blx	r9
 8006722:	3001      	adds	r0, #1
 8006724:	d0e6      	beq.n	80066f4 <_printf_common+0xa4>
 8006726:	3601      	adds	r6, #1
 8006728:	e7d9      	b.n	80066de <_printf_common+0x8e>
	...

0800672c <_printf_i>:
 800672c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006730:	7e0f      	ldrb	r7, [r1, #24]
 8006732:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006734:	2f78      	cmp	r7, #120	@ 0x78
 8006736:	4691      	mov	r9, r2
 8006738:	4680      	mov	r8, r0
 800673a:	460c      	mov	r4, r1
 800673c:	469a      	mov	sl, r3
 800673e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006742:	d807      	bhi.n	8006754 <_printf_i+0x28>
 8006744:	2f62      	cmp	r7, #98	@ 0x62
 8006746:	d80a      	bhi.n	800675e <_printf_i+0x32>
 8006748:	2f00      	cmp	r7, #0
 800674a:	f000 80d2 	beq.w	80068f2 <_printf_i+0x1c6>
 800674e:	2f58      	cmp	r7, #88	@ 0x58
 8006750:	f000 80b9 	beq.w	80068c6 <_printf_i+0x19a>
 8006754:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006758:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800675c:	e03a      	b.n	80067d4 <_printf_i+0xa8>
 800675e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006762:	2b15      	cmp	r3, #21
 8006764:	d8f6      	bhi.n	8006754 <_printf_i+0x28>
 8006766:	a101      	add	r1, pc, #4	@ (adr r1, 800676c <_printf_i+0x40>)
 8006768:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800676c:	080067c5 	.word	0x080067c5
 8006770:	080067d9 	.word	0x080067d9
 8006774:	08006755 	.word	0x08006755
 8006778:	08006755 	.word	0x08006755
 800677c:	08006755 	.word	0x08006755
 8006780:	08006755 	.word	0x08006755
 8006784:	080067d9 	.word	0x080067d9
 8006788:	08006755 	.word	0x08006755
 800678c:	08006755 	.word	0x08006755
 8006790:	08006755 	.word	0x08006755
 8006794:	08006755 	.word	0x08006755
 8006798:	080068d9 	.word	0x080068d9
 800679c:	08006803 	.word	0x08006803
 80067a0:	08006893 	.word	0x08006893
 80067a4:	08006755 	.word	0x08006755
 80067a8:	08006755 	.word	0x08006755
 80067ac:	080068fb 	.word	0x080068fb
 80067b0:	08006755 	.word	0x08006755
 80067b4:	08006803 	.word	0x08006803
 80067b8:	08006755 	.word	0x08006755
 80067bc:	08006755 	.word	0x08006755
 80067c0:	0800689b 	.word	0x0800689b
 80067c4:	6833      	ldr	r3, [r6, #0]
 80067c6:	1d1a      	adds	r2, r3, #4
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	6032      	str	r2, [r6, #0]
 80067cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80067d4:	2301      	movs	r3, #1
 80067d6:	e09d      	b.n	8006914 <_printf_i+0x1e8>
 80067d8:	6833      	ldr	r3, [r6, #0]
 80067da:	6820      	ldr	r0, [r4, #0]
 80067dc:	1d19      	adds	r1, r3, #4
 80067de:	6031      	str	r1, [r6, #0]
 80067e0:	0606      	lsls	r6, r0, #24
 80067e2:	d501      	bpl.n	80067e8 <_printf_i+0xbc>
 80067e4:	681d      	ldr	r5, [r3, #0]
 80067e6:	e003      	b.n	80067f0 <_printf_i+0xc4>
 80067e8:	0645      	lsls	r5, r0, #25
 80067ea:	d5fb      	bpl.n	80067e4 <_printf_i+0xb8>
 80067ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80067f0:	2d00      	cmp	r5, #0
 80067f2:	da03      	bge.n	80067fc <_printf_i+0xd0>
 80067f4:	232d      	movs	r3, #45	@ 0x2d
 80067f6:	426d      	negs	r5, r5
 80067f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067fc:	4859      	ldr	r0, [pc, #356]	@ (8006964 <_printf_i+0x238>)
 80067fe:	230a      	movs	r3, #10
 8006800:	e011      	b.n	8006826 <_printf_i+0xfa>
 8006802:	6821      	ldr	r1, [r4, #0]
 8006804:	6833      	ldr	r3, [r6, #0]
 8006806:	0608      	lsls	r0, r1, #24
 8006808:	f853 5b04 	ldr.w	r5, [r3], #4
 800680c:	d402      	bmi.n	8006814 <_printf_i+0xe8>
 800680e:	0649      	lsls	r1, r1, #25
 8006810:	bf48      	it	mi
 8006812:	b2ad      	uxthmi	r5, r5
 8006814:	2f6f      	cmp	r7, #111	@ 0x6f
 8006816:	4853      	ldr	r0, [pc, #332]	@ (8006964 <_printf_i+0x238>)
 8006818:	6033      	str	r3, [r6, #0]
 800681a:	bf14      	ite	ne
 800681c:	230a      	movne	r3, #10
 800681e:	2308      	moveq	r3, #8
 8006820:	2100      	movs	r1, #0
 8006822:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006826:	6866      	ldr	r6, [r4, #4]
 8006828:	60a6      	str	r6, [r4, #8]
 800682a:	2e00      	cmp	r6, #0
 800682c:	bfa2      	ittt	ge
 800682e:	6821      	ldrge	r1, [r4, #0]
 8006830:	f021 0104 	bicge.w	r1, r1, #4
 8006834:	6021      	strge	r1, [r4, #0]
 8006836:	b90d      	cbnz	r5, 800683c <_printf_i+0x110>
 8006838:	2e00      	cmp	r6, #0
 800683a:	d04b      	beq.n	80068d4 <_printf_i+0x1a8>
 800683c:	4616      	mov	r6, r2
 800683e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006842:	fb03 5711 	mls	r7, r3, r1, r5
 8006846:	5dc7      	ldrb	r7, [r0, r7]
 8006848:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800684c:	462f      	mov	r7, r5
 800684e:	42bb      	cmp	r3, r7
 8006850:	460d      	mov	r5, r1
 8006852:	d9f4      	bls.n	800683e <_printf_i+0x112>
 8006854:	2b08      	cmp	r3, #8
 8006856:	d10b      	bne.n	8006870 <_printf_i+0x144>
 8006858:	6823      	ldr	r3, [r4, #0]
 800685a:	07df      	lsls	r7, r3, #31
 800685c:	d508      	bpl.n	8006870 <_printf_i+0x144>
 800685e:	6923      	ldr	r3, [r4, #16]
 8006860:	6861      	ldr	r1, [r4, #4]
 8006862:	4299      	cmp	r1, r3
 8006864:	bfde      	ittt	le
 8006866:	2330      	movle	r3, #48	@ 0x30
 8006868:	f806 3c01 	strble.w	r3, [r6, #-1]
 800686c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006870:	1b92      	subs	r2, r2, r6
 8006872:	6122      	str	r2, [r4, #16]
 8006874:	f8cd a000 	str.w	sl, [sp]
 8006878:	464b      	mov	r3, r9
 800687a:	aa03      	add	r2, sp, #12
 800687c:	4621      	mov	r1, r4
 800687e:	4640      	mov	r0, r8
 8006880:	f7ff fee6 	bl	8006650 <_printf_common>
 8006884:	3001      	adds	r0, #1
 8006886:	d14a      	bne.n	800691e <_printf_i+0x1f2>
 8006888:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800688c:	b004      	add	sp, #16
 800688e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	f043 0320 	orr.w	r3, r3, #32
 8006898:	6023      	str	r3, [r4, #0]
 800689a:	4833      	ldr	r0, [pc, #204]	@ (8006968 <_printf_i+0x23c>)
 800689c:	2778      	movs	r7, #120	@ 0x78
 800689e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80068a2:	6823      	ldr	r3, [r4, #0]
 80068a4:	6831      	ldr	r1, [r6, #0]
 80068a6:	061f      	lsls	r7, r3, #24
 80068a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80068ac:	d402      	bmi.n	80068b4 <_printf_i+0x188>
 80068ae:	065f      	lsls	r7, r3, #25
 80068b0:	bf48      	it	mi
 80068b2:	b2ad      	uxthmi	r5, r5
 80068b4:	6031      	str	r1, [r6, #0]
 80068b6:	07d9      	lsls	r1, r3, #31
 80068b8:	bf44      	itt	mi
 80068ba:	f043 0320 	orrmi.w	r3, r3, #32
 80068be:	6023      	strmi	r3, [r4, #0]
 80068c0:	b11d      	cbz	r5, 80068ca <_printf_i+0x19e>
 80068c2:	2310      	movs	r3, #16
 80068c4:	e7ac      	b.n	8006820 <_printf_i+0xf4>
 80068c6:	4827      	ldr	r0, [pc, #156]	@ (8006964 <_printf_i+0x238>)
 80068c8:	e7e9      	b.n	800689e <_printf_i+0x172>
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	f023 0320 	bic.w	r3, r3, #32
 80068d0:	6023      	str	r3, [r4, #0]
 80068d2:	e7f6      	b.n	80068c2 <_printf_i+0x196>
 80068d4:	4616      	mov	r6, r2
 80068d6:	e7bd      	b.n	8006854 <_printf_i+0x128>
 80068d8:	6833      	ldr	r3, [r6, #0]
 80068da:	6825      	ldr	r5, [r4, #0]
 80068dc:	6961      	ldr	r1, [r4, #20]
 80068de:	1d18      	adds	r0, r3, #4
 80068e0:	6030      	str	r0, [r6, #0]
 80068e2:	062e      	lsls	r6, r5, #24
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	d501      	bpl.n	80068ec <_printf_i+0x1c0>
 80068e8:	6019      	str	r1, [r3, #0]
 80068ea:	e002      	b.n	80068f2 <_printf_i+0x1c6>
 80068ec:	0668      	lsls	r0, r5, #25
 80068ee:	d5fb      	bpl.n	80068e8 <_printf_i+0x1bc>
 80068f0:	8019      	strh	r1, [r3, #0]
 80068f2:	2300      	movs	r3, #0
 80068f4:	6123      	str	r3, [r4, #16]
 80068f6:	4616      	mov	r6, r2
 80068f8:	e7bc      	b.n	8006874 <_printf_i+0x148>
 80068fa:	6833      	ldr	r3, [r6, #0]
 80068fc:	1d1a      	adds	r2, r3, #4
 80068fe:	6032      	str	r2, [r6, #0]
 8006900:	681e      	ldr	r6, [r3, #0]
 8006902:	6862      	ldr	r2, [r4, #4]
 8006904:	2100      	movs	r1, #0
 8006906:	4630      	mov	r0, r6
 8006908:	f7f9 fc8a 	bl	8000220 <memchr>
 800690c:	b108      	cbz	r0, 8006912 <_printf_i+0x1e6>
 800690e:	1b80      	subs	r0, r0, r6
 8006910:	6060      	str	r0, [r4, #4]
 8006912:	6863      	ldr	r3, [r4, #4]
 8006914:	6123      	str	r3, [r4, #16]
 8006916:	2300      	movs	r3, #0
 8006918:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800691c:	e7aa      	b.n	8006874 <_printf_i+0x148>
 800691e:	6923      	ldr	r3, [r4, #16]
 8006920:	4632      	mov	r2, r6
 8006922:	4649      	mov	r1, r9
 8006924:	4640      	mov	r0, r8
 8006926:	47d0      	blx	sl
 8006928:	3001      	adds	r0, #1
 800692a:	d0ad      	beq.n	8006888 <_printf_i+0x15c>
 800692c:	6823      	ldr	r3, [r4, #0]
 800692e:	079b      	lsls	r3, r3, #30
 8006930:	d413      	bmi.n	800695a <_printf_i+0x22e>
 8006932:	68e0      	ldr	r0, [r4, #12]
 8006934:	9b03      	ldr	r3, [sp, #12]
 8006936:	4298      	cmp	r0, r3
 8006938:	bfb8      	it	lt
 800693a:	4618      	movlt	r0, r3
 800693c:	e7a6      	b.n	800688c <_printf_i+0x160>
 800693e:	2301      	movs	r3, #1
 8006940:	4632      	mov	r2, r6
 8006942:	4649      	mov	r1, r9
 8006944:	4640      	mov	r0, r8
 8006946:	47d0      	blx	sl
 8006948:	3001      	adds	r0, #1
 800694a:	d09d      	beq.n	8006888 <_printf_i+0x15c>
 800694c:	3501      	adds	r5, #1
 800694e:	68e3      	ldr	r3, [r4, #12]
 8006950:	9903      	ldr	r1, [sp, #12]
 8006952:	1a5b      	subs	r3, r3, r1
 8006954:	42ab      	cmp	r3, r5
 8006956:	dcf2      	bgt.n	800693e <_printf_i+0x212>
 8006958:	e7eb      	b.n	8006932 <_printf_i+0x206>
 800695a:	2500      	movs	r5, #0
 800695c:	f104 0619 	add.w	r6, r4, #25
 8006960:	e7f5      	b.n	800694e <_printf_i+0x222>
 8006962:	bf00      	nop
 8006964:	08006df5 	.word	0x08006df5
 8006968:	08006e06 	.word	0x08006e06

0800696c <__sflush_r>:
 800696c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006974:	0716      	lsls	r6, r2, #28
 8006976:	4605      	mov	r5, r0
 8006978:	460c      	mov	r4, r1
 800697a:	d454      	bmi.n	8006a26 <__sflush_r+0xba>
 800697c:	684b      	ldr	r3, [r1, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	dc02      	bgt.n	8006988 <__sflush_r+0x1c>
 8006982:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006984:	2b00      	cmp	r3, #0
 8006986:	dd48      	ble.n	8006a1a <__sflush_r+0xae>
 8006988:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800698a:	2e00      	cmp	r6, #0
 800698c:	d045      	beq.n	8006a1a <__sflush_r+0xae>
 800698e:	2300      	movs	r3, #0
 8006990:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006994:	682f      	ldr	r7, [r5, #0]
 8006996:	6a21      	ldr	r1, [r4, #32]
 8006998:	602b      	str	r3, [r5, #0]
 800699a:	d030      	beq.n	80069fe <__sflush_r+0x92>
 800699c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800699e:	89a3      	ldrh	r3, [r4, #12]
 80069a0:	0759      	lsls	r1, r3, #29
 80069a2:	d505      	bpl.n	80069b0 <__sflush_r+0x44>
 80069a4:	6863      	ldr	r3, [r4, #4]
 80069a6:	1ad2      	subs	r2, r2, r3
 80069a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80069aa:	b10b      	cbz	r3, 80069b0 <__sflush_r+0x44>
 80069ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80069ae:	1ad2      	subs	r2, r2, r3
 80069b0:	2300      	movs	r3, #0
 80069b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80069b4:	6a21      	ldr	r1, [r4, #32]
 80069b6:	4628      	mov	r0, r5
 80069b8:	47b0      	blx	r6
 80069ba:	1c43      	adds	r3, r0, #1
 80069bc:	89a3      	ldrh	r3, [r4, #12]
 80069be:	d106      	bne.n	80069ce <__sflush_r+0x62>
 80069c0:	6829      	ldr	r1, [r5, #0]
 80069c2:	291d      	cmp	r1, #29
 80069c4:	d82b      	bhi.n	8006a1e <__sflush_r+0xb2>
 80069c6:	4a2a      	ldr	r2, [pc, #168]	@ (8006a70 <__sflush_r+0x104>)
 80069c8:	410a      	asrs	r2, r1
 80069ca:	07d6      	lsls	r6, r2, #31
 80069cc:	d427      	bmi.n	8006a1e <__sflush_r+0xb2>
 80069ce:	2200      	movs	r2, #0
 80069d0:	6062      	str	r2, [r4, #4]
 80069d2:	04d9      	lsls	r1, r3, #19
 80069d4:	6922      	ldr	r2, [r4, #16]
 80069d6:	6022      	str	r2, [r4, #0]
 80069d8:	d504      	bpl.n	80069e4 <__sflush_r+0x78>
 80069da:	1c42      	adds	r2, r0, #1
 80069dc:	d101      	bne.n	80069e2 <__sflush_r+0x76>
 80069de:	682b      	ldr	r3, [r5, #0]
 80069e0:	b903      	cbnz	r3, 80069e4 <__sflush_r+0x78>
 80069e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80069e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069e6:	602f      	str	r7, [r5, #0]
 80069e8:	b1b9      	cbz	r1, 8006a1a <__sflush_r+0xae>
 80069ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069ee:	4299      	cmp	r1, r3
 80069f0:	d002      	beq.n	80069f8 <__sflush_r+0x8c>
 80069f2:	4628      	mov	r0, r5
 80069f4:	f7ff fbf2 	bl	80061dc <_free_r>
 80069f8:	2300      	movs	r3, #0
 80069fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80069fc:	e00d      	b.n	8006a1a <__sflush_r+0xae>
 80069fe:	2301      	movs	r3, #1
 8006a00:	4628      	mov	r0, r5
 8006a02:	47b0      	blx	r6
 8006a04:	4602      	mov	r2, r0
 8006a06:	1c50      	adds	r0, r2, #1
 8006a08:	d1c9      	bne.n	800699e <__sflush_r+0x32>
 8006a0a:	682b      	ldr	r3, [r5, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d0c6      	beq.n	800699e <__sflush_r+0x32>
 8006a10:	2b1d      	cmp	r3, #29
 8006a12:	d001      	beq.n	8006a18 <__sflush_r+0xac>
 8006a14:	2b16      	cmp	r3, #22
 8006a16:	d11e      	bne.n	8006a56 <__sflush_r+0xea>
 8006a18:	602f      	str	r7, [r5, #0]
 8006a1a:	2000      	movs	r0, #0
 8006a1c:	e022      	b.n	8006a64 <__sflush_r+0xf8>
 8006a1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a22:	b21b      	sxth	r3, r3
 8006a24:	e01b      	b.n	8006a5e <__sflush_r+0xf2>
 8006a26:	690f      	ldr	r7, [r1, #16]
 8006a28:	2f00      	cmp	r7, #0
 8006a2a:	d0f6      	beq.n	8006a1a <__sflush_r+0xae>
 8006a2c:	0793      	lsls	r3, r2, #30
 8006a2e:	680e      	ldr	r6, [r1, #0]
 8006a30:	bf08      	it	eq
 8006a32:	694b      	ldreq	r3, [r1, #20]
 8006a34:	600f      	str	r7, [r1, #0]
 8006a36:	bf18      	it	ne
 8006a38:	2300      	movne	r3, #0
 8006a3a:	eba6 0807 	sub.w	r8, r6, r7
 8006a3e:	608b      	str	r3, [r1, #8]
 8006a40:	f1b8 0f00 	cmp.w	r8, #0
 8006a44:	dde9      	ble.n	8006a1a <__sflush_r+0xae>
 8006a46:	6a21      	ldr	r1, [r4, #32]
 8006a48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006a4a:	4643      	mov	r3, r8
 8006a4c:	463a      	mov	r2, r7
 8006a4e:	4628      	mov	r0, r5
 8006a50:	47b0      	blx	r6
 8006a52:	2800      	cmp	r0, #0
 8006a54:	dc08      	bgt.n	8006a68 <__sflush_r+0xfc>
 8006a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a5e:	81a3      	strh	r3, [r4, #12]
 8006a60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a68:	4407      	add	r7, r0
 8006a6a:	eba8 0800 	sub.w	r8, r8, r0
 8006a6e:	e7e7      	b.n	8006a40 <__sflush_r+0xd4>
 8006a70:	dfbffffe 	.word	0xdfbffffe

08006a74 <_fflush_r>:
 8006a74:	b538      	push	{r3, r4, r5, lr}
 8006a76:	690b      	ldr	r3, [r1, #16]
 8006a78:	4605      	mov	r5, r0
 8006a7a:	460c      	mov	r4, r1
 8006a7c:	b913      	cbnz	r3, 8006a84 <_fflush_r+0x10>
 8006a7e:	2500      	movs	r5, #0
 8006a80:	4628      	mov	r0, r5
 8006a82:	bd38      	pop	{r3, r4, r5, pc}
 8006a84:	b118      	cbz	r0, 8006a8e <_fflush_r+0x1a>
 8006a86:	6a03      	ldr	r3, [r0, #32]
 8006a88:	b90b      	cbnz	r3, 8006a8e <_fflush_r+0x1a>
 8006a8a:	f7ff f9ad 	bl	8005de8 <__sinit>
 8006a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d0f3      	beq.n	8006a7e <_fflush_r+0xa>
 8006a96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a98:	07d0      	lsls	r0, r2, #31
 8006a9a:	d404      	bmi.n	8006aa6 <_fflush_r+0x32>
 8006a9c:	0599      	lsls	r1, r3, #22
 8006a9e:	d402      	bmi.n	8006aa6 <_fflush_r+0x32>
 8006aa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006aa2:	f7ff fb98 	bl	80061d6 <__retarget_lock_acquire_recursive>
 8006aa6:	4628      	mov	r0, r5
 8006aa8:	4621      	mov	r1, r4
 8006aaa:	f7ff ff5f 	bl	800696c <__sflush_r>
 8006aae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ab0:	07da      	lsls	r2, r3, #31
 8006ab2:	4605      	mov	r5, r0
 8006ab4:	d4e4      	bmi.n	8006a80 <_fflush_r+0xc>
 8006ab6:	89a3      	ldrh	r3, [r4, #12]
 8006ab8:	059b      	lsls	r3, r3, #22
 8006aba:	d4e1      	bmi.n	8006a80 <_fflush_r+0xc>
 8006abc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006abe:	f7ff fb8b 	bl	80061d8 <__retarget_lock_release_recursive>
 8006ac2:	e7dd      	b.n	8006a80 <_fflush_r+0xc>

08006ac4 <__swhatbuf_r>:
 8006ac4:	b570      	push	{r4, r5, r6, lr}
 8006ac6:	460c      	mov	r4, r1
 8006ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006acc:	2900      	cmp	r1, #0
 8006ace:	b096      	sub	sp, #88	@ 0x58
 8006ad0:	4615      	mov	r5, r2
 8006ad2:	461e      	mov	r6, r3
 8006ad4:	da0d      	bge.n	8006af2 <__swhatbuf_r+0x2e>
 8006ad6:	89a3      	ldrh	r3, [r4, #12]
 8006ad8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006adc:	f04f 0100 	mov.w	r1, #0
 8006ae0:	bf14      	ite	ne
 8006ae2:	2340      	movne	r3, #64	@ 0x40
 8006ae4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006ae8:	2000      	movs	r0, #0
 8006aea:	6031      	str	r1, [r6, #0]
 8006aec:	602b      	str	r3, [r5, #0]
 8006aee:	b016      	add	sp, #88	@ 0x58
 8006af0:	bd70      	pop	{r4, r5, r6, pc}
 8006af2:	466a      	mov	r2, sp
 8006af4:	f000 f848 	bl	8006b88 <_fstat_r>
 8006af8:	2800      	cmp	r0, #0
 8006afa:	dbec      	blt.n	8006ad6 <__swhatbuf_r+0x12>
 8006afc:	9901      	ldr	r1, [sp, #4]
 8006afe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006b02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006b06:	4259      	negs	r1, r3
 8006b08:	4159      	adcs	r1, r3
 8006b0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b0e:	e7eb      	b.n	8006ae8 <__swhatbuf_r+0x24>

08006b10 <__smakebuf_r>:
 8006b10:	898b      	ldrh	r3, [r1, #12]
 8006b12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b14:	079d      	lsls	r5, r3, #30
 8006b16:	4606      	mov	r6, r0
 8006b18:	460c      	mov	r4, r1
 8006b1a:	d507      	bpl.n	8006b2c <__smakebuf_r+0x1c>
 8006b1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006b20:	6023      	str	r3, [r4, #0]
 8006b22:	6123      	str	r3, [r4, #16]
 8006b24:	2301      	movs	r3, #1
 8006b26:	6163      	str	r3, [r4, #20]
 8006b28:	b003      	add	sp, #12
 8006b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b2c:	ab01      	add	r3, sp, #4
 8006b2e:	466a      	mov	r2, sp
 8006b30:	f7ff ffc8 	bl	8006ac4 <__swhatbuf_r>
 8006b34:	9f00      	ldr	r7, [sp, #0]
 8006b36:	4605      	mov	r5, r0
 8006b38:	4639      	mov	r1, r7
 8006b3a:	4630      	mov	r0, r6
 8006b3c:	f7ff fbba 	bl	80062b4 <_malloc_r>
 8006b40:	b948      	cbnz	r0, 8006b56 <__smakebuf_r+0x46>
 8006b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b46:	059a      	lsls	r2, r3, #22
 8006b48:	d4ee      	bmi.n	8006b28 <__smakebuf_r+0x18>
 8006b4a:	f023 0303 	bic.w	r3, r3, #3
 8006b4e:	f043 0302 	orr.w	r3, r3, #2
 8006b52:	81a3      	strh	r3, [r4, #12]
 8006b54:	e7e2      	b.n	8006b1c <__smakebuf_r+0xc>
 8006b56:	89a3      	ldrh	r3, [r4, #12]
 8006b58:	6020      	str	r0, [r4, #0]
 8006b5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b5e:	81a3      	strh	r3, [r4, #12]
 8006b60:	9b01      	ldr	r3, [sp, #4]
 8006b62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006b66:	b15b      	cbz	r3, 8006b80 <__smakebuf_r+0x70>
 8006b68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	f000 f81d 	bl	8006bac <_isatty_r>
 8006b72:	b128      	cbz	r0, 8006b80 <__smakebuf_r+0x70>
 8006b74:	89a3      	ldrh	r3, [r4, #12]
 8006b76:	f023 0303 	bic.w	r3, r3, #3
 8006b7a:	f043 0301 	orr.w	r3, r3, #1
 8006b7e:	81a3      	strh	r3, [r4, #12]
 8006b80:	89a3      	ldrh	r3, [r4, #12]
 8006b82:	431d      	orrs	r5, r3
 8006b84:	81a5      	strh	r5, [r4, #12]
 8006b86:	e7cf      	b.n	8006b28 <__smakebuf_r+0x18>

08006b88 <_fstat_r>:
 8006b88:	b538      	push	{r3, r4, r5, lr}
 8006b8a:	4d07      	ldr	r5, [pc, #28]	@ (8006ba8 <_fstat_r+0x20>)
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	4604      	mov	r4, r0
 8006b90:	4608      	mov	r0, r1
 8006b92:	4611      	mov	r1, r2
 8006b94:	602b      	str	r3, [r5, #0]
 8006b96:	f7fa fdef 	bl	8001778 <_fstat>
 8006b9a:	1c43      	adds	r3, r0, #1
 8006b9c:	d102      	bne.n	8006ba4 <_fstat_r+0x1c>
 8006b9e:	682b      	ldr	r3, [r5, #0]
 8006ba0:	b103      	cbz	r3, 8006ba4 <_fstat_r+0x1c>
 8006ba2:	6023      	str	r3, [r4, #0]
 8006ba4:	bd38      	pop	{r3, r4, r5, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20000364 	.word	0x20000364

08006bac <_isatty_r>:
 8006bac:	b538      	push	{r3, r4, r5, lr}
 8006bae:	4d06      	ldr	r5, [pc, #24]	@ (8006bc8 <_isatty_r+0x1c>)
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	4604      	mov	r4, r0
 8006bb4:	4608      	mov	r0, r1
 8006bb6:	602b      	str	r3, [r5, #0]
 8006bb8:	f7fa fdee 	bl	8001798 <_isatty>
 8006bbc:	1c43      	adds	r3, r0, #1
 8006bbe:	d102      	bne.n	8006bc6 <_isatty_r+0x1a>
 8006bc0:	682b      	ldr	r3, [r5, #0]
 8006bc2:	b103      	cbz	r3, 8006bc6 <_isatty_r+0x1a>
 8006bc4:	6023      	str	r3, [r4, #0]
 8006bc6:	bd38      	pop	{r3, r4, r5, pc}
 8006bc8:	20000364 	.word	0x20000364

08006bcc <_sbrk_r>:
 8006bcc:	b538      	push	{r3, r4, r5, lr}
 8006bce:	4d06      	ldr	r5, [pc, #24]	@ (8006be8 <_sbrk_r+0x1c>)
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	4604      	mov	r4, r0
 8006bd4:	4608      	mov	r0, r1
 8006bd6:	602b      	str	r3, [r5, #0]
 8006bd8:	f7fa fdf6 	bl	80017c8 <_sbrk>
 8006bdc:	1c43      	adds	r3, r0, #1
 8006bde:	d102      	bne.n	8006be6 <_sbrk_r+0x1a>
 8006be0:	682b      	ldr	r3, [r5, #0]
 8006be2:	b103      	cbz	r3, 8006be6 <_sbrk_r+0x1a>
 8006be4:	6023      	str	r3, [r4, #0]
 8006be6:	bd38      	pop	{r3, r4, r5, pc}
 8006be8:	20000364 	.word	0x20000364

08006bec <_init>:
 8006bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bee:	bf00      	nop
 8006bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bf2:	bc08      	pop	{r3}
 8006bf4:	469e      	mov	lr, r3
 8006bf6:	4770      	bx	lr

08006bf8 <_fini>:
 8006bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfa:	bf00      	nop
 8006bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bfe:	bc08      	pop	{r3}
 8006c00:	469e      	mov	lr, r3
 8006c02:	4770      	bx	lr
