
STM32_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006100  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  080062e0  080062e0  000072e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064d4  080064d4  00008070  2**0
                  CONTENTS
  4 .ARM          00000008  080064d4  080064d4  000074d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064dc  080064dc  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064dc  080064dc  000074dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080064e0  080064e0  000074e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080064e4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000070  08006554  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08006554  00008374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012201  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000262b  00000000  00000000  0001a2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  0001c8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000efb  00000000  00000000  0001dc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020af3  00000000  00000000  0001eb3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000136d4  00000000  00000000  0003f62e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d91da  00000000  00000000  00052d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012bedc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b58  00000000  00000000  0012bf20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00131a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	080062c8 	.word	0x080062c8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	080062c8 	.word	0x080062c8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002cc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80002d0:	f003 0301 	and.w	r3, r3, #1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d013      	beq.n	8000300 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80002d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002dc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80002e0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d00b      	beq.n	8000300 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002e8:	e000      	b.n	80002ec <ITM_SendChar+0x2c>
    {
      __NOP();
 80002ea:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002ec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d0f9      	beq.n	80002ea <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002f6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	b2d2      	uxtb	r2, r2
 80002fe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000300:	687b      	ldr	r3, [r7, #4]
}
 8000302:	4618      	mov	r0, r3
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
	...

08000310 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b086      	sub	sp, #24
 8000314:	af02      	add	r7, sp, #8

	/* USER CODE BEGIN 1 */
	uint16_t AD_RES = 0;
 8000316:	2300      	movs	r3, #0
 8000318:	817b      	strh	r3, [r7, #10]
	float AD_RES_float = 0;
 800031a:	f04f 0300 	mov.w	r3, #0
 800031e:	60fb      	str	r3, [r7, #12]
	float low_pressure = 0;
 8000320:	f04f 0300 	mov.w	r3, #0
 8000324:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000326:	f000 fe2e 	bl	8000f86 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800032a:	f000 f9ad 	bl	8000688 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800032e:	f000 fb87 	bl	8000a40 <MX_GPIO_Init>
	MX_SPI2_Init();
 8000332:	f000 fad3 	bl	80008dc <MX_SPI2_Init>
	MX_ADC2_Init();
 8000336:	f000 fa6b 	bl	8000810 <MX_ADC2_Init>
	MX_ADC1_Init();
 800033a:	f000 f9f1 	bl	8000720 <MX_ADC1_Init>
	MX_TIM2_Init();
 800033e:	f000 fb0b 	bl	8000958 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000342:	2201      	movs	r2, #1
 8000344:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000348:	48b5      	ldr	r0, [pc, #724]	@ (8000620 <main+0x310>)
 800034a:	f002 fcbb 	bl	8002cc4 <HAL_GPIO_WritePin>
	printf("Requesting SPI Identifier from Pressure Sensor... \r\n");
 800034e:	48b5      	ldr	r0, [pc, #724]	@ (8000624 <main+0x314>)
 8000350:	f005 f956 	bl	8005600 <puts>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000354:	2200      	movs	r2, #0
 8000356:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800035a:	48b1      	ldr	r0, [pc, #708]	@ (8000620 <main+0x310>)
 800035c:	f002 fcb2 	bl	8002cc4 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) &request_identifier,
 8000360:	1cba      	adds	r2, r7, #2
 8000362:	2364      	movs	r3, #100	@ 0x64
 8000364:	9300      	str	r3, [sp, #0]
 8000366:	2301      	movs	r3, #1
 8000368:	49af      	ldr	r1, [pc, #700]	@ (8000628 <main+0x318>)
 800036a:	48b0      	ldr	r0, [pc, #704]	@ (800062c <main+0x31c>)
 800036c:	f003 fd21 	bl	8003db2 <HAL_SPI_TransmitReceive>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d002      	beq.n	800037c <main+0x6c>
			(uint8_t*) &SPI_buffer, 1, 100) != HAL_OK) {
		printf("ERROR: SPI failed the HAL_OK check \r\n");
 8000376:	48ae      	ldr	r0, [pc, #696]	@ (8000630 <main+0x320>)
 8000378:	f005 f942 	bl	8005600 <puts>
	}
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800037c:	2201      	movs	r2, #1
 800037e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000382:	48a7      	ldr	r0, [pc, #668]	@ (8000620 <main+0x310>)
 8000384:	f002 fc9e 	bl	8002cc4 <HAL_GPIO_WritePin>
	// Check if received data is notifying about any errors
	// Check for communication error
	if (SPI_buffer == com_error_mask) {
 8000388:	887b      	ldrh	r3, [r7, #2]
 800038a:	2201      	movs	r2, #1
 800038c:	4293      	cmp	r3, r2
 800038e:	d103      	bne.n	8000398 <main+0x88>
		printf("ERROR: Communication Error \r\n");
 8000390:	48a8      	ldr	r0, [pc, #672]	@ (8000634 <main+0x324>)
 8000392:	f005 f935 	bl	8005600 <puts>
 8000396:	e04b      	b.n	8000430 <main+0x120>
	}
	// Check for FEC Error
	else if ((SPI_buffer & FEC_error_mask) != 0) {
 8000398:	887b      	ldrh	r3, [r7, #2]
 800039a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800039e:	4013      	ands	r3, r2
 80003a0:	b29b      	uxth	r3, r3
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d003      	beq.n	80003ae <main+0x9e>
		printf("ERROR: FEC Error \r\n");
 80003a6:	48a4      	ldr	r0, [pc, #656]	@ (8000638 <main+0x328>)
 80003a8:	f005 f92a 	bl	8005600 <puts>
 80003ac:	e040      	b.n	8000430 <main+0x120>
	}
	// Check for Acquisition Chain Failure
	else if ((SPI_buffer & no_error_mask) == Diag1_mask) {
 80003ae:	887b      	ldrh	r3, [r7, #2]
 80003b0:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80003b4:	4013      	ands	r3, r2
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80003bc:	4293      	cmp	r3, r2
 80003be:	d103      	bne.n	80003c8 <main+0xb8>
		printf("ERROR: Acquisition chain failure \r\n");
 80003c0:	489e      	ldr	r0, [pc, #632]	@ (800063c <main+0x32c>)
 80003c2:	f005 f91d 	bl	8005600 <puts>
 80003c6:	e033      	b.n	8000430 <main+0x120>
	}
	// Check for Sensor Cell Failure
	else if ((SPI_buffer & Diag2_mask) != 0) {
 80003c8:	887b      	ldrh	r3, [r7, #2]
 80003ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80003ce:	4013      	ands	r3, r2
 80003d0:	b29b      	uxth	r3, r3
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d003      	beq.n	80003de <main+0xce>
		printf("ERROR: Sensor cell failure \r\n");
 80003d6:	489a      	ldr	r0, [pc, #616]	@ (8000640 <main+0x330>)
 80003d8:	f005 f912 	bl	8005600 <puts>
 80003dc:	e028      	b.n	8000430 <main+0x120>
	}
	// Check if pressure is above measuring range maximum
	else if ((SPI_buffer & no_error_mask) == pressure_over_max_mask) {
 80003de:	887b      	ldrh	r3, [r7, #2]
 80003e0:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80003e4:	4013      	ands	r3, r2
 80003e6:	b29b      	uxth	r3, r3
 80003e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d103      	bne.n	80003f8 <main+0xe8>
		printf("ERROR: Pressure above measuring range maximum \r\n");
 80003f0:	4894      	ldr	r0, [pc, #592]	@ (8000644 <main+0x334>)
 80003f2:	f005 f905 	bl	8005600 <puts>
 80003f6:	e01b      	b.n	8000430 <main+0x120>
	}
	// Check if pressure is below measuring range minimum
	else if ((SPI_buffer & pressure_under_min_mask) != 0) {
 80003f8:	887b      	ldrh	r3, [r7, #2]
 80003fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80003fe:	4013      	ands	r3, r2
 8000400:	b29b      	uxth	r3, r3
 8000402:	2b00      	cmp	r3, #0
 8000404:	d003      	beq.n	800040e <main+0xfe>
		printf("ERROR: Pressure below measuring range minimum \r\n");
 8000406:	4890      	ldr	r0, [pc, #576]	@ (8000648 <main+0x338>)
 8000408:	f005 f8fa 	bl	8005600 <puts>
 800040c:	e010      	b.n	8000430 <main+0x120>
	}
	// Check if no errors were detected
	else if ((SPI_buffer & no_error_mask) == no_error_mask) {
 800040e:	887b      	ldrh	r3, [r7, #2]
 8000410:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000414:	4013      	ands	r3, r2
 8000416:	b29b      	uxth	r3, r3
 8000418:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800041c:	4293      	cmp	r3, r2
 800041e:	d107      	bne.n	8000430 <main+0x120>
		printf("No errors detected \r\n");
 8000420:	488a      	ldr	r0, [pc, #552]	@ (800064c <main+0x33c>)
 8000422:	f005 f8ed 	bl	8005600 <puts>
		printf("Identifier: %u \r\n", SPI_buffer);
 8000426:	887b      	ldrh	r3, [r7, #2]
 8000428:	4619      	mov	r1, r3
 800042a:	4889      	ldr	r0, [pc, #548]	@ (8000650 <main+0x340>)
 800042c:	f005 f880 	bl	8005530 <iprintf>
	}

	// Start ADC calibration and ADC conversion
	HAL_ADCEx_Calibration_Start(&hadc1, 1);
 8000430:	2101      	movs	r1, #1
 8000432:	4888      	ldr	r0, [pc, #544]	@ (8000654 <main+0x344>)
 8000434:	f002 f8da 	bl	80025ec <HAL_ADCEx_Calibration_Start>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		// Toggle the LEDs
		HAL_GPIO_TogglePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin);
 8000438:	2140      	movs	r1, #64	@ 0x40
 800043a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800043e:	f002 fc59 	bl	8002cf4 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000442:	2064      	movs	r0, #100	@ 0x64
 8000444:	f000 fe10 	bl	8001068 <HAL_Delay>
		HAL_GPIO_TogglePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin);
 8000448:	2140      	movs	r1, #64	@ 0x40
 800044a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800044e:	f002 fc51 	bl	8002cf4 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, PRS_Ready_Pin);
 8000452:	2140      	movs	r1, #64	@ 0x40
 8000454:	4872      	ldr	r0, [pc, #456]	@ (8000620 <main+0x310>)
 8000456:	f002 fc4d 	bl	8002cf4 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 800045a:	2064      	movs	r0, #100	@ 0x64
 800045c:	f000 fe04 	bl	8001068 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, PRS_Ready_Pin);
 8000460:	2140      	movs	r1, #64	@ 0x40
 8000462:	486f      	ldr	r0, [pc, #444]	@ (8000620 <main+0x310>)
 8000464:	f002 fc46 	bl	8002cf4 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, System_Ready_Pin);
 8000468:	2180      	movs	r1, #128	@ 0x80
 800046a:	486d      	ldr	r0, [pc, #436]	@ (8000620 <main+0x310>)
 800046c:	f002 fc42 	bl	8002cf4 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000470:	2064      	movs	r0, #100	@ 0x64
 8000472:	f000 fdf9 	bl	8001068 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, System_Ready_Pin);
 8000476:	2180      	movs	r1, #128	@ 0x80
 8000478:	4869      	ldr	r0, [pc, #420]	@ (8000620 <main+0x310>)
 800047a:	f002 fc3b 	bl	8002cf4 <HAL_GPIO_TogglePin>

		// Measure Pod Pressure
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000484:	4866      	ldr	r0, [pc, #408]	@ (8000620 <main+0x310>)
 8000486:	f002 fc1d 	bl	8002cc4 <HAL_GPIO_WritePin>
		if (HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) &request_pressure,
 800048a:	1cba      	adds	r2, r7, #2
 800048c:	2364      	movs	r3, #100	@ 0x64
 800048e:	9300      	str	r3, [sp, #0]
 8000490:	2301      	movs	r3, #1
 8000492:	4971      	ldr	r1, [pc, #452]	@ (8000658 <main+0x348>)
 8000494:	4865      	ldr	r0, [pc, #404]	@ (800062c <main+0x31c>)
 8000496:	f003 fc8c 	bl	8003db2 <HAL_SPI_TransmitReceive>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d002      	beq.n	80004a6 <main+0x196>
				(uint8_t*) &SPI_buffer, 1, 100) != HAL_OK) {
			printf("ERROR: SPI failed the HAL_OK check \r\n");
 80004a0:	4863      	ldr	r0, [pc, #396]	@ (8000630 <main+0x320>)
 80004a2:	f005 f8ad 	bl	8005600 <puts>
		}
		HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80004a6:	2201      	movs	r2, #1
 80004a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004ac:	485c      	ldr	r0, [pc, #368]	@ (8000620 <main+0x310>)
 80004ae:	f002 fc09 	bl	8002cc4 <HAL_GPIO_WritePin>
		// Check if received data is notifying about any errors
		// Check for communication error
		if (SPI_buffer == com_error_mask) {
 80004b2:	887b      	ldrh	r3, [r7, #2]
 80004b4:	2201      	movs	r2, #1
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d103      	bne.n	80004c2 <main+0x1b2>
			printf("ERROR: Communication Error \r\n");
 80004ba:	485e      	ldr	r0, [pc, #376]	@ (8000634 <main+0x324>)
 80004bc:	f005 f8a0 	bl	8005600 <puts>
 80004c0:	e071      	b.n	80005a6 <main+0x296>
		}
		// Check for FEC Error
		else if ((SPI_buffer & FEC_error_mask) != 0) {
 80004c2:	887b      	ldrh	r3, [r7, #2]
 80004c4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80004c8:	4013      	ands	r3, r2
 80004ca:	b29b      	uxth	r3, r3
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d003      	beq.n	80004d8 <main+0x1c8>
			printf("ERROR: FEC Error \r\n");
 80004d0:	4859      	ldr	r0, [pc, #356]	@ (8000638 <main+0x328>)
 80004d2:	f005 f895 	bl	8005600 <puts>
 80004d6:	e066      	b.n	80005a6 <main+0x296>
		}
		// Check for Acquisition Chain Failure
		else if ((SPI_buffer & no_error_mask) == Diag1_mask) {
 80004d8:	887b      	ldrh	r3, [r7, #2]
 80004da:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80004de:	4013      	ands	r3, r2
 80004e0:	b29b      	uxth	r3, r3
 80004e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d108      	bne.n	80004fc <main+0x1ec>
			printf("ERROR: Acquisition chain failure \r\n");
 80004ea:	4854      	ldr	r0, [pc, #336]	@ (800063c <main+0x32c>)
 80004ec:	f005 f888 	bl	8005600 <puts>
			printf("Received bytes = %u", SPI_buffer);
 80004f0:	887b      	ldrh	r3, [r7, #2]
 80004f2:	4619      	mov	r1, r3
 80004f4:	4859      	ldr	r0, [pc, #356]	@ (800065c <main+0x34c>)
 80004f6:	f005 f81b 	bl	8005530 <iprintf>
 80004fa:	e054      	b.n	80005a6 <main+0x296>
		}
		// Check for Sensor Cell Failure
		else if ((SPI_buffer & Diag2_mask) != 0) {
 80004fc:	887b      	ldrh	r3, [r7, #2]
 80004fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000502:	4013      	ands	r3, r2
 8000504:	b29b      	uxth	r3, r3
 8000506:	2b00      	cmp	r3, #0
 8000508:	d003      	beq.n	8000512 <main+0x202>
			printf("ERROR: Sensor cell failure \r\n");
 800050a:	484d      	ldr	r0, [pc, #308]	@ (8000640 <main+0x330>)
 800050c:	f005 f878 	bl	8005600 <puts>
 8000510:	e049      	b.n	80005a6 <main+0x296>
		}
		// Check if pressure is above measuring range maximum
		else if ((SPI_buffer & no_error_mask) == pressure_over_max_mask) {
 8000512:	887b      	ldrh	r3, [r7, #2]
 8000514:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000518:	4013      	ands	r3, r2
 800051a:	b29b      	uxth	r3, r3
 800051c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000520:	4293      	cmp	r3, r2
 8000522:	d103      	bne.n	800052c <main+0x21c>
			printf("ERROR: Pressure above measuring range maximum \r\n");
 8000524:	4847      	ldr	r0, [pc, #284]	@ (8000644 <main+0x334>)
 8000526:	f005 f86b 	bl	8005600 <puts>
 800052a:	e03c      	b.n	80005a6 <main+0x296>
		}
		// Check if pressure is below measuring range minimum
		else if ((SPI_buffer & pressure_under_min_mask) != 0) {
 800052c:	887b      	ldrh	r3, [r7, #2]
 800052e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000532:	4013      	ands	r3, r2
 8000534:	b29b      	uxth	r3, r3
 8000536:	2b00      	cmp	r3, #0
 8000538:	d003      	beq.n	8000542 <main+0x232>
			printf("ERROR: Pressure below measuring range minimum \r\n");
 800053a:	4843      	ldr	r0, [pc, #268]	@ (8000648 <main+0x338>)
 800053c:	f005 f860 	bl	8005600 <puts>
 8000540:	e031      	b.n	80005a6 <main+0x296>
		}
		// Check if no errors were detected
		else if ((SPI_buffer & no_error_mask) == no_error_mask) {
 8000542:	887b      	ldrh	r3, [r7, #2]
 8000544:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000548:	4013      	ands	r3, r2
 800054a:	b29b      	uxth	r3, r3
 800054c:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 8000550:	4293      	cmp	r3, r2
 8000552:	d128      	bne.n	80005a6 <main+0x296>
			printf("No errors detected \r\n");
 8000554:	483d      	ldr	r0, [pc, #244]	@ (800064c <main+0x33c>)
 8000556:	f005 f853 	bl	8005600 <puts>
			// Get the pressure data using a bit mask and right shift operator to get rid of parity bit
			pressure_LSB = (SPI_buffer & data_mask) >> 1;
 800055a:	887b      	ldrh	r3, [r7, #2]
 800055c:	f240 72fe 	movw	r2, #2046	@ 0x7fe
 8000560:	4013      	ands	r3, r2
 8000562:	b29b      	uxth	r3, r3
 8000564:	085b      	lsrs	r3, r3, #1
 8000566:	b29a      	uxth	r2, r3
 8000568:	4b3d      	ldr	r3, [pc, #244]	@ (8000660 <main+0x350>)
 800056a:	801a      	strh	r2, [r3, #0]
			// Convert pressure from LSB to kPa using transfer function from data sheet
			pressure_Bar = ((float) pressure_LSB - offs_p) / S_p;
 800056c:	4b3c      	ldr	r3, [pc, #240]	@ (8000660 <main+0x350>)
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	ee07 3a90 	vmov	s15, r3
 8000574:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000578:	4b3a      	ldr	r3, [pc, #232]	@ (8000664 <main+0x354>)
 800057a:	edd3 7a00 	vldr	s15, [r3]
 800057e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000582:	4b39      	ldr	r3, [pc, #228]	@ (8000668 <main+0x358>)
 8000584:	ed93 7a00 	vldr	s14, [r3]
 8000588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800058c:	4b37      	ldr	r3, [pc, #220]	@ (800066c <main+0x35c>)
 800058e:	edc3 7a00 	vstr	s15, [r3]
			// Convert pressure from Bar to kPa
			// pressure_Bar = pressure_Bar/100;
			// Print pressure value
			printf("Measured pressure: %i kPa \r\n", (int) pressure_Bar);
 8000592:	4b36      	ldr	r3, [pc, #216]	@ (800066c <main+0x35c>)
 8000594:	edd3 7a00 	vldr	s15, [r3]
 8000598:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800059c:	ee17 1a90 	vmov	r1, s15
 80005a0:	4833      	ldr	r0, [pc, #204]	@ (8000670 <main+0x360>)
 80005a2:	f004 ffc5 	bl	8005530 <iprintf>

		}

		// Start ADC Conversion
		HAL_ADC_Start(&hadc2);
 80005a6:	4833      	ldr	r0, [pc, #204]	@ (8000674 <main+0x364>)
 80005a8:	f001 f956 	bl	8001858 <HAL_ADC_Start>
		// Poll ADC2 Peripheral & TimeOut = 1mSec
		HAL_ADC_PollForConversion(&hadc2, 1);
 80005ac:	2101      	movs	r1, #1
 80005ae:	4831      	ldr	r0, [pc, #196]	@ (8000674 <main+0x364>)
 80005b0:	f001 fa0e 	bl	80019d0 <HAL_ADC_PollForConversion>
		// Read The ADC Conversion Result & Print it
		AD_RES = HAL_ADC_GetValue(&hadc2);
 80005b4:	482f      	ldr	r0, [pc, #188]	@ (8000674 <main+0x364>)
 80005b6:	f001 fae3 	bl	8001b80 <HAL_ADC_GetValue>
 80005ba:	4603      	mov	r3, r0
 80005bc:	817b      	strh	r3, [r7, #10]
		if ((float)AD_RES <= 780) {
 80005be:	897b      	ldrh	r3, [r7, #10]
 80005c0:	f5b3 7f43 	cmp.w	r3, #780	@ 0x30c
 80005c4:	d803      	bhi.n	80005ce <main+0x2be>
			AD_RES_float = 0;
 80005c6:	f04f 0300 	mov.w	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	e00a      	b.n	80005e4 <main+0x2d4>
		}
		else {
			AD_RES_float = (float)AD_RES - 780;
 80005ce:	897b      	ldrh	r3, [r7, #10]
 80005d0:	ee07 3a90 	vmov	s15, r3
 80005d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005d8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8000678 <main+0x368>
 80005dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80005e0:	edc7 7a03 	vstr	s15, [r7, #12]
		}
		low_pressure = AD_RES_float*10/3438*1000;
 80005e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80005e8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80005ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80005f0:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800067c <main+0x36c>
 80005f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005f8:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8000680 <main+0x370>
 80005fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000600:	edc7 7a01 	vstr	s15, [r7, #4]
		printf("ADC value = %i mBar\r\n", (int)low_pressure);
 8000604:	edd7 7a01 	vldr	s15, [r7, #4]
 8000608:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800060c:	ee17 1a90 	vmov	r1, s15
 8000610:	481c      	ldr	r0, [pc, #112]	@ (8000684 <main+0x374>)
 8000612:	f004 ff8d 	bl	8005530 <iprintf>
		HAL_Delay(1);
 8000616:	2001      	movs	r0, #1
 8000618:	f000 fd26 	bl	8001068 <HAL_Delay>
		HAL_GPIO_TogglePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin);
 800061c:	e70c      	b.n	8000438 <main+0x128>
 800061e:	bf00      	nop
 8000620:	48000400 	.word	0x48000400
 8000624:	080062e0 	.word	0x080062e0
 8000628:	0800648c 	.word	0x0800648c
 800062c:	20000164 	.word	0x20000164
 8000630:	08006314 	.word	0x08006314
 8000634:	0800633c 	.word	0x0800633c
 8000638:	0800635c 	.word	0x0800635c
 800063c:	08006370 	.word	0x08006370
 8000640:	08006394 	.word	0x08006394
 8000644:	080063b4 	.word	0x080063b4
 8000648:	080063e4 	.word	0x080063e4
 800064c:	08006414 	.word	0x08006414
 8000650:	0800642c 	.word	0x0800642c
 8000654:	2000008c 	.word	0x2000008c
 8000658:	0800648a 	.word	0x0800648a
 800065c:	08006440 	.word	0x08006440
 8000660:	20000214 	.word	0x20000214
 8000664:	20000000 	.word	0x20000000
 8000668:	20000004 	.word	0x20000004
 800066c:	20000218 	.word	0x20000218
 8000670:	08006454 	.word	0x08006454
 8000674:	200000f8 	.word	0x200000f8
 8000678:	44430000 	.word	0x44430000
 800067c:	4556e000 	.word	0x4556e000
 8000680:	447a0000 	.word	0x447a0000
 8000684:	08006474 	.word	0x08006474

08000688 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	@ 0x50
 800068c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800068e:	f107 0318 	add.w	r3, r7, #24
 8000692:	2238      	movs	r2, #56	@ 0x38
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f005 f892 	bl	80057c0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006ae:	f002 fb3b 	bl	8002d28 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b2:	2302      	movs	r3, #2
 80006b4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006ba:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2340      	movs	r3, #64	@ 0x40
 80006be:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	2302      	movs	r3, #2
 80006c6:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 75;
 80006cc:	234b      	movs	r3, #75	@ 0x4b
 80006ce:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006dc:	f107 0318 	add.w	r3, r7, #24
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 fbd5 	bl	8002e90 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x68>
		Error_Handler();
 80006ec:	f000 fa28 	bl	8000b40 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2303      	movs	r3, #3
 80006f6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2104      	movs	r1, #4
 8000708:	4618      	mov	r0, r3
 800070a:	f002 fed3 	bl	80034b4 <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x90>
		Error_Handler();
 8000714:	f000 fa14 	bl	8000b40 <Error_Handler>
	}
}
 8000718:	bf00      	nop
 800071a:	3750      	adds	r7, #80	@ 0x50
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b08c      	sub	sp, #48	@ 0x30
 8000724:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8000726:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2220      	movs	r2, #32
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f005 f841 	bl	80057c0 <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800073e:	4b32      	ldr	r3, [pc, #200]	@ (8000808 <MX_ADC1_Init+0xe8>)
 8000740:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000744:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000746:	4b30      	ldr	r3, [pc, #192]	@ (8000808 <MX_ADC1_Init+0xe8>)
 8000748:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800074c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800074e:	4b2e      	ldr	r3, [pc, #184]	@ (8000808 <MX_ADC1_Init+0xe8>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000754:	4b2c      	ldr	r3, [pc, #176]	@ (8000808 <MX_ADC1_Init+0xe8>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
	hadc1.Init.GainCompensation = 0;
 800075a:	4b2b      	ldr	r3, [pc, #172]	@ (8000808 <MX_ADC1_Init+0xe8>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000760:	4b29      	ldr	r3, [pc, #164]	@ (8000808 <MX_ADC1_Init+0xe8>)
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000766:	4b28      	ldr	r3, [pc, #160]	@ (8000808 <MX_ADC1_Init+0xe8>)
 8000768:	2204      	movs	r2, #4
 800076a:	619a      	str	r2, [r3, #24]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800076c:	4b26      	ldr	r3, [pc, #152]	@ (8000808 <MX_ADC1_Init+0xe8>)
 800076e:	2200      	movs	r2, #0
 8000770:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000772:	4b25      	ldr	r3, [pc, #148]	@ (8000808 <MX_ADC1_Init+0xe8>)
 8000774:	2200      	movs	r2, #0
 8000776:	775a      	strb	r2, [r3, #29]
	hadc1.Init.NbrOfConversion = 1;
 8000778:	4b23      	ldr	r3, [pc, #140]	@ (8000808 <MX_ADC1_Init+0xe8>)
 800077a:	2201      	movs	r2, #1
 800077c:	621a      	str	r2, [r3, #32]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800077e:	4b22      	ldr	r3, [pc, #136]	@ (8000808 <MX_ADC1_Init+0xe8>)
 8000780:	2200      	movs	r2, #0
 8000782:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000786:	4b20      	ldr	r3, [pc, #128]	@ (8000808 <MX_ADC1_Init+0xe8>)
 8000788:	2200      	movs	r2, #0
 800078a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800078c:	4b1e      	ldr	r3, [pc, #120]	@ (8000808 <MX_ADC1_Init+0xe8>)
 800078e:	2200      	movs	r2, #0
 8000790:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000792:	4b1d      	ldr	r3, [pc, #116]	@ (8000808 <MX_ADC1_Init+0xe8>)
 8000794:	2200      	movs	r2, #0
 8000796:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800079a:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <MX_ADC1_Init+0xe8>)
 800079c:	2200      	movs	r2, #0
 800079e:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc1.Init.OversamplingMode = DISABLE;
 80007a0:	4b19      	ldr	r3, [pc, #100]	@ (8000808 <MX_ADC1_Init+0xe8>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80007a8:	4817      	ldr	r0, [pc, #92]	@ (8000808 <MX_ADC1_Init+0xe8>)
 80007aa:	f000 fed1 	bl	8001550 <HAL_ADC_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC1_Init+0x98>
		Error_Handler();
 80007b4:	f000 f9c4 	bl	8000b40 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80007b8:	2300      	movs	r3, #0
 80007ba:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80007bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007c0:	4619      	mov	r1, r3
 80007c2:	4811      	ldr	r0, [pc, #68]	@ (8000808 <MX_ADC1_Init+0xe8>)
 80007c4:	f001 ff74 	bl	80026b0 <HAL_ADCEx_MultiModeConfigChannel>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC1_Init+0xb2>
		Error_Handler();
 80007ce:	f000 f9b7 	bl	8000b40 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <MX_ADC1_Init+0xec>)
 80007d4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80007d6:	2306      	movs	r3, #6
 80007d8:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007de:	237f      	movs	r3, #127	@ 0x7f
 80007e0:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007e2:	2304      	movs	r3, #4
 80007e4:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	4619      	mov	r1, r3
 80007ee:	4806      	ldr	r0, [pc, #24]	@ (8000808 <MX_ADC1_Init+0xe8>)
 80007f0:	f001 f9d4 	bl	8001b9c <HAL_ADC_ConfigChannel>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_ADC1_Init+0xde>
		Error_Handler();
 80007fa:	f000 f9a1 	bl	8000b40 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	3730      	adds	r7, #48	@ 0x30
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	2000008c 	.word	0x2000008c
 800080c:	32601000 	.word	0x32601000

08000810 <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000816:	463b      	mov	r3, r7
 8000818:	2220      	movs	r2, #32
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f004 ffcf 	bl	80057c0 <memset>

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 8000822:	4b2b      	ldr	r3, [pc, #172]	@ (80008d0 <MX_ADC2_Init+0xc0>)
 8000824:	4a2b      	ldr	r2, [pc, #172]	@ (80008d4 <MX_ADC2_Init+0xc4>)
 8000826:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000828:	4b29      	ldr	r3, [pc, #164]	@ (80008d0 <MX_ADC2_Init+0xc0>)
 800082a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800082e:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000830:	4b27      	ldr	r3, [pc, #156]	@ (80008d0 <MX_ADC2_Init+0xc0>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000836:	4b26      	ldr	r3, [pc, #152]	@ (80008d0 <MX_ADC2_Init+0xc0>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
	hadc2.Init.GainCompensation = 0;
 800083c:	4b24      	ldr	r3, [pc, #144]	@ (80008d0 <MX_ADC2_Init+0xc0>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000842:	4b23      	ldr	r3, [pc, #140]	@ (80008d0 <MX_ADC2_Init+0xc0>)
 8000844:	2200      	movs	r2, #0
 8000846:	615a      	str	r2, [r3, #20]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000848:	4b21      	ldr	r3, [pc, #132]	@ (80008d0 <MX_ADC2_Init+0xc0>)
 800084a:	2204      	movs	r2, #4
 800084c:	619a      	str	r2, [r3, #24]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 800084e:	4b20      	ldr	r3, [pc, #128]	@ (80008d0 <MX_ADC2_Init+0xc0>)
 8000850:	2200      	movs	r2, #0
 8000852:	771a      	strb	r2, [r3, #28]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8000854:	4b1e      	ldr	r3, [pc, #120]	@ (80008d0 <MX_ADC2_Init+0xc0>)
 8000856:	2200      	movs	r2, #0
 8000858:	775a      	strb	r2, [r3, #29]
	hadc2.Init.NbrOfConversion = 1;
 800085a:	4b1d      	ldr	r3, [pc, #116]	@ (80008d0 <MX_ADC2_Init+0xc0>)
 800085c:	2201      	movs	r2, #1
 800085e:	621a      	str	r2, [r3, #32]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000860:	4b1b      	ldr	r3, [pc, #108]	@ (80008d0 <MX_ADC2_Init+0xc0>)
 8000862:	2200      	movs	r2, #0
 8000864:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000868:	4b19      	ldr	r3, [pc, #100]	@ (80008d0 <MX_ADC2_Init+0xc0>)
 800086a:	2200      	movs	r2, #0
 800086c:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800086e:	4b18      	ldr	r3, [pc, #96]	@ (80008d0 <MX_ADC2_Init+0xc0>)
 8000870:	2200      	movs	r2, #0
 8000872:	631a      	str	r2, [r3, #48]	@ 0x30
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8000874:	4b16      	ldr	r3, [pc, #88]	@ (80008d0 <MX_ADC2_Init+0xc0>)
 8000876:	2200      	movs	r2, #0
 8000878:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800087c:	4b14      	ldr	r3, [pc, #80]	@ (80008d0 <MX_ADC2_Init+0xc0>)
 800087e:	2200      	movs	r2, #0
 8000880:	63da      	str	r2, [r3, #60]	@ 0x3c
	hadc2.Init.OversamplingMode = DISABLE;
 8000882:	4b13      	ldr	r3, [pc, #76]	@ (80008d0 <MX_ADC2_Init+0xc0>)
 8000884:	2200      	movs	r2, #0
 8000886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 800088a:	4811      	ldr	r0, [pc, #68]	@ (80008d0 <MX_ADC2_Init+0xc0>)
 800088c:	f000 fe60 	bl	8001550 <HAL_ADC_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_ADC2_Init+0x8a>
		Error_Handler();
 8000896:	f000 f953 	bl	8000b40 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_13;
 800089a:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <MX_ADC2_Init+0xc8>)
 800089c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800089e:	2306      	movs	r3, #6
 80008a0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008a6:	237f      	movs	r3, #127	@ 0x7f
 80008a8:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008aa:	2304      	movs	r3, #4
 80008ac:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 80008b2:	463b      	mov	r3, r7
 80008b4:	4619      	mov	r1, r3
 80008b6:	4806      	ldr	r0, [pc, #24]	@ (80008d0 <MX_ADC2_Init+0xc0>)
 80008b8:	f001 f970 	bl	8001b9c <HAL_ADC_ConfigChannel>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_ADC2_Init+0xb6>
		Error_Handler();
 80008c2:	f000 f93d 	bl	8000b40 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	3720      	adds	r7, #32
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000f8 	.word	0x200000f8
 80008d4:	50000100 	.word	0x50000100
 80008d8:	36902000 	.word	0x36902000

080008dc <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000950 <MX_SPI2_Init+0x74>)
 80008e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000954 <MX_SPI2_Init+0x78>)
 80008e4:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000950 <MX_SPI2_Init+0x74>)
 80008e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008ec:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008ee:	4b18      	ldr	r3, [pc, #96]	@ (8000950 <MX_SPI2_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80008f4:	4b16      	ldr	r3, [pc, #88]	@ (8000950 <MX_SPI2_Init+0x74>)
 80008f6:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80008fa:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008fc:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <MX_SPI2_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000902:	4b13      	ldr	r3, [pc, #76]	@ (8000950 <MX_SPI2_Init+0x74>)
 8000904:	2201      	movs	r2, #1
 8000906:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000908:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <MX_SPI2_Init+0x74>)
 800090a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800090e:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000910:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <MX_SPI2_Init+0x74>)
 8000912:	2220      	movs	r2, #32
 8000914:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_SPI2_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800091c:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <MX_SPI2_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <MX_SPI2_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 7;
 8000928:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <MX_SPI2_Init+0x74>)
 800092a:	2207      	movs	r2, #7
 800092c:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800092e:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <MX_SPI2_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <MX_SPI2_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800093a:	4805      	ldr	r0, [pc, #20]	@ (8000950 <MX_SPI2_Init+0x74>)
 800093c:	f003 f98e 	bl	8003c5c <HAL_SPI_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_SPI2_Init+0x6e>
		Error_Handler();
 8000946:	f000 f8fb 	bl	8000b40 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000164 	.word	0x20000164
 8000954:	40003800 	.word	0x40003800

08000958 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b08e      	sub	sp, #56	@ 0x38
 800095c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800095e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000978:	463b      	mov	r3, r7
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]
 8000986:	615a      	str	r2, [r3, #20]
 8000988:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800098a:	4b2c      	ldr	r3, [pc, #176]	@ (8000a3c <MX_TIM2_Init+0xe4>)
 800098c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000990:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 60000 - 1;
 8000992:	4b2a      	ldr	r3, [pc, #168]	@ (8000a3c <MX_TIM2_Init+0xe4>)
 8000994:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000998:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099a:	4b28      	ldr	r3, [pc, #160]	@ (8000a3c <MX_TIM2_Init+0xe4>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 499;
 80009a0:	4b26      	ldr	r3, [pc, #152]	@ (8000a3c <MX_TIM2_Init+0xe4>)
 80009a2:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80009a6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a8:	4b24      	ldr	r3, [pc, #144]	@ (8000a3c <MX_TIM2_Init+0xe4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ae:	4b23      	ldr	r3, [pc, #140]	@ (8000a3c <MX_TIM2_Init+0xe4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80009b4:	4821      	ldr	r0, [pc, #132]	@ (8000a3c <MX_TIM2_Init+0xe4>)
 80009b6:	f003 fd83 	bl	80044c0 <HAL_TIM_Base_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM2_Init+0x6c>
		Error_Handler();
 80009c0:	f000 f8be 	bl	8000b40 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80009ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009ce:	4619      	mov	r1, r3
 80009d0:	481a      	ldr	r0, [pc, #104]	@ (8000a3c <MX_TIM2_Init+0xe4>)
 80009d2:	f003 ff41 	bl	8004858 <HAL_TIM_ConfigClockSource>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM2_Init+0x88>
		Error_Handler();
 80009dc:	f000 f8b0 	bl	8000b40 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80009e0:	4816      	ldr	r0, [pc, #88]	@ (8000a3c <MX_TIM2_Init+0xe4>)
 80009e2:	f003 fdc4 	bl	800456e <HAL_TIM_PWM_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM2_Init+0x98>
		Error_Handler();
 80009ec:	f000 f8a8 	bl	8000b40 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009f0:	2320      	movs	r3, #32
 80009f2:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	480f      	ldr	r0, [pc, #60]	@ (8000a3c <MX_TIM2_Init+0xe4>)
 8000a00:	f004 fc52 	bl	80052a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM2_Init+0xb6>
			!= HAL_OK) {
		Error_Handler();
 8000a0a:	f000 f899 	bl	8000b40 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a0e:	2360      	movs	r3, #96	@ 0x60
 8000a10:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000a1e:	463b      	mov	r3, r7
 8000a20:	2200      	movs	r2, #0
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	@ (8000a3c <MX_TIM2_Init+0xe4>)
 8000a26:	f003 fe03 	bl	8004630 <HAL_TIM_PWM_ConfigChannel>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM2_Init+0xdc>
			!= HAL_OK) {
		Error_Handler();
 8000a30:	f000 f886 	bl	8000b40 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	3738      	adds	r7, #56	@ 0x38
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200001c8 	.word	0x200001c8

08000a40 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a46:	f107 030c 	add.w	r3, r7, #12
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	4b2a      	ldr	r3, [pc, #168]	@ (8000b00 <MX_GPIO_Init+0xc0>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5a:	4a29      	ldr	r2, [pc, #164]	@ (8000b00 <MX_GPIO_Init+0xc0>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a62:	4b27      	ldr	r3, [pc, #156]	@ (8000b00 <MX_GPIO_Init+0xc0>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6e:	4b24      	ldr	r3, [pc, #144]	@ (8000b00 <MX_GPIO_Init+0xc0>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a72:	4a23      	ldr	r2, [pc, #140]	@ (8000b00 <MX_GPIO_Init+0xc0>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a7a:	4b21      	ldr	r3, [pc, #132]	@ (8000b00 <MX_GPIO_Init+0xc0>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Valve_Enable_GPIO_Port, Valve_Enable_Pin, GPIO_PIN_SET);
 8000a86:	2201      	movs	r2, #1
 8000a88:	2140      	movs	r1, #64	@ 0x40
 8000a8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a8e:	f002 f919 	bl	8002cc4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin | PRS_Ready_Pin | System_Ready_Pin,
 8000a92:	2201      	movs	r2, #1
 8000a94:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 8000a98:	481a      	ldr	r0, [pc, #104]	@ (8000b04 <MX_GPIO_Init+0xc4>)
 8000a9a:	f002 f913 	bl	8002cc4 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin : Valve_Enable_Pin */
	GPIO_InitStruct.Pin = Valve_Enable_Pin;
 8000a9e:	2340      	movs	r3, #64	@ 0x40
 8000aa0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(Valve_Enable_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab8:	f001 ff82 	bl	80029c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI_CS_Pin */
	GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000abc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ac0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 030c 	add.w	r3, r7, #12
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480b      	ldr	r0, [pc, #44]	@ (8000b04 <MX_GPIO_Init+0xc4>)
 8000ad6:	f001 ff73 	bl	80029c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PRS_Ready_Pin System_Ready_Pin */
	GPIO_InitStruct.Pin = PRS_Ready_Pin | System_Ready_Pin;
 8000ada:	23c0      	movs	r3, #192	@ 0xc0
 8000adc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aea:	f107 030c 	add.w	r3, r7, #12
 8000aee:	4619      	mov	r1, r3
 8000af0:	4804      	ldr	r0, [pc, #16]	@ (8000b04 <MX_GPIO_Init+0xc4>)
 8000af2:	f001 ff65 	bl	80029c0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000af6:	bf00      	nop
 8000af8:	3720      	adds	r7, #32
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40021000 	.word	0x40021000
 8000b04:	48000400 	.word	0x48000400

08000b08 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	e009      	b.n	8000b2e <_write+0x26>
		ITM_SendChar(*ptr++);
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	1c5a      	adds	r2, r3, #1
 8000b1e:	60ba      	str	r2, [r7, #8]
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fbcc 	bl	80002c0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	697a      	ldr	r2, [r7, #20]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	dbf1      	blt.n	8000b1a <_write+0x12>
	}
	return len;
 8000b36:	687b      	ldr	r3, [r7, #4]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <Error_Handler+0x8>

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f002 f975 	bl	8002e70 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b09c      	sub	sp, #112	@ 0x70
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bac:	f107 0318 	add.w	r3, r7, #24
 8000bb0:	2244      	movs	r2, #68	@ 0x44
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f004 fe03 	bl	80057c0 <memset>
  if(hadc->Instance==ADC1)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bc2:	d13d      	bne.n	8000c40 <HAL_ADC_MspInit+0xac>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000bc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bc8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000bca:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000bce:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd0:	f107 0318 	add.w	r3, r7, #24
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f002 fe51 	bl	800387c <HAL_RCCEx_PeriphCLKConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000be0:	f7ff ffae 	bl	8000b40 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000be4:	4b3a      	ldr	r3, [pc, #232]	@ (8000cd0 <HAL_ADC_MspInit+0x13c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	4a39      	ldr	r2, [pc, #228]	@ (8000cd0 <HAL_ADC_MspInit+0x13c>)
 8000bec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000bee:	4b38      	ldr	r3, [pc, #224]	@ (8000cd0 <HAL_ADC_MspInit+0x13c>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d10b      	bne.n	8000c0e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000bf6:	4b37      	ldr	r3, [pc, #220]	@ (8000cd4 <HAL_ADC_MspInit+0x140>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfa:	4a36      	ldr	r2, [pc, #216]	@ (8000cd4 <HAL_ADC_MspInit+0x140>)
 8000bfc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c02:	4b34      	ldr	r3, [pc, #208]	@ (8000cd4 <HAL_ADC_MspInit+0x140>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c0a:	617b      	str	r3, [r7, #20]
 8000c0c:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	4b31      	ldr	r3, [pc, #196]	@ (8000cd4 <HAL_ADC_MspInit+0x140>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c12:	4a30      	ldr	r2, [pc, #192]	@ (8000cd4 <HAL_ADC_MspInit+0x140>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c1a:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd4 <HAL_ADC_MspInit+0x140>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Low_Pressure_ADC_Pin;
 8000c26:	2302      	movs	r3, #2
 8000c28:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(Low_Pressure_ADC_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000c36:	4619      	mov	r1, r3
 8000c38:	4827      	ldr	r0, [pc, #156]	@ (8000cd8 <HAL_ADC_MspInit+0x144>)
 8000c3a:	f001 fec1 	bl	80029c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000c3e:	e042      	b.n	8000cc6 <HAL_ADC_MspInit+0x132>
  else if(hadc->Instance==ADC2)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a25      	ldr	r2, [pc, #148]	@ (8000cdc <HAL_ADC_MspInit+0x148>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d13d      	bne.n	8000cc6 <HAL_ADC_MspInit+0x132>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000c4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000c50:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000c54:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c56:	f107 0318 	add.w	r3, r7, #24
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f002 fe0e 	bl	800387c <HAL_RCCEx_PeriphCLKConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_ADC_MspInit+0xd6>
      Error_Handler();
 8000c66:	f7ff ff6b 	bl	8000b40 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c6a:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <HAL_ADC_MspInit+0x13c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	4a17      	ldr	r2, [pc, #92]	@ (8000cd0 <HAL_ADC_MspInit+0x13c>)
 8000c72:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c74:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <HAL_ADC_MspInit+0x13c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d10b      	bne.n	8000c94 <HAL_ADC_MspInit+0x100>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c7c:	4b15      	ldr	r3, [pc, #84]	@ (8000cd4 <HAL_ADC_MspInit+0x140>)
 8000c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c80:	4a14      	ldr	r2, [pc, #80]	@ (8000cd4 <HAL_ADC_MspInit+0x140>)
 8000c82:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c88:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <HAL_ADC_MspInit+0x140>)
 8000c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd4 <HAL_ADC_MspInit+0x140>)
 8000c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c98:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd4 <HAL_ADC_MspInit+0x140>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd4 <HAL_ADC_MspInit+0x140>)
 8000ca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = High_Pressure_ADC_Pin;
 8000cac:	2320      	movs	r3, #32
 8000cae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(High_Pressure_ADC_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc2:	f001 fe7d 	bl	80029c0 <HAL_GPIO_Init>
}
 8000cc6:	bf00      	nop
 8000cc8:	3770      	adds	r7, #112	@ 0x70
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2000021c 	.word	0x2000021c
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	48000400 	.word	0x48000400
 8000cdc:	50000100 	.word	0x50000100

08000ce0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	@ 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a17      	ldr	r2, [pc, #92]	@ (8000d5c <HAL_SPI_MspInit+0x7c>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d128      	bne.n	8000d54 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d02:	4b17      	ldr	r3, [pc, #92]	@ (8000d60 <HAL_SPI_MspInit+0x80>)
 8000d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d06:	4a16      	ldr	r2, [pc, #88]	@ (8000d60 <HAL_SPI_MspInit+0x80>)
 8000d08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d0e:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <HAL_SPI_MspInit+0x80>)
 8000d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1a:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <HAL_SPI_MspInit+0x80>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1e:	4a10      	ldr	r2, [pc, #64]	@ (8000d60 <HAL_SPI_MspInit+0x80>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d26:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <HAL_SPI_MspInit+0x80>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d32:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d40:	2302      	movs	r3, #2
 8000d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d44:	2305      	movs	r3, #5
 8000d46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4805      	ldr	r0, [pc, #20]	@ (8000d64 <HAL_SPI_MspInit+0x84>)
 8000d50:	f001 fe36 	bl	80029c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d54:	bf00      	nop
 8000d56:	3728      	adds	r7, #40	@ 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40003800 	.word	0x40003800
 8000d60:	40021000 	.word	0x40021000
 8000d64:	48000400 	.word	0x48000400

08000d68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d78:	d10b      	bne.n	8000d92 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d7a:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <HAL_TIM_Base_MspInit+0x38>)
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d7e:	4a08      	ldr	r2, [pc, #32]	@ (8000da0 <HAL_TIM_Base_MspInit+0x38>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d86:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <HAL_TIM_Base_MspInit+0x38>)
 8000d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d92:	bf00      	nop
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40021000 	.word	0x40021000

08000da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <NMI_Handler+0x4>

08000dac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <HardFault_Handler+0x4>

08000db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <MemManage_Handler+0x4>

08000dbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <BusFault_Handler+0x4>

08000dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <UsageFault_Handler+0x4>

08000dcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfa:	f000 f917 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b086      	sub	sp, #24
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	60f8      	str	r0, [r7, #12]
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	e00a      	b.n	8000e2a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e14:	f3af 8000 	nop.w
 8000e18:	4601      	mov	r1, r0
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	1c5a      	adds	r2, r3, #1
 8000e1e:	60ba      	str	r2, [r7, #8]
 8000e20:	b2ca      	uxtb	r2, r1
 8000e22:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	3301      	adds	r3, #1
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	dbf0      	blt.n	8000e14 <_read+0x12>
  }

  return len;
 8000e32:	687b      	ldr	r3, [r7, #4]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e64:	605a      	str	r2, [r3, #4]
  return 0;
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <_isatty>:

int _isatty(int file)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e7c:	2301      	movs	r3, #1
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b085      	sub	sp, #20
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	60f8      	str	r0, [r7, #12]
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e96:	2300      	movs	r3, #0
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eac:	4a14      	ldr	r2, [pc, #80]	@ (8000f00 <_sbrk+0x5c>)
 8000eae:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <_sbrk+0x60>)
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb8:	4b13      	ldr	r3, [pc, #76]	@ (8000f08 <_sbrk+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d102      	bne.n	8000ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <_sbrk+0x64>)
 8000ec2:	4a12      	ldr	r2, [pc, #72]	@ (8000f0c <_sbrk+0x68>)
 8000ec4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec6:	4b10      	ldr	r3, [pc, #64]	@ (8000f08 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d207      	bcs.n	8000ee4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed4:	f004 fcc2 	bl	800585c <__errno>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	220c      	movs	r2, #12
 8000edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ee2:	e009      	b.n	8000ef8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee4:	4b08      	ldr	r3, [pc, #32]	@ (8000f08 <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eea:	4b07      	ldr	r3, [pc, #28]	@ (8000f08 <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4a05      	ldr	r2, [pc, #20]	@ (8000f08 <_sbrk+0x64>)
 8000ef4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20008000 	.word	0x20008000
 8000f04:	00000400 	.word	0x00000400
 8000f08:	20000220 	.word	0x20000220
 8000f0c:	20000378 	.word	0x20000378

08000f10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <SystemInit+0x20>)
 8000f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f1a:	4a05      	ldr	r2, [pc, #20]	@ (8000f30 <SystemInit+0x20>)
 8000f1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f34:	480d      	ldr	r0, [pc, #52]	@ (8000f6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f36:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f38:	f7ff ffea 	bl	8000f10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f3c:	480c      	ldr	r0, [pc, #48]	@ (8000f70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f3e:	490d      	ldr	r1, [pc, #52]	@ (8000f74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f40:	4a0d      	ldr	r2, [pc, #52]	@ (8000f78 <LoopForever+0xe>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f44:	e002      	b.n	8000f4c <LoopCopyDataInit>

08000f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4a:	3304      	adds	r3, #4

08000f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f50:	d3f9      	bcc.n	8000f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f52:	4a0a      	ldr	r2, [pc, #40]	@ (8000f7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f54:	4c0a      	ldr	r4, [pc, #40]	@ (8000f80 <LoopForever+0x16>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f58:	e001      	b.n	8000f5e <LoopFillZerobss>

08000f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f5c:	3204      	adds	r2, #4

08000f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f60:	d3fb      	bcc.n	8000f5a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000f62:	f004 fc81 	bl	8005868 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f66:	f7ff f9d3 	bl	8000310 <main>

08000f6a <LoopForever>:

LoopForever:
    b LoopForever
 8000f6a:	e7fe      	b.n	8000f6a <LoopForever>
  ldr   r0, =_estack
 8000f6c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f74:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f78:	080064e4 	.word	0x080064e4
  ldr r2, =_sbss
 8000f7c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f80:	20000374 	.word	0x20000374

08000f84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f84:	e7fe      	b.n	8000f84 <ADC1_2_IRQHandler>

08000f86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f90:	2003      	movs	r0, #3
 8000f92:	f001 fce3 	bl	800295c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f96:	200f      	movs	r0, #15
 8000f98:	f000 f80e 	bl	8000fb8 <HAL_InitTick>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d002      	beq.n	8000fa8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	71fb      	strb	r3, [r7, #7]
 8000fa6:	e001      	b.n	8000fac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fa8:	f7ff fdd0 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fac:	79fb      	ldrb	r3, [r7, #7]

}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fc4:	4b16      	ldr	r3, [pc, #88]	@ (8001020 <HAL_InitTick+0x68>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d022      	beq.n	8001012 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fcc:	4b15      	ldr	r3, [pc, #84]	@ (8001024 <HAL_InitTick+0x6c>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b13      	ldr	r3, [pc, #76]	@ (8001020 <HAL_InitTick+0x68>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000fd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 fce0 	bl	80029a6 <HAL_SYSTICK_Config>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d10f      	bne.n	800100c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b0f      	cmp	r3, #15
 8000ff0:	d809      	bhi.n	8001006 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ffa:	f001 fcba 	bl	8002972 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8001028 <HAL_InitTick+0x70>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	e007      	b.n	8001016 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	e004      	b.n	8001016 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	73fb      	strb	r3, [r7, #15]
 8001010:	e001      	b.n	8001016 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001016:	7bfb      	ldrb	r3, [r7, #15]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000010 	.word	0x20000010
 8001024:	20000008 	.word	0x20000008
 8001028:	2000000c 	.word	0x2000000c

0800102c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b05      	ldr	r3, [pc, #20]	@ (8001048 <HAL_IncTick+0x1c>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b05      	ldr	r3, [pc, #20]	@ (800104c <HAL_IncTick+0x20>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4413      	add	r3, r2
 800103a:	4a03      	ldr	r2, [pc, #12]	@ (8001048 <HAL_IncTick+0x1c>)
 800103c:	6013      	str	r3, [r2, #0]
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	20000224 	.word	0x20000224
 800104c:	20000010 	.word	0x20000010

08001050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return uwTick;
 8001054:	4b03      	ldr	r3, [pc, #12]	@ (8001064 <HAL_GetTick+0x14>)
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000224 	.word	0x20000224

08001068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001070:	f7ff ffee 	bl	8001050 <HAL_GetTick>
 8001074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001080:	d004      	beq.n	800108c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001082:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <HAL_Delay+0x40>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	4413      	add	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800108c:	bf00      	nop
 800108e:	f7ff ffdf 	bl	8001050 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	68fa      	ldr	r2, [r7, #12]
 800109a:	429a      	cmp	r2, r3
 800109c:	d8f7      	bhi.n	800108e <HAL_Delay+0x26>
  {
  }
}
 800109e:	bf00      	nop
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000010 	.word	0x20000010

080010ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	431a      	orrs	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	609a      	str	r2, [r3, #8]
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	431a      	orrs	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	609a      	str	r2, [r3, #8]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001114:	b480      	push	{r7}
 8001116:	b087      	sub	sp, #28
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
 8001120:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	3360      	adds	r3, #96	@ 0x60
 8001126:	461a      	mov	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <LL_ADC_SetOffset+0x44>)
 8001136:	4013      	ands	r3, r2
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	430a      	orrs	r2, r1
 8001142:	4313      	orrs	r3, r2
 8001144:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800114c:	bf00      	nop
 800114e:	371c      	adds	r7, #28
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	03fff000 	.word	0x03fff000

0800115c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3360      	adds	r3, #96	@ 0x60
 800116a:	461a      	mov	r2, r3
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800117c:	4618      	mov	r0, r3
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001188:	b480      	push	{r7}
 800118a:	b087      	sub	sp, #28
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	3360      	adds	r3, #96	@ 0x60
 8001198:	461a      	mov	r2, r3
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	431a      	orrs	r2, r3
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80011b2:	bf00      	nop
 80011b4:	371c      	adds	r7, #28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80011be:	b480      	push	{r7}
 80011c0:	b087      	sub	sp, #28
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	60f8      	str	r0, [r7, #12]
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	3360      	adds	r3, #96	@ 0x60
 80011ce:	461a      	mov	r2, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	431a      	orrs	r2, r3
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80011e8:	bf00      	nop
 80011ea:	371c      	adds	r7, #28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b087      	sub	sp, #28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	3360      	adds	r3, #96	@ 0x60
 8001204:	461a      	mov	r2, r3
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	431a      	orrs	r2, r3
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800121e:	bf00      	nop
 8001220:	371c      	adds	r7, #28
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	431a      	orrs	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	615a      	str	r2, [r3, #20]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001264:	2301      	movs	r3, #1
 8001266:	e000      	b.n	800126a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001276:	b480      	push	{r7}
 8001278:	b087      	sub	sp, #28
 800127a:	af00      	add	r7, sp, #0
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3330      	adds	r3, #48	@ 0x30
 8001286:	461a      	mov	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	0a1b      	lsrs	r3, r3, #8
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	4413      	add	r3, r2
 8001294:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	f003 031f 	and.w	r3, r3, #31
 80012a0:	211f      	movs	r1, #31
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	401a      	ands	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	0e9b      	lsrs	r3, r3, #26
 80012ae:	f003 011f 	and.w	r1, r3, #31
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	f003 031f 	and.w	r3, r3, #31
 80012b8:	fa01 f303 	lsl.w	r3, r1, r3
 80012bc:	431a      	orrs	r2, r3
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012c2:	bf00      	nop
 80012c4:	371c      	adds	r7, #28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b087      	sub	sp, #28
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	60f8      	str	r0, [r7, #12]
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	3314      	adds	r3, #20
 80012de:	461a      	mov	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	0e5b      	lsrs	r3, r3, #25
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	4413      	add	r3, r2
 80012ec:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	0d1b      	lsrs	r3, r3, #20
 80012f6:	f003 031f 	and.w	r3, r3, #31
 80012fa:	2107      	movs	r1, #7
 80012fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	401a      	ands	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	0d1b      	lsrs	r3, r3, #20
 8001308:	f003 031f 	and.w	r3, r3, #31
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	431a      	orrs	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001318:	bf00      	nop
 800131a:	371c      	adds	r7, #28
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800133c:	43db      	mvns	r3, r3
 800133e:	401a      	ands	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f003 0318 	and.w	r3, r3, #24
 8001346:	4908      	ldr	r1, [pc, #32]	@ (8001368 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001348:	40d9      	lsrs	r1, r3
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	400b      	ands	r3, r1
 800134e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001352:	431a      	orrs	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800135a:	bf00      	nop
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	0007ffff 	.word	0x0007ffff

0800136c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f003 031f 	and.w	r3, r3, #31
}
 800137c:	4618      	mov	r0, r3
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001398:	4618      	mov	r0, r3
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80013b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	6093      	str	r3, [r2, #8]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80013d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013dc:	d101      	bne.n	80013e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001400:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001404:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001428:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800142c:	d101      	bne.n	8001432 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001450:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001454:	f043 0201 	orr.w	r2, r3, #1
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001478:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800147c:	f043 0202 	orr.w	r2, r3, #2
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d101      	bne.n	80014a8 <LL_ADC_IsEnabled+0x18>
 80014a4:	2301      	movs	r3, #1
 80014a6:	e000      	b.n	80014aa <LL_ADC_IsEnabled+0x1a>
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d101      	bne.n	80014ce <LL_ADC_IsDisableOngoing+0x18>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <LL_ADC_IsDisableOngoing+0x1a>
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014f0:	f043 0204 	orr.w	r2, r3, #4
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b04      	cmp	r3, #4
 8001516:	d101      	bne.n	800151c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	2b08      	cmp	r3, #8
 800153c:	d101      	bne.n	8001542 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001550:	b590      	push	{r4, r7, lr}
 8001552:	b089      	sub	sp, #36	@ 0x24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e167      	b.n	800183a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001574:	2b00      	cmp	r3, #0
 8001576:	d109      	bne.n	800158c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff fb0b 	bl	8000b94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff19 	bl	80013c8 <LL_ADC_IsDeepPowerDownEnabled>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d004      	beq.n	80015a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff feff 	bl	80013a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff ff34 	bl	8001418 <LL_ADC_IsInternalRegulatorEnabled>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d115      	bne.n	80015e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff ff18 	bl	80013f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015c0:	4ba0      	ldr	r3, [pc, #640]	@ (8001844 <HAL_ADC_Init+0x2f4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	099b      	lsrs	r3, r3, #6
 80015c6:	4aa0      	ldr	r2, [pc, #640]	@ (8001848 <HAL_ADC_Init+0x2f8>)
 80015c8:	fba2 2303 	umull	r2, r3, r2, r3
 80015cc:	099b      	lsrs	r3, r3, #6
 80015ce:	3301      	adds	r3, #1
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015d4:	e002      	b.n	80015dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	3b01      	subs	r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f9      	bne.n	80015d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff ff16 	bl	8001418 <LL_ADC_IsInternalRegulatorEnabled>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10d      	bne.n	800160e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015f6:	f043 0210 	orr.w	r2, r3, #16
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001602:	f043 0201 	orr.w	r2, r3, #1
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff76 	bl	8001504 <LL_ADC_REG_IsConversionOngoing>
 8001618:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800161e:	f003 0310 	and.w	r3, r3, #16
 8001622:	2b00      	cmp	r3, #0
 8001624:	f040 8100 	bne.w	8001828 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	2b00      	cmp	r3, #0
 800162c:	f040 80fc 	bne.w	8001828 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001634:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001638:	f043 0202 	orr.w	r2, r3, #2
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff23 	bl	8001490 <LL_ADC_IsEnabled>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d111      	bne.n	8001674 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001650:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001654:	f7ff ff1c 	bl	8001490 <LL_ADC_IsEnabled>
 8001658:	4604      	mov	r4, r0
 800165a:	487c      	ldr	r0, [pc, #496]	@ (800184c <HAL_ADC_Init+0x2fc>)
 800165c:	f7ff ff18 	bl	8001490 <LL_ADC_IsEnabled>
 8001660:	4603      	mov	r3, r0
 8001662:	4323      	orrs	r3, r4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d105      	bne.n	8001674 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	4619      	mov	r1, r3
 800166e:	4878      	ldr	r0, [pc, #480]	@ (8001850 <HAL_ADC_Init+0x300>)
 8001670:	f7ff fd1c 	bl	80010ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7f5b      	ldrb	r3, [r3, #29]
 8001678:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800167e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001684:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800168a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001692:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d106      	bne.n	80016b0 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a6:	3b01      	subs	r3, #1
 80016a8:	045b      	lsls	r3, r3, #17
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d009      	beq.n	80016cc <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016bc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68da      	ldr	r2, [r3, #12]
 80016d2:	4b60      	ldr	r3, [pc, #384]	@ (8001854 <HAL_ADC_Init+0x304>)
 80016d4:	4013      	ands	r3, r2
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6812      	ldr	r2, [r2, #0]
 80016da:	69b9      	ldr	r1, [r7, #24]
 80016dc:	430b      	orrs	r3, r1
 80016de:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff ff15 	bl	800152a <LL_ADC_INJ_IsConversionOngoing>
 8001700:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d16d      	bne.n	80017e4 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d16a      	bne.n	80017e4 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001712:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800171a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800172a:	f023 0302 	bic.w	r3, r3, #2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6812      	ldr	r2, [r2, #0]
 8001732:	69b9      	ldr	r1, [r7, #24]
 8001734:	430b      	orrs	r3, r1
 8001736:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d017      	beq.n	8001770 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	691a      	ldr	r2, [r3, #16]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800174e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001758:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800175c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6911      	ldr	r1, [r2, #16]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6812      	ldr	r2, [r2, #0]
 8001768:	430b      	orrs	r3, r1
 800176a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800176e:	e013      	b.n	8001798 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	691a      	ldr	r2, [r3, #16]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800177e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6812      	ldr	r2, [r2, #0]
 800178c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001790:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001794:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d118      	bne.n	80017d4 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80017ac:	f023 0304 	bic.w	r3, r3, #4
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80017b8:	4311      	orrs	r1, r2
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80017be:	4311      	orrs	r1, r2
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80017c4:	430a      	orrs	r2, r1
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f042 0201 	orr.w	r2, r2, #1
 80017d0:	611a      	str	r2, [r3, #16]
 80017d2:	e007      	b.n	80017e4 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	691a      	ldr	r2, [r3, #16]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0201 	bic.w	r2, r2, #1
 80017e2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d10c      	bne.n	8001806 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	f023 010f 	bic.w	r1, r3, #15
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	1e5a      	subs	r2, r3, #1
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	631a      	str	r2, [r3, #48]	@ 0x30
 8001804:	e007      	b.n	8001816 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 020f 	bic.w	r2, r2, #15
 8001814:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800181a:	f023 0303 	bic.w	r3, r3, #3
 800181e:	f043 0201 	orr.w	r2, r3, #1
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001826:	e007      	b.n	8001838 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800182c:	f043 0210 	orr.w	r2, r3, #16
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001838:	7ffb      	ldrb	r3, [r7, #31]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3724      	adds	r7, #36	@ 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd90      	pop	{r4, r7, pc}
 8001842:	bf00      	nop
 8001844:	20000008 	.word	0x20000008
 8001848:	053e2d63 	.word	0x053e2d63
 800184c:	50000100 	.word	0x50000100
 8001850:	50000300 	.word	0x50000300
 8001854:	fff04007 	.word	0xfff04007

08001858 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001860:	4859      	ldr	r0, [pc, #356]	@ (80019c8 <HAL_ADC_Start+0x170>)
 8001862:	f7ff fd83 	bl	800136c <LL_ADC_GetMultimode>
 8001866:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fe49 	bl	8001504 <LL_ADC_REG_IsConversionOngoing>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	f040 809f 	bne.w	80019b8 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001880:	2b01      	cmp	r3, #1
 8001882:	d101      	bne.n	8001888 <HAL_ADC_Start+0x30>
 8001884:	2302      	movs	r3, #2
 8001886:	e09a      	b.n	80019be <HAL_ADC_Start+0x166>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 fd73 	bl	800237c <ADC_Enable>
 8001896:	4603      	mov	r3, r0
 8001898:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800189a:	7dfb      	ldrb	r3, [r7, #23]
 800189c:	2b00      	cmp	r3, #0
 800189e:	f040 8086 	bne.w	80019ae <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018a6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80018aa:	f023 0301 	bic.w	r3, r3, #1
 80018ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a44      	ldr	r2, [pc, #272]	@ (80019cc <HAL_ADC_Start+0x174>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d002      	beq.n	80018c6 <HAL_ADC_Start+0x6e>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	e001      	b.n	80018ca <HAL_ADC_Start+0x72>
 80018c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d002      	beq.n	80018d8 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d105      	bne.n	80018e4 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018f0:	d106      	bne.n	8001900 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018f6:	f023 0206 	bic.w	r2, r3, #6
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	661a      	str	r2, [r3, #96]	@ 0x60
 80018fe:	e002      	b.n	8001906 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	221c      	movs	r2, #28
 800190c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a2c      	ldr	r2, [pc, #176]	@ (80019cc <HAL_ADC_Start+0x174>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d002      	beq.n	8001926 <HAL_ADC_Start+0xce>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	e001      	b.n	800192a <HAL_ADC_Start+0xd2>
 8001926:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6812      	ldr	r2, [r2, #0]
 800192e:	4293      	cmp	r3, r2
 8001930:	d008      	beq.n	8001944 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	2b05      	cmp	r3, #5
 800193c:	d002      	beq.n	8001944 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	2b09      	cmp	r3, #9
 8001942:	d114      	bne.n	800196e <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d007      	beq.n	8001962 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001956:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800195a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fdb8 	bl	80014dc <LL_ADC_REG_StartConversion>
 800196c:	e026      	b.n	80019bc <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001972:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a13      	ldr	r2, [pc, #76]	@ (80019cc <HAL_ADC_Start+0x174>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d002      	beq.n	800198a <HAL_ADC_Start+0x132>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	e001      	b.n	800198e <HAL_ADC_Start+0x136>
 800198a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800198e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00f      	beq.n	80019bc <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019a0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019a4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80019ac:	e006      	b.n	80019bc <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80019b6:	e001      	b.n	80019bc <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019b8:	2302      	movs	r3, #2
 80019ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80019bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	50000300 	.word	0x50000300
 80019cc:	50000100 	.word	0x50000100

080019d0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019da:	4867      	ldr	r0, [pc, #412]	@ (8001b78 <HAL_ADC_PollForConversion+0x1a8>)
 80019dc:	f7ff fcc6 	bl	800136c <LL_ADC_GetMultimode>
 80019e0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d102      	bne.n	80019f0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80019ea:	2308      	movs	r3, #8
 80019ec:	61fb      	str	r3, [r7, #28]
 80019ee:	e02a      	b.n	8001a46 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d005      	beq.n	8001a02 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	2b05      	cmp	r3, #5
 80019fa:	d002      	beq.n	8001a02 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	2b09      	cmp	r3, #9
 8001a00:	d111      	bne.n	8001a26 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d007      	beq.n	8001a20 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a14:	f043 0220 	orr.w	r2, r3, #32
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0a6      	b.n	8001b6e <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001a20:	2304      	movs	r3, #4
 8001a22:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001a24:	e00f      	b.n	8001a46 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001a26:	4854      	ldr	r0, [pc, #336]	@ (8001b78 <HAL_ADC_PollForConversion+0x1a8>)
 8001a28:	f7ff fcae 	bl	8001388 <LL_ADC_GetMultiDMATransfer>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d007      	beq.n	8001a42 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a36:	f043 0220 	orr.w	r2, r3, #32
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e095      	b.n	8001b6e <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001a42:	2304      	movs	r3, #4
 8001a44:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a46:	f7ff fb03 	bl	8001050 <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a4c:	e021      	b.n	8001a92 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a54:	d01d      	beq.n	8001a92 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001a56:	f7ff fafb 	bl	8001050 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d302      	bcc.n	8001a6c <HAL_ADC_PollForConversion+0x9c>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d112      	bne.n	8001a92 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	4013      	ands	r3, r2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10b      	bne.n	8001a92 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a7e:	f043 0204 	orr.w	r2, r3, #4
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e06d      	b.n	8001b6e <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0d6      	beq.n	8001a4e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aa4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fbcd 	bl	8001250 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d01c      	beq.n	8001af6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	7f5b      	ldrb	r3, [r3, #29]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d118      	bne.n	8001af6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d111      	bne.n	8001af6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ae2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d105      	bne.n	8001af6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aee:	f043 0201 	orr.w	r2, r3, #1
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a20      	ldr	r2, [pc, #128]	@ (8001b7c <HAL_ADC_PollForConversion+0x1ac>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d002      	beq.n	8001b06 <HAL_ADC_PollForConversion+0x136>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	e001      	b.n	8001b0a <HAL_ADC_PollForConversion+0x13a>
 8001b06:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6812      	ldr	r2, [r2, #0]
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d008      	beq.n	8001b24 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	2b05      	cmp	r3, #5
 8001b1c:	d002      	beq.n	8001b24 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	2b09      	cmp	r3, #9
 8001b22:	d104      	bne.n	8001b2e <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	61bb      	str	r3, [r7, #24]
 8001b2c:	e00d      	b.n	8001b4a <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a12      	ldr	r2, [pc, #72]	@ (8001b7c <HAL_ADC_PollForConversion+0x1ac>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d002      	beq.n	8001b3e <HAL_ADC_PollForConversion+0x16e>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	e001      	b.n	8001b42 <HAL_ADC_PollForConversion+0x172>
 8001b3e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001b42:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d104      	bne.n	8001b5a <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2208      	movs	r2, #8
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	e008      	b.n	8001b6c <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d103      	bne.n	8001b6c <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	220c      	movs	r2, #12
 8001b6a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3720      	adds	r7, #32
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	50000300 	.word	0x50000300
 8001b7c:	50000100 	.word	0x50000100

08001b80 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
	...

08001b9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b0b6      	sub	sp, #216	@ 0xd8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d101      	bne.n	8001bbe <HAL_ADC_ConfigChannel+0x22>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e3c8      	b.n	8002350 <HAL_ADC_ConfigChannel+0x7b4>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fc9a 	bl	8001504 <LL_ADC_REG_IsConversionOngoing>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f040 83ad 	bne.w	8002332 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6818      	ldr	r0, [r3, #0]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	6859      	ldr	r1, [r3, #4]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	461a      	mov	r2, r3
 8001be6:	f7ff fb46 	bl	8001276 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fc88 	bl	8001504 <LL_ADC_REG_IsConversionOngoing>
 8001bf4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fc94 	bl	800152a <LL_ADC_INJ_IsConversionOngoing>
 8001c02:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c06:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f040 81d9 	bne.w	8001fc2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f040 81d4 	bne.w	8001fc2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001c22:	d10f      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f7ff fb4d 	bl	80012ce <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff faf4 	bl	800122a <LL_ADC_SetSamplingTimeCommonConfig>
 8001c42:	e00e      	b.n	8001c62 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	6819      	ldr	r1, [r3, #0]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	461a      	mov	r2, r3
 8001c52:	f7ff fb3c 	bl	80012ce <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fae4 	bl	800122a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	695a      	ldr	r2, [r3, #20]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	08db      	lsrs	r3, r3, #3
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	d022      	beq.n	8001cca <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6818      	ldr	r0, [r3, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	6919      	ldr	r1, [r3, #16]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001c94:	f7ff fa3e 	bl	8001114 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6818      	ldr	r0, [r3, #0]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	6919      	ldr	r1, [r3, #16]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	f7ff fa8a 	bl	80011be <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6818      	ldr	r0, [r3, #0]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d102      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x124>
 8001cba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cbe:	e000      	b.n	8001cc2 <HAL_ADC_ConfigChannel+0x126>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	f7ff fa96 	bl	80011f4 <LL_ADC_SetOffsetSaturation>
 8001cc8:	e17b      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff fa43 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10a      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x15a>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fa38 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001cec:	4603      	mov	r3, r0
 8001cee:	0e9b      	lsrs	r3, r3, #26
 8001cf0:	f003 021f 	and.w	r2, r3, #31
 8001cf4:	e01e      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x198>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff fa2d 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001d02:	4603      	mov	r3, r0
 8001d04:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d0c:	fa93 f3a3 	rbit	r3, r3
 8001d10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001d18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001d24:	2320      	movs	r3, #32
 8001d26:	e004      	b.n	8001d32 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001d28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d2c:	fab3 f383 	clz	r3, r3
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d105      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x1b0>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	0e9b      	lsrs	r3, r3, #26
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	e018      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1e2>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d58:	fa93 f3a3 	rbit	r3, r3
 8001d5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001d60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001d68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001d70:	2320      	movs	r3, #32
 8001d72:	e004      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001d74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d78:	fab3 f383 	clz	r3, r3
 8001d7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d106      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2200      	movs	r2, #0
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff f9fc 	bl	8001188 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2101      	movs	r1, #1
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff f9e0 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10a      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x220>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2101      	movs	r1, #1
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff f9d5 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001db2:	4603      	mov	r3, r0
 8001db4:	0e9b      	lsrs	r3, r3, #26
 8001db6:	f003 021f 	and.w	r2, r3, #31
 8001dba:	e01e      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x25e>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff f9ca 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001dd2:	fa93 f3a3 	rbit	r3, r3
 8001dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001dda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001dde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001de2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001dea:	2320      	movs	r3, #32
 8001dec:	e004      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001dee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001df2:	fab3 f383 	clz	r3, r3
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d105      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x276>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	0e9b      	lsrs	r3, r3, #26
 8001e0c:	f003 031f 	and.w	r3, r3, #31
 8001e10:	e018      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x2a8>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e1e:	fa93 f3a3 	rbit	r3, r3
 8001e22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001e26:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001e2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001e2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001e36:	2320      	movs	r3, #32
 8001e38:	e004      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001e3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e3e:	fab3 f383 	clz	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d106      	bne.n	8001e56 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2101      	movs	r1, #1
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff f999 	bl	8001188 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2102      	movs	r1, #2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff f97d 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001e62:	4603      	mov	r3, r0
 8001e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10a      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x2e6>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2102      	movs	r1, #2
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff f972 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	0e9b      	lsrs	r3, r3, #26
 8001e7c:	f003 021f 	and.w	r2, r3, #31
 8001e80:	e01e      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x324>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2102      	movs	r1, #2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff f967 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e98:	fa93 f3a3 	rbit	r3, r3
 8001e9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001ea0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ea4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001ea8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001eb0:	2320      	movs	r3, #32
 8001eb2:	e004      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001eb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001eb8:	fab3 f383 	clz	r3, r3
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d105      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x33c>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	0e9b      	lsrs	r3, r3, #26
 8001ed2:	f003 031f 	and.w	r3, r3, #31
 8001ed6:	e016      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x36a>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ee4:	fa93 f3a3 	rbit	r3, r3
 8001ee8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001eea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001eec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001ef0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001ef8:	2320      	movs	r3, #32
 8001efa:	e004      	b.n	8001f06 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001efc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001f00:	fab3 f383 	clz	r3, r3
 8001f04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d106      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2102      	movs	r1, #2
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff f938 	bl	8001188 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2103      	movs	r1, #3
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff f91c 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001f24:	4603      	mov	r3, r0
 8001f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10a      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x3a8>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2103      	movs	r1, #3
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff f911 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	0e9b      	lsrs	r3, r3, #26
 8001f3e:	f003 021f 	and.w	r2, r3, #31
 8001f42:	e017      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x3d8>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2103      	movs	r1, #3
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff f906 	bl	800115c <LL_ADC_GetOffsetChannel>
 8001f50:	4603      	mov	r3, r0
 8001f52:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001f5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f5e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001f60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001f66:	2320      	movs	r3, #32
 8001f68:	e003      	b.n	8001f72 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001f6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f6c:	fab3 f383 	clz	r3, r3
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d105      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x3f0>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	0e9b      	lsrs	r3, r3, #26
 8001f86:	f003 031f 	and.w	r3, r3, #31
 8001f8a:	e011      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x414>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f94:	fa93 f3a3 	rbit	r3, r3
 8001f98:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001f9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001f9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001fa4:	2320      	movs	r3, #32
 8001fa6:	e003      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001fa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d106      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2103      	movs	r1, #3
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff f8e3 	bl	8001188 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fa62 	bl	8001490 <LL_ADC_IsEnabled>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f040 8140 	bne.w	8002254 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6818      	ldr	r0, [r3, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	6819      	ldr	r1, [r3, #0]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	f7ff f99f 	bl	8001324 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	4a8f      	ldr	r2, [pc, #572]	@ (8002228 <HAL_ADC_ConfigChannel+0x68c>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	f040 8131 	bne.w	8002254 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10b      	bne.n	800201a <HAL_ADC_ConfigChannel+0x47e>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	0e9b      	lsrs	r3, r3, #26
 8002008:	3301      	adds	r3, #1
 800200a:	f003 031f 	and.w	r3, r3, #31
 800200e:	2b09      	cmp	r3, #9
 8002010:	bf94      	ite	ls
 8002012:	2301      	movls	r3, #1
 8002014:	2300      	movhi	r3, #0
 8002016:	b2db      	uxtb	r3, r3
 8002018:	e019      	b.n	800204e <HAL_ADC_ConfigChannel+0x4b2>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002020:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002022:	fa93 f3a3 	rbit	r3, r3
 8002026:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002028:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800202a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800202c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002032:	2320      	movs	r3, #32
 8002034:	e003      	b.n	800203e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002036:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002038:	fab3 f383 	clz	r3, r3
 800203c:	b2db      	uxtb	r3, r3
 800203e:	3301      	adds	r3, #1
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	2b09      	cmp	r3, #9
 8002046:	bf94      	ite	ls
 8002048:	2301      	movls	r3, #1
 800204a:	2300      	movhi	r3, #0
 800204c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800204e:	2b00      	cmp	r3, #0
 8002050:	d079      	beq.n	8002146 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205a:	2b00      	cmp	r3, #0
 800205c:	d107      	bne.n	800206e <HAL_ADC_ConfigChannel+0x4d2>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	0e9b      	lsrs	r3, r3, #26
 8002064:	3301      	adds	r3, #1
 8002066:	069b      	lsls	r3, r3, #26
 8002068:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800206c:	e015      	b.n	800209a <HAL_ADC_ConfigChannel+0x4fe>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002074:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002076:	fa93 f3a3 	rbit	r3, r3
 800207a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800207c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800207e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002080:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002086:	2320      	movs	r3, #32
 8002088:	e003      	b.n	8002092 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800208a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800208c:	fab3 f383 	clz	r3, r3
 8002090:	b2db      	uxtb	r3, r3
 8002092:	3301      	adds	r3, #1
 8002094:	069b      	lsls	r3, r3, #26
 8002096:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x51e>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	0e9b      	lsrs	r3, r3, #26
 80020ac:	3301      	adds	r3, #1
 80020ae:	f003 031f 	and.w	r3, r3, #31
 80020b2:	2101      	movs	r1, #1
 80020b4:	fa01 f303 	lsl.w	r3, r1, r3
 80020b8:	e017      	b.n	80020ea <HAL_ADC_ConfigChannel+0x54e>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80020c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80020cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80020d2:	2320      	movs	r3, #32
 80020d4:	e003      	b.n	80020de <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80020d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020d8:	fab3 f383 	clz	r3, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	3301      	adds	r3, #1
 80020e0:	f003 031f 	and.w	r3, r3, #31
 80020e4:	2101      	movs	r1, #1
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	ea42 0103 	orr.w	r1, r2, r3
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10a      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x574>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	0e9b      	lsrs	r3, r3, #26
 8002100:	3301      	adds	r3, #1
 8002102:	f003 021f 	and.w	r2, r3, #31
 8002106:	4613      	mov	r3, r2
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4413      	add	r3, r2
 800210c:	051b      	lsls	r3, r3, #20
 800210e:	e018      	b.n	8002142 <HAL_ADC_ConfigChannel+0x5a6>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002118:	fa93 f3a3 	rbit	r3, r3
 800211c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800211e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002120:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002128:	2320      	movs	r3, #32
 800212a:	e003      	b.n	8002134 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800212c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800212e:	fab3 f383 	clz	r3, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	3301      	adds	r3, #1
 8002136:	f003 021f 	and.w	r2, r3, #31
 800213a:	4613      	mov	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4413      	add	r3, r2
 8002140:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002142:	430b      	orrs	r3, r1
 8002144:	e081      	b.n	800224a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214e:	2b00      	cmp	r3, #0
 8002150:	d107      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x5c6>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	0e9b      	lsrs	r3, r3, #26
 8002158:	3301      	adds	r3, #1
 800215a:	069b      	lsls	r3, r3, #26
 800215c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002160:	e015      	b.n	800218e <HAL_ADC_ConfigChannel+0x5f2>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800216a:	fa93 f3a3 	rbit	r3, r3
 800216e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002172:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800217a:	2320      	movs	r3, #32
 800217c:	e003      	b.n	8002186 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800217e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002180:	fab3 f383 	clz	r3, r3
 8002184:	b2db      	uxtb	r3, r3
 8002186:	3301      	adds	r3, #1
 8002188:	069b      	lsls	r3, r3, #26
 800218a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002196:	2b00      	cmp	r3, #0
 8002198:	d109      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x612>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	0e9b      	lsrs	r3, r3, #26
 80021a0:	3301      	adds	r3, #1
 80021a2:	f003 031f 	and.w	r3, r3, #31
 80021a6:	2101      	movs	r1, #1
 80021a8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ac:	e017      	b.n	80021de <HAL_ADC_ConfigChannel+0x642>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	fa93 f3a3 	rbit	r3, r3
 80021ba:	61fb      	str	r3, [r7, #28]
  return result;
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80021c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80021c6:	2320      	movs	r3, #32
 80021c8:	e003      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80021ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021cc:	fab3 f383 	clz	r3, r3
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	3301      	adds	r3, #1
 80021d4:	f003 031f 	and.w	r3, r3, #31
 80021d8:	2101      	movs	r1, #1
 80021da:	fa01 f303 	lsl.w	r3, r1, r3
 80021de:	ea42 0103 	orr.w	r1, r2, r3
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10d      	bne.n	800220a <HAL_ADC_ConfigChannel+0x66e>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	0e9b      	lsrs	r3, r3, #26
 80021f4:	3301      	adds	r3, #1
 80021f6:	f003 021f 	and.w	r2, r3, #31
 80021fa:	4613      	mov	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	4413      	add	r3, r2
 8002200:	3b1e      	subs	r3, #30
 8002202:	051b      	lsls	r3, r3, #20
 8002204:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002208:	e01e      	b.n	8002248 <HAL_ADC_ConfigChannel+0x6ac>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	613b      	str	r3, [r7, #16]
  return result;
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d104      	bne.n	800222c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002222:	2320      	movs	r3, #32
 8002224:	e006      	b.n	8002234 <HAL_ADC_ConfigChannel+0x698>
 8002226:	bf00      	nop
 8002228:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	fab3 f383 	clz	r3, r3
 8002232:	b2db      	uxtb	r3, r3
 8002234:	3301      	adds	r3, #1
 8002236:	f003 021f 	and.w	r2, r3, #31
 800223a:	4613      	mov	r3, r2
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	4413      	add	r3, r2
 8002240:	3b1e      	subs	r3, #30
 8002242:	051b      	lsls	r3, r3, #20
 8002244:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002248:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800224e:	4619      	mov	r1, r3
 8002250:	f7ff f83d 	bl	80012ce <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4b3f      	ldr	r3, [pc, #252]	@ (8002358 <HAL_ADC_ConfigChannel+0x7bc>)
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d071      	beq.n	8002344 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002260:	483e      	ldr	r0, [pc, #248]	@ (800235c <HAL_ADC_ConfigChannel+0x7c0>)
 8002262:	f7fe ff49 	bl	80010f8 <LL_ADC_GetCommonPathInternalCh>
 8002266:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a3c      	ldr	r2, [pc, #240]	@ (8002360 <HAL_ADC_ConfigChannel+0x7c4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d004      	beq.n	800227e <HAL_ADC_ConfigChannel+0x6e2>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a3a      	ldr	r2, [pc, #232]	@ (8002364 <HAL_ADC_ConfigChannel+0x7c8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d127      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800227e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002282:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d121      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002292:	d157      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002294:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002298:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800229c:	4619      	mov	r1, r3
 800229e:	482f      	ldr	r0, [pc, #188]	@ (800235c <HAL_ADC_ConfigChannel+0x7c0>)
 80022a0:	f7fe ff17 	bl	80010d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022a4:	4b30      	ldr	r3, [pc, #192]	@ (8002368 <HAL_ADC_ConfigChannel+0x7cc>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	099b      	lsrs	r3, r3, #6
 80022aa:	4a30      	ldr	r2, [pc, #192]	@ (800236c <HAL_ADC_ConfigChannel+0x7d0>)
 80022ac:	fba2 2303 	umull	r2, r3, r2, r3
 80022b0:	099b      	lsrs	r3, r3, #6
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	4613      	mov	r3, r2
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	4413      	add	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022be:	e002      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f9      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022cc:	e03a      	b.n	8002344 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a27      	ldr	r2, [pc, #156]	@ (8002370 <HAL_ADC_ConfigChannel+0x7d4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d113      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10d      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a22      	ldr	r2, [pc, #136]	@ (8002374 <HAL_ADC_ConfigChannel+0x7d8>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d02a      	beq.n	8002344 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022f6:	4619      	mov	r1, r3
 80022f8:	4818      	ldr	r0, [pc, #96]	@ (800235c <HAL_ADC_ConfigChannel+0x7c0>)
 80022fa:	f7fe feea 	bl	80010d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022fe:	e021      	b.n	8002344 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a1c      	ldr	r2, [pc, #112]	@ (8002378 <HAL_ADC_ConfigChannel+0x7dc>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d11c      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800230a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800230e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d116      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a16      	ldr	r2, [pc, #88]	@ (8002374 <HAL_ADC_ConfigChannel+0x7d8>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d011      	beq.n	8002344 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002320:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002324:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002328:	4619      	mov	r1, r3
 800232a:	480c      	ldr	r0, [pc, #48]	@ (800235c <HAL_ADC_ConfigChannel+0x7c0>)
 800232c:	f7fe fed1 	bl	80010d2 <LL_ADC_SetCommonPathInternalCh>
 8002330:	e008      	b.n	8002344 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002336:	f043 0220 	orr.w	r2, r3, #32
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800234c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002350:	4618      	mov	r0, r3
 8002352:	37d8      	adds	r7, #216	@ 0xd8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	80080000 	.word	0x80080000
 800235c:	50000300 	.word	0x50000300
 8002360:	c3210000 	.word	0xc3210000
 8002364:	90c00010 	.word	0x90c00010
 8002368:	20000008 	.word	0x20000008
 800236c:	053e2d63 	.word	0x053e2d63
 8002370:	c7520000 	.word	0xc7520000
 8002374:	50000100 	.word	0x50000100
 8002378:	cb840000 	.word	0xcb840000

0800237c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002384:	2300      	movs	r3, #0
 8002386:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff f87f 	bl	8001490 <LL_ADC_IsEnabled>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d169      	bne.n	800246c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	4b36      	ldr	r3, [pc, #216]	@ (8002478 <ADC_Enable+0xfc>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00d      	beq.n	80023c2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023aa:	f043 0210 	orr.w	r2, r3, #16
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023b6:	f043 0201 	orr.w	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e055      	b.n	800246e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff f83a 	bl	8001440 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80023cc:	482b      	ldr	r0, [pc, #172]	@ (800247c <ADC_Enable+0x100>)
 80023ce:	f7fe fe93 	bl	80010f8 <LL_ADC_GetCommonPathInternalCh>
 80023d2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80023d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d013      	beq.n	8002404 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023dc:	4b28      	ldr	r3, [pc, #160]	@ (8002480 <ADC_Enable+0x104>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	099b      	lsrs	r3, r3, #6
 80023e2:	4a28      	ldr	r2, [pc, #160]	@ (8002484 <ADC_Enable+0x108>)
 80023e4:	fba2 2303 	umull	r2, r3, r2, r3
 80023e8:	099b      	lsrs	r3, r3, #6
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	4613      	mov	r3, r2
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	4413      	add	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80023f6:	e002      	b.n	80023fe <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1f9      	bne.n	80023f8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002404:	f7fe fe24 	bl	8001050 <HAL_GetTick>
 8002408:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800240a:	e028      	b.n	800245e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff f83d 	bl	8001490 <LL_ADC_IsEnabled>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d104      	bne.n	8002426 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff f80d 	bl	8001440 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002426:	f7fe fe13 	bl	8001050 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d914      	bls.n	800245e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b01      	cmp	r3, #1
 8002440:	d00d      	beq.n	800245e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002446:	f043 0210 	orr.w	r2, r3, #16
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002452:	f043 0201 	orr.w	r2, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e007      	b.n	800246e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b01      	cmp	r3, #1
 800246a:	d1cf      	bne.n	800240c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	8000003f 	.word	0x8000003f
 800247c:	50000300 	.word	0x50000300
 8002480:	20000008 	.word	0x20000008
 8002484:	053e2d63 	.word	0x053e2d63

08002488 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff f80e 	bl	80014b6 <LL_ADC_IsDisableOngoing>
 800249a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe fff5 	bl	8001490 <LL_ADC_IsEnabled>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d047      	beq.n	800253c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d144      	bne.n	800253c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 030d 	and.w	r3, r3, #13
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d10c      	bne.n	80024da <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe ffcf 	bl	8001468 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2203      	movs	r2, #3
 80024d0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024d2:	f7fe fdbd 	bl	8001050 <HAL_GetTick>
 80024d6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80024d8:	e029      	b.n	800252e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024de:	f043 0210 	orr.w	r2, r3, #16
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ea:	f043 0201 	orr.w	r2, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e023      	b.n	800253e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024f6:	f7fe fdab 	bl	8001050 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d914      	bls.n	800252e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00d      	beq.n	800252e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002516:	f043 0210 	orr.w	r2, r3, #16
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002522:	f043 0201 	orr.w	r2, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e007      	b.n	800253e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1dc      	bne.n	80024f6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <LL_ADC_IsEnabled>:
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <LL_ADC_IsEnabled+0x18>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <LL_ADC_IsEnabled+0x1a>
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <LL_ADC_StartCalibration>:
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800257e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002588:	4313      	orrs	r3, r2
 800258a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	609a      	str	r2, [r3, #8]
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <LL_ADC_IsCalibrationOnGoing>:
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80025ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80025b2:	d101      	bne.n	80025b8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <LL_ADC_IsCalibrationOnGoing+0x1c>
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <LL_ADC_REG_IsConversionOngoing>:
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d101      	bne.n	80025de <LL_ADC_REG_IsConversionOngoing+0x18>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002600:	2b01      	cmp	r3, #1
 8002602:	d101      	bne.n	8002608 <HAL_ADCEx_Calibration_Start+0x1c>
 8002604:	2302      	movs	r3, #2
 8002606:	e04d      	b.n	80026a4 <HAL_ADCEx_Calibration_Start+0xb8>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff ff39 	bl	8002488 <ADC_Disable>
 8002616:	4603      	mov	r3, r0
 8002618:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d136      	bne.n	800268e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002624:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002628:	f023 0302 	bic.w	r3, r3, #2
 800262c:	f043 0202 	orr.w	r2, r3, #2
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6839      	ldr	r1, [r7, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff ff96 	bl	800256c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002640:	e014      	b.n	800266c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	3301      	adds	r3, #1
 8002646:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	4a18      	ldr	r2, [pc, #96]	@ (80026ac <HAL_ADCEx_Calibration_Start+0xc0>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d90d      	bls.n	800266c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002654:	f023 0312 	bic.w	r3, r3, #18
 8002658:	f043 0210 	orr.w	r2, r3, #16
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e01b      	b.n	80026a4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff ff94 	bl	800259e <LL_ADC_IsCalibrationOnGoing>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1e2      	bne.n	8002642 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002680:	f023 0303 	bic.w	r3, r3, #3
 8002684:	f043 0201 	orr.w	r2, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800268c:	e005      	b.n	800269a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002692:	f043 0210 	orr.w	r2, r3, #16
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	0004de01 	.word	0x0004de01

080026b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b0a1      	sub	sp, #132	@ 0x84
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e08b      	b.n	80027e6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80026d6:	2300      	movs	r3, #0
 80026d8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80026da:	2300      	movs	r3, #0
 80026dc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026e6:	d102      	bne.n	80026ee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80026e8:	4b41      	ldr	r3, [pc, #260]	@ (80027f0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	e001      	b.n	80026f2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80026ee:	2300      	movs	r3, #0
 80026f0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10b      	bne.n	8002710 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fc:	f043 0220 	orr.w	r2, r3, #32
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e06a      	b.n	80027e6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff ff57 	bl	80025c6 <LL_ADC_REG_IsConversionOngoing>
 8002718:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff ff51 	bl	80025c6 <LL_ADC_REG_IsConversionOngoing>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d14c      	bne.n	80027c4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800272a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800272c:	2b00      	cmp	r3, #0
 800272e:	d149      	bne.n	80027c4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002730:	4b30      	ldr	r3, [pc, #192]	@ (80027f4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002732:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d028      	beq.n	800278e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800273c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	6859      	ldr	r1, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800274e:	035b      	lsls	r3, r3, #13
 8002750:	430b      	orrs	r3, r1
 8002752:	431a      	orrs	r2, r3
 8002754:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002756:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002758:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800275c:	f7ff fef3 	bl	8002546 <LL_ADC_IsEnabled>
 8002760:	4604      	mov	r4, r0
 8002762:	4823      	ldr	r0, [pc, #140]	@ (80027f0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002764:	f7ff feef 	bl	8002546 <LL_ADC_IsEnabled>
 8002768:	4603      	mov	r3, r0
 800276a:	4323      	orrs	r3, r4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d133      	bne.n	80027d8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002770:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002778:	f023 030f 	bic.w	r3, r3, #15
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	6811      	ldr	r1, [r2, #0]
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	6892      	ldr	r2, [r2, #8]
 8002784:	430a      	orrs	r2, r1
 8002786:	431a      	orrs	r2, r3
 8002788:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800278a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800278c:	e024      	b.n	80027d8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800278e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002796:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002798:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800279a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800279e:	f7ff fed2 	bl	8002546 <LL_ADC_IsEnabled>
 80027a2:	4604      	mov	r4, r0
 80027a4:	4812      	ldr	r0, [pc, #72]	@ (80027f0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80027a6:	f7ff fece 	bl	8002546 <LL_ADC_IsEnabled>
 80027aa:	4603      	mov	r3, r0
 80027ac:	4323      	orrs	r3, r4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d112      	bne.n	80027d8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80027b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80027ba:	f023 030f 	bic.w	r3, r3, #15
 80027be:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80027c0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80027c2:	e009      	b.n	80027d8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c8:	f043 0220 	orr.w	r2, r3, #32
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80027d6:	e000      	b.n	80027da <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80027d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80027e2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3784      	adds	r7, #132	@ 0x84
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd90      	pop	{r4, r7, pc}
 80027ee:	bf00      	nop
 80027f0:	50000100 	.word	0x50000100
 80027f4:	50000300 	.word	0x50000300

080027f8 <__NVIC_SetPriorityGrouping>:
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002808:	4b0c      	ldr	r3, [pc, #48]	@ (800283c <__NVIC_SetPriorityGrouping+0x44>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002814:	4013      	ands	r3, r2
 8002816:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002820:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002824:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800282a:	4a04      	ldr	r2, [pc, #16]	@ (800283c <__NVIC_SetPriorityGrouping+0x44>)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	60d3      	str	r3, [r2, #12]
}
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <__NVIC_GetPriorityGrouping>:
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002844:	4b04      	ldr	r3, [pc, #16]	@ (8002858 <__NVIC_GetPriorityGrouping+0x18>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	0a1b      	lsrs	r3, r3, #8
 800284a:	f003 0307 	and.w	r3, r3, #7
}
 800284e:	4618      	mov	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <__NVIC_SetPriority>:
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	6039      	str	r1, [r7, #0]
 8002866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286c:	2b00      	cmp	r3, #0
 800286e:	db0a      	blt.n	8002886 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	b2da      	uxtb	r2, r3
 8002874:	490c      	ldr	r1, [pc, #48]	@ (80028a8 <__NVIC_SetPriority+0x4c>)
 8002876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287a:	0112      	lsls	r2, r2, #4
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	440b      	add	r3, r1
 8002880:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002884:	e00a      	b.n	800289c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	b2da      	uxtb	r2, r3
 800288a:	4908      	ldr	r1, [pc, #32]	@ (80028ac <__NVIC_SetPriority+0x50>)
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	3b04      	subs	r3, #4
 8002894:	0112      	lsls	r2, r2, #4
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	440b      	add	r3, r1
 800289a:	761a      	strb	r2, [r3, #24]
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	e000e100 	.word	0xe000e100
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <NVIC_EncodePriority>:
{
 80028b0:	b480      	push	{r7}
 80028b2:	b089      	sub	sp, #36	@ 0x24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f1c3 0307 	rsb	r3, r3, #7
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	bf28      	it	cs
 80028ce:	2304      	movcs	r3, #4
 80028d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3304      	adds	r3, #4
 80028d6:	2b06      	cmp	r3, #6
 80028d8:	d902      	bls.n	80028e0 <NVIC_EncodePriority+0x30>
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3b03      	subs	r3, #3
 80028de:	e000      	b.n	80028e2 <NVIC_EncodePriority+0x32>
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43da      	mvns	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	401a      	ands	r2, r3
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002902:	43d9      	mvns	r1, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002908:	4313      	orrs	r3, r2
}
 800290a:	4618      	mov	r0, r3
 800290c:	3724      	adds	r7, #36	@ 0x24
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
	...

08002918 <SysTick_Config>:
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3b01      	subs	r3, #1
 8002924:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002928:	d301      	bcc.n	800292e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800292a:	2301      	movs	r3, #1
 800292c:	e00f      	b.n	800294e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800292e:	4a0a      	ldr	r2, [pc, #40]	@ (8002958 <SysTick_Config+0x40>)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3b01      	subs	r3, #1
 8002934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002936:	210f      	movs	r1, #15
 8002938:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800293c:	f7ff ff8e 	bl	800285c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002940:	4b05      	ldr	r3, [pc, #20]	@ (8002958 <SysTick_Config+0x40>)
 8002942:	2200      	movs	r2, #0
 8002944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002946:	4b04      	ldr	r3, [pc, #16]	@ (8002958 <SysTick_Config+0x40>)
 8002948:	2207      	movs	r2, #7
 800294a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	e000e010 	.word	0xe000e010

0800295c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f7ff ff47 	bl	80027f8 <__NVIC_SetPriorityGrouping>
}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b086      	sub	sp, #24
 8002976:	af00      	add	r7, sp, #0
 8002978:	4603      	mov	r3, r0
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	607a      	str	r2, [r7, #4]
 800297e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002980:	f7ff ff5e 	bl	8002840 <__NVIC_GetPriorityGrouping>
 8002984:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68b9      	ldr	r1, [r7, #8]
 800298a:	6978      	ldr	r0, [r7, #20]
 800298c:	f7ff ff90 	bl	80028b0 <NVIC_EncodePriority>
 8002990:	4602      	mov	r2, r0
 8002992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002996:	4611      	mov	r1, r2
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff ff5f 	bl	800285c <__NVIC_SetPriority>
}
 800299e:	bf00      	nop
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff ffb2 	bl	8002918 <SysTick_Config>
 80029b4:	4603      	mov	r3, r0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80029ce:	e15a      	b.n	8002c86 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	2101      	movs	r1, #1
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	fa01 f303 	lsl.w	r3, r1, r3
 80029dc:	4013      	ands	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 814c 	beq.w	8002c80 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d005      	beq.n	8002a00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d130      	bne.n	8002a62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4013      	ands	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	68da      	ldr	r2, [r3, #12]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a36:	2201      	movs	r2, #1
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4013      	ands	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	091b      	lsrs	r3, r3, #4
 8002a4c:	f003 0201 	and.w	r2, r3, #1
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d017      	beq.n	8002a9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	2203      	movs	r2, #3
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4013      	ands	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d123      	bne.n	8002af2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	08da      	lsrs	r2, r3, #3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3208      	adds	r2, #8
 8002ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	220f      	movs	r2, #15
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4013      	ands	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	691a      	ldr	r2, [r3, #16]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	08da      	lsrs	r2, r3, #3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3208      	adds	r2, #8
 8002aec:	6939      	ldr	r1, [r7, #16]
 8002aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	2203      	movs	r2, #3
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4013      	ands	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 0203 	and.w	r2, r3, #3
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 80a6 	beq.w	8002c80 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b34:	4b5b      	ldr	r3, [pc, #364]	@ (8002ca4 <HAL_GPIO_Init+0x2e4>)
 8002b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b38:	4a5a      	ldr	r2, [pc, #360]	@ (8002ca4 <HAL_GPIO_Init+0x2e4>)
 8002b3a:	f043 0301 	orr.w	r3, r3, #1
 8002b3e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b40:	4b58      	ldr	r3, [pc, #352]	@ (8002ca4 <HAL_GPIO_Init+0x2e4>)
 8002b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b4c:	4a56      	ldr	r2, [pc, #344]	@ (8002ca8 <HAL_GPIO_Init+0x2e8>)
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	089b      	lsrs	r3, r3, #2
 8002b52:	3302      	adds	r3, #2
 8002b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	220f      	movs	r2, #15
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002b76:	d01f      	beq.n	8002bb8 <HAL_GPIO_Init+0x1f8>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a4c      	ldr	r2, [pc, #304]	@ (8002cac <HAL_GPIO_Init+0x2ec>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d019      	beq.n	8002bb4 <HAL_GPIO_Init+0x1f4>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a4b      	ldr	r2, [pc, #300]	@ (8002cb0 <HAL_GPIO_Init+0x2f0>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d013      	beq.n	8002bb0 <HAL_GPIO_Init+0x1f0>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a4a      	ldr	r2, [pc, #296]	@ (8002cb4 <HAL_GPIO_Init+0x2f4>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d00d      	beq.n	8002bac <HAL_GPIO_Init+0x1ec>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a49      	ldr	r2, [pc, #292]	@ (8002cb8 <HAL_GPIO_Init+0x2f8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d007      	beq.n	8002ba8 <HAL_GPIO_Init+0x1e8>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a48      	ldr	r2, [pc, #288]	@ (8002cbc <HAL_GPIO_Init+0x2fc>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d101      	bne.n	8002ba4 <HAL_GPIO_Init+0x1e4>
 8002ba0:	2305      	movs	r3, #5
 8002ba2:	e00a      	b.n	8002bba <HAL_GPIO_Init+0x1fa>
 8002ba4:	2306      	movs	r3, #6
 8002ba6:	e008      	b.n	8002bba <HAL_GPIO_Init+0x1fa>
 8002ba8:	2304      	movs	r3, #4
 8002baa:	e006      	b.n	8002bba <HAL_GPIO_Init+0x1fa>
 8002bac:	2303      	movs	r3, #3
 8002bae:	e004      	b.n	8002bba <HAL_GPIO_Init+0x1fa>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e002      	b.n	8002bba <HAL_GPIO_Init+0x1fa>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <HAL_GPIO_Init+0x1fa>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	f002 0203 	and.w	r2, r2, #3
 8002bc0:	0092      	lsls	r2, r2, #2
 8002bc2:	4093      	lsls	r3, r2
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bca:	4937      	ldr	r1, [pc, #220]	@ (8002ca8 <HAL_GPIO_Init+0x2e8>)
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	089b      	lsrs	r3, r3, #2
 8002bd0:	3302      	adds	r3, #2
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bd8:	4b39      	ldr	r3, [pc, #228]	@ (8002cc0 <HAL_GPIO_Init+0x300>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4013      	ands	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bfc:	4a30      	ldr	r2, [pc, #192]	@ (8002cc0 <HAL_GPIO_Init+0x300>)
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c02:	4b2f      	ldr	r3, [pc, #188]	@ (8002cc0 <HAL_GPIO_Init+0x300>)
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c26:	4a26      	ldr	r2, [pc, #152]	@ (8002cc0 <HAL_GPIO_Init+0x300>)
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002c2c:	4b24      	ldr	r3, [pc, #144]	@ (8002cc0 <HAL_GPIO_Init+0x300>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	43db      	mvns	r3, r3
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c50:	4a1b      	ldr	r2, [pc, #108]	@ (8002cc0 <HAL_GPIO_Init+0x300>)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c56:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc0 <HAL_GPIO_Init+0x300>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4013      	ands	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c7a:	4a11      	ldr	r2, [pc, #68]	@ (8002cc0 <HAL_GPIO_Init+0x300>)
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	3301      	adds	r3, #1
 8002c84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f47f ae9d 	bne.w	80029d0 <HAL_GPIO_Init+0x10>
  }
}
 8002c96:	bf00      	nop
 8002c98:	bf00      	nop
 8002c9a:	371c      	adds	r7, #28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40010000 	.word	0x40010000
 8002cac:	48000400 	.word	0x48000400
 8002cb0:	48000800 	.word	0x48000800
 8002cb4:	48000c00 	.word	0x48000c00
 8002cb8:	48001000 	.word	0x48001000
 8002cbc:	48001400 	.word	0x48001400
 8002cc0:	40010400 	.word	0x40010400

08002cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	807b      	strh	r3, [r7, #2]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cd4:	787b      	ldrb	r3, [r7, #1]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cda:	887a      	ldrh	r2, [r7, #2]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ce0:	e002      	b.n	8002ce8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ce2:	887a      	ldrh	r2, [r7, #2]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d06:	887a      	ldrh	r2, [r7, #2]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	041a      	lsls	r2, r3, #16
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	43d9      	mvns	r1, r3
 8002d12:	887b      	ldrh	r3, [r7, #2]
 8002d14:	400b      	ands	r3, r1
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	619a      	str	r2, [r3, #24]
}
 8002d1c:	bf00      	nop
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d141      	bne.n	8002dba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d36:	4b4b      	ldr	r3, [pc, #300]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d42:	d131      	bne.n	8002da8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d44:	4b47      	ldr	r3, [pc, #284]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d4a:	4a46      	ldr	r2, [pc, #280]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d54:	4b43      	ldr	r3, [pc, #268]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d5c:	4a41      	ldr	r2, [pc, #260]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d64:	4b40      	ldr	r3, [pc, #256]	@ (8002e68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2232      	movs	r2, #50	@ 0x32
 8002d6a:	fb02 f303 	mul.w	r3, r2, r3
 8002d6e:	4a3f      	ldr	r2, [pc, #252]	@ (8002e6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d70:	fba2 2303 	umull	r2, r3, r2, r3
 8002d74:	0c9b      	lsrs	r3, r3, #18
 8002d76:	3301      	adds	r3, #1
 8002d78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d7a:	e002      	b.n	8002d82 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d82:	4b38      	ldr	r3, [pc, #224]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d8e:	d102      	bne.n	8002d96 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f2      	bne.n	8002d7c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d96:	4b33      	ldr	r3, [pc, #204]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002da2:	d158      	bne.n	8002e56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e057      	b.n	8002e58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002da8:	4b2e      	ldr	r3, [pc, #184]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002dae:	4a2d      	ldr	r2, [pc, #180]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002db4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002db8:	e04d      	b.n	8002e56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dc0:	d141      	bne.n	8002e46 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dc2:	4b28      	ldr	r3, [pc, #160]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002dca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dce:	d131      	bne.n	8002e34 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002dd0:	4b24      	ldr	r3, [pc, #144]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002dd6:	4a23      	ldr	r2, [pc, #140]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ddc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002de0:	4b20      	ldr	r3, [pc, #128]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002de8:	4a1e      	ldr	r2, [pc, #120]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002df0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e68 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2232      	movs	r2, #50	@ 0x32
 8002df6:	fb02 f303 	mul.w	r3, r2, r3
 8002dfa:	4a1c      	ldr	r2, [pc, #112]	@ (8002e6c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	0c9b      	lsrs	r3, r3, #18
 8002e02:	3301      	adds	r3, #1
 8002e04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e06:	e002      	b.n	8002e0e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e0e:	4b15      	ldr	r3, [pc, #84]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e1a:	d102      	bne.n	8002e22 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f2      	bne.n	8002e08 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e22:	4b10      	ldr	r3, [pc, #64]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e2e:	d112      	bne.n	8002e56 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e011      	b.n	8002e58 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e34:	4b0b      	ldr	r3, [pc, #44]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002e44:	e007      	b.n	8002e56 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e46:	4b07      	ldr	r3, [pc, #28]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e4e:	4a05      	ldr	r2, [pc, #20]	@ (8002e64 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e50:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e54:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	40007000 	.word	0x40007000
 8002e68:	20000008 	.word	0x20000008
 8002e6c:	431bde83 	.word	0x431bde83

08002e70 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002e74:	4b05      	ldr	r3, [pc, #20]	@ (8002e8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	4a04      	ldr	r2, [pc, #16]	@ (8002e8c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002e7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e7e:	6093      	str	r3, [r2, #8]
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40007000 	.word	0x40007000

08002e90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e2fe      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d075      	beq.n	8002f9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eae:	4b97      	ldr	r3, [pc, #604]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
 8002eb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eb8:	4b94      	ldr	r3, [pc, #592]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	2b0c      	cmp	r3, #12
 8002ec6:	d102      	bne.n	8002ece <HAL_RCC_OscConfig+0x3e>
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d002      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x44>
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d10b      	bne.n	8002eec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed4:	4b8d      	ldr	r3, [pc, #564]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d05b      	beq.n	8002f98 <HAL_RCC_OscConfig+0x108>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d157      	bne.n	8002f98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e2d9      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ef4:	d106      	bne.n	8002f04 <HAL_RCC_OscConfig+0x74>
 8002ef6:	4b85      	ldr	r3, [pc, #532]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a84      	ldr	r2, [pc, #528]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	e01d      	b.n	8002f40 <HAL_RCC_OscConfig+0xb0>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f0c:	d10c      	bne.n	8002f28 <HAL_RCC_OscConfig+0x98>
 8002f0e:	4b7f      	ldr	r3, [pc, #508]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a7e      	ldr	r2, [pc, #504]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002f14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	4b7c      	ldr	r3, [pc, #496]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a7b      	ldr	r2, [pc, #492]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	e00b      	b.n	8002f40 <HAL_RCC_OscConfig+0xb0>
 8002f28:	4b78      	ldr	r3, [pc, #480]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a77      	ldr	r2, [pc, #476]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002f2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	4b75      	ldr	r3, [pc, #468]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a74      	ldr	r2, [pc, #464]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002f3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d013      	beq.n	8002f70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fe f882 	bl	8001050 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f50:	f7fe f87e 	bl	8001050 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b64      	cmp	r3, #100	@ 0x64
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e29e      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f62:	4b6a      	ldr	r3, [pc, #424]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0xc0>
 8002f6e:	e014      	b.n	8002f9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f70:	f7fe f86e 	bl	8001050 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f78:	f7fe f86a 	bl	8001050 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b64      	cmp	r3, #100	@ 0x64
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e28a      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f8a:	4b60      	ldr	r3, [pc, #384]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f0      	bne.n	8002f78 <HAL_RCC_OscConfig+0xe8>
 8002f96:	e000      	b.n	8002f9a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d075      	beq.n	8003092 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fa6:	4b59      	ldr	r3, [pc, #356]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 030c 	and.w	r3, r3, #12
 8002fae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fb0:	4b56      	ldr	r3, [pc, #344]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	2b0c      	cmp	r3, #12
 8002fbe:	d102      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x136>
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d002      	beq.n	8002fcc <HAL_RCC_OscConfig+0x13c>
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d11f      	bne.n	800300c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fcc:	4b4f      	ldr	r3, [pc, #316]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x154>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e25d      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe4:	4b49      	ldr	r3, [pc, #292]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	061b      	lsls	r3, r3, #24
 8002ff2:	4946      	ldr	r1, [pc, #280]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ff8:	4b45      	ldr	r3, [pc, #276]	@ (8003110 <HAL_RCC_OscConfig+0x280>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7fd ffdb 	bl	8000fb8 <HAL_InitTick>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d043      	beq.n	8003090 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e249      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d023      	beq.n	800305c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003014:	4b3d      	ldr	r3, [pc, #244]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a3c      	ldr	r2, [pc, #240]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 800301a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800301e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003020:	f7fe f816 	bl	8001050 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003028:	f7fe f812 	bl	8001050 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e232      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800303a:	4b34      	ldr	r3, [pc, #208]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0f0      	beq.n	8003028 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003046:	4b31      	ldr	r3, [pc, #196]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	061b      	lsls	r3, r3, #24
 8003054:	492d      	ldr	r1, [pc, #180]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8003056:	4313      	orrs	r3, r2
 8003058:	604b      	str	r3, [r1, #4]
 800305a:	e01a      	b.n	8003092 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800305c:	4b2b      	ldr	r3, [pc, #172]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a2a      	ldr	r2, [pc, #168]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8003062:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fd fff2 	bl	8001050 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003070:	f7fd ffee 	bl	8001050 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e20e      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003082:	4b22      	ldr	r3, [pc, #136]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x1e0>
 800308e:	e000      	b.n	8003092 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003090:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d041      	beq.n	8003122 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d01c      	beq.n	80030e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030a6:	4b19      	ldr	r3, [pc, #100]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 80030a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030ac:	4a17      	ldr	r2, [pc, #92]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 80030ae:	f043 0301 	orr.w	r3, r3, #1
 80030b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b6:	f7fd ffcb 	bl	8001050 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030be:	f7fd ffc7 	bl	8001050 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e1e7      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030d0:	4b0e      	ldr	r3, [pc, #56]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 80030d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0ef      	beq.n	80030be <HAL_RCC_OscConfig+0x22e>
 80030de:	e020      	b.n	8003122 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e0:	4b0a      	ldr	r3, [pc, #40]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 80030e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030e6:	4a09      	ldr	r2, [pc, #36]	@ (800310c <HAL_RCC_OscConfig+0x27c>)
 80030e8:	f023 0301 	bic.w	r3, r3, #1
 80030ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f0:	f7fd ffae 	bl	8001050 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030f6:	e00d      	b.n	8003114 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f8:	f7fd ffaa 	bl	8001050 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d906      	bls.n	8003114 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e1ca      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
 800310a:	bf00      	nop
 800310c:	40021000 	.word	0x40021000
 8003110:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003114:	4b8c      	ldr	r3, [pc, #560]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 8003116:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1ea      	bne.n	80030f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 80a6 	beq.w	800327c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003130:	2300      	movs	r3, #0
 8003132:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003134:	4b84      	ldr	r3, [pc, #528]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 8003136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003138:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_RCC_OscConfig+0x2b4>
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <HAL_RCC_OscConfig+0x2b6>
 8003144:	2300      	movs	r3, #0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00d      	beq.n	8003166 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800314a:	4b7f      	ldr	r3, [pc, #508]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 800314c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314e:	4a7e      	ldr	r2, [pc, #504]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 8003150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003154:	6593      	str	r3, [r2, #88]	@ 0x58
 8003156:	4b7c      	ldr	r3, [pc, #496]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 8003158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003162:	2301      	movs	r3, #1
 8003164:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003166:	4b79      	ldr	r3, [pc, #484]	@ (800334c <HAL_RCC_OscConfig+0x4bc>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316e:	2b00      	cmp	r3, #0
 8003170:	d118      	bne.n	80031a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003172:	4b76      	ldr	r3, [pc, #472]	@ (800334c <HAL_RCC_OscConfig+0x4bc>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a75      	ldr	r2, [pc, #468]	@ (800334c <HAL_RCC_OscConfig+0x4bc>)
 8003178:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800317c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317e:	f7fd ff67 	bl	8001050 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003186:	f7fd ff63 	bl	8001050 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e183      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003198:	4b6c      	ldr	r3, [pc, #432]	@ (800334c <HAL_RCC_OscConfig+0x4bc>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d108      	bne.n	80031be <HAL_RCC_OscConfig+0x32e>
 80031ac:	4b66      	ldr	r3, [pc, #408]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b2:	4a65      	ldr	r2, [pc, #404]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031bc:	e024      	b.n	8003208 <HAL_RCC_OscConfig+0x378>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	2b05      	cmp	r3, #5
 80031c4:	d110      	bne.n	80031e8 <HAL_RCC_OscConfig+0x358>
 80031c6:	4b60      	ldr	r3, [pc, #384]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 80031c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031cc:	4a5e      	ldr	r2, [pc, #376]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 80031ce:	f043 0304 	orr.w	r3, r3, #4
 80031d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031d6:	4b5c      	ldr	r3, [pc, #368]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 80031d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031dc:	4a5a      	ldr	r2, [pc, #360]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 80031de:	f043 0301 	orr.w	r3, r3, #1
 80031e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031e6:	e00f      	b.n	8003208 <HAL_RCC_OscConfig+0x378>
 80031e8:	4b57      	ldr	r3, [pc, #348]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 80031ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ee:	4a56      	ldr	r2, [pc, #344]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 80031f0:	f023 0301 	bic.w	r3, r3, #1
 80031f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031f8:	4b53      	ldr	r3, [pc, #332]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 80031fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031fe:	4a52      	ldr	r2, [pc, #328]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 8003200:	f023 0304 	bic.w	r3, r3, #4
 8003204:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d016      	beq.n	800323e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003210:	f7fd ff1e 	bl	8001050 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003216:	e00a      	b.n	800322e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003218:	f7fd ff1a 	bl	8001050 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003226:	4293      	cmp	r3, r2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e138      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800322e:	4b46      	ldr	r3, [pc, #280]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 8003230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0ed      	beq.n	8003218 <HAL_RCC_OscConfig+0x388>
 800323c:	e015      	b.n	800326a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323e:	f7fd ff07 	bl	8001050 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003244:	e00a      	b.n	800325c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003246:	f7fd ff03 	bl	8001050 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003254:	4293      	cmp	r3, r2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e121      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800325c:	4b3a      	ldr	r3, [pc, #232]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1ed      	bne.n	8003246 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800326a:	7ffb      	ldrb	r3, [r7, #31]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d105      	bne.n	800327c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003270:	4b35      	ldr	r3, [pc, #212]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 8003272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003274:	4a34      	ldr	r2, [pc, #208]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 8003276:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800327a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	2b00      	cmp	r3, #0
 8003286:	d03c      	beq.n	8003302 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d01c      	beq.n	80032ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003290:	4b2d      	ldr	r3, [pc, #180]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 8003292:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003296:	4a2c      	ldr	r2, [pc, #176]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a0:	f7fd fed6 	bl	8001050 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032a8:	f7fd fed2 	bl	8001050 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e0f2      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032ba:	4b23      	ldr	r3, [pc, #140]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 80032bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0ef      	beq.n	80032a8 <HAL_RCC_OscConfig+0x418>
 80032c8:	e01b      	b.n	8003302 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032ca:	4b1f      	ldr	r3, [pc, #124]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 80032cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 80032d2:	f023 0301 	bic.w	r3, r3, #1
 80032d6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032da:	f7fd feb9 	bl	8001050 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032e2:	f7fd feb5 	bl	8001050 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e0d5      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032f4:	4b14      	ldr	r3, [pc, #80]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 80032f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1ef      	bne.n	80032e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 80c9 	beq.w	800349e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800330c:	4b0e      	ldr	r3, [pc, #56]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 030c 	and.w	r3, r3, #12
 8003314:	2b0c      	cmp	r3, #12
 8003316:	f000 8083 	beq.w	8003420 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	2b02      	cmp	r3, #2
 8003320:	d15e      	bne.n	80033e0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003322:	4b09      	ldr	r3, [pc, #36]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a08      	ldr	r2, [pc, #32]	@ (8003348 <HAL_RCC_OscConfig+0x4b8>)
 8003328:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800332c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332e:	f7fd fe8f 	bl	8001050 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003334:	e00c      	b.n	8003350 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003336:	f7fd fe8b 	bl	8001050 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d905      	bls.n	8003350 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e0ab      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
 8003348:	40021000 	.word	0x40021000
 800334c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003350:	4b55      	ldr	r3, [pc, #340]	@ (80034a8 <HAL_RCC_OscConfig+0x618>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1ec      	bne.n	8003336 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800335c:	4b52      	ldr	r3, [pc, #328]	@ (80034a8 <HAL_RCC_OscConfig+0x618>)
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	4b52      	ldr	r3, [pc, #328]	@ (80034ac <HAL_RCC_OscConfig+0x61c>)
 8003362:	4013      	ands	r3, r2
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6a11      	ldr	r1, [r2, #32]
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800336c:	3a01      	subs	r2, #1
 800336e:	0112      	lsls	r2, r2, #4
 8003370:	4311      	orrs	r1, r2
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003376:	0212      	lsls	r2, r2, #8
 8003378:	4311      	orrs	r1, r2
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800337e:	0852      	lsrs	r2, r2, #1
 8003380:	3a01      	subs	r2, #1
 8003382:	0552      	lsls	r2, r2, #21
 8003384:	4311      	orrs	r1, r2
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800338a:	0852      	lsrs	r2, r2, #1
 800338c:	3a01      	subs	r2, #1
 800338e:	0652      	lsls	r2, r2, #25
 8003390:	4311      	orrs	r1, r2
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003396:	06d2      	lsls	r2, r2, #27
 8003398:	430a      	orrs	r2, r1
 800339a:	4943      	ldr	r1, [pc, #268]	@ (80034a8 <HAL_RCC_OscConfig+0x618>)
 800339c:	4313      	orrs	r3, r2
 800339e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033a0:	4b41      	ldr	r3, [pc, #260]	@ (80034a8 <HAL_RCC_OscConfig+0x618>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a40      	ldr	r2, [pc, #256]	@ (80034a8 <HAL_RCC_OscConfig+0x618>)
 80033a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033ac:	4b3e      	ldr	r3, [pc, #248]	@ (80034a8 <HAL_RCC_OscConfig+0x618>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	4a3d      	ldr	r2, [pc, #244]	@ (80034a8 <HAL_RCC_OscConfig+0x618>)
 80033b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fd fe4a 	bl	8001050 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c0:	f7fd fe46 	bl	8001050 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e066      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033d2:	4b35      	ldr	r3, [pc, #212]	@ (80034a8 <HAL_RCC_OscConfig+0x618>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0x530>
 80033de:	e05e      	b.n	800349e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e0:	4b31      	ldr	r3, [pc, #196]	@ (80034a8 <HAL_RCC_OscConfig+0x618>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a30      	ldr	r2, [pc, #192]	@ (80034a8 <HAL_RCC_OscConfig+0x618>)
 80033e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ec:	f7fd fe30 	bl	8001050 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f4:	f7fd fe2c 	bl	8001050 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e04c      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003406:	4b28      	ldr	r3, [pc, #160]	@ (80034a8 <HAL_RCC_OscConfig+0x618>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003412:	4b25      	ldr	r3, [pc, #148]	@ (80034a8 <HAL_RCC_OscConfig+0x618>)
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	4924      	ldr	r1, [pc, #144]	@ (80034a8 <HAL_RCC_OscConfig+0x618>)
 8003418:	4b25      	ldr	r3, [pc, #148]	@ (80034b0 <HAL_RCC_OscConfig+0x620>)
 800341a:	4013      	ands	r3, r2
 800341c:	60cb      	str	r3, [r1, #12]
 800341e:	e03e      	b.n	800349e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e039      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800342c:	4b1e      	ldr	r3, [pc, #120]	@ (80034a8 <HAL_RCC_OscConfig+0x618>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f003 0203 	and.w	r2, r3, #3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	429a      	cmp	r2, r3
 800343e:	d12c      	bne.n	800349a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344a:	3b01      	subs	r3, #1
 800344c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800344e:	429a      	cmp	r2, r3
 8003450:	d123      	bne.n	800349a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800345e:	429a      	cmp	r2, r3
 8003460:	d11b      	bne.n	800349a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800346e:	429a      	cmp	r2, r3
 8003470:	d113      	bne.n	800349a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347c:	085b      	lsrs	r3, r3, #1
 800347e:	3b01      	subs	r3, #1
 8003480:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003482:	429a      	cmp	r2, r3
 8003484:	d109      	bne.n	800349a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003490:	085b      	lsrs	r3, r3, #1
 8003492:	3b01      	subs	r3, #1
 8003494:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003496:	429a      	cmp	r2, r3
 8003498:	d001      	beq.n	800349e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3720      	adds	r7, #32
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40021000 	.word	0x40021000
 80034ac:	019f800c 	.word	0x019f800c
 80034b0:	feeefffc 	.word	0xfeeefffc

080034b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e11e      	b.n	800370a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034cc:	4b91      	ldr	r3, [pc, #580]	@ (8003714 <HAL_RCC_ClockConfig+0x260>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 030f 	and.w	r3, r3, #15
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d910      	bls.n	80034fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034da:	4b8e      	ldr	r3, [pc, #568]	@ (8003714 <HAL_RCC_ClockConfig+0x260>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f023 020f 	bic.w	r2, r3, #15
 80034e2:	498c      	ldr	r1, [pc, #560]	@ (8003714 <HAL_RCC_ClockConfig+0x260>)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ea:	4b8a      	ldr	r3, [pc, #552]	@ (8003714 <HAL_RCC_ClockConfig+0x260>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d001      	beq.n	80034fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e106      	b.n	800370a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d073      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b03      	cmp	r3, #3
 800350e:	d129      	bne.n	8003564 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003510:	4b81      	ldr	r3, [pc, #516]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0f4      	b.n	800370a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003520:	f000 f966 	bl	80037f0 <RCC_GetSysClockFreqFromPLLSource>
 8003524:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	4a7c      	ldr	r2, [pc, #496]	@ (800371c <HAL_RCC_ClockConfig+0x268>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d93f      	bls.n	80035ae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800352e:	4b7a      	ldr	r3, [pc, #488]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d009      	beq.n	800354e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003542:	2b00      	cmp	r3, #0
 8003544:	d033      	beq.n	80035ae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800354a:	2b00      	cmp	r3, #0
 800354c:	d12f      	bne.n	80035ae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800354e:	4b72      	ldr	r3, [pc, #456]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003556:	4a70      	ldr	r2, [pc, #448]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 8003558:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800355c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800355e:	2380      	movs	r3, #128	@ 0x80
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	e024      	b.n	80035ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b02      	cmp	r3, #2
 800356a:	d107      	bne.n	800357c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800356c:	4b6a      	ldr	r3, [pc, #424]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d109      	bne.n	800358c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0c6      	b.n	800370a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800357c:	4b66      	ldr	r3, [pc, #408]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0be      	b.n	800370a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800358c:	f000 f8ce 	bl	800372c <HAL_RCC_GetSysClockFreq>
 8003590:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	4a61      	ldr	r2, [pc, #388]	@ (800371c <HAL_RCC_ClockConfig+0x268>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d909      	bls.n	80035ae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800359a:	4b5f      	ldr	r3, [pc, #380]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035a2:	4a5d      	ldr	r2, [pc, #372]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 80035a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80035aa:	2380      	movs	r3, #128	@ 0x80
 80035ac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035ae:	4b5a      	ldr	r3, [pc, #360]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f023 0203 	bic.w	r2, r3, #3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	4957      	ldr	r1, [pc, #348]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c0:	f7fd fd46 	bl	8001050 <HAL_GetTick>
 80035c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c6:	e00a      	b.n	80035de <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c8:	f7fd fd42 	bl	8001050 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e095      	b.n	800370a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035de:	4b4e      	ldr	r3, [pc, #312]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 020c 	and.w	r2, r3, #12
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d1eb      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d023      	beq.n	8003644 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003608:	4b43      	ldr	r3, [pc, #268]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	4a42      	ldr	r2, [pc, #264]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 800360e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003612:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0308 	and.w	r3, r3, #8
 800361c:	2b00      	cmp	r3, #0
 800361e:	d007      	beq.n	8003630 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003620:	4b3d      	ldr	r3, [pc, #244]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003628:	4a3b      	ldr	r2, [pc, #236]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 800362a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800362e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003630:	4b39      	ldr	r3, [pc, #228]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	4936      	ldr	r1, [pc, #216]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 800363e:	4313      	orrs	r3, r2
 8003640:	608b      	str	r3, [r1, #8]
 8003642:	e008      	b.n	8003656 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	2b80      	cmp	r3, #128	@ 0x80
 8003648:	d105      	bne.n	8003656 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800364a:	4b33      	ldr	r3, [pc, #204]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	4a32      	ldr	r2, [pc, #200]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 8003650:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003654:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003656:	4b2f      	ldr	r3, [pc, #188]	@ (8003714 <HAL_RCC_ClockConfig+0x260>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d21d      	bcs.n	80036a0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003664:	4b2b      	ldr	r3, [pc, #172]	@ (8003714 <HAL_RCC_ClockConfig+0x260>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f023 020f 	bic.w	r2, r3, #15
 800366c:	4929      	ldr	r1, [pc, #164]	@ (8003714 <HAL_RCC_ClockConfig+0x260>)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	4313      	orrs	r3, r2
 8003672:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003674:	f7fd fcec 	bl	8001050 <HAL_GetTick>
 8003678:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800367a:	e00a      	b.n	8003692 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800367c:	f7fd fce8 	bl	8001050 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800368a:	4293      	cmp	r3, r2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e03b      	b.n	800370a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003692:	4b20      	ldr	r3, [pc, #128]	@ (8003714 <HAL_RCC_ClockConfig+0x260>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	429a      	cmp	r2, r3
 800369e:	d1ed      	bne.n	800367c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	4917      	ldr	r1, [pc, #92]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d009      	beq.n	80036de <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ca:	4b13      	ldr	r3, [pc, #76]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	490f      	ldr	r1, [pc, #60]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036de:	f000 f825 	bl	800372c <HAL_RCC_GetSysClockFreq>
 80036e2:	4602      	mov	r2, r0
 80036e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003718 <HAL_RCC_ClockConfig+0x264>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	091b      	lsrs	r3, r3, #4
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	490c      	ldr	r1, [pc, #48]	@ (8003720 <HAL_RCC_ClockConfig+0x26c>)
 80036f0:	5ccb      	ldrb	r3, [r1, r3]
 80036f2:	f003 031f 	and.w	r3, r3, #31
 80036f6:	fa22 f303 	lsr.w	r3, r2, r3
 80036fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003724 <HAL_RCC_ClockConfig+0x270>)
 80036fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80036fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003728 <HAL_RCC_ClockConfig+0x274>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f7fd fc58 	bl	8000fb8 <HAL_InitTick>
 8003708:	4603      	mov	r3, r0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40022000 	.word	0x40022000
 8003718:	40021000 	.word	0x40021000
 800371c:	04c4b400 	.word	0x04c4b400
 8003720:	08006490 	.word	0x08006490
 8003724:	20000008 	.word	0x20000008
 8003728:	2000000c 	.word	0x2000000c

0800372c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003732:	4b2c      	ldr	r3, [pc, #176]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 030c 	and.w	r3, r3, #12
 800373a:	2b04      	cmp	r3, #4
 800373c:	d102      	bne.n	8003744 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800373e:	4b2a      	ldr	r3, [pc, #168]	@ (80037e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003740:	613b      	str	r3, [r7, #16]
 8003742:	e047      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003744:	4b27      	ldr	r3, [pc, #156]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 030c 	and.w	r3, r3, #12
 800374c:	2b08      	cmp	r3, #8
 800374e:	d102      	bne.n	8003756 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003750:	4b26      	ldr	r3, [pc, #152]	@ (80037ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003752:	613b      	str	r3, [r7, #16]
 8003754:	e03e      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003756:	4b23      	ldr	r3, [pc, #140]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
 800375e:	2b0c      	cmp	r3, #12
 8003760:	d136      	bne.n	80037d0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003762:	4b20      	ldr	r3, [pc, #128]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800376c:	4b1d      	ldr	r3, [pc, #116]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	091b      	lsrs	r3, r3, #4
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	3301      	adds	r3, #1
 8003778:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b03      	cmp	r3, #3
 800377e:	d10c      	bne.n	800379a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003780:	4a1a      	ldr	r2, [pc, #104]	@ (80037ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	fbb2 f3f3 	udiv	r3, r2, r3
 8003788:	4a16      	ldr	r2, [pc, #88]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800378a:	68d2      	ldr	r2, [r2, #12]
 800378c:	0a12      	lsrs	r2, r2, #8
 800378e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003792:	fb02 f303 	mul.w	r3, r2, r3
 8003796:	617b      	str	r3, [r7, #20]
      break;
 8003798:	e00c      	b.n	80037b4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800379a:	4a13      	ldr	r2, [pc, #76]	@ (80037e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a2:	4a10      	ldr	r2, [pc, #64]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037a4:	68d2      	ldr	r2, [r2, #12]
 80037a6:	0a12      	lsrs	r2, r2, #8
 80037a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80037ac:	fb02 f303 	mul.w	r3, r2, r3
 80037b0:	617b      	str	r3, [r7, #20]
      break;
 80037b2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037b4:	4b0b      	ldr	r3, [pc, #44]	@ (80037e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	0e5b      	lsrs	r3, r3, #25
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	3301      	adds	r3, #1
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	e001      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80037d4:	693b      	ldr	r3, [r7, #16]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	371c      	adds	r7, #28
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40021000 	.word	0x40021000
 80037e8:	00f42400 	.word	0x00f42400
 80037ec:	007a1200 	.word	0x007a1200

080037f0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003870 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003800:	4b1b      	ldr	r3, [pc, #108]	@ (8003870 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	091b      	lsrs	r3, r3, #4
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	3301      	adds	r3, #1
 800380c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	2b03      	cmp	r3, #3
 8003812:	d10c      	bne.n	800382e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003814:	4a17      	ldr	r2, [pc, #92]	@ (8003874 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	fbb2 f3f3 	udiv	r3, r2, r3
 800381c:	4a14      	ldr	r2, [pc, #80]	@ (8003870 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800381e:	68d2      	ldr	r2, [r2, #12]
 8003820:	0a12      	lsrs	r2, r2, #8
 8003822:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003826:	fb02 f303 	mul.w	r3, r2, r3
 800382a:	617b      	str	r3, [r7, #20]
    break;
 800382c:	e00c      	b.n	8003848 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800382e:	4a12      	ldr	r2, [pc, #72]	@ (8003878 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	fbb2 f3f3 	udiv	r3, r2, r3
 8003836:	4a0e      	ldr	r2, [pc, #56]	@ (8003870 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003838:	68d2      	ldr	r2, [r2, #12]
 800383a:	0a12      	lsrs	r2, r2, #8
 800383c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003840:	fb02 f303 	mul.w	r3, r2, r3
 8003844:	617b      	str	r3, [r7, #20]
    break;
 8003846:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003848:	4b09      	ldr	r3, [pc, #36]	@ (8003870 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	0e5b      	lsrs	r3, r3, #25
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	3301      	adds	r3, #1
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003860:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003862:	687b      	ldr	r3, [r7, #4]
}
 8003864:	4618      	mov	r0, r3
 8003866:	371c      	adds	r7, #28
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	40021000 	.word	0x40021000
 8003874:	007a1200 	.word	0x007a1200
 8003878:	00f42400 	.word	0x00f42400

0800387c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003884:	2300      	movs	r3, #0
 8003886:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003888:	2300      	movs	r3, #0
 800388a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 8098 	beq.w	80039ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800389a:	2300      	movs	r3, #0
 800389c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800389e:	4b43      	ldr	r3, [pc, #268]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10d      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038aa:	4b40      	ldr	r3, [pc, #256]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ae:	4a3f      	ldr	r2, [pc, #252]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80038b6:	4b3d      	ldr	r3, [pc, #244]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038be:	60bb      	str	r3, [r7, #8]
 80038c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038c2:	2301      	movs	r3, #1
 80038c4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038c6:	4b3a      	ldr	r3, [pc, #232]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a39      	ldr	r2, [pc, #228]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038d2:	f7fd fbbd 	bl	8001050 <HAL_GetTick>
 80038d6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038d8:	e009      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038da:	f7fd fbb9 	bl	8001050 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d902      	bls.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	74fb      	strb	r3, [r7, #19]
        break;
 80038ec:	e005      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038ee:	4b30      	ldr	r3, [pc, #192]	@ (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0ef      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80038fa:	7cfb      	ldrb	r3, [r7, #19]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d159      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003900:	4b2a      	ldr	r3, [pc, #168]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003906:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800390a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d01e      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	429a      	cmp	r2, r3
 800391a:	d019      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800391c:	4b23      	ldr	r3, [pc, #140]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800391e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003922:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003926:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003928:	4b20      	ldr	r3, [pc, #128]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800392a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800392e:	4a1f      	ldr	r2, [pc, #124]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003934:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003938:	4b1c      	ldr	r3, [pc, #112]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800393e:	4a1b      	ldr	r2, [pc, #108]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003940:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003944:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003948:	4a18      	ldr	r2, [pc, #96]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d016      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395a:	f7fd fb79 	bl	8001050 <HAL_GetTick>
 800395e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003960:	e00b      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003962:	f7fd fb75 	bl	8001050 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003970:	4293      	cmp	r3, r2
 8003972:	d902      	bls.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	74fb      	strb	r3, [r7, #19]
            break;
 8003978:	e006      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800397a:	4b0c      	ldr	r3, [pc, #48]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800397c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0ec      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003988:	7cfb      	ldrb	r3, [r7, #19]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10b      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800398e:	4b07      	ldr	r3, [pc, #28]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003990:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003994:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399c:	4903      	ldr	r1, [pc, #12]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80039a4:	e008      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039a6:	7cfb      	ldrb	r3, [r7, #19]
 80039a8:	74bb      	strb	r3, [r7, #18]
 80039aa:	e005      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80039ac:	40021000 	.word	0x40021000
 80039b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b4:	7cfb      	ldrb	r3, [r7, #19]
 80039b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039b8:	7c7b      	ldrb	r3, [r7, #17]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d105      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039be:	4ba6      	ldr	r3, [pc, #664]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c2:	4aa5      	ldr	r2, [pc, #660]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039d6:	4ba0      	ldr	r3, [pc, #640]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039dc:	f023 0203 	bic.w	r2, r3, #3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	499c      	ldr	r1, [pc, #624]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00a      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039f8:	4b97      	ldr	r3, [pc, #604]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039fe:	f023 020c 	bic.w	r2, r3, #12
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	4994      	ldr	r1, [pc, #592]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a1a:	4b8f      	ldr	r3, [pc, #572]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a20:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	498b      	ldr	r1, [pc, #556]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0308 	and.w	r3, r3, #8
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a3c:	4b86      	ldr	r3, [pc, #536]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a42:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	4983      	ldr	r1, [pc, #524]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a5e:	4b7e      	ldr	r3, [pc, #504]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a64:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	497a      	ldr	r1, [pc, #488]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a80:	4b75      	ldr	r3, [pc, #468]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a86:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	4972      	ldr	r1, [pc, #456]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aa2:	4b6d      	ldr	r3, [pc, #436]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	4969      	ldr	r1, [pc, #420]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ac4:	4b64      	ldr	r3, [pc, #400]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	4961      	ldr	r1, [pc, #388]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ae6:	4b5c      	ldr	r3, [pc, #368]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	4958      	ldr	r1, [pc, #352]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d015      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b08:	4b53      	ldr	r3, [pc, #332]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b16:	4950      	ldr	r1, [pc, #320]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b26:	d105      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b28:	4b4b      	ldr	r3, [pc, #300]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	4a4a      	ldr	r2, [pc, #296]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b32:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d015      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b40:	4b45      	ldr	r3, [pc, #276]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b46:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b4e:	4942      	ldr	r1, [pc, #264]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b5e:	d105      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b60:	4b3d      	ldr	r3, [pc, #244]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	4a3c      	ldr	r2, [pc, #240]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b6a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d015      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b78:	4b37      	ldr	r3, [pc, #220]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b7e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b86:	4934      	ldr	r1, [pc, #208]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b96:	d105      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b98:	4b2f      	ldr	r3, [pc, #188]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	4a2e      	ldr	r2, [pc, #184]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ba2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d015      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bb0:	4b29      	ldr	r3, [pc, #164]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bbe:	4926      	ldr	r1, [pc, #152]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bce:	d105      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bd0:	4b21      	ldr	r3, [pc, #132]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	4a20      	ldr	r2, [pc, #128]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bda:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d015      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003be8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf6:	4918      	ldr	r1, [pc, #96]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c06:	d105      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c08:	4b13      	ldr	r3, [pc, #76]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	4a12      	ldr	r2, [pc, #72]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c12:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d015      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c20:	4b0d      	ldr	r3, [pc, #52]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c26:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c2e:	490a      	ldr	r1, [pc, #40]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c3e:	d105      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c40:	4b05      	ldr	r3, [pc, #20]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	4a04      	ldr	r2, [pc, #16]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c4a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003c4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40021000 	.word	0x40021000

08003c5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e09d      	b.n	8003daa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d108      	bne.n	8003c88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c7e:	d009      	beq.n	8003c94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	61da      	str	r2, [r3, #28]
 8003c86:	e005      	b.n	8003c94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d106      	bne.n	8003cb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7fd f816 	bl	8000ce0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003cd4:	d902      	bls.n	8003cdc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	e002      	b.n	8003ce2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003cdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ce0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003cea:	d007      	beq.n	8003cfc <HAL_SPI_Init+0xa0>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003cf4:	d002      	beq.n	8003cfc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d3e:	ea42 0103 	orr.w	r1, r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d46:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	0c1b      	lsrs	r3, r3, #16
 8003d58:	f003 0204 	and.w	r2, r3, #4
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	f003 0310 	and.w	r3, r3, #16
 8003d64:	431a      	orrs	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003d78:	ea42 0103 	orr.w	r1, r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69da      	ldr	r2, [r3, #28]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b08a      	sub	sp, #40	@ 0x28
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	607a      	str	r2, [r7, #4]
 8003dbe:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d101      	bne.n	8003dd8 <HAL_SPI_TransmitReceive+0x26>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e20a      	b.n	80041ee <HAL_SPI_TransmitReceive+0x43c>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003de0:	f7fd f936 	bl	8001050 <HAL_GetTick>
 8003de4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003dec:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003df4:	887b      	ldrh	r3, [r7, #2]
 8003df6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003df8:	887b      	ldrh	r3, [r7, #2]
 8003dfa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003dfc:	7efb      	ldrb	r3, [r7, #27]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d00e      	beq.n	8003e20 <HAL_SPI_TransmitReceive+0x6e>
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e08:	d106      	bne.n	8003e18 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d102      	bne.n	8003e18 <HAL_SPI_TransmitReceive+0x66>
 8003e12:	7efb      	ldrb	r3, [r7, #27]
 8003e14:	2b04      	cmp	r3, #4
 8003e16:	d003      	beq.n	8003e20 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003e18:	2302      	movs	r3, #2
 8003e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003e1e:	e1e0      	b.n	80041e2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d005      	beq.n	8003e32 <HAL_SPI_TransmitReceive+0x80>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <HAL_SPI_TransmitReceive+0x80>
 8003e2c:	887b      	ldrh	r3, [r7, #2]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d103      	bne.n	8003e3a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003e38:	e1d3      	b.n	80041e2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d003      	beq.n	8003e4e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2205      	movs	r2, #5
 8003e4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	887a      	ldrh	r2, [r7, #2]
 8003e5e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	887a      	ldrh	r2, [r7, #2]
 8003e66:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	887a      	ldrh	r2, [r7, #2]
 8003e74:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	887a      	ldrh	r2, [r7, #2]
 8003e7a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e90:	d802      	bhi.n	8003e98 <HAL_SPI_TransmitReceive+0xe6>
 8003e92:	8a3b      	ldrh	r3, [r7, #16]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d908      	bls.n	8003eaa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ea6:	605a      	str	r2, [r3, #4]
 8003ea8:	e007      	b.n	8003eba <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003eb8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec4:	2b40      	cmp	r3, #64	@ 0x40
 8003ec6:	d007      	beq.n	8003ed8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ed6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ee0:	f240 8081 	bls.w	8003fe6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <HAL_SPI_TransmitReceive+0x140>
 8003eec:	8a7b      	ldrh	r3, [r7, #18]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d16d      	bne.n	8003fce <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef6:	881a      	ldrh	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f02:	1c9a      	adds	r2, r3, #2
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f16:	e05a      	b.n	8003fce <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d11b      	bne.n	8003f5e <HAL_SPI_TransmitReceive+0x1ac>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d016      	beq.n	8003f5e <HAL_SPI_TransmitReceive+0x1ac>
 8003f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d113      	bne.n	8003f5e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f3a:	881a      	ldrh	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f46:	1c9a      	adds	r2, r3, #2
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d11c      	bne.n	8003fa6 <HAL_SPI_TransmitReceive+0x1f4>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d016      	beq.n	8003fa6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f82:	b292      	uxth	r2, r2
 8003f84:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8a:	1c9a      	adds	r2, r3, #2
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003fa6:	f7fd f853 	bl	8001050 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d80b      	bhi.n	8003fce <HAL_SPI_TransmitReceive+0x21c>
 8003fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fbc:	d007      	beq.n	8003fce <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003fcc:	e109      	b.n	80041e2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d19f      	bne.n	8003f18 <HAL_SPI_TransmitReceive+0x166>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d199      	bne.n	8003f18 <HAL_SPI_TransmitReceive+0x166>
 8003fe4:	e0e3      	b.n	80041ae <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_SPI_TransmitReceive+0x244>
 8003fee:	8a7b      	ldrh	r3, [r7, #18]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	f040 80cf 	bne.w	8004194 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d912      	bls.n	8004026 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004004:	881a      	ldrh	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004010:	1c9a      	adds	r2, r3, #2
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800401a:	b29b      	uxth	r3, r3
 800401c:	3b02      	subs	r3, #2
 800401e:	b29a      	uxth	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004024:	e0b6      	b.n	8004194 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	330c      	adds	r3, #12
 8004030:	7812      	ldrb	r2, [r2, #0]
 8004032:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004042:	b29b      	uxth	r3, r3
 8004044:	3b01      	subs	r3, #1
 8004046:	b29a      	uxth	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800404c:	e0a2      	b.n	8004194 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b02      	cmp	r3, #2
 800405a:	d134      	bne.n	80040c6 <HAL_SPI_TransmitReceive+0x314>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004060:	b29b      	uxth	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d02f      	beq.n	80040c6 <HAL_SPI_TransmitReceive+0x314>
 8004066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004068:	2b01      	cmp	r3, #1
 800406a:	d12c      	bne.n	80040c6 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b01      	cmp	r3, #1
 8004074:	d912      	bls.n	800409c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800407a:	881a      	ldrh	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004086:	1c9a      	adds	r2, r3, #2
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004090:	b29b      	uxth	r3, r3
 8004092:	3b02      	subs	r3, #2
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800409a:	e012      	b.n	80040c2 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	330c      	adds	r3, #12
 80040a6:	7812      	ldrb	r2, [r2, #0]
 80040a8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d148      	bne.n	8004166 <HAL_SPI_TransmitReceive+0x3b4>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040da:	b29b      	uxth	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d042      	beq.n	8004166 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d923      	bls.n	8004134 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f6:	b292      	uxth	r2, r2
 80040f8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fe:	1c9a      	adds	r2, r3, #2
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800410a:	b29b      	uxth	r3, r3
 800410c:	3b02      	subs	r3, #2
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b01      	cmp	r3, #1
 8004120:	d81f      	bhi.n	8004162 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004130:	605a      	str	r2, [r3, #4]
 8004132:	e016      	b.n	8004162 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f103 020c 	add.w	r2, r3, #12
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004140:	7812      	ldrb	r2, [r2, #0]
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414a:	1c5a      	adds	r2, r3, #1
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004162:	2301      	movs	r3, #1
 8004164:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004166:	f7fc ff73 	bl	8001050 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004172:	429a      	cmp	r2, r3
 8004174:	d803      	bhi.n	800417e <HAL_SPI_TransmitReceive+0x3cc>
 8004176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004178:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800417c:	d102      	bne.n	8004184 <HAL_SPI_TransmitReceive+0x3d2>
 800417e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004180:	2b00      	cmp	r3, #0
 8004182:	d107      	bne.n	8004194 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004192:	e026      	b.n	80041e2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004198:	b29b      	uxth	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	f47f af57 	bne.w	800404e <HAL_SPI_TransmitReceive+0x29c>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f47f af50 	bne.w	800404e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041ae:	69fa      	ldr	r2, [r7, #28]
 80041b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 f93e 	bl	8004434 <SPI_EndRxTxTransaction>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d005      	beq.n	80041ca <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2220      	movs	r2, #32
 80041c8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041d8:	e003      	b.n	80041e2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80041ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3728      	adds	r7, #40	@ 0x28
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b088      	sub	sp, #32
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	603b      	str	r3, [r7, #0]
 8004204:	4613      	mov	r3, r2
 8004206:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004208:	f7fc ff22 	bl	8001050 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004210:	1a9b      	subs	r3, r3, r2
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	4413      	add	r3, r2
 8004216:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004218:	f7fc ff1a 	bl	8001050 <HAL_GetTick>
 800421c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800421e:	4b39      	ldr	r3, [pc, #228]	@ (8004304 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	015b      	lsls	r3, r3, #5
 8004224:	0d1b      	lsrs	r3, r3, #20
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	fb02 f303 	mul.w	r3, r2, r3
 800422c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800422e:	e054      	b.n	80042da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004236:	d050      	beq.n	80042da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004238:	f7fc ff0a 	bl	8001050 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	69fa      	ldr	r2, [r7, #28]
 8004244:	429a      	cmp	r2, r3
 8004246:	d902      	bls.n	800424e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d13d      	bne.n	80042ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800425c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004266:	d111      	bne.n	800428c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004270:	d004      	beq.n	800427c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800427a:	d107      	bne.n	800428c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800428a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004290:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004294:	d10f      	bne.n	80042b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e017      	b.n	80042fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	4013      	ands	r3, r2
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	bf0c      	ite	eq
 80042ea:	2301      	moveq	r3, #1
 80042ec:	2300      	movne	r3, #0
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	461a      	mov	r2, r3
 80042f2:	79fb      	ldrb	r3, [r7, #7]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d19b      	bne.n	8004230 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3720      	adds	r7, #32
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	20000008 	.word	0x20000008

08004308 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b08a      	sub	sp, #40	@ 0x28
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
 8004314:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004316:	2300      	movs	r3, #0
 8004318:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800431a:	f7fc fe99 	bl	8001050 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004322:	1a9b      	subs	r3, r3, r2
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	4413      	add	r3, r2
 8004328:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800432a:	f7fc fe91 	bl	8001050 <HAL_GetTick>
 800432e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	330c      	adds	r3, #12
 8004336:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004338:	4b3d      	ldr	r3, [pc, #244]	@ (8004430 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	4613      	mov	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	00da      	lsls	r2, r3, #3
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	0d1b      	lsrs	r3, r3, #20
 8004348:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800434a:	fb02 f303 	mul.w	r3, r2, r3
 800434e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004350:	e060      	b.n	8004414 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004358:	d107      	bne.n	800436a <SPI_WaitFifoStateUntilTimeout+0x62>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d104      	bne.n	800436a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004368:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004370:	d050      	beq.n	8004414 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004372:	f7fc fe6d 	bl	8001050 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800437e:	429a      	cmp	r2, r3
 8004380:	d902      	bls.n	8004388 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004384:	2b00      	cmp	r3, #0
 8004386:	d13d      	bne.n	8004404 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004396:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043a0:	d111      	bne.n	80043c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043aa:	d004      	beq.n	80043b6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043b4:	d107      	bne.n	80043c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043ce:	d10f      	bne.n	80043f0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e010      	b.n	8004426 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	3b01      	subs	r3, #1
 8004412:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689a      	ldr	r2, [r3, #8]
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	4013      	ands	r3, r2
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	429a      	cmp	r2, r3
 8004422:	d196      	bne.n	8004352 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3728      	adds	r7, #40	@ 0x28
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	20000008 	.word	0x20000008

08004434 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af02      	add	r7, sp, #8
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2200      	movs	r2, #0
 8004448:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f7ff ff5b 	bl	8004308 <SPI_WaitFifoStateUntilTimeout>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d007      	beq.n	8004468 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800445c:	f043 0220 	orr.w	r2, r3, #32
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e027      	b.n	80044b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2200      	movs	r2, #0
 8004470:	2180      	movs	r1, #128	@ 0x80
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f7ff fec0 	bl	80041f8 <SPI_WaitFlagStateUntilTimeout>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d007      	beq.n	800448e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004482:	f043 0220 	orr.w	r2, r3, #32
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e014      	b.n	80044b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2200      	movs	r2, #0
 8004496:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f7ff ff34 	bl	8004308 <SPI_WaitFifoStateUntilTimeout>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d007      	beq.n	80044b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044aa:	f043 0220 	orr.w	r2, r3, #32
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e000      	b.n	80044b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e049      	b.n	8004566 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d106      	bne.n	80044ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7fc fc3e 	bl	8000d68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3304      	adds	r3, #4
 80044fc:	4619      	mov	r1, r3
 80044fe:	4610      	mov	r0, r2
 8004500:	f000 faa4 	bl	8004a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b082      	sub	sp, #8
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e049      	b.n	8004614 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b00      	cmp	r3, #0
 800458a:	d106      	bne.n	800459a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f841 	bl	800461c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2202      	movs	r2, #2
 800459e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	3304      	adds	r3, #4
 80045aa:	4619      	mov	r1, r3
 80045ac:	4610      	mov	r0, r2
 80045ae:	f000 fa4d 	bl	8004a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800464a:	2302      	movs	r3, #2
 800464c:	e0ff      	b.n	800484e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b14      	cmp	r3, #20
 800465a:	f200 80f0 	bhi.w	800483e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800465e:	a201      	add	r2, pc, #4	@ (adr r2, 8004664 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004664:	080046b9 	.word	0x080046b9
 8004668:	0800483f 	.word	0x0800483f
 800466c:	0800483f 	.word	0x0800483f
 8004670:	0800483f 	.word	0x0800483f
 8004674:	080046f9 	.word	0x080046f9
 8004678:	0800483f 	.word	0x0800483f
 800467c:	0800483f 	.word	0x0800483f
 8004680:	0800483f 	.word	0x0800483f
 8004684:	0800473b 	.word	0x0800473b
 8004688:	0800483f 	.word	0x0800483f
 800468c:	0800483f 	.word	0x0800483f
 8004690:	0800483f 	.word	0x0800483f
 8004694:	0800477b 	.word	0x0800477b
 8004698:	0800483f 	.word	0x0800483f
 800469c:	0800483f 	.word	0x0800483f
 80046a0:	0800483f 	.word	0x0800483f
 80046a4:	080047bd 	.word	0x080047bd
 80046a8:	0800483f 	.word	0x0800483f
 80046ac:	0800483f 	.word	0x0800483f
 80046b0:	0800483f 	.word	0x0800483f
 80046b4:	080047fd 	.word	0x080047fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68b9      	ldr	r1, [r7, #8]
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 fa60 	bl	8004b84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699a      	ldr	r2, [r3, #24]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0208 	orr.w	r2, r2, #8
 80046d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699a      	ldr	r2, [r3, #24]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0204 	bic.w	r2, r2, #4
 80046e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6999      	ldr	r1, [r3, #24]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	691a      	ldr	r2, [r3, #16]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	619a      	str	r2, [r3, #24]
      break;
 80046f6:	e0a5      	b.n	8004844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 fad0 	bl	8004ca4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699a      	ldr	r2, [r3, #24]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699a      	ldr	r2, [r3, #24]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6999      	ldr	r1, [r3, #24]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	021a      	lsls	r2, r3, #8
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	619a      	str	r2, [r3, #24]
      break;
 8004738:	e084      	b.n	8004844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68b9      	ldr	r1, [r7, #8]
 8004740:	4618      	mov	r0, r3
 8004742:	f000 fb39 	bl	8004db8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69da      	ldr	r2, [r3, #28]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f042 0208 	orr.w	r2, r2, #8
 8004754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69da      	ldr	r2, [r3, #28]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0204 	bic.w	r2, r2, #4
 8004764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	69d9      	ldr	r1, [r3, #28]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	691a      	ldr	r2, [r3, #16]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	61da      	str	r2, [r3, #28]
      break;
 8004778:	e064      	b.n	8004844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68b9      	ldr	r1, [r7, #8]
 8004780:	4618      	mov	r0, r3
 8004782:	f000 fba1 	bl	8004ec8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69da      	ldr	r2, [r3, #28]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69da      	ldr	r2, [r3, #28]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69d9      	ldr	r1, [r3, #28]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	021a      	lsls	r2, r3, #8
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	61da      	str	r2, [r3, #28]
      break;
 80047ba:	e043      	b.n	8004844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68b9      	ldr	r1, [r7, #8]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 fc0a 	bl	8004fdc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 0208 	orr.w	r2, r2, #8
 80047d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0204 	bic.w	r2, r2, #4
 80047e6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	691a      	ldr	r2, [r3, #16]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80047fa:	e023      	b.n	8004844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68b9      	ldr	r1, [r7, #8]
 8004802:	4618      	mov	r0, r3
 8004804:	f000 fc4e 	bl	80050a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004816:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004826:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	021a      	lsls	r2, r3, #8
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800483c:	e002      	b.n	8004844 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	75fb      	strb	r3, [r7, #23]
      break;
 8004842:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800484c:	7dfb      	ldrb	r3, [r7, #23]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop

08004858 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800486c:	2b01      	cmp	r3, #1
 800486e:	d101      	bne.n	8004874 <HAL_TIM_ConfigClockSource+0x1c>
 8004870:	2302      	movs	r3, #2
 8004872:	e0de      	b.n	8004a32 <HAL_TIM_ConfigClockSource+0x1da>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004892:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004896:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800489e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a63      	ldr	r2, [pc, #396]	@ (8004a3c <HAL_TIM_ConfigClockSource+0x1e4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	f000 80a9 	beq.w	8004a06 <HAL_TIM_ConfigClockSource+0x1ae>
 80048b4:	4a61      	ldr	r2, [pc, #388]	@ (8004a3c <HAL_TIM_ConfigClockSource+0x1e4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	f200 80ae 	bhi.w	8004a18 <HAL_TIM_ConfigClockSource+0x1c0>
 80048bc:	4a60      	ldr	r2, [pc, #384]	@ (8004a40 <HAL_TIM_ConfigClockSource+0x1e8>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	f000 80a1 	beq.w	8004a06 <HAL_TIM_ConfigClockSource+0x1ae>
 80048c4:	4a5e      	ldr	r2, [pc, #376]	@ (8004a40 <HAL_TIM_ConfigClockSource+0x1e8>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	f200 80a6 	bhi.w	8004a18 <HAL_TIM_ConfigClockSource+0x1c0>
 80048cc:	4a5d      	ldr	r2, [pc, #372]	@ (8004a44 <HAL_TIM_ConfigClockSource+0x1ec>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	f000 8099 	beq.w	8004a06 <HAL_TIM_ConfigClockSource+0x1ae>
 80048d4:	4a5b      	ldr	r2, [pc, #364]	@ (8004a44 <HAL_TIM_ConfigClockSource+0x1ec>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	f200 809e 	bhi.w	8004a18 <HAL_TIM_ConfigClockSource+0x1c0>
 80048dc:	4a5a      	ldr	r2, [pc, #360]	@ (8004a48 <HAL_TIM_ConfigClockSource+0x1f0>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	f000 8091 	beq.w	8004a06 <HAL_TIM_ConfigClockSource+0x1ae>
 80048e4:	4a58      	ldr	r2, [pc, #352]	@ (8004a48 <HAL_TIM_ConfigClockSource+0x1f0>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	f200 8096 	bhi.w	8004a18 <HAL_TIM_ConfigClockSource+0x1c0>
 80048ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80048f0:	f000 8089 	beq.w	8004a06 <HAL_TIM_ConfigClockSource+0x1ae>
 80048f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80048f8:	f200 808e 	bhi.w	8004a18 <HAL_TIM_ConfigClockSource+0x1c0>
 80048fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004900:	d03e      	beq.n	8004980 <HAL_TIM_ConfigClockSource+0x128>
 8004902:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004906:	f200 8087 	bhi.w	8004a18 <HAL_TIM_ConfigClockSource+0x1c0>
 800490a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800490e:	f000 8086 	beq.w	8004a1e <HAL_TIM_ConfigClockSource+0x1c6>
 8004912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004916:	d87f      	bhi.n	8004a18 <HAL_TIM_ConfigClockSource+0x1c0>
 8004918:	2b70      	cmp	r3, #112	@ 0x70
 800491a:	d01a      	beq.n	8004952 <HAL_TIM_ConfigClockSource+0xfa>
 800491c:	2b70      	cmp	r3, #112	@ 0x70
 800491e:	d87b      	bhi.n	8004a18 <HAL_TIM_ConfigClockSource+0x1c0>
 8004920:	2b60      	cmp	r3, #96	@ 0x60
 8004922:	d050      	beq.n	80049c6 <HAL_TIM_ConfigClockSource+0x16e>
 8004924:	2b60      	cmp	r3, #96	@ 0x60
 8004926:	d877      	bhi.n	8004a18 <HAL_TIM_ConfigClockSource+0x1c0>
 8004928:	2b50      	cmp	r3, #80	@ 0x50
 800492a:	d03c      	beq.n	80049a6 <HAL_TIM_ConfigClockSource+0x14e>
 800492c:	2b50      	cmp	r3, #80	@ 0x50
 800492e:	d873      	bhi.n	8004a18 <HAL_TIM_ConfigClockSource+0x1c0>
 8004930:	2b40      	cmp	r3, #64	@ 0x40
 8004932:	d058      	beq.n	80049e6 <HAL_TIM_ConfigClockSource+0x18e>
 8004934:	2b40      	cmp	r3, #64	@ 0x40
 8004936:	d86f      	bhi.n	8004a18 <HAL_TIM_ConfigClockSource+0x1c0>
 8004938:	2b30      	cmp	r3, #48	@ 0x30
 800493a:	d064      	beq.n	8004a06 <HAL_TIM_ConfigClockSource+0x1ae>
 800493c:	2b30      	cmp	r3, #48	@ 0x30
 800493e:	d86b      	bhi.n	8004a18 <HAL_TIM_ConfigClockSource+0x1c0>
 8004940:	2b20      	cmp	r3, #32
 8004942:	d060      	beq.n	8004a06 <HAL_TIM_ConfigClockSource+0x1ae>
 8004944:	2b20      	cmp	r3, #32
 8004946:	d867      	bhi.n	8004a18 <HAL_TIM_ConfigClockSource+0x1c0>
 8004948:	2b00      	cmp	r3, #0
 800494a:	d05c      	beq.n	8004a06 <HAL_TIM_ConfigClockSource+0x1ae>
 800494c:	2b10      	cmp	r3, #16
 800494e:	d05a      	beq.n	8004a06 <HAL_TIM_ConfigClockSource+0x1ae>
 8004950:	e062      	b.n	8004a18 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004962:	f000 fc81 	bl	8005268 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004974:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	609a      	str	r2, [r3, #8]
      break;
 800497e:	e04f      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004990:	f000 fc6a 	bl	8005268 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689a      	ldr	r2, [r3, #8]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049a2:	609a      	str	r2, [r3, #8]
      break;
 80049a4:	e03c      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049b2:	461a      	mov	r2, r3
 80049b4:	f000 fbdc 	bl	8005170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2150      	movs	r1, #80	@ 0x50
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 fc35 	bl	800522e <TIM_ITRx_SetConfig>
      break;
 80049c4:	e02c      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049d2:	461a      	mov	r2, r3
 80049d4:	f000 fbfb 	bl	80051ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2160      	movs	r1, #96	@ 0x60
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fc25 	bl	800522e <TIM_ITRx_SetConfig>
      break;
 80049e4:	e01c      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049f2:	461a      	mov	r2, r3
 80049f4:	f000 fbbc 	bl	8005170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2140      	movs	r1, #64	@ 0x40
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 fc15 	bl	800522e <TIM_ITRx_SetConfig>
      break;
 8004a04:	e00c      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4619      	mov	r1, r3
 8004a10:	4610      	mov	r0, r2
 8004a12:	f000 fc0c 	bl	800522e <TIM_ITRx_SetConfig>
      break;
 8004a16:	e003      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a1c:	e000      	b.n	8004a20 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004a1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	00100070 	.word	0x00100070
 8004a40:	00100040 	.word	0x00100040
 8004a44:	00100030 	.word	0x00100030
 8004a48:	00100020 	.word	0x00100020

08004a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a42      	ldr	r2, [pc, #264]	@ (8004b68 <TIM_Base_SetConfig+0x11c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d00f      	beq.n	8004a84 <TIM_Base_SetConfig+0x38>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a6a:	d00b      	beq.n	8004a84 <TIM_Base_SetConfig+0x38>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a3f      	ldr	r2, [pc, #252]	@ (8004b6c <TIM_Base_SetConfig+0x120>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d007      	beq.n	8004a84 <TIM_Base_SetConfig+0x38>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a3e      	ldr	r2, [pc, #248]	@ (8004b70 <TIM_Base_SetConfig+0x124>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d003      	beq.n	8004a84 <TIM_Base_SetConfig+0x38>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a3d      	ldr	r2, [pc, #244]	@ (8004b74 <TIM_Base_SetConfig+0x128>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d108      	bne.n	8004a96 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a33      	ldr	r2, [pc, #204]	@ (8004b68 <TIM_Base_SetConfig+0x11c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d01b      	beq.n	8004ad6 <TIM_Base_SetConfig+0x8a>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aa4:	d017      	beq.n	8004ad6 <TIM_Base_SetConfig+0x8a>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a30      	ldr	r2, [pc, #192]	@ (8004b6c <TIM_Base_SetConfig+0x120>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d013      	beq.n	8004ad6 <TIM_Base_SetConfig+0x8a>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a2f      	ldr	r2, [pc, #188]	@ (8004b70 <TIM_Base_SetConfig+0x124>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d00f      	beq.n	8004ad6 <TIM_Base_SetConfig+0x8a>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a2e      	ldr	r2, [pc, #184]	@ (8004b74 <TIM_Base_SetConfig+0x128>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d00b      	beq.n	8004ad6 <TIM_Base_SetConfig+0x8a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a2d      	ldr	r2, [pc, #180]	@ (8004b78 <TIM_Base_SetConfig+0x12c>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d007      	beq.n	8004ad6 <TIM_Base_SetConfig+0x8a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a2c      	ldr	r2, [pc, #176]	@ (8004b7c <TIM_Base_SetConfig+0x130>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d003      	beq.n	8004ad6 <TIM_Base_SetConfig+0x8a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a2b      	ldr	r2, [pc, #172]	@ (8004b80 <TIM_Base_SetConfig+0x134>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d108      	bne.n	8004ae8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004adc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a16      	ldr	r2, [pc, #88]	@ (8004b68 <TIM_Base_SetConfig+0x11c>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d00f      	beq.n	8004b34 <TIM_Base_SetConfig+0xe8>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a17      	ldr	r2, [pc, #92]	@ (8004b74 <TIM_Base_SetConfig+0x128>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d00b      	beq.n	8004b34 <TIM_Base_SetConfig+0xe8>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a16      	ldr	r2, [pc, #88]	@ (8004b78 <TIM_Base_SetConfig+0x12c>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d007      	beq.n	8004b34 <TIM_Base_SetConfig+0xe8>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a15      	ldr	r2, [pc, #84]	@ (8004b7c <TIM_Base_SetConfig+0x130>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d003      	beq.n	8004b34 <TIM_Base_SetConfig+0xe8>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a14      	ldr	r2, [pc, #80]	@ (8004b80 <TIM_Base_SetConfig+0x134>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d103      	bne.n	8004b3c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	691a      	ldr	r2, [r3, #16]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d105      	bne.n	8004b5a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	f023 0201 	bic.w	r2, r3, #1
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	611a      	str	r2, [r3, #16]
  }
}
 8004b5a:	bf00      	nop
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	40012c00 	.word	0x40012c00
 8004b6c:	40000400 	.word	0x40000400
 8004b70:	40000800 	.word	0x40000800
 8004b74:	40013400 	.word	0x40013400
 8004b78:	40014000 	.word	0x40014000
 8004b7c:	40014400 	.word	0x40014400
 8004b80:	40014800 	.word	0x40014800

08004b84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	f023 0201 	bic.w	r2, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0303 	bic.w	r3, r3, #3
 8004bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f023 0302 	bic.w	r3, r3, #2
 8004bd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a2c      	ldr	r2, [pc, #176]	@ (8004c90 <TIM_OC1_SetConfig+0x10c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d00f      	beq.n	8004c04 <TIM_OC1_SetConfig+0x80>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a2b      	ldr	r2, [pc, #172]	@ (8004c94 <TIM_OC1_SetConfig+0x110>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00b      	beq.n	8004c04 <TIM_OC1_SetConfig+0x80>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a2a      	ldr	r2, [pc, #168]	@ (8004c98 <TIM_OC1_SetConfig+0x114>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d007      	beq.n	8004c04 <TIM_OC1_SetConfig+0x80>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a29      	ldr	r2, [pc, #164]	@ (8004c9c <TIM_OC1_SetConfig+0x118>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d003      	beq.n	8004c04 <TIM_OC1_SetConfig+0x80>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a28      	ldr	r2, [pc, #160]	@ (8004ca0 <TIM_OC1_SetConfig+0x11c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d10c      	bne.n	8004c1e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f023 0308 	bic.w	r3, r3, #8
 8004c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f023 0304 	bic.w	r3, r3, #4
 8004c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a1b      	ldr	r2, [pc, #108]	@ (8004c90 <TIM_OC1_SetConfig+0x10c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d00f      	beq.n	8004c46 <TIM_OC1_SetConfig+0xc2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a1a      	ldr	r2, [pc, #104]	@ (8004c94 <TIM_OC1_SetConfig+0x110>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d00b      	beq.n	8004c46 <TIM_OC1_SetConfig+0xc2>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a19      	ldr	r2, [pc, #100]	@ (8004c98 <TIM_OC1_SetConfig+0x114>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d007      	beq.n	8004c46 <TIM_OC1_SetConfig+0xc2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a18      	ldr	r2, [pc, #96]	@ (8004c9c <TIM_OC1_SetConfig+0x118>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d003      	beq.n	8004c46 <TIM_OC1_SetConfig+0xc2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a17      	ldr	r2, [pc, #92]	@ (8004ca0 <TIM_OC1_SetConfig+0x11c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d111      	bne.n	8004c6a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	621a      	str	r2, [r3, #32]
}
 8004c84:	bf00      	nop
 8004c86:	371c      	adds	r7, #28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	40012c00 	.word	0x40012c00
 8004c94:	40013400 	.word	0x40013400
 8004c98:	40014000 	.word	0x40014000
 8004c9c:	40014400 	.word	0x40014400
 8004ca0:	40014800 	.word	0x40014800

08004ca4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b087      	sub	sp, #28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	f023 0210 	bic.w	r2, r3, #16
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	021b      	lsls	r3, r3, #8
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f023 0320 	bic.w	r3, r3, #32
 8004cf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a28      	ldr	r2, [pc, #160]	@ (8004da4 <TIM_OC2_SetConfig+0x100>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d003      	beq.n	8004d10 <TIM_OC2_SetConfig+0x6c>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a27      	ldr	r2, [pc, #156]	@ (8004da8 <TIM_OC2_SetConfig+0x104>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d10d      	bne.n	8004d2c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	011b      	lsls	r3, r3, #4
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a1d      	ldr	r2, [pc, #116]	@ (8004da4 <TIM_OC2_SetConfig+0x100>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00f      	beq.n	8004d54 <TIM_OC2_SetConfig+0xb0>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a1c      	ldr	r2, [pc, #112]	@ (8004da8 <TIM_OC2_SetConfig+0x104>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d00b      	beq.n	8004d54 <TIM_OC2_SetConfig+0xb0>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8004dac <TIM_OC2_SetConfig+0x108>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d007      	beq.n	8004d54 <TIM_OC2_SetConfig+0xb0>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a1a      	ldr	r2, [pc, #104]	@ (8004db0 <TIM_OC2_SetConfig+0x10c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d003      	beq.n	8004d54 <TIM_OC2_SetConfig+0xb0>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a19      	ldr	r2, [pc, #100]	@ (8004db4 <TIM_OC2_SetConfig+0x110>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d113      	bne.n	8004d7c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	621a      	str	r2, [r3, #32]
}
 8004d96:	bf00      	nop
 8004d98:	371c      	adds	r7, #28
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	40012c00 	.word	0x40012c00
 8004da8:	40013400 	.word	0x40013400
 8004dac:	40014000 	.word	0x40014000
 8004db0:	40014400 	.word	0x40014400
 8004db4:	40014800 	.word	0x40014800

08004db8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b087      	sub	sp, #28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004de6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 0303 	bic.w	r3, r3, #3
 8004df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	021b      	lsls	r3, r3, #8
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a27      	ldr	r2, [pc, #156]	@ (8004eb4 <TIM_OC3_SetConfig+0xfc>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d003      	beq.n	8004e22 <TIM_OC3_SetConfig+0x6a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a26      	ldr	r2, [pc, #152]	@ (8004eb8 <TIM_OC3_SetConfig+0x100>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d10d      	bne.n	8004e3e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	021b      	lsls	r3, r3, #8
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a1c      	ldr	r2, [pc, #112]	@ (8004eb4 <TIM_OC3_SetConfig+0xfc>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d00f      	beq.n	8004e66 <TIM_OC3_SetConfig+0xae>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a1b      	ldr	r2, [pc, #108]	@ (8004eb8 <TIM_OC3_SetConfig+0x100>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00b      	beq.n	8004e66 <TIM_OC3_SetConfig+0xae>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a1a      	ldr	r2, [pc, #104]	@ (8004ebc <TIM_OC3_SetConfig+0x104>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d007      	beq.n	8004e66 <TIM_OC3_SetConfig+0xae>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a19      	ldr	r2, [pc, #100]	@ (8004ec0 <TIM_OC3_SetConfig+0x108>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d003      	beq.n	8004e66 <TIM_OC3_SetConfig+0xae>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a18      	ldr	r2, [pc, #96]	@ (8004ec4 <TIM_OC3_SetConfig+0x10c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d113      	bne.n	8004e8e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	621a      	str	r2, [r3, #32]
}
 8004ea8:	bf00      	nop
 8004eaa:	371c      	adds	r7, #28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	40012c00 	.word	0x40012c00
 8004eb8:	40013400 	.word	0x40013400
 8004ebc:	40014000 	.word	0x40014000
 8004ec0:	40014400 	.word	0x40014400
 8004ec4:	40014800 	.word	0x40014800

08004ec8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ef6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	021b      	lsls	r3, r3, #8
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	031b      	lsls	r3, r3, #12
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a28      	ldr	r2, [pc, #160]	@ (8004fc8 <TIM_OC4_SetConfig+0x100>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d003      	beq.n	8004f34 <TIM_OC4_SetConfig+0x6c>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a27      	ldr	r2, [pc, #156]	@ (8004fcc <TIM_OC4_SetConfig+0x104>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d10d      	bne.n	8004f50 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	031b      	lsls	r3, r3, #12
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a1d      	ldr	r2, [pc, #116]	@ (8004fc8 <TIM_OC4_SetConfig+0x100>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d00f      	beq.n	8004f78 <TIM_OC4_SetConfig+0xb0>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8004fcc <TIM_OC4_SetConfig+0x104>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d00b      	beq.n	8004f78 <TIM_OC4_SetConfig+0xb0>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a1b      	ldr	r2, [pc, #108]	@ (8004fd0 <TIM_OC4_SetConfig+0x108>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d007      	beq.n	8004f78 <TIM_OC4_SetConfig+0xb0>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a1a      	ldr	r2, [pc, #104]	@ (8004fd4 <TIM_OC4_SetConfig+0x10c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d003      	beq.n	8004f78 <TIM_OC4_SetConfig+0xb0>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a19      	ldr	r2, [pc, #100]	@ (8004fd8 <TIM_OC4_SetConfig+0x110>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d113      	bne.n	8004fa0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f7e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004f86:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	019b      	lsls	r3, r3, #6
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	019b      	lsls	r3, r3, #6
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	621a      	str	r2, [r3, #32]
}
 8004fba:	bf00      	nop
 8004fbc:	371c      	adds	r7, #28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	40012c00 	.word	0x40012c00
 8004fcc:	40013400 	.word	0x40013400
 8004fd0:	40014000 	.word	0x40014000
 8004fd4:	40014400 	.word	0x40014400
 8004fd8:	40014800 	.word	0x40014800

08004fdc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800500a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800500e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4313      	orrs	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005020:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	041b      	lsls	r3, r3, #16
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	4313      	orrs	r3, r2
 800502c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a17      	ldr	r2, [pc, #92]	@ (8005090 <TIM_OC5_SetConfig+0xb4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00f      	beq.n	8005056 <TIM_OC5_SetConfig+0x7a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a16      	ldr	r2, [pc, #88]	@ (8005094 <TIM_OC5_SetConfig+0xb8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00b      	beq.n	8005056 <TIM_OC5_SetConfig+0x7a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a15      	ldr	r2, [pc, #84]	@ (8005098 <TIM_OC5_SetConfig+0xbc>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d007      	beq.n	8005056 <TIM_OC5_SetConfig+0x7a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a14      	ldr	r2, [pc, #80]	@ (800509c <TIM_OC5_SetConfig+0xc0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d003      	beq.n	8005056 <TIM_OC5_SetConfig+0x7a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a13      	ldr	r2, [pc, #76]	@ (80050a0 <TIM_OC5_SetConfig+0xc4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d109      	bne.n	800506a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800505c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	021b      	lsls	r3, r3, #8
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	4313      	orrs	r3, r2
 8005068:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	621a      	str	r2, [r3, #32]
}
 8005084:	bf00      	nop
 8005086:	371c      	adds	r7, #28
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	40012c00 	.word	0x40012c00
 8005094:	40013400 	.word	0x40013400
 8005098:	40014000 	.word	0x40014000
 800509c:	40014400 	.word	0x40014400
 80050a0:	40014800 	.word	0x40014800

080050a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	021b      	lsls	r3, r3, #8
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80050ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	051b      	lsls	r3, r3, #20
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a18      	ldr	r2, [pc, #96]	@ (800515c <TIM_OC6_SetConfig+0xb8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00f      	beq.n	8005120 <TIM_OC6_SetConfig+0x7c>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a17      	ldr	r2, [pc, #92]	@ (8005160 <TIM_OC6_SetConfig+0xbc>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d00b      	beq.n	8005120 <TIM_OC6_SetConfig+0x7c>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a16      	ldr	r2, [pc, #88]	@ (8005164 <TIM_OC6_SetConfig+0xc0>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d007      	beq.n	8005120 <TIM_OC6_SetConfig+0x7c>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a15      	ldr	r2, [pc, #84]	@ (8005168 <TIM_OC6_SetConfig+0xc4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d003      	beq.n	8005120 <TIM_OC6_SetConfig+0x7c>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a14      	ldr	r2, [pc, #80]	@ (800516c <TIM_OC6_SetConfig+0xc8>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d109      	bne.n	8005134 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005126:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	029b      	lsls	r3, r3, #10
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	4313      	orrs	r3, r2
 8005132:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	621a      	str	r2, [r3, #32]
}
 800514e:	bf00      	nop
 8005150:	371c      	adds	r7, #28
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	40012c00 	.word	0x40012c00
 8005160:	40013400 	.word	0x40013400
 8005164:	40014000 	.word	0x40014000
 8005168:	40014400 	.word	0x40014400
 800516c:	40014800 	.word	0x40014800

08005170 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	f023 0201 	bic.w	r2, r3, #1
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800519a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	011b      	lsls	r3, r3, #4
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f023 030a 	bic.w	r3, r3, #10
 80051ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	621a      	str	r2, [r3, #32]
}
 80051c2:	bf00      	nop
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b087      	sub	sp, #28
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	60f8      	str	r0, [r7, #12]
 80051d6:	60b9      	str	r1, [r7, #8]
 80051d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	f023 0210 	bic.w	r2, r3, #16
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	031b      	lsls	r3, r3, #12
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	4313      	orrs	r3, r2
 8005202:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800520a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	4313      	orrs	r3, r2
 8005214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	621a      	str	r2, [r3, #32]
}
 8005222:	bf00      	nop
 8005224:	371c      	adds	r7, #28
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800522e:	b480      	push	{r7}
 8005230:	b085      	sub	sp, #20
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005244:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005248:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4313      	orrs	r3, r2
 8005250:	f043 0307 	orr.w	r3, r3, #7
 8005254:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	609a      	str	r2, [r3, #8]
}
 800525c:	bf00      	nop
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005268:	b480      	push	{r7}
 800526a:	b087      	sub	sp, #28
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
 8005274:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005282:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	021a      	lsls	r2, r3, #8
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	431a      	orrs	r2, r3
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	4313      	orrs	r3, r2
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	4313      	orrs	r3, r2
 8005294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	609a      	str	r2, [r3, #8]
}
 800529c:	bf00      	nop
 800529e:	371c      	adds	r7, #28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d101      	bne.n	80052c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052bc:	2302      	movs	r3, #2
 80052be:	e065      	b.n	800538c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a2c      	ldr	r2, [pc, #176]	@ (8005398 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d004      	beq.n	80052f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a2b      	ldr	r2, [pc, #172]	@ (800539c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d108      	bne.n	8005306 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80052fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800530c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005310:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	4313      	orrs	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a1b      	ldr	r2, [pc, #108]	@ (8005398 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d018      	beq.n	8005360 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005336:	d013      	beq.n	8005360 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a18      	ldr	r2, [pc, #96]	@ (80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d00e      	beq.n	8005360 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a17      	ldr	r2, [pc, #92]	@ (80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d009      	beq.n	8005360 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a12      	ldr	r2, [pc, #72]	@ (800539c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d004      	beq.n	8005360 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a13      	ldr	r2, [pc, #76]	@ (80053a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d10c      	bne.n	800537a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005366:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	4313      	orrs	r3, r2
 8005370:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	40012c00 	.word	0x40012c00
 800539c:	40013400 	.word	0x40013400
 80053a0:	40000400 	.word	0x40000400
 80053a4:	40000800 	.word	0x40000800
 80053a8:	40014000 	.word	0x40014000

080053ac <std>:
 80053ac:	2300      	movs	r3, #0
 80053ae:	b510      	push	{r4, lr}
 80053b0:	4604      	mov	r4, r0
 80053b2:	e9c0 3300 	strd	r3, r3, [r0]
 80053b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053ba:	6083      	str	r3, [r0, #8]
 80053bc:	8181      	strh	r1, [r0, #12]
 80053be:	6643      	str	r3, [r0, #100]	@ 0x64
 80053c0:	81c2      	strh	r2, [r0, #14]
 80053c2:	6183      	str	r3, [r0, #24]
 80053c4:	4619      	mov	r1, r3
 80053c6:	2208      	movs	r2, #8
 80053c8:	305c      	adds	r0, #92	@ 0x5c
 80053ca:	f000 f9f9 	bl	80057c0 <memset>
 80053ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005404 <std+0x58>)
 80053d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80053d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005408 <std+0x5c>)
 80053d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80053d6:	4b0d      	ldr	r3, [pc, #52]	@ (800540c <std+0x60>)
 80053d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80053da:	4b0d      	ldr	r3, [pc, #52]	@ (8005410 <std+0x64>)
 80053dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80053de:	4b0d      	ldr	r3, [pc, #52]	@ (8005414 <std+0x68>)
 80053e0:	6224      	str	r4, [r4, #32]
 80053e2:	429c      	cmp	r4, r3
 80053e4:	d006      	beq.n	80053f4 <std+0x48>
 80053e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80053ea:	4294      	cmp	r4, r2
 80053ec:	d002      	beq.n	80053f4 <std+0x48>
 80053ee:	33d0      	adds	r3, #208	@ 0xd0
 80053f0:	429c      	cmp	r4, r3
 80053f2:	d105      	bne.n	8005400 <std+0x54>
 80053f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80053f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053fc:	f000 ba58 	b.w	80058b0 <__retarget_lock_init_recursive>
 8005400:	bd10      	pop	{r4, pc}
 8005402:	bf00      	nop
 8005404:	08005611 	.word	0x08005611
 8005408:	08005633 	.word	0x08005633
 800540c:	0800566b 	.word	0x0800566b
 8005410:	0800568f 	.word	0x0800568f
 8005414:	20000228 	.word	0x20000228

08005418 <stdio_exit_handler>:
 8005418:	4a02      	ldr	r2, [pc, #8]	@ (8005424 <stdio_exit_handler+0xc>)
 800541a:	4903      	ldr	r1, [pc, #12]	@ (8005428 <stdio_exit_handler+0x10>)
 800541c:	4803      	ldr	r0, [pc, #12]	@ (800542c <stdio_exit_handler+0x14>)
 800541e:	f000 b869 	b.w	80054f4 <_fwalk_sglue>
 8005422:	bf00      	nop
 8005424:	20000014 	.word	0x20000014
 8005428:	08006151 	.word	0x08006151
 800542c:	20000024 	.word	0x20000024

08005430 <cleanup_stdio>:
 8005430:	6841      	ldr	r1, [r0, #4]
 8005432:	4b0c      	ldr	r3, [pc, #48]	@ (8005464 <cleanup_stdio+0x34>)
 8005434:	4299      	cmp	r1, r3
 8005436:	b510      	push	{r4, lr}
 8005438:	4604      	mov	r4, r0
 800543a:	d001      	beq.n	8005440 <cleanup_stdio+0x10>
 800543c:	f000 fe88 	bl	8006150 <_fflush_r>
 8005440:	68a1      	ldr	r1, [r4, #8]
 8005442:	4b09      	ldr	r3, [pc, #36]	@ (8005468 <cleanup_stdio+0x38>)
 8005444:	4299      	cmp	r1, r3
 8005446:	d002      	beq.n	800544e <cleanup_stdio+0x1e>
 8005448:	4620      	mov	r0, r4
 800544a:	f000 fe81 	bl	8006150 <_fflush_r>
 800544e:	68e1      	ldr	r1, [r4, #12]
 8005450:	4b06      	ldr	r3, [pc, #24]	@ (800546c <cleanup_stdio+0x3c>)
 8005452:	4299      	cmp	r1, r3
 8005454:	d004      	beq.n	8005460 <cleanup_stdio+0x30>
 8005456:	4620      	mov	r0, r4
 8005458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800545c:	f000 be78 	b.w	8006150 <_fflush_r>
 8005460:	bd10      	pop	{r4, pc}
 8005462:	bf00      	nop
 8005464:	20000228 	.word	0x20000228
 8005468:	20000290 	.word	0x20000290
 800546c:	200002f8 	.word	0x200002f8

08005470 <global_stdio_init.part.0>:
 8005470:	b510      	push	{r4, lr}
 8005472:	4b0b      	ldr	r3, [pc, #44]	@ (80054a0 <global_stdio_init.part.0+0x30>)
 8005474:	4c0b      	ldr	r4, [pc, #44]	@ (80054a4 <global_stdio_init.part.0+0x34>)
 8005476:	4a0c      	ldr	r2, [pc, #48]	@ (80054a8 <global_stdio_init.part.0+0x38>)
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	4620      	mov	r0, r4
 800547c:	2200      	movs	r2, #0
 800547e:	2104      	movs	r1, #4
 8005480:	f7ff ff94 	bl	80053ac <std>
 8005484:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005488:	2201      	movs	r2, #1
 800548a:	2109      	movs	r1, #9
 800548c:	f7ff ff8e 	bl	80053ac <std>
 8005490:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005494:	2202      	movs	r2, #2
 8005496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800549a:	2112      	movs	r1, #18
 800549c:	f7ff bf86 	b.w	80053ac <std>
 80054a0:	20000360 	.word	0x20000360
 80054a4:	20000228 	.word	0x20000228
 80054a8:	08005419 	.word	0x08005419

080054ac <__sfp_lock_acquire>:
 80054ac:	4801      	ldr	r0, [pc, #4]	@ (80054b4 <__sfp_lock_acquire+0x8>)
 80054ae:	f000 ba00 	b.w	80058b2 <__retarget_lock_acquire_recursive>
 80054b2:	bf00      	nop
 80054b4:	20000369 	.word	0x20000369

080054b8 <__sfp_lock_release>:
 80054b8:	4801      	ldr	r0, [pc, #4]	@ (80054c0 <__sfp_lock_release+0x8>)
 80054ba:	f000 b9fb 	b.w	80058b4 <__retarget_lock_release_recursive>
 80054be:	bf00      	nop
 80054c0:	20000369 	.word	0x20000369

080054c4 <__sinit>:
 80054c4:	b510      	push	{r4, lr}
 80054c6:	4604      	mov	r4, r0
 80054c8:	f7ff fff0 	bl	80054ac <__sfp_lock_acquire>
 80054cc:	6a23      	ldr	r3, [r4, #32]
 80054ce:	b11b      	cbz	r3, 80054d8 <__sinit+0x14>
 80054d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054d4:	f7ff bff0 	b.w	80054b8 <__sfp_lock_release>
 80054d8:	4b04      	ldr	r3, [pc, #16]	@ (80054ec <__sinit+0x28>)
 80054da:	6223      	str	r3, [r4, #32]
 80054dc:	4b04      	ldr	r3, [pc, #16]	@ (80054f0 <__sinit+0x2c>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1f5      	bne.n	80054d0 <__sinit+0xc>
 80054e4:	f7ff ffc4 	bl	8005470 <global_stdio_init.part.0>
 80054e8:	e7f2      	b.n	80054d0 <__sinit+0xc>
 80054ea:	bf00      	nop
 80054ec:	08005431 	.word	0x08005431
 80054f0:	20000360 	.word	0x20000360

080054f4 <_fwalk_sglue>:
 80054f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054f8:	4607      	mov	r7, r0
 80054fa:	4688      	mov	r8, r1
 80054fc:	4614      	mov	r4, r2
 80054fe:	2600      	movs	r6, #0
 8005500:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005504:	f1b9 0901 	subs.w	r9, r9, #1
 8005508:	d505      	bpl.n	8005516 <_fwalk_sglue+0x22>
 800550a:	6824      	ldr	r4, [r4, #0]
 800550c:	2c00      	cmp	r4, #0
 800550e:	d1f7      	bne.n	8005500 <_fwalk_sglue+0xc>
 8005510:	4630      	mov	r0, r6
 8005512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005516:	89ab      	ldrh	r3, [r5, #12]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d907      	bls.n	800552c <_fwalk_sglue+0x38>
 800551c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005520:	3301      	adds	r3, #1
 8005522:	d003      	beq.n	800552c <_fwalk_sglue+0x38>
 8005524:	4629      	mov	r1, r5
 8005526:	4638      	mov	r0, r7
 8005528:	47c0      	blx	r8
 800552a:	4306      	orrs	r6, r0
 800552c:	3568      	adds	r5, #104	@ 0x68
 800552e:	e7e9      	b.n	8005504 <_fwalk_sglue+0x10>

08005530 <iprintf>:
 8005530:	b40f      	push	{r0, r1, r2, r3}
 8005532:	b507      	push	{r0, r1, r2, lr}
 8005534:	4906      	ldr	r1, [pc, #24]	@ (8005550 <iprintf+0x20>)
 8005536:	ab04      	add	r3, sp, #16
 8005538:	6808      	ldr	r0, [r1, #0]
 800553a:	f853 2b04 	ldr.w	r2, [r3], #4
 800553e:	6881      	ldr	r1, [r0, #8]
 8005540:	9301      	str	r3, [sp, #4]
 8005542:	f000 fadb 	bl	8005afc <_vfiprintf_r>
 8005546:	b003      	add	sp, #12
 8005548:	f85d eb04 	ldr.w	lr, [sp], #4
 800554c:	b004      	add	sp, #16
 800554e:	4770      	bx	lr
 8005550:	20000020 	.word	0x20000020

08005554 <_puts_r>:
 8005554:	6a03      	ldr	r3, [r0, #32]
 8005556:	b570      	push	{r4, r5, r6, lr}
 8005558:	6884      	ldr	r4, [r0, #8]
 800555a:	4605      	mov	r5, r0
 800555c:	460e      	mov	r6, r1
 800555e:	b90b      	cbnz	r3, 8005564 <_puts_r+0x10>
 8005560:	f7ff ffb0 	bl	80054c4 <__sinit>
 8005564:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005566:	07db      	lsls	r3, r3, #31
 8005568:	d405      	bmi.n	8005576 <_puts_r+0x22>
 800556a:	89a3      	ldrh	r3, [r4, #12]
 800556c:	0598      	lsls	r0, r3, #22
 800556e:	d402      	bmi.n	8005576 <_puts_r+0x22>
 8005570:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005572:	f000 f99e 	bl	80058b2 <__retarget_lock_acquire_recursive>
 8005576:	89a3      	ldrh	r3, [r4, #12]
 8005578:	0719      	lsls	r1, r3, #28
 800557a:	d502      	bpl.n	8005582 <_puts_r+0x2e>
 800557c:	6923      	ldr	r3, [r4, #16]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d135      	bne.n	80055ee <_puts_r+0x9a>
 8005582:	4621      	mov	r1, r4
 8005584:	4628      	mov	r0, r5
 8005586:	f000 f8c5 	bl	8005714 <__swsetup_r>
 800558a:	b380      	cbz	r0, 80055ee <_puts_r+0x9a>
 800558c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005590:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005592:	07da      	lsls	r2, r3, #31
 8005594:	d405      	bmi.n	80055a2 <_puts_r+0x4e>
 8005596:	89a3      	ldrh	r3, [r4, #12]
 8005598:	059b      	lsls	r3, r3, #22
 800559a:	d402      	bmi.n	80055a2 <_puts_r+0x4e>
 800559c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800559e:	f000 f989 	bl	80058b4 <__retarget_lock_release_recursive>
 80055a2:	4628      	mov	r0, r5
 80055a4:	bd70      	pop	{r4, r5, r6, pc}
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	da04      	bge.n	80055b4 <_puts_r+0x60>
 80055aa:	69a2      	ldr	r2, [r4, #24]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	dc17      	bgt.n	80055e0 <_puts_r+0x8c>
 80055b0:	290a      	cmp	r1, #10
 80055b2:	d015      	beq.n	80055e0 <_puts_r+0x8c>
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	6022      	str	r2, [r4, #0]
 80055ba:	7019      	strb	r1, [r3, #0]
 80055bc:	68a3      	ldr	r3, [r4, #8]
 80055be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80055c2:	3b01      	subs	r3, #1
 80055c4:	60a3      	str	r3, [r4, #8]
 80055c6:	2900      	cmp	r1, #0
 80055c8:	d1ed      	bne.n	80055a6 <_puts_r+0x52>
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	da11      	bge.n	80055f2 <_puts_r+0x9e>
 80055ce:	4622      	mov	r2, r4
 80055d0:	210a      	movs	r1, #10
 80055d2:	4628      	mov	r0, r5
 80055d4:	f000 f85f 	bl	8005696 <__swbuf_r>
 80055d8:	3001      	adds	r0, #1
 80055da:	d0d7      	beq.n	800558c <_puts_r+0x38>
 80055dc:	250a      	movs	r5, #10
 80055de:	e7d7      	b.n	8005590 <_puts_r+0x3c>
 80055e0:	4622      	mov	r2, r4
 80055e2:	4628      	mov	r0, r5
 80055e4:	f000 f857 	bl	8005696 <__swbuf_r>
 80055e8:	3001      	adds	r0, #1
 80055ea:	d1e7      	bne.n	80055bc <_puts_r+0x68>
 80055ec:	e7ce      	b.n	800558c <_puts_r+0x38>
 80055ee:	3e01      	subs	r6, #1
 80055f0:	e7e4      	b.n	80055bc <_puts_r+0x68>
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	1c5a      	adds	r2, r3, #1
 80055f6:	6022      	str	r2, [r4, #0]
 80055f8:	220a      	movs	r2, #10
 80055fa:	701a      	strb	r2, [r3, #0]
 80055fc:	e7ee      	b.n	80055dc <_puts_r+0x88>
	...

08005600 <puts>:
 8005600:	4b02      	ldr	r3, [pc, #8]	@ (800560c <puts+0xc>)
 8005602:	4601      	mov	r1, r0
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	f7ff bfa5 	b.w	8005554 <_puts_r>
 800560a:	bf00      	nop
 800560c:	20000020 	.word	0x20000020

08005610 <__sread>:
 8005610:	b510      	push	{r4, lr}
 8005612:	460c      	mov	r4, r1
 8005614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005618:	f000 f8fc 	bl	8005814 <_read_r>
 800561c:	2800      	cmp	r0, #0
 800561e:	bfab      	itete	ge
 8005620:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005622:	89a3      	ldrhlt	r3, [r4, #12]
 8005624:	181b      	addge	r3, r3, r0
 8005626:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800562a:	bfac      	ite	ge
 800562c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800562e:	81a3      	strhlt	r3, [r4, #12]
 8005630:	bd10      	pop	{r4, pc}

08005632 <__swrite>:
 8005632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005636:	461f      	mov	r7, r3
 8005638:	898b      	ldrh	r3, [r1, #12]
 800563a:	05db      	lsls	r3, r3, #23
 800563c:	4605      	mov	r5, r0
 800563e:	460c      	mov	r4, r1
 8005640:	4616      	mov	r6, r2
 8005642:	d505      	bpl.n	8005650 <__swrite+0x1e>
 8005644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005648:	2302      	movs	r3, #2
 800564a:	2200      	movs	r2, #0
 800564c:	f000 f8d0 	bl	80057f0 <_lseek_r>
 8005650:	89a3      	ldrh	r3, [r4, #12]
 8005652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005656:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800565a:	81a3      	strh	r3, [r4, #12]
 800565c:	4632      	mov	r2, r6
 800565e:	463b      	mov	r3, r7
 8005660:	4628      	mov	r0, r5
 8005662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005666:	f000 b8e7 	b.w	8005838 <_write_r>

0800566a <__sseek>:
 800566a:	b510      	push	{r4, lr}
 800566c:	460c      	mov	r4, r1
 800566e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005672:	f000 f8bd 	bl	80057f0 <_lseek_r>
 8005676:	1c43      	adds	r3, r0, #1
 8005678:	89a3      	ldrh	r3, [r4, #12]
 800567a:	bf15      	itete	ne
 800567c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800567e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005682:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005686:	81a3      	strheq	r3, [r4, #12]
 8005688:	bf18      	it	ne
 800568a:	81a3      	strhne	r3, [r4, #12]
 800568c:	bd10      	pop	{r4, pc}

0800568e <__sclose>:
 800568e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005692:	f000 b89d 	b.w	80057d0 <_close_r>

08005696 <__swbuf_r>:
 8005696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005698:	460e      	mov	r6, r1
 800569a:	4614      	mov	r4, r2
 800569c:	4605      	mov	r5, r0
 800569e:	b118      	cbz	r0, 80056a8 <__swbuf_r+0x12>
 80056a0:	6a03      	ldr	r3, [r0, #32]
 80056a2:	b90b      	cbnz	r3, 80056a8 <__swbuf_r+0x12>
 80056a4:	f7ff ff0e 	bl	80054c4 <__sinit>
 80056a8:	69a3      	ldr	r3, [r4, #24]
 80056aa:	60a3      	str	r3, [r4, #8]
 80056ac:	89a3      	ldrh	r3, [r4, #12]
 80056ae:	071a      	lsls	r2, r3, #28
 80056b0:	d501      	bpl.n	80056b6 <__swbuf_r+0x20>
 80056b2:	6923      	ldr	r3, [r4, #16]
 80056b4:	b943      	cbnz	r3, 80056c8 <__swbuf_r+0x32>
 80056b6:	4621      	mov	r1, r4
 80056b8:	4628      	mov	r0, r5
 80056ba:	f000 f82b 	bl	8005714 <__swsetup_r>
 80056be:	b118      	cbz	r0, 80056c8 <__swbuf_r+0x32>
 80056c0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80056c4:	4638      	mov	r0, r7
 80056c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056c8:	6823      	ldr	r3, [r4, #0]
 80056ca:	6922      	ldr	r2, [r4, #16]
 80056cc:	1a98      	subs	r0, r3, r2
 80056ce:	6963      	ldr	r3, [r4, #20]
 80056d0:	b2f6      	uxtb	r6, r6
 80056d2:	4283      	cmp	r3, r0
 80056d4:	4637      	mov	r7, r6
 80056d6:	dc05      	bgt.n	80056e4 <__swbuf_r+0x4e>
 80056d8:	4621      	mov	r1, r4
 80056da:	4628      	mov	r0, r5
 80056dc:	f000 fd38 	bl	8006150 <_fflush_r>
 80056e0:	2800      	cmp	r0, #0
 80056e2:	d1ed      	bne.n	80056c0 <__swbuf_r+0x2a>
 80056e4:	68a3      	ldr	r3, [r4, #8]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	60a3      	str	r3, [r4, #8]
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	1c5a      	adds	r2, r3, #1
 80056ee:	6022      	str	r2, [r4, #0]
 80056f0:	701e      	strb	r6, [r3, #0]
 80056f2:	6962      	ldr	r2, [r4, #20]
 80056f4:	1c43      	adds	r3, r0, #1
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d004      	beq.n	8005704 <__swbuf_r+0x6e>
 80056fa:	89a3      	ldrh	r3, [r4, #12]
 80056fc:	07db      	lsls	r3, r3, #31
 80056fe:	d5e1      	bpl.n	80056c4 <__swbuf_r+0x2e>
 8005700:	2e0a      	cmp	r6, #10
 8005702:	d1df      	bne.n	80056c4 <__swbuf_r+0x2e>
 8005704:	4621      	mov	r1, r4
 8005706:	4628      	mov	r0, r5
 8005708:	f000 fd22 	bl	8006150 <_fflush_r>
 800570c:	2800      	cmp	r0, #0
 800570e:	d0d9      	beq.n	80056c4 <__swbuf_r+0x2e>
 8005710:	e7d6      	b.n	80056c0 <__swbuf_r+0x2a>
	...

08005714 <__swsetup_r>:
 8005714:	b538      	push	{r3, r4, r5, lr}
 8005716:	4b29      	ldr	r3, [pc, #164]	@ (80057bc <__swsetup_r+0xa8>)
 8005718:	4605      	mov	r5, r0
 800571a:	6818      	ldr	r0, [r3, #0]
 800571c:	460c      	mov	r4, r1
 800571e:	b118      	cbz	r0, 8005728 <__swsetup_r+0x14>
 8005720:	6a03      	ldr	r3, [r0, #32]
 8005722:	b90b      	cbnz	r3, 8005728 <__swsetup_r+0x14>
 8005724:	f7ff fece 	bl	80054c4 <__sinit>
 8005728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800572c:	0719      	lsls	r1, r3, #28
 800572e:	d422      	bmi.n	8005776 <__swsetup_r+0x62>
 8005730:	06da      	lsls	r2, r3, #27
 8005732:	d407      	bmi.n	8005744 <__swsetup_r+0x30>
 8005734:	2209      	movs	r2, #9
 8005736:	602a      	str	r2, [r5, #0]
 8005738:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800573c:	81a3      	strh	r3, [r4, #12]
 800573e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005742:	e033      	b.n	80057ac <__swsetup_r+0x98>
 8005744:	0758      	lsls	r0, r3, #29
 8005746:	d512      	bpl.n	800576e <__swsetup_r+0x5a>
 8005748:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800574a:	b141      	cbz	r1, 800575e <__swsetup_r+0x4a>
 800574c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005750:	4299      	cmp	r1, r3
 8005752:	d002      	beq.n	800575a <__swsetup_r+0x46>
 8005754:	4628      	mov	r0, r5
 8005756:	f000 f8af 	bl	80058b8 <_free_r>
 800575a:	2300      	movs	r3, #0
 800575c:	6363      	str	r3, [r4, #52]	@ 0x34
 800575e:	89a3      	ldrh	r3, [r4, #12]
 8005760:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005764:	81a3      	strh	r3, [r4, #12]
 8005766:	2300      	movs	r3, #0
 8005768:	6063      	str	r3, [r4, #4]
 800576a:	6923      	ldr	r3, [r4, #16]
 800576c:	6023      	str	r3, [r4, #0]
 800576e:	89a3      	ldrh	r3, [r4, #12]
 8005770:	f043 0308 	orr.w	r3, r3, #8
 8005774:	81a3      	strh	r3, [r4, #12]
 8005776:	6923      	ldr	r3, [r4, #16]
 8005778:	b94b      	cbnz	r3, 800578e <__swsetup_r+0x7a>
 800577a:	89a3      	ldrh	r3, [r4, #12]
 800577c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005780:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005784:	d003      	beq.n	800578e <__swsetup_r+0x7a>
 8005786:	4621      	mov	r1, r4
 8005788:	4628      	mov	r0, r5
 800578a:	f000 fd2f 	bl	80061ec <__smakebuf_r>
 800578e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005792:	f013 0201 	ands.w	r2, r3, #1
 8005796:	d00a      	beq.n	80057ae <__swsetup_r+0x9a>
 8005798:	2200      	movs	r2, #0
 800579a:	60a2      	str	r2, [r4, #8]
 800579c:	6962      	ldr	r2, [r4, #20]
 800579e:	4252      	negs	r2, r2
 80057a0:	61a2      	str	r2, [r4, #24]
 80057a2:	6922      	ldr	r2, [r4, #16]
 80057a4:	b942      	cbnz	r2, 80057b8 <__swsetup_r+0xa4>
 80057a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80057aa:	d1c5      	bne.n	8005738 <__swsetup_r+0x24>
 80057ac:	bd38      	pop	{r3, r4, r5, pc}
 80057ae:	0799      	lsls	r1, r3, #30
 80057b0:	bf58      	it	pl
 80057b2:	6962      	ldrpl	r2, [r4, #20]
 80057b4:	60a2      	str	r2, [r4, #8]
 80057b6:	e7f4      	b.n	80057a2 <__swsetup_r+0x8e>
 80057b8:	2000      	movs	r0, #0
 80057ba:	e7f7      	b.n	80057ac <__swsetup_r+0x98>
 80057bc:	20000020 	.word	0x20000020

080057c0 <memset>:
 80057c0:	4402      	add	r2, r0
 80057c2:	4603      	mov	r3, r0
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d100      	bne.n	80057ca <memset+0xa>
 80057c8:	4770      	bx	lr
 80057ca:	f803 1b01 	strb.w	r1, [r3], #1
 80057ce:	e7f9      	b.n	80057c4 <memset+0x4>

080057d0 <_close_r>:
 80057d0:	b538      	push	{r3, r4, r5, lr}
 80057d2:	4d06      	ldr	r5, [pc, #24]	@ (80057ec <_close_r+0x1c>)
 80057d4:	2300      	movs	r3, #0
 80057d6:	4604      	mov	r4, r0
 80057d8:	4608      	mov	r0, r1
 80057da:	602b      	str	r3, [r5, #0]
 80057dc:	f7fb fb2e 	bl	8000e3c <_close>
 80057e0:	1c43      	adds	r3, r0, #1
 80057e2:	d102      	bne.n	80057ea <_close_r+0x1a>
 80057e4:	682b      	ldr	r3, [r5, #0]
 80057e6:	b103      	cbz	r3, 80057ea <_close_r+0x1a>
 80057e8:	6023      	str	r3, [r4, #0]
 80057ea:	bd38      	pop	{r3, r4, r5, pc}
 80057ec:	20000364 	.word	0x20000364

080057f0 <_lseek_r>:
 80057f0:	b538      	push	{r3, r4, r5, lr}
 80057f2:	4d07      	ldr	r5, [pc, #28]	@ (8005810 <_lseek_r+0x20>)
 80057f4:	4604      	mov	r4, r0
 80057f6:	4608      	mov	r0, r1
 80057f8:	4611      	mov	r1, r2
 80057fa:	2200      	movs	r2, #0
 80057fc:	602a      	str	r2, [r5, #0]
 80057fe:	461a      	mov	r2, r3
 8005800:	f7fb fb43 	bl	8000e8a <_lseek>
 8005804:	1c43      	adds	r3, r0, #1
 8005806:	d102      	bne.n	800580e <_lseek_r+0x1e>
 8005808:	682b      	ldr	r3, [r5, #0]
 800580a:	b103      	cbz	r3, 800580e <_lseek_r+0x1e>
 800580c:	6023      	str	r3, [r4, #0]
 800580e:	bd38      	pop	{r3, r4, r5, pc}
 8005810:	20000364 	.word	0x20000364

08005814 <_read_r>:
 8005814:	b538      	push	{r3, r4, r5, lr}
 8005816:	4d07      	ldr	r5, [pc, #28]	@ (8005834 <_read_r+0x20>)
 8005818:	4604      	mov	r4, r0
 800581a:	4608      	mov	r0, r1
 800581c:	4611      	mov	r1, r2
 800581e:	2200      	movs	r2, #0
 8005820:	602a      	str	r2, [r5, #0]
 8005822:	461a      	mov	r2, r3
 8005824:	f7fb faed 	bl	8000e02 <_read>
 8005828:	1c43      	adds	r3, r0, #1
 800582a:	d102      	bne.n	8005832 <_read_r+0x1e>
 800582c:	682b      	ldr	r3, [r5, #0]
 800582e:	b103      	cbz	r3, 8005832 <_read_r+0x1e>
 8005830:	6023      	str	r3, [r4, #0]
 8005832:	bd38      	pop	{r3, r4, r5, pc}
 8005834:	20000364 	.word	0x20000364

08005838 <_write_r>:
 8005838:	b538      	push	{r3, r4, r5, lr}
 800583a:	4d07      	ldr	r5, [pc, #28]	@ (8005858 <_write_r+0x20>)
 800583c:	4604      	mov	r4, r0
 800583e:	4608      	mov	r0, r1
 8005840:	4611      	mov	r1, r2
 8005842:	2200      	movs	r2, #0
 8005844:	602a      	str	r2, [r5, #0]
 8005846:	461a      	mov	r2, r3
 8005848:	f7fb f95e 	bl	8000b08 <_write>
 800584c:	1c43      	adds	r3, r0, #1
 800584e:	d102      	bne.n	8005856 <_write_r+0x1e>
 8005850:	682b      	ldr	r3, [r5, #0]
 8005852:	b103      	cbz	r3, 8005856 <_write_r+0x1e>
 8005854:	6023      	str	r3, [r4, #0]
 8005856:	bd38      	pop	{r3, r4, r5, pc}
 8005858:	20000364 	.word	0x20000364

0800585c <__errno>:
 800585c:	4b01      	ldr	r3, [pc, #4]	@ (8005864 <__errno+0x8>)
 800585e:	6818      	ldr	r0, [r3, #0]
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	20000020 	.word	0x20000020

08005868 <__libc_init_array>:
 8005868:	b570      	push	{r4, r5, r6, lr}
 800586a:	4d0d      	ldr	r5, [pc, #52]	@ (80058a0 <__libc_init_array+0x38>)
 800586c:	4c0d      	ldr	r4, [pc, #52]	@ (80058a4 <__libc_init_array+0x3c>)
 800586e:	1b64      	subs	r4, r4, r5
 8005870:	10a4      	asrs	r4, r4, #2
 8005872:	2600      	movs	r6, #0
 8005874:	42a6      	cmp	r6, r4
 8005876:	d109      	bne.n	800588c <__libc_init_array+0x24>
 8005878:	4d0b      	ldr	r5, [pc, #44]	@ (80058a8 <__libc_init_array+0x40>)
 800587a:	4c0c      	ldr	r4, [pc, #48]	@ (80058ac <__libc_init_array+0x44>)
 800587c:	f000 fd24 	bl	80062c8 <_init>
 8005880:	1b64      	subs	r4, r4, r5
 8005882:	10a4      	asrs	r4, r4, #2
 8005884:	2600      	movs	r6, #0
 8005886:	42a6      	cmp	r6, r4
 8005888:	d105      	bne.n	8005896 <__libc_init_array+0x2e>
 800588a:	bd70      	pop	{r4, r5, r6, pc}
 800588c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005890:	4798      	blx	r3
 8005892:	3601      	adds	r6, #1
 8005894:	e7ee      	b.n	8005874 <__libc_init_array+0xc>
 8005896:	f855 3b04 	ldr.w	r3, [r5], #4
 800589a:	4798      	blx	r3
 800589c:	3601      	adds	r6, #1
 800589e:	e7f2      	b.n	8005886 <__libc_init_array+0x1e>
 80058a0:	080064dc 	.word	0x080064dc
 80058a4:	080064dc 	.word	0x080064dc
 80058a8:	080064dc 	.word	0x080064dc
 80058ac:	080064e0 	.word	0x080064e0

080058b0 <__retarget_lock_init_recursive>:
 80058b0:	4770      	bx	lr

080058b2 <__retarget_lock_acquire_recursive>:
 80058b2:	4770      	bx	lr

080058b4 <__retarget_lock_release_recursive>:
 80058b4:	4770      	bx	lr
	...

080058b8 <_free_r>:
 80058b8:	b538      	push	{r3, r4, r5, lr}
 80058ba:	4605      	mov	r5, r0
 80058bc:	2900      	cmp	r1, #0
 80058be:	d041      	beq.n	8005944 <_free_r+0x8c>
 80058c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058c4:	1f0c      	subs	r4, r1, #4
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	bfb8      	it	lt
 80058ca:	18e4      	addlt	r4, r4, r3
 80058cc:	f000 f8e0 	bl	8005a90 <__malloc_lock>
 80058d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005948 <_free_r+0x90>)
 80058d2:	6813      	ldr	r3, [r2, #0]
 80058d4:	b933      	cbnz	r3, 80058e4 <_free_r+0x2c>
 80058d6:	6063      	str	r3, [r4, #4]
 80058d8:	6014      	str	r4, [r2, #0]
 80058da:	4628      	mov	r0, r5
 80058dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058e0:	f000 b8dc 	b.w	8005a9c <__malloc_unlock>
 80058e4:	42a3      	cmp	r3, r4
 80058e6:	d908      	bls.n	80058fa <_free_r+0x42>
 80058e8:	6820      	ldr	r0, [r4, #0]
 80058ea:	1821      	adds	r1, r4, r0
 80058ec:	428b      	cmp	r3, r1
 80058ee:	bf01      	itttt	eq
 80058f0:	6819      	ldreq	r1, [r3, #0]
 80058f2:	685b      	ldreq	r3, [r3, #4]
 80058f4:	1809      	addeq	r1, r1, r0
 80058f6:	6021      	streq	r1, [r4, #0]
 80058f8:	e7ed      	b.n	80058d6 <_free_r+0x1e>
 80058fa:	461a      	mov	r2, r3
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	b10b      	cbz	r3, 8005904 <_free_r+0x4c>
 8005900:	42a3      	cmp	r3, r4
 8005902:	d9fa      	bls.n	80058fa <_free_r+0x42>
 8005904:	6811      	ldr	r1, [r2, #0]
 8005906:	1850      	adds	r0, r2, r1
 8005908:	42a0      	cmp	r0, r4
 800590a:	d10b      	bne.n	8005924 <_free_r+0x6c>
 800590c:	6820      	ldr	r0, [r4, #0]
 800590e:	4401      	add	r1, r0
 8005910:	1850      	adds	r0, r2, r1
 8005912:	4283      	cmp	r3, r0
 8005914:	6011      	str	r1, [r2, #0]
 8005916:	d1e0      	bne.n	80058da <_free_r+0x22>
 8005918:	6818      	ldr	r0, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	6053      	str	r3, [r2, #4]
 800591e:	4408      	add	r0, r1
 8005920:	6010      	str	r0, [r2, #0]
 8005922:	e7da      	b.n	80058da <_free_r+0x22>
 8005924:	d902      	bls.n	800592c <_free_r+0x74>
 8005926:	230c      	movs	r3, #12
 8005928:	602b      	str	r3, [r5, #0]
 800592a:	e7d6      	b.n	80058da <_free_r+0x22>
 800592c:	6820      	ldr	r0, [r4, #0]
 800592e:	1821      	adds	r1, r4, r0
 8005930:	428b      	cmp	r3, r1
 8005932:	bf04      	itt	eq
 8005934:	6819      	ldreq	r1, [r3, #0]
 8005936:	685b      	ldreq	r3, [r3, #4]
 8005938:	6063      	str	r3, [r4, #4]
 800593a:	bf04      	itt	eq
 800593c:	1809      	addeq	r1, r1, r0
 800593e:	6021      	streq	r1, [r4, #0]
 8005940:	6054      	str	r4, [r2, #4]
 8005942:	e7ca      	b.n	80058da <_free_r+0x22>
 8005944:	bd38      	pop	{r3, r4, r5, pc}
 8005946:	bf00      	nop
 8005948:	20000370 	.word	0x20000370

0800594c <sbrk_aligned>:
 800594c:	b570      	push	{r4, r5, r6, lr}
 800594e:	4e0f      	ldr	r6, [pc, #60]	@ (800598c <sbrk_aligned+0x40>)
 8005950:	460c      	mov	r4, r1
 8005952:	6831      	ldr	r1, [r6, #0]
 8005954:	4605      	mov	r5, r0
 8005956:	b911      	cbnz	r1, 800595e <sbrk_aligned+0x12>
 8005958:	f000 fca6 	bl	80062a8 <_sbrk_r>
 800595c:	6030      	str	r0, [r6, #0]
 800595e:	4621      	mov	r1, r4
 8005960:	4628      	mov	r0, r5
 8005962:	f000 fca1 	bl	80062a8 <_sbrk_r>
 8005966:	1c43      	adds	r3, r0, #1
 8005968:	d103      	bne.n	8005972 <sbrk_aligned+0x26>
 800596a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800596e:	4620      	mov	r0, r4
 8005970:	bd70      	pop	{r4, r5, r6, pc}
 8005972:	1cc4      	adds	r4, r0, #3
 8005974:	f024 0403 	bic.w	r4, r4, #3
 8005978:	42a0      	cmp	r0, r4
 800597a:	d0f8      	beq.n	800596e <sbrk_aligned+0x22>
 800597c:	1a21      	subs	r1, r4, r0
 800597e:	4628      	mov	r0, r5
 8005980:	f000 fc92 	bl	80062a8 <_sbrk_r>
 8005984:	3001      	adds	r0, #1
 8005986:	d1f2      	bne.n	800596e <sbrk_aligned+0x22>
 8005988:	e7ef      	b.n	800596a <sbrk_aligned+0x1e>
 800598a:	bf00      	nop
 800598c:	2000036c 	.word	0x2000036c

08005990 <_malloc_r>:
 8005990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005994:	1ccd      	adds	r5, r1, #3
 8005996:	f025 0503 	bic.w	r5, r5, #3
 800599a:	3508      	adds	r5, #8
 800599c:	2d0c      	cmp	r5, #12
 800599e:	bf38      	it	cc
 80059a0:	250c      	movcc	r5, #12
 80059a2:	2d00      	cmp	r5, #0
 80059a4:	4606      	mov	r6, r0
 80059a6:	db01      	blt.n	80059ac <_malloc_r+0x1c>
 80059a8:	42a9      	cmp	r1, r5
 80059aa:	d904      	bls.n	80059b6 <_malloc_r+0x26>
 80059ac:	230c      	movs	r3, #12
 80059ae:	6033      	str	r3, [r6, #0]
 80059b0:	2000      	movs	r0, #0
 80059b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a8c <_malloc_r+0xfc>
 80059ba:	f000 f869 	bl	8005a90 <__malloc_lock>
 80059be:	f8d8 3000 	ldr.w	r3, [r8]
 80059c2:	461c      	mov	r4, r3
 80059c4:	bb44      	cbnz	r4, 8005a18 <_malloc_r+0x88>
 80059c6:	4629      	mov	r1, r5
 80059c8:	4630      	mov	r0, r6
 80059ca:	f7ff ffbf 	bl	800594c <sbrk_aligned>
 80059ce:	1c43      	adds	r3, r0, #1
 80059d0:	4604      	mov	r4, r0
 80059d2:	d158      	bne.n	8005a86 <_malloc_r+0xf6>
 80059d4:	f8d8 4000 	ldr.w	r4, [r8]
 80059d8:	4627      	mov	r7, r4
 80059da:	2f00      	cmp	r7, #0
 80059dc:	d143      	bne.n	8005a66 <_malloc_r+0xd6>
 80059de:	2c00      	cmp	r4, #0
 80059e0:	d04b      	beq.n	8005a7a <_malloc_r+0xea>
 80059e2:	6823      	ldr	r3, [r4, #0]
 80059e4:	4639      	mov	r1, r7
 80059e6:	4630      	mov	r0, r6
 80059e8:	eb04 0903 	add.w	r9, r4, r3
 80059ec:	f000 fc5c 	bl	80062a8 <_sbrk_r>
 80059f0:	4581      	cmp	r9, r0
 80059f2:	d142      	bne.n	8005a7a <_malloc_r+0xea>
 80059f4:	6821      	ldr	r1, [r4, #0]
 80059f6:	1a6d      	subs	r5, r5, r1
 80059f8:	4629      	mov	r1, r5
 80059fa:	4630      	mov	r0, r6
 80059fc:	f7ff ffa6 	bl	800594c <sbrk_aligned>
 8005a00:	3001      	adds	r0, #1
 8005a02:	d03a      	beq.n	8005a7a <_malloc_r+0xea>
 8005a04:	6823      	ldr	r3, [r4, #0]
 8005a06:	442b      	add	r3, r5
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	f8d8 3000 	ldr.w	r3, [r8]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	bb62      	cbnz	r2, 8005a6c <_malloc_r+0xdc>
 8005a12:	f8c8 7000 	str.w	r7, [r8]
 8005a16:	e00f      	b.n	8005a38 <_malloc_r+0xa8>
 8005a18:	6822      	ldr	r2, [r4, #0]
 8005a1a:	1b52      	subs	r2, r2, r5
 8005a1c:	d420      	bmi.n	8005a60 <_malloc_r+0xd0>
 8005a1e:	2a0b      	cmp	r2, #11
 8005a20:	d917      	bls.n	8005a52 <_malloc_r+0xc2>
 8005a22:	1961      	adds	r1, r4, r5
 8005a24:	42a3      	cmp	r3, r4
 8005a26:	6025      	str	r5, [r4, #0]
 8005a28:	bf18      	it	ne
 8005a2a:	6059      	strne	r1, [r3, #4]
 8005a2c:	6863      	ldr	r3, [r4, #4]
 8005a2e:	bf08      	it	eq
 8005a30:	f8c8 1000 	streq.w	r1, [r8]
 8005a34:	5162      	str	r2, [r4, r5]
 8005a36:	604b      	str	r3, [r1, #4]
 8005a38:	4630      	mov	r0, r6
 8005a3a:	f000 f82f 	bl	8005a9c <__malloc_unlock>
 8005a3e:	f104 000b 	add.w	r0, r4, #11
 8005a42:	1d23      	adds	r3, r4, #4
 8005a44:	f020 0007 	bic.w	r0, r0, #7
 8005a48:	1ac2      	subs	r2, r0, r3
 8005a4a:	bf1c      	itt	ne
 8005a4c:	1a1b      	subne	r3, r3, r0
 8005a4e:	50a3      	strne	r3, [r4, r2]
 8005a50:	e7af      	b.n	80059b2 <_malloc_r+0x22>
 8005a52:	6862      	ldr	r2, [r4, #4]
 8005a54:	42a3      	cmp	r3, r4
 8005a56:	bf0c      	ite	eq
 8005a58:	f8c8 2000 	streq.w	r2, [r8]
 8005a5c:	605a      	strne	r2, [r3, #4]
 8005a5e:	e7eb      	b.n	8005a38 <_malloc_r+0xa8>
 8005a60:	4623      	mov	r3, r4
 8005a62:	6864      	ldr	r4, [r4, #4]
 8005a64:	e7ae      	b.n	80059c4 <_malloc_r+0x34>
 8005a66:	463c      	mov	r4, r7
 8005a68:	687f      	ldr	r7, [r7, #4]
 8005a6a:	e7b6      	b.n	80059da <_malloc_r+0x4a>
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	42a3      	cmp	r3, r4
 8005a72:	d1fb      	bne.n	8005a6c <_malloc_r+0xdc>
 8005a74:	2300      	movs	r3, #0
 8005a76:	6053      	str	r3, [r2, #4]
 8005a78:	e7de      	b.n	8005a38 <_malloc_r+0xa8>
 8005a7a:	230c      	movs	r3, #12
 8005a7c:	6033      	str	r3, [r6, #0]
 8005a7e:	4630      	mov	r0, r6
 8005a80:	f000 f80c 	bl	8005a9c <__malloc_unlock>
 8005a84:	e794      	b.n	80059b0 <_malloc_r+0x20>
 8005a86:	6005      	str	r5, [r0, #0]
 8005a88:	e7d6      	b.n	8005a38 <_malloc_r+0xa8>
 8005a8a:	bf00      	nop
 8005a8c:	20000370 	.word	0x20000370

08005a90 <__malloc_lock>:
 8005a90:	4801      	ldr	r0, [pc, #4]	@ (8005a98 <__malloc_lock+0x8>)
 8005a92:	f7ff bf0e 	b.w	80058b2 <__retarget_lock_acquire_recursive>
 8005a96:	bf00      	nop
 8005a98:	20000368 	.word	0x20000368

08005a9c <__malloc_unlock>:
 8005a9c:	4801      	ldr	r0, [pc, #4]	@ (8005aa4 <__malloc_unlock+0x8>)
 8005a9e:	f7ff bf09 	b.w	80058b4 <__retarget_lock_release_recursive>
 8005aa2:	bf00      	nop
 8005aa4:	20000368 	.word	0x20000368

08005aa8 <__sfputc_r>:
 8005aa8:	6893      	ldr	r3, [r2, #8]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	b410      	push	{r4}
 8005ab0:	6093      	str	r3, [r2, #8]
 8005ab2:	da08      	bge.n	8005ac6 <__sfputc_r+0x1e>
 8005ab4:	6994      	ldr	r4, [r2, #24]
 8005ab6:	42a3      	cmp	r3, r4
 8005ab8:	db01      	blt.n	8005abe <__sfputc_r+0x16>
 8005aba:	290a      	cmp	r1, #10
 8005abc:	d103      	bne.n	8005ac6 <__sfputc_r+0x1e>
 8005abe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ac2:	f7ff bde8 	b.w	8005696 <__swbuf_r>
 8005ac6:	6813      	ldr	r3, [r2, #0]
 8005ac8:	1c58      	adds	r0, r3, #1
 8005aca:	6010      	str	r0, [r2, #0]
 8005acc:	7019      	strb	r1, [r3, #0]
 8005ace:	4608      	mov	r0, r1
 8005ad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <__sfputs_r>:
 8005ad6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad8:	4606      	mov	r6, r0
 8005ada:	460f      	mov	r7, r1
 8005adc:	4614      	mov	r4, r2
 8005ade:	18d5      	adds	r5, r2, r3
 8005ae0:	42ac      	cmp	r4, r5
 8005ae2:	d101      	bne.n	8005ae8 <__sfputs_r+0x12>
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	e007      	b.n	8005af8 <__sfputs_r+0x22>
 8005ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aec:	463a      	mov	r2, r7
 8005aee:	4630      	mov	r0, r6
 8005af0:	f7ff ffda 	bl	8005aa8 <__sfputc_r>
 8005af4:	1c43      	adds	r3, r0, #1
 8005af6:	d1f3      	bne.n	8005ae0 <__sfputs_r+0xa>
 8005af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005afc <_vfiprintf_r>:
 8005afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b00:	460d      	mov	r5, r1
 8005b02:	b09d      	sub	sp, #116	@ 0x74
 8005b04:	4614      	mov	r4, r2
 8005b06:	4698      	mov	r8, r3
 8005b08:	4606      	mov	r6, r0
 8005b0a:	b118      	cbz	r0, 8005b14 <_vfiprintf_r+0x18>
 8005b0c:	6a03      	ldr	r3, [r0, #32]
 8005b0e:	b90b      	cbnz	r3, 8005b14 <_vfiprintf_r+0x18>
 8005b10:	f7ff fcd8 	bl	80054c4 <__sinit>
 8005b14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b16:	07d9      	lsls	r1, r3, #31
 8005b18:	d405      	bmi.n	8005b26 <_vfiprintf_r+0x2a>
 8005b1a:	89ab      	ldrh	r3, [r5, #12]
 8005b1c:	059a      	lsls	r2, r3, #22
 8005b1e:	d402      	bmi.n	8005b26 <_vfiprintf_r+0x2a>
 8005b20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b22:	f7ff fec6 	bl	80058b2 <__retarget_lock_acquire_recursive>
 8005b26:	89ab      	ldrh	r3, [r5, #12]
 8005b28:	071b      	lsls	r3, r3, #28
 8005b2a:	d501      	bpl.n	8005b30 <_vfiprintf_r+0x34>
 8005b2c:	692b      	ldr	r3, [r5, #16]
 8005b2e:	b99b      	cbnz	r3, 8005b58 <_vfiprintf_r+0x5c>
 8005b30:	4629      	mov	r1, r5
 8005b32:	4630      	mov	r0, r6
 8005b34:	f7ff fdee 	bl	8005714 <__swsetup_r>
 8005b38:	b170      	cbz	r0, 8005b58 <_vfiprintf_r+0x5c>
 8005b3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b3c:	07dc      	lsls	r4, r3, #31
 8005b3e:	d504      	bpl.n	8005b4a <_vfiprintf_r+0x4e>
 8005b40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b44:	b01d      	add	sp, #116	@ 0x74
 8005b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b4a:	89ab      	ldrh	r3, [r5, #12]
 8005b4c:	0598      	lsls	r0, r3, #22
 8005b4e:	d4f7      	bmi.n	8005b40 <_vfiprintf_r+0x44>
 8005b50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b52:	f7ff feaf 	bl	80058b4 <__retarget_lock_release_recursive>
 8005b56:	e7f3      	b.n	8005b40 <_vfiprintf_r+0x44>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b5c:	2320      	movs	r3, #32
 8005b5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b62:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b66:	2330      	movs	r3, #48	@ 0x30
 8005b68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005d18 <_vfiprintf_r+0x21c>
 8005b6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b70:	f04f 0901 	mov.w	r9, #1
 8005b74:	4623      	mov	r3, r4
 8005b76:	469a      	mov	sl, r3
 8005b78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b7c:	b10a      	cbz	r2, 8005b82 <_vfiprintf_r+0x86>
 8005b7e:	2a25      	cmp	r2, #37	@ 0x25
 8005b80:	d1f9      	bne.n	8005b76 <_vfiprintf_r+0x7a>
 8005b82:	ebba 0b04 	subs.w	fp, sl, r4
 8005b86:	d00b      	beq.n	8005ba0 <_vfiprintf_r+0xa4>
 8005b88:	465b      	mov	r3, fp
 8005b8a:	4622      	mov	r2, r4
 8005b8c:	4629      	mov	r1, r5
 8005b8e:	4630      	mov	r0, r6
 8005b90:	f7ff ffa1 	bl	8005ad6 <__sfputs_r>
 8005b94:	3001      	adds	r0, #1
 8005b96:	f000 80a7 	beq.w	8005ce8 <_vfiprintf_r+0x1ec>
 8005b9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b9c:	445a      	add	r2, fp
 8005b9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ba0:	f89a 3000 	ldrb.w	r3, [sl]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 809f 	beq.w	8005ce8 <_vfiprintf_r+0x1ec>
 8005baa:	2300      	movs	r3, #0
 8005bac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005bb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bb4:	f10a 0a01 	add.w	sl, sl, #1
 8005bb8:	9304      	str	r3, [sp, #16]
 8005bba:	9307      	str	r3, [sp, #28]
 8005bbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005bc0:	931a      	str	r3, [sp, #104]	@ 0x68
 8005bc2:	4654      	mov	r4, sl
 8005bc4:	2205      	movs	r2, #5
 8005bc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bca:	4853      	ldr	r0, [pc, #332]	@ (8005d18 <_vfiprintf_r+0x21c>)
 8005bcc:	f7fa fb28 	bl	8000220 <memchr>
 8005bd0:	9a04      	ldr	r2, [sp, #16]
 8005bd2:	b9d8      	cbnz	r0, 8005c0c <_vfiprintf_r+0x110>
 8005bd4:	06d1      	lsls	r1, r2, #27
 8005bd6:	bf44      	itt	mi
 8005bd8:	2320      	movmi	r3, #32
 8005bda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bde:	0713      	lsls	r3, r2, #28
 8005be0:	bf44      	itt	mi
 8005be2:	232b      	movmi	r3, #43	@ 0x2b
 8005be4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005be8:	f89a 3000 	ldrb.w	r3, [sl]
 8005bec:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bee:	d015      	beq.n	8005c1c <_vfiprintf_r+0x120>
 8005bf0:	9a07      	ldr	r2, [sp, #28]
 8005bf2:	4654      	mov	r4, sl
 8005bf4:	2000      	movs	r0, #0
 8005bf6:	f04f 0c0a 	mov.w	ip, #10
 8005bfa:	4621      	mov	r1, r4
 8005bfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c00:	3b30      	subs	r3, #48	@ 0x30
 8005c02:	2b09      	cmp	r3, #9
 8005c04:	d94b      	bls.n	8005c9e <_vfiprintf_r+0x1a2>
 8005c06:	b1b0      	cbz	r0, 8005c36 <_vfiprintf_r+0x13a>
 8005c08:	9207      	str	r2, [sp, #28]
 8005c0a:	e014      	b.n	8005c36 <_vfiprintf_r+0x13a>
 8005c0c:	eba0 0308 	sub.w	r3, r0, r8
 8005c10:	fa09 f303 	lsl.w	r3, r9, r3
 8005c14:	4313      	orrs	r3, r2
 8005c16:	9304      	str	r3, [sp, #16]
 8005c18:	46a2      	mov	sl, r4
 8005c1a:	e7d2      	b.n	8005bc2 <_vfiprintf_r+0xc6>
 8005c1c:	9b03      	ldr	r3, [sp, #12]
 8005c1e:	1d19      	adds	r1, r3, #4
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	9103      	str	r1, [sp, #12]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	bfbb      	ittet	lt
 8005c28:	425b      	neglt	r3, r3
 8005c2a:	f042 0202 	orrlt.w	r2, r2, #2
 8005c2e:	9307      	strge	r3, [sp, #28]
 8005c30:	9307      	strlt	r3, [sp, #28]
 8005c32:	bfb8      	it	lt
 8005c34:	9204      	strlt	r2, [sp, #16]
 8005c36:	7823      	ldrb	r3, [r4, #0]
 8005c38:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c3a:	d10a      	bne.n	8005c52 <_vfiprintf_r+0x156>
 8005c3c:	7863      	ldrb	r3, [r4, #1]
 8005c3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c40:	d132      	bne.n	8005ca8 <_vfiprintf_r+0x1ac>
 8005c42:	9b03      	ldr	r3, [sp, #12]
 8005c44:	1d1a      	adds	r2, r3, #4
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	9203      	str	r2, [sp, #12]
 8005c4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c4e:	3402      	adds	r4, #2
 8005c50:	9305      	str	r3, [sp, #20]
 8005c52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005d28 <_vfiprintf_r+0x22c>
 8005c56:	7821      	ldrb	r1, [r4, #0]
 8005c58:	2203      	movs	r2, #3
 8005c5a:	4650      	mov	r0, sl
 8005c5c:	f7fa fae0 	bl	8000220 <memchr>
 8005c60:	b138      	cbz	r0, 8005c72 <_vfiprintf_r+0x176>
 8005c62:	9b04      	ldr	r3, [sp, #16]
 8005c64:	eba0 000a 	sub.w	r0, r0, sl
 8005c68:	2240      	movs	r2, #64	@ 0x40
 8005c6a:	4082      	lsls	r2, r0
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	3401      	adds	r4, #1
 8005c70:	9304      	str	r3, [sp, #16]
 8005c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c76:	4829      	ldr	r0, [pc, #164]	@ (8005d1c <_vfiprintf_r+0x220>)
 8005c78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c7c:	2206      	movs	r2, #6
 8005c7e:	f7fa facf 	bl	8000220 <memchr>
 8005c82:	2800      	cmp	r0, #0
 8005c84:	d03f      	beq.n	8005d06 <_vfiprintf_r+0x20a>
 8005c86:	4b26      	ldr	r3, [pc, #152]	@ (8005d20 <_vfiprintf_r+0x224>)
 8005c88:	bb1b      	cbnz	r3, 8005cd2 <_vfiprintf_r+0x1d6>
 8005c8a:	9b03      	ldr	r3, [sp, #12]
 8005c8c:	3307      	adds	r3, #7
 8005c8e:	f023 0307 	bic.w	r3, r3, #7
 8005c92:	3308      	adds	r3, #8
 8005c94:	9303      	str	r3, [sp, #12]
 8005c96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c98:	443b      	add	r3, r7
 8005c9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c9c:	e76a      	b.n	8005b74 <_vfiprintf_r+0x78>
 8005c9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ca2:	460c      	mov	r4, r1
 8005ca4:	2001      	movs	r0, #1
 8005ca6:	e7a8      	b.n	8005bfa <_vfiprintf_r+0xfe>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	3401      	adds	r4, #1
 8005cac:	9305      	str	r3, [sp, #20]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	f04f 0c0a 	mov.w	ip, #10
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cba:	3a30      	subs	r2, #48	@ 0x30
 8005cbc:	2a09      	cmp	r2, #9
 8005cbe:	d903      	bls.n	8005cc8 <_vfiprintf_r+0x1cc>
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d0c6      	beq.n	8005c52 <_vfiprintf_r+0x156>
 8005cc4:	9105      	str	r1, [sp, #20]
 8005cc6:	e7c4      	b.n	8005c52 <_vfiprintf_r+0x156>
 8005cc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ccc:	4604      	mov	r4, r0
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e7f0      	b.n	8005cb4 <_vfiprintf_r+0x1b8>
 8005cd2:	ab03      	add	r3, sp, #12
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	462a      	mov	r2, r5
 8005cd8:	4b12      	ldr	r3, [pc, #72]	@ (8005d24 <_vfiprintf_r+0x228>)
 8005cda:	a904      	add	r1, sp, #16
 8005cdc:	4630      	mov	r0, r6
 8005cde:	f3af 8000 	nop.w
 8005ce2:	4607      	mov	r7, r0
 8005ce4:	1c78      	adds	r0, r7, #1
 8005ce6:	d1d6      	bne.n	8005c96 <_vfiprintf_r+0x19a>
 8005ce8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005cea:	07d9      	lsls	r1, r3, #31
 8005cec:	d405      	bmi.n	8005cfa <_vfiprintf_r+0x1fe>
 8005cee:	89ab      	ldrh	r3, [r5, #12]
 8005cf0:	059a      	lsls	r2, r3, #22
 8005cf2:	d402      	bmi.n	8005cfa <_vfiprintf_r+0x1fe>
 8005cf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005cf6:	f7ff fddd 	bl	80058b4 <__retarget_lock_release_recursive>
 8005cfa:	89ab      	ldrh	r3, [r5, #12]
 8005cfc:	065b      	lsls	r3, r3, #25
 8005cfe:	f53f af1f 	bmi.w	8005b40 <_vfiprintf_r+0x44>
 8005d02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d04:	e71e      	b.n	8005b44 <_vfiprintf_r+0x48>
 8005d06:	ab03      	add	r3, sp, #12
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	462a      	mov	r2, r5
 8005d0c:	4b05      	ldr	r3, [pc, #20]	@ (8005d24 <_vfiprintf_r+0x228>)
 8005d0e:	a904      	add	r1, sp, #16
 8005d10:	4630      	mov	r0, r6
 8005d12:	f000 f879 	bl	8005e08 <_printf_i>
 8005d16:	e7e4      	b.n	8005ce2 <_vfiprintf_r+0x1e6>
 8005d18:	080064a0 	.word	0x080064a0
 8005d1c:	080064aa 	.word	0x080064aa
 8005d20:	00000000 	.word	0x00000000
 8005d24:	08005ad7 	.word	0x08005ad7
 8005d28:	080064a6 	.word	0x080064a6

08005d2c <_printf_common>:
 8005d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d30:	4616      	mov	r6, r2
 8005d32:	4698      	mov	r8, r3
 8005d34:	688a      	ldr	r2, [r1, #8]
 8005d36:	690b      	ldr	r3, [r1, #16]
 8005d38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	bfb8      	it	lt
 8005d40:	4613      	movlt	r3, r2
 8005d42:	6033      	str	r3, [r6, #0]
 8005d44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d48:	4607      	mov	r7, r0
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	b10a      	cbz	r2, 8005d52 <_printf_common+0x26>
 8005d4e:	3301      	adds	r3, #1
 8005d50:	6033      	str	r3, [r6, #0]
 8005d52:	6823      	ldr	r3, [r4, #0]
 8005d54:	0699      	lsls	r1, r3, #26
 8005d56:	bf42      	ittt	mi
 8005d58:	6833      	ldrmi	r3, [r6, #0]
 8005d5a:	3302      	addmi	r3, #2
 8005d5c:	6033      	strmi	r3, [r6, #0]
 8005d5e:	6825      	ldr	r5, [r4, #0]
 8005d60:	f015 0506 	ands.w	r5, r5, #6
 8005d64:	d106      	bne.n	8005d74 <_printf_common+0x48>
 8005d66:	f104 0a19 	add.w	sl, r4, #25
 8005d6a:	68e3      	ldr	r3, [r4, #12]
 8005d6c:	6832      	ldr	r2, [r6, #0]
 8005d6e:	1a9b      	subs	r3, r3, r2
 8005d70:	42ab      	cmp	r3, r5
 8005d72:	dc26      	bgt.n	8005dc2 <_printf_common+0x96>
 8005d74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d78:	6822      	ldr	r2, [r4, #0]
 8005d7a:	3b00      	subs	r3, #0
 8005d7c:	bf18      	it	ne
 8005d7e:	2301      	movne	r3, #1
 8005d80:	0692      	lsls	r2, r2, #26
 8005d82:	d42b      	bmi.n	8005ddc <_printf_common+0xb0>
 8005d84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d88:	4641      	mov	r1, r8
 8005d8a:	4638      	mov	r0, r7
 8005d8c:	47c8      	blx	r9
 8005d8e:	3001      	adds	r0, #1
 8005d90:	d01e      	beq.n	8005dd0 <_printf_common+0xa4>
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	6922      	ldr	r2, [r4, #16]
 8005d96:	f003 0306 	and.w	r3, r3, #6
 8005d9a:	2b04      	cmp	r3, #4
 8005d9c:	bf02      	ittt	eq
 8005d9e:	68e5      	ldreq	r5, [r4, #12]
 8005da0:	6833      	ldreq	r3, [r6, #0]
 8005da2:	1aed      	subeq	r5, r5, r3
 8005da4:	68a3      	ldr	r3, [r4, #8]
 8005da6:	bf0c      	ite	eq
 8005da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dac:	2500      	movne	r5, #0
 8005dae:	4293      	cmp	r3, r2
 8005db0:	bfc4      	itt	gt
 8005db2:	1a9b      	subgt	r3, r3, r2
 8005db4:	18ed      	addgt	r5, r5, r3
 8005db6:	2600      	movs	r6, #0
 8005db8:	341a      	adds	r4, #26
 8005dba:	42b5      	cmp	r5, r6
 8005dbc:	d11a      	bne.n	8005df4 <_printf_common+0xc8>
 8005dbe:	2000      	movs	r0, #0
 8005dc0:	e008      	b.n	8005dd4 <_printf_common+0xa8>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	4652      	mov	r2, sl
 8005dc6:	4641      	mov	r1, r8
 8005dc8:	4638      	mov	r0, r7
 8005dca:	47c8      	blx	r9
 8005dcc:	3001      	adds	r0, #1
 8005dce:	d103      	bne.n	8005dd8 <_printf_common+0xac>
 8005dd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd8:	3501      	adds	r5, #1
 8005dda:	e7c6      	b.n	8005d6a <_printf_common+0x3e>
 8005ddc:	18e1      	adds	r1, r4, r3
 8005dde:	1c5a      	adds	r2, r3, #1
 8005de0:	2030      	movs	r0, #48	@ 0x30
 8005de2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005de6:	4422      	add	r2, r4
 8005de8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005dec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005df0:	3302      	adds	r3, #2
 8005df2:	e7c7      	b.n	8005d84 <_printf_common+0x58>
 8005df4:	2301      	movs	r3, #1
 8005df6:	4622      	mov	r2, r4
 8005df8:	4641      	mov	r1, r8
 8005dfa:	4638      	mov	r0, r7
 8005dfc:	47c8      	blx	r9
 8005dfe:	3001      	adds	r0, #1
 8005e00:	d0e6      	beq.n	8005dd0 <_printf_common+0xa4>
 8005e02:	3601      	adds	r6, #1
 8005e04:	e7d9      	b.n	8005dba <_printf_common+0x8e>
	...

08005e08 <_printf_i>:
 8005e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e0c:	7e0f      	ldrb	r7, [r1, #24]
 8005e0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e10:	2f78      	cmp	r7, #120	@ 0x78
 8005e12:	4691      	mov	r9, r2
 8005e14:	4680      	mov	r8, r0
 8005e16:	460c      	mov	r4, r1
 8005e18:	469a      	mov	sl, r3
 8005e1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e1e:	d807      	bhi.n	8005e30 <_printf_i+0x28>
 8005e20:	2f62      	cmp	r7, #98	@ 0x62
 8005e22:	d80a      	bhi.n	8005e3a <_printf_i+0x32>
 8005e24:	2f00      	cmp	r7, #0
 8005e26:	f000 80d2 	beq.w	8005fce <_printf_i+0x1c6>
 8005e2a:	2f58      	cmp	r7, #88	@ 0x58
 8005e2c:	f000 80b9 	beq.w	8005fa2 <_printf_i+0x19a>
 8005e30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e38:	e03a      	b.n	8005eb0 <_printf_i+0xa8>
 8005e3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e3e:	2b15      	cmp	r3, #21
 8005e40:	d8f6      	bhi.n	8005e30 <_printf_i+0x28>
 8005e42:	a101      	add	r1, pc, #4	@ (adr r1, 8005e48 <_printf_i+0x40>)
 8005e44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e48:	08005ea1 	.word	0x08005ea1
 8005e4c:	08005eb5 	.word	0x08005eb5
 8005e50:	08005e31 	.word	0x08005e31
 8005e54:	08005e31 	.word	0x08005e31
 8005e58:	08005e31 	.word	0x08005e31
 8005e5c:	08005e31 	.word	0x08005e31
 8005e60:	08005eb5 	.word	0x08005eb5
 8005e64:	08005e31 	.word	0x08005e31
 8005e68:	08005e31 	.word	0x08005e31
 8005e6c:	08005e31 	.word	0x08005e31
 8005e70:	08005e31 	.word	0x08005e31
 8005e74:	08005fb5 	.word	0x08005fb5
 8005e78:	08005edf 	.word	0x08005edf
 8005e7c:	08005f6f 	.word	0x08005f6f
 8005e80:	08005e31 	.word	0x08005e31
 8005e84:	08005e31 	.word	0x08005e31
 8005e88:	08005fd7 	.word	0x08005fd7
 8005e8c:	08005e31 	.word	0x08005e31
 8005e90:	08005edf 	.word	0x08005edf
 8005e94:	08005e31 	.word	0x08005e31
 8005e98:	08005e31 	.word	0x08005e31
 8005e9c:	08005f77 	.word	0x08005f77
 8005ea0:	6833      	ldr	r3, [r6, #0]
 8005ea2:	1d1a      	adds	r2, r3, #4
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6032      	str	r2, [r6, #0]
 8005ea8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005eac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e09d      	b.n	8005ff0 <_printf_i+0x1e8>
 8005eb4:	6833      	ldr	r3, [r6, #0]
 8005eb6:	6820      	ldr	r0, [r4, #0]
 8005eb8:	1d19      	adds	r1, r3, #4
 8005eba:	6031      	str	r1, [r6, #0]
 8005ebc:	0606      	lsls	r6, r0, #24
 8005ebe:	d501      	bpl.n	8005ec4 <_printf_i+0xbc>
 8005ec0:	681d      	ldr	r5, [r3, #0]
 8005ec2:	e003      	b.n	8005ecc <_printf_i+0xc4>
 8005ec4:	0645      	lsls	r5, r0, #25
 8005ec6:	d5fb      	bpl.n	8005ec0 <_printf_i+0xb8>
 8005ec8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ecc:	2d00      	cmp	r5, #0
 8005ece:	da03      	bge.n	8005ed8 <_printf_i+0xd0>
 8005ed0:	232d      	movs	r3, #45	@ 0x2d
 8005ed2:	426d      	negs	r5, r5
 8005ed4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ed8:	4859      	ldr	r0, [pc, #356]	@ (8006040 <_printf_i+0x238>)
 8005eda:	230a      	movs	r3, #10
 8005edc:	e011      	b.n	8005f02 <_printf_i+0xfa>
 8005ede:	6821      	ldr	r1, [r4, #0]
 8005ee0:	6833      	ldr	r3, [r6, #0]
 8005ee2:	0608      	lsls	r0, r1, #24
 8005ee4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ee8:	d402      	bmi.n	8005ef0 <_printf_i+0xe8>
 8005eea:	0649      	lsls	r1, r1, #25
 8005eec:	bf48      	it	mi
 8005eee:	b2ad      	uxthmi	r5, r5
 8005ef0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ef2:	4853      	ldr	r0, [pc, #332]	@ (8006040 <_printf_i+0x238>)
 8005ef4:	6033      	str	r3, [r6, #0]
 8005ef6:	bf14      	ite	ne
 8005ef8:	230a      	movne	r3, #10
 8005efa:	2308      	moveq	r3, #8
 8005efc:	2100      	movs	r1, #0
 8005efe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f02:	6866      	ldr	r6, [r4, #4]
 8005f04:	60a6      	str	r6, [r4, #8]
 8005f06:	2e00      	cmp	r6, #0
 8005f08:	bfa2      	ittt	ge
 8005f0a:	6821      	ldrge	r1, [r4, #0]
 8005f0c:	f021 0104 	bicge.w	r1, r1, #4
 8005f10:	6021      	strge	r1, [r4, #0]
 8005f12:	b90d      	cbnz	r5, 8005f18 <_printf_i+0x110>
 8005f14:	2e00      	cmp	r6, #0
 8005f16:	d04b      	beq.n	8005fb0 <_printf_i+0x1a8>
 8005f18:	4616      	mov	r6, r2
 8005f1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f1e:	fb03 5711 	mls	r7, r3, r1, r5
 8005f22:	5dc7      	ldrb	r7, [r0, r7]
 8005f24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f28:	462f      	mov	r7, r5
 8005f2a:	42bb      	cmp	r3, r7
 8005f2c:	460d      	mov	r5, r1
 8005f2e:	d9f4      	bls.n	8005f1a <_printf_i+0x112>
 8005f30:	2b08      	cmp	r3, #8
 8005f32:	d10b      	bne.n	8005f4c <_printf_i+0x144>
 8005f34:	6823      	ldr	r3, [r4, #0]
 8005f36:	07df      	lsls	r7, r3, #31
 8005f38:	d508      	bpl.n	8005f4c <_printf_i+0x144>
 8005f3a:	6923      	ldr	r3, [r4, #16]
 8005f3c:	6861      	ldr	r1, [r4, #4]
 8005f3e:	4299      	cmp	r1, r3
 8005f40:	bfde      	ittt	le
 8005f42:	2330      	movle	r3, #48	@ 0x30
 8005f44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f48:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005f4c:	1b92      	subs	r2, r2, r6
 8005f4e:	6122      	str	r2, [r4, #16]
 8005f50:	f8cd a000 	str.w	sl, [sp]
 8005f54:	464b      	mov	r3, r9
 8005f56:	aa03      	add	r2, sp, #12
 8005f58:	4621      	mov	r1, r4
 8005f5a:	4640      	mov	r0, r8
 8005f5c:	f7ff fee6 	bl	8005d2c <_printf_common>
 8005f60:	3001      	adds	r0, #1
 8005f62:	d14a      	bne.n	8005ffa <_printf_i+0x1f2>
 8005f64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f68:	b004      	add	sp, #16
 8005f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f6e:	6823      	ldr	r3, [r4, #0]
 8005f70:	f043 0320 	orr.w	r3, r3, #32
 8005f74:	6023      	str	r3, [r4, #0]
 8005f76:	4833      	ldr	r0, [pc, #204]	@ (8006044 <_printf_i+0x23c>)
 8005f78:	2778      	movs	r7, #120	@ 0x78
 8005f7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f7e:	6823      	ldr	r3, [r4, #0]
 8005f80:	6831      	ldr	r1, [r6, #0]
 8005f82:	061f      	lsls	r7, r3, #24
 8005f84:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f88:	d402      	bmi.n	8005f90 <_printf_i+0x188>
 8005f8a:	065f      	lsls	r7, r3, #25
 8005f8c:	bf48      	it	mi
 8005f8e:	b2ad      	uxthmi	r5, r5
 8005f90:	6031      	str	r1, [r6, #0]
 8005f92:	07d9      	lsls	r1, r3, #31
 8005f94:	bf44      	itt	mi
 8005f96:	f043 0320 	orrmi.w	r3, r3, #32
 8005f9a:	6023      	strmi	r3, [r4, #0]
 8005f9c:	b11d      	cbz	r5, 8005fa6 <_printf_i+0x19e>
 8005f9e:	2310      	movs	r3, #16
 8005fa0:	e7ac      	b.n	8005efc <_printf_i+0xf4>
 8005fa2:	4827      	ldr	r0, [pc, #156]	@ (8006040 <_printf_i+0x238>)
 8005fa4:	e7e9      	b.n	8005f7a <_printf_i+0x172>
 8005fa6:	6823      	ldr	r3, [r4, #0]
 8005fa8:	f023 0320 	bic.w	r3, r3, #32
 8005fac:	6023      	str	r3, [r4, #0]
 8005fae:	e7f6      	b.n	8005f9e <_printf_i+0x196>
 8005fb0:	4616      	mov	r6, r2
 8005fb2:	e7bd      	b.n	8005f30 <_printf_i+0x128>
 8005fb4:	6833      	ldr	r3, [r6, #0]
 8005fb6:	6825      	ldr	r5, [r4, #0]
 8005fb8:	6961      	ldr	r1, [r4, #20]
 8005fba:	1d18      	adds	r0, r3, #4
 8005fbc:	6030      	str	r0, [r6, #0]
 8005fbe:	062e      	lsls	r6, r5, #24
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	d501      	bpl.n	8005fc8 <_printf_i+0x1c0>
 8005fc4:	6019      	str	r1, [r3, #0]
 8005fc6:	e002      	b.n	8005fce <_printf_i+0x1c6>
 8005fc8:	0668      	lsls	r0, r5, #25
 8005fca:	d5fb      	bpl.n	8005fc4 <_printf_i+0x1bc>
 8005fcc:	8019      	strh	r1, [r3, #0]
 8005fce:	2300      	movs	r3, #0
 8005fd0:	6123      	str	r3, [r4, #16]
 8005fd2:	4616      	mov	r6, r2
 8005fd4:	e7bc      	b.n	8005f50 <_printf_i+0x148>
 8005fd6:	6833      	ldr	r3, [r6, #0]
 8005fd8:	1d1a      	adds	r2, r3, #4
 8005fda:	6032      	str	r2, [r6, #0]
 8005fdc:	681e      	ldr	r6, [r3, #0]
 8005fde:	6862      	ldr	r2, [r4, #4]
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	4630      	mov	r0, r6
 8005fe4:	f7fa f91c 	bl	8000220 <memchr>
 8005fe8:	b108      	cbz	r0, 8005fee <_printf_i+0x1e6>
 8005fea:	1b80      	subs	r0, r0, r6
 8005fec:	6060      	str	r0, [r4, #4]
 8005fee:	6863      	ldr	r3, [r4, #4]
 8005ff0:	6123      	str	r3, [r4, #16]
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ff8:	e7aa      	b.n	8005f50 <_printf_i+0x148>
 8005ffa:	6923      	ldr	r3, [r4, #16]
 8005ffc:	4632      	mov	r2, r6
 8005ffe:	4649      	mov	r1, r9
 8006000:	4640      	mov	r0, r8
 8006002:	47d0      	blx	sl
 8006004:	3001      	adds	r0, #1
 8006006:	d0ad      	beq.n	8005f64 <_printf_i+0x15c>
 8006008:	6823      	ldr	r3, [r4, #0]
 800600a:	079b      	lsls	r3, r3, #30
 800600c:	d413      	bmi.n	8006036 <_printf_i+0x22e>
 800600e:	68e0      	ldr	r0, [r4, #12]
 8006010:	9b03      	ldr	r3, [sp, #12]
 8006012:	4298      	cmp	r0, r3
 8006014:	bfb8      	it	lt
 8006016:	4618      	movlt	r0, r3
 8006018:	e7a6      	b.n	8005f68 <_printf_i+0x160>
 800601a:	2301      	movs	r3, #1
 800601c:	4632      	mov	r2, r6
 800601e:	4649      	mov	r1, r9
 8006020:	4640      	mov	r0, r8
 8006022:	47d0      	blx	sl
 8006024:	3001      	adds	r0, #1
 8006026:	d09d      	beq.n	8005f64 <_printf_i+0x15c>
 8006028:	3501      	adds	r5, #1
 800602a:	68e3      	ldr	r3, [r4, #12]
 800602c:	9903      	ldr	r1, [sp, #12]
 800602e:	1a5b      	subs	r3, r3, r1
 8006030:	42ab      	cmp	r3, r5
 8006032:	dcf2      	bgt.n	800601a <_printf_i+0x212>
 8006034:	e7eb      	b.n	800600e <_printf_i+0x206>
 8006036:	2500      	movs	r5, #0
 8006038:	f104 0619 	add.w	r6, r4, #25
 800603c:	e7f5      	b.n	800602a <_printf_i+0x222>
 800603e:	bf00      	nop
 8006040:	080064b1 	.word	0x080064b1
 8006044:	080064c2 	.word	0x080064c2

08006048 <__sflush_r>:
 8006048:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800604c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006050:	0716      	lsls	r6, r2, #28
 8006052:	4605      	mov	r5, r0
 8006054:	460c      	mov	r4, r1
 8006056:	d454      	bmi.n	8006102 <__sflush_r+0xba>
 8006058:	684b      	ldr	r3, [r1, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	dc02      	bgt.n	8006064 <__sflush_r+0x1c>
 800605e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006060:	2b00      	cmp	r3, #0
 8006062:	dd48      	ble.n	80060f6 <__sflush_r+0xae>
 8006064:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006066:	2e00      	cmp	r6, #0
 8006068:	d045      	beq.n	80060f6 <__sflush_r+0xae>
 800606a:	2300      	movs	r3, #0
 800606c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006070:	682f      	ldr	r7, [r5, #0]
 8006072:	6a21      	ldr	r1, [r4, #32]
 8006074:	602b      	str	r3, [r5, #0]
 8006076:	d030      	beq.n	80060da <__sflush_r+0x92>
 8006078:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800607a:	89a3      	ldrh	r3, [r4, #12]
 800607c:	0759      	lsls	r1, r3, #29
 800607e:	d505      	bpl.n	800608c <__sflush_r+0x44>
 8006080:	6863      	ldr	r3, [r4, #4]
 8006082:	1ad2      	subs	r2, r2, r3
 8006084:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006086:	b10b      	cbz	r3, 800608c <__sflush_r+0x44>
 8006088:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800608a:	1ad2      	subs	r2, r2, r3
 800608c:	2300      	movs	r3, #0
 800608e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006090:	6a21      	ldr	r1, [r4, #32]
 8006092:	4628      	mov	r0, r5
 8006094:	47b0      	blx	r6
 8006096:	1c43      	adds	r3, r0, #1
 8006098:	89a3      	ldrh	r3, [r4, #12]
 800609a:	d106      	bne.n	80060aa <__sflush_r+0x62>
 800609c:	6829      	ldr	r1, [r5, #0]
 800609e:	291d      	cmp	r1, #29
 80060a0:	d82b      	bhi.n	80060fa <__sflush_r+0xb2>
 80060a2:	4a2a      	ldr	r2, [pc, #168]	@ (800614c <__sflush_r+0x104>)
 80060a4:	410a      	asrs	r2, r1
 80060a6:	07d6      	lsls	r6, r2, #31
 80060a8:	d427      	bmi.n	80060fa <__sflush_r+0xb2>
 80060aa:	2200      	movs	r2, #0
 80060ac:	6062      	str	r2, [r4, #4]
 80060ae:	04d9      	lsls	r1, r3, #19
 80060b0:	6922      	ldr	r2, [r4, #16]
 80060b2:	6022      	str	r2, [r4, #0]
 80060b4:	d504      	bpl.n	80060c0 <__sflush_r+0x78>
 80060b6:	1c42      	adds	r2, r0, #1
 80060b8:	d101      	bne.n	80060be <__sflush_r+0x76>
 80060ba:	682b      	ldr	r3, [r5, #0]
 80060bc:	b903      	cbnz	r3, 80060c0 <__sflush_r+0x78>
 80060be:	6560      	str	r0, [r4, #84]	@ 0x54
 80060c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060c2:	602f      	str	r7, [r5, #0]
 80060c4:	b1b9      	cbz	r1, 80060f6 <__sflush_r+0xae>
 80060c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060ca:	4299      	cmp	r1, r3
 80060cc:	d002      	beq.n	80060d4 <__sflush_r+0x8c>
 80060ce:	4628      	mov	r0, r5
 80060d0:	f7ff fbf2 	bl	80058b8 <_free_r>
 80060d4:	2300      	movs	r3, #0
 80060d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80060d8:	e00d      	b.n	80060f6 <__sflush_r+0xae>
 80060da:	2301      	movs	r3, #1
 80060dc:	4628      	mov	r0, r5
 80060de:	47b0      	blx	r6
 80060e0:	4602      	mov	r2, r0
 80060e2:	1c50      	adds	r0, r2, #1
 80060e4:	d1c9      	bne.n	800607a <__sflush_r+0x32>
 80060e6:	682b      	ldr	r3, [r5, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d0c6      	beq.n	800607a <__sflush_r+0x32>
 80060ec:	2b1d      	cmp	r3, #29
 80060ee:	d001      	beq.n	80060f4 <__sflush_r+0xac>
 80060f0:	2b16      	cmp	r3, #22
 80060f2:	d11e      	bne.n	8006132 <__sflush_r+0xea>
 80060f4:	602f      	str	r7, [r5, #0]
 80060f6:	2000      	movs	r0, #0
 80060f8:	e022      	b.n	8006140 <__sflush_r+0xf8>
 80060fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060fe:	b21b      	sxth	r3, r3
 8006100:	e01b      	b.n	800613a <__sflush_r+0xf2>
 8006102:	690f      	ldr	r7, [r1, #16]
 8006104:	2f00      	cmp	r7, #0
 8006106:	d0f6      	beq.n	80060f6 <__sflush_r+0xae>
 8006108:	0793      	lsls	r3, r2, #30
 800610a:	680e      	ldr	r6, [r1, #0]
 800610c:	bf08      	it	eq
 800610e:	694b      	ldreq	r3, [r1, #20]
 8006110:	600f      	str	r7, [r1, #0]
 8006112:	bf18      	it	ne
 8006114:	2300      	movne	r3, #0
 8006116:	eba6 0807 	sub.w	r8, r6, r7
 800611a:	608b      	str	r3, [r1, #8]
 800611c:	f1b8 0f00 	cmp.w	r8, #0
 8006120:	dde9      	ble.n	80060f6 <__sflush_r+0xae>
 8006122:	6a21      	ldr	r1, [r4, #32]
 8006124:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006126:	4643      	mov	r3, r8
 8006128:	463a      	mov	r2, r7
 800612a:	4628      	mov	r0, r5
 800612c:	47b0      	blx	r6
 800612e:	2800      	cmp	r0, #0
 8006130:	dc08      	bgt.n	8006144 <__sflush_r+0xfc>
 8006132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800613a:	81a3      	strh	r3, [r4, #12]
 800613c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006144:	4407      	add	r7, r0
 8006146:	eba8 0800 	sub.w	r8, r8, r0
 800614a:	e7e7      	b.n	800611c <__sflush_r+0xd4>
 800614c:	dfbffffe 	.word	0xdfbffffe

08006150 <_fflush_r>:
 8006150:	b538      	push	{r3, r4, r5, lr}
 8006152:	690b      	ldr	r3, [r1, #16]
 8006154:	4605      	mov	r5, r0
 8006156:	460c      	mov	r4, r1
 8006158:	b913      	cbnz	r3, 8006160 <_fflush_r+0x10>
 800615a:	2500      	movs	r5, #0
 800615c:	4628      	mov	r0, r5
 800615e:	bd38      	pop	{r3, r4, r5, pc}
 8006160:	b118      	cbz	r0, 800616a <_fflush_r+0x1a>
 8006162:	6a03      	ldr	r3, [r0, #32]
 8006164:	b90b      	cbnz	r3, 800616a <_fflush_r+0x1a>
 8006166:	f7ff f9ad 	bl	80054c4 <__sinit>
 800616a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d0f3      	beq.n	800615a <_fflush_r+0xa>
 8006172:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006174:	07d0      	lsls	r0, r2, #31
 8006176:	d404      	bmi.n	8006182 <_fflush_r+0x32>
 8006178:	0599      	lsls	r1, r3, #22
 800617a:	d402      	bmi.n	8006182 <_fflush_r+0x32>
 800617c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800617e:	f7ff fb98 	bl	80058b2 <__retarget_lock_acquire_recursive>
 8006182:	4628      	mov	r0, r5
 8006184:	4621      	mov	r1, r4
 8006186:	f7ff ff5f 	bl	8006048 <__sflush_r>
 800618a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800618c:	07da      	lsls	r2, r3, #31
 800618e:	4605      	mov	r5, r0
 8006190:	d4e4      	bmi.n	800615c <_fflush_r+0xc>
 8006192:	89a3      	ldrh	r3, [r4, #12]
 8006194:	059b      	lsls	r3, r3, #22
 8006196:	d4e1      	bmi.n	800615c <_fflush_r+0xc>
 8006198:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800619a:	f7ff fb8b 	bl	80058b4 <__retarget_lock_release_recursive>
 800619e:	e7dd      	b.n	800615c <_fflush_r+0xc>

080061a0 <__swhatbuf_r>:
 80061a0:	b570      	push	{r4, r5, r6, lr}
 80061a2:	460c      	mov	r4, r1
 80061a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061a8:	2900      	cmp	r1, #0
 80061aa:	b096      	sub	sp, #88	@ 0x58
 80061ac:	4615      	mov	r5, r2
 80061ae:	461e      	mov	r6, r3
 80061b0:	da0d      	bge.n	80061ce <__swhatbuf_r+0x2e>
 80061b2:	89a3      	ldrh	r3, [r4, #12]
 80061b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80061b8:	f04f 0100 	mov.w	r1, #0
 80061bc:	bf14      	ite	ne
 80061be:	2340      	movne	r3, #64	@ 0x40
 80061c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80061c4:	2000      	movs	r0, #0
 80061c6:	6031      	str	r1, [r6, #0]
 80061c8:	602b      	str	r3, [r5, #0]
 80061ca:	b016      	add	sp, #88	@ 0x58
 80061cc:	bd70      	pop	{r4, r5, r6, pc}
 80061ce:	466a      	mov	r2, sp
 80061d0:	f000 f848 	bl	8006264 <_fstat_r>
 80061d4:	2800      	cmp	r0, #0
 80061d6:	dbec      	blt.n	80061b2 <__swhatbuf_r+0x12>
 80061d8:	9901      	ldr	r1, [sp, #4]
 80061da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80061de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80061e2:	4259      	negs	r1, r3
 80061e4:	4159      	adcs	r1, r3
 80061e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061ea:	e7eb      	b.n	80061c4 <__swhatbuf_r+0x24>

080061ec <__smakebuf_r>:
 80061ec:	898b      	ldrh	r3, [r1, #12]
 80061ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061f0:	079d      	lsls	r5, r3, #30
 80061f2:	4606      	mov	r6, r0
 80061f4:	460c      	mov	r4, r1
 80061f6:	d507      	bpl.n	8006208 <__smakebuf_r+0x1c>
 80061f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80061fc:	6023      	str	r3, [r4, #0]
 80061fe:	6123      	str	r3, [r4, #16]
 8006200:	2301      	movs	r3, #1
 8006202:	6163      	str	r3, [r4, #20]
 8006204:	b003      	add	sp, #12
 8006206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006208:	ab01      	add	r3, sp, #4
 800620a:	466a      	mov	r2, sp
 800620c:	f7ff ffc8 	bl	80061a0 <__swhatbuf_r>
 8006210:	9f00      	ldr	r7, [sp, #0]
 8006212:	4605      	mov	r5, r0
 8006214:	4639      	mov	r1, r7
 8006216:	4630      	mov	r0, r6
 8006218:	f7ff fbba 	bl	8005990 <_malloc_r>
 800621c:	b948      	cbnz	r0, 8006232 <__smakebuf_r+0x46>
 800621e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006222:	059a      	lsls	r2, r3, #22
 8006224:	d4ee      	bmi.n	8006204 <__smakebuf_r+0x18>
 8006226:	f023 0303 	bic.w	r3, r3, #3
 800622a:	f043 0302 	orr.w	r3, r3, #2
 800622e:	81a3      	strh	r3, [r4, #12]
 8006230:	e7e2      	b.n	80061f8 <__smakebuf_r+0xc>
 8006232:	89a3      	ldrh	r3, [r4, #12]
 8006234:	6020      	str	r0, [r4, #0]
 8006236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800623a:	81a3      	strh	r3, [r4, #12]
 800623c:	9b01      	ldr	r3, [sp, #4]
 800623e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006242:	b15b      	cbz	r3, 800625c <__smakebuf_r+0x70>
 8006244:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006248:	4630      	mov	r0, r6
 800624a:	f000 f81d 	bl	8006288 <_isatty_r>
 800624e:	b128      	cbz	r0, 800625c <__smakebuf_r+0x70>
 8006250:	89a3      	ldrh	r3, [r4, #12]
 8006252:	f023 0303 	bic.w	r3, r3, #3
 8006256:	f043 0301 	orr.w	r3, r3, #1
 800625a:	81a3      	strh	r3, [r4, #12]
 800625c:	89a3      	ldrh	r3, [r4, #12]
 800625e:	431d      	orrs	r5, r3
 8006260:	81a5      	strh	r5, [r4, #12]
 8006262:	e7cf      	b.n	8006204 <__smakebuf_r+0x18>

08006264 <_fstat_r>:
 8006264:	b538      	push	{r3, r4, r5, lr}
 8006266:	4d07      	ldr	r5, [pc, #28]	@ (8006284 <_fstat_r+0x20>)
 8006268:	2300      	movs	r3, #0
 800626a:	4604      	mov	r4, r0
 800626c:	4608      	mov	r0, r1
 800626e:	4611      	mov	r1, r2
 8006270:	602b      	str	r3, [r5, #0]
 8006272:	f7fa fdef 	bl	8000e54 <_fstat>
 8006276:	1c43      	adds	r3, r0, #1
 8006278:	d102      	bne.n	8006280 <_fstat_r+0x1c>
 800627a:	682b      	ldr	r3, [r5, #0]
 800627c:	b103      	cbz	r3, 8006280 <_fstat_r+0x1c>
 800627e:	6023      	str	r3, [r4, #0]
 8006280:	bd38      	pop	{r3, r4, r5, pc}
 8006282:	bf00      	nop
 8006284:	20000364 	.word	0x20000364

08006288 <_isatty_r>:
 8006288:	b538      	push	{r3, r4, r5, lr}
 800628a:	4d06      	ldr	r5, [pc, #24]	@ (80062a4 <_isatty_r+0x1c>)
 800628c:	2300      	movs	r3, #0
 800628e:	4604      	mov	r4, r0
 8006290:	4608      	mov	r0, r1
 8006292:	602b      	str	r3, [r5, #0]
 8006294:	f7fa fdee 	bl	8000e74 <_isatty>
 8006298:	1c43      	adds	r3, r0, #1
 800629a:	d102      	bne.n	80062a2 <_isatty_r+0x1a>
 800629c:	682b      	ldr	r3, [r5, #0]
 800629e:	b103      	cbz	r3, 80062a2 <_isatty_r+0x1a>
 80062a0:	6023      	str	r3, [r4, #0]
 80062a2:	bd38      	pop	{r3, r4, r5, pc}
 80062a4:	20000364 	.word	0x20000364

080062a8 <_sbrk_r>:
 80062a8:	b538      	push	{r3, r4, r5, lr}
 80062aa:	4d06      	ldr	r5, [pc, #24]	@ (80062c4 <_sbrk_r+0x1c>)
 80062ac:	2300      	movs	r3, #0
 80062ae:	4604      	mov	r4, r0
 80062b0:	4608      	mov	r0, r1
 80062b2:	602b      	str	r3, [r5, #0]
 80062b4:	f7fa fdf6 	bl	8000ea4 <_sbrk>
 80062b8:	1c43      	adds	r3, r0, #1
 80062ba:	d102      	bne.n	80062c2 <_sbrk_r+0x1a>
 80062bc:	682b      	ldr	r3, [r5, #0]
 80062be:	b103      	cbz	r3, 80062c2 <_sbrk_r+0x1a>
 80062c0:	6023      	str	r3, [r4, #0]
 80062c2:	bd38      	pop	{r3, r4, r5, pc}
 80062c4:	20000364 	.word	0x20000364

080062c8 <_init>:
 80062c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ca:	bf00      	nop
 80062cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ce:	bc08      	pop	{r3}
 80062d0:	469e      	mov	lr, r3
 80062d2:	4770      	bx	lr

080062d4 <_fini>:
 80062d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d6:	bf00      	nop
 80062d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062da:	bc08      	pop	{r3}
 80062dc:	469e      	mov	lr, r3
 80062de:	4770      	bx	lr
